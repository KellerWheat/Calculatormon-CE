; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\TEXT.C"
	.assume ADL=1
	SEGMENT TEXT
_delaytime:
	DB	50
	SEGMENT DATA
_textBoxType:
	DW	0
	DB	0
;    1	#include <graphx.h>
;    2	#include <string.h>
;    3	#include <keypadc.h>
;    4	#include <stdint.h>
;    5	#include <stdarg.h> 
;    6	#include <stdio.h>
;    7	#include <stdbool.h>
;    8	
;    9	#include "text.h"
;   10	#include "misc.h"
;   11	
;   12	
;   13	/* If holding down second, the time to pause before moving to next text */
;   14	const uint8_t delaytime = 50;
;   15	
;   16	
;   17	int textBoxType = 0;
	SEGMENT CODE
;   18	
;   19	/* Text Functions */
;   20	
;   21	
;   22	/* canSkip determines whether holding down 2nd before the text box pops up can do anything */
;   23	void text_Display(char text[], bool canSkip) {
_text_Display:
	LD	HL,-100
	CALL	__frameset
;   24		char newText1[50] = "";
	LEA	DE,IX+-50
	LD	HL,_0temp0
	LD	BC,50
	LDIR	
;   25		char newText2[50] = "";
	LEA	DE,IX+-100
	LD	HL,_1temp1
	LD	BC,50
	LDIR	
;   26	
;   27		if (strlen(text) > 32) {
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	JR	NC,L_3
;   28			strncpy(newText1, text, 32);
	LD	BC,32
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-50
	CALL	_strncpy
	POP	BC
	POP	BC
	POP	BC
;   29			strncpy(newText2, text + 32, (strlen(text) - 32));
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	IY,HL
	LEA	BC,IY+-32
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+32
	PUSH	BC
	PEA	IX+-100
	CALL	_strncpy
	POP	BC
	POP	BC
	POP	BC
;   30		}
;   31		else {
	JR	L_4
L_3:
;   32			strncpy(newText1, text, strlen(text));
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-50
	CALL	_strncpy
	POP	BC
	POP	BC
	POP	BC
;   33		}
L_4:
;   34		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   35		text_DrawTextBox();
	CALL	_text_DrawTextBox
;   36		
;   37		
;   38	
;   39		gfx_PrintStringXY(newText1, 30, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,30
	PUSH	BC
	PEA	IX+-50
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   40		gfx_PrintStringXY(newText2, 30, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,30
	PUSH	BC
	PEA	IX+-100
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   41	
;   42		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   43	
;   44		Wait(10);
	LD	BC,10
	PUSH	BC
	CALL	_Wait
	POP	BC
;   45	
;   46		kb_Scan();
	CALL	_kb_Scan
;   47		if (!canSkip) {
	LD	A,(IX+9)
	OR	A,A
	JR	NZ,L_12
;   48			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_6
L_7:
	CALL	_kb_Scan
L_6:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_7
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_7
;   49		}
L_12:
;   50		if (canSkip && (kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_10
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_11
L_10:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_14
L_11:
;   51			Wait(delaytime);
	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;   52		}
;   53		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_14
L_15:
;   54			kb_Scan();
	CALL	_kb_Scan
;   55		}
L_14:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_17
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_15
;   56	}
L_17:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_Display ***************************
;Name                         Addr/Register   Size   Type
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_strncpy                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_1temp1                             STATIC     50   variable
;_0temp0                             STATIC     50   variable
;newText2                            IX-100     50   variable
;newText1                             IX-50     50   variable
;canSkip                               IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 112 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_0temp0:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_1temp1:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;   57	int text_AskQuestion2(char text1[], char text2[], bool canSkip) {
_text_AskQuestion2:
	LD	HL,-1
	CALL	__frameset
;   58		int8_t tv1, tv2;
;   59		tv1 = 1;
	LD	(IX+-1),1
;   60		tv2 = 1;
;   61	
;   62	
;   63		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   64		text_DrawTextBox();
	CALL	_text_DrawTextBox
;   65	
;   66		gfx_PrintStringXY(">", 25, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   67		gfx_PrintStringXY(text1, 35, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   68		gfx_PrintStringXY(text2, 35, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   69	
;   70		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   71		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   72	
;   73		kb_Scan();
	CALL	_kb_Scan
;   74		if (!canSkip) {
	LD	A,(IX+12)
	OR	A,A
	JR	NZ,L_25
;   75			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_19
L_20:
	CALL	_kb_Scan
L_19:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_20
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_20
;   76		}
L_25:
;   77		if (canSkip && (kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
	LD	A,(IX+12)
	OR	A,A
	JR	Z,L_23
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_24
L_23:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_26
L_24:
;   78			Wait(delaytime);
	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;   79		}
L_26:
;   80		kb_Scan();
	CALL	_kb_Scan
;   81		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_35
L_36:
;   82			kb_Scan();
	CALL	_kb_Scan
;   83			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_34
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_34
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_34
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_35
L_34:
;   84				if (tv1 == 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_32
;   85					tv1 = 2;
	LD	(IX+-1),2
;   86				}
;   87				else {
	JR	L_33
L_32:
;   88					tv1 = 1;
	LD	(IX+-1),1
;   89				}
L_33:
;   90				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   91				gfx_PrintStringXY(">", 25, 160 + 20 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,20
	CALL	__imul_b
	LD	BC,160
	ADD	HL,BC
	PUSH	HL
	LD	BC,25
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   92				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;   93			}
;   94		}
L_35:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_38
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_36
L_38:
;   95		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_39
;   96			tv1 = 0;
	LD	(IX+-1),0
;   97		}
L_39:
;   98		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   99		return tv1;
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
;  100	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion2 ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;tv1                                   IX-1      1   variable
;canSkip                              IX+12      1   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__10:
	DB	">"
	DB	0
L__22:
	DB	">"
	DB	0
	SEGMENT CODE
;  101	int text_AskQuestion4(char text1[], char text2[], char text3[], char text4[], bool canSkip) {
_text_AskQuestion4:
	LD	HL,-8
	CALL	__frameset
;  102		int8_t tv1, tv2;
;  103		tv1 = 0;
	LD	(IX+-1),0
;  104		tv2 = 0;
	LD	(IX+-2),0
;  105	
;  106		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  107		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  108	
;  109		gfx_PrintStringXY(">", 25, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  110		gfx_PrintStringXY(text1, 35, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  111		gfx_PrintStringXY(text2, 35, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  112		gfx_PrintStringXY(text3, 165, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  113		gfx_PrintStringXY(text4, 165, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  114	
;  115		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  116		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  117	
;  118		kb_Scan();
	CALL	_kb_Scan
;  119		if (!canSkip) {
	LD	A,(IX+18)
	OR	A,A
	JR	NZ,L_48
;  120			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_42
L_43:
	CALL	_kb_Scan
L_42:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_43
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_43
;  121		}
L_48:
;  122		if (canSkip && (kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
	LD	A,(IX+18)
	OR	A,A
	JR	Z,L_46
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_47
L_46:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_49
L_47:
;  123			Wait(delaytime);
	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;  124		}
L_49:
;  125		kb_Scan();
	CALL	_kb_Scan
;  126		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_64
L_65:
;  127			kb_Scan();
	CALL	_kb_Scan
;  128			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_56
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_63
L_56:
;  129				tv1 = !tv1;
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_53
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_54
L_53:
	LD	BC,0
	LD	(IX+-8),BC
L_54:
	LD	A,(IX+-8)
	LD	(IX+-1),A
;  130				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  131				gfx_FillRectangle(154, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  132				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__37
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  133				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  134			}
L_63:
;  135			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_62
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_64
L_62:
;  136				tv2 = !tv2;
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_59
	LD	BC,1
	LD	(IX+-5),BC
	JR	L_60
L_59:
	LD	BC,0
	LD	(IX+-5),BC
L_60:
	LD	A,(IX+-5)
	LD	(IX+-2),A
;  137				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  138				gfx_FillRectangle(154, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  139				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  140				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  141			}
;  142		}
L_64:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_72
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_65
L_72:
;  143		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_73
;  144			if (!canSkip) {
	LD	A,(IX+18)
	OR	A,A
	JR	NZ,L_70
;  145				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_67
L_68:
	CALL	_kb_Scan
L_67:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_68
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_68
;  146			}
L_70:
	OR	A,A
;  147			return(0);
	SBC	HL,HL
	JR	L_74
;  148		}
L_73:
;  149		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  150		return (tv1 + 1 + 2 * (tv2));
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  151	}
L_74:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion4 ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;temp55                                IX-8      3   variable
;temp61                                IX-5      3   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable
;canSkip                              IX+18      1   parameter
;text4                                IX+15      3   parameter
;text3                                IX+12      3   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__27:
	DB	">"
	DB	0
L__37:
	DB	">"
	DB	0
L__41:
	DB	">"
	DB	0
	SEGMENT CODE
;  152	int text_AskQuestion6(char text1[], char text2[], char text3[], char text4[], char text5[], char text6[]) {
_text_AskQuestion6:
	LD	HL,-3
	CALL	__frameset
;  153		int8_t tv1, tv2;
;  154		tv1 = 0;
	LD	(IX+-1),0
;  155		tv2 = 0;
	LD	(IX+-2),0
;  156		
;  157		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  158		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  159	
;  160		gfx_PrintStringXY(">", 25, 160);
	LD	BC,160
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__49
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  161		gfx_PrintStringXY(text1, 35, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  162		gfx_PrintStringXY(text2, 35, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  163		gfx_PrintStringXY(text3, 35, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  164		gfx_PrintStringXY(text4, 165, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  165		gfx_PrintStringXY(text5, 165, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  166		gfx_PrintStringXY(text6, 165, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+21)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  167	
;  168		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  169		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  170	
;  171		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_76
L_77:
	CALL	_kb_Scan
L_76:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_77
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_77
;  172		kb_Scan();
	CALL	_kb_Scan
;  173		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_100
L_101:
;  174			kb_Scan();
	CALL	_kb_Scan
;  175			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_99
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_99
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_99
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_100
L_99:
;  176				if ((kb_Data[7] & kb_Up) && tv1 > 0) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_89
	XOR	A,A
	CP	A,(IX+-1)
	JP	P,L_89
;  177					tv1--;
	DEC	(IX+-1)
;  178				}
L_89:
;  179				if ((kb_Data[7] & kb_Down) && tv1 < 2) {
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_93
	LD	A,(IX+-1)
	CP	A,2
	JP	P,L_93
;  180					tv1++;
	INC	(IX+-1)
;  181				}
L_93:
;  182				if ((kb_Data[7] & kb_Left) && tv2 > 0) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_97
	XOR	A,A
	CP	A,(IX+-2)
	JP	P,L_97
;  183					tv2--;
	DEC	(IX+-2)
;  184				}
L_97:
;  185				if ((kb_Data[7] & kb_Right) && tv2 < 1) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_98
	LD	A,(IX+-2)
	CP	A,1
	JP	P,L_98
;  186					tv2++;
	INC	(IX+-2)
;  187				}
L_98:
;  188				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  189				gfx_FillRectangle(154, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  190				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__64
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  191				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  192			}
;  193		}
L_100:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_107
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_101
L_107:
;  194		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_103
	JR	L_108
;  195			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_104:
	CALL	_kb_Scan
L_103:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_104
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_104
	OR	A,A
;  196			return(0);
	SBC	HL,HL
	JR	L_113
;  197		}
L_108:
;  198		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  199		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_110
L_111:
	CALL	_kb_Scan
L_110:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_111
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_111
;  200		return (tv1 + 1 + 3 * tv2);
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  201	}
L_113:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion6 ***************************
;Name                         Addr/Register   Size   Type
;_Wait                               IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;G_0                                   IX-3      1   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable
;text6                                IX+21      3   parameter
;text5                                IX+18      3   parameter
;text4                                IX+15      3   parameter
;text3                                IX+12      3   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__49:
	DB	">"
	DB	0
L__64:
	DB	">"
	DB	0
	SEGMENT CODE
;  202	void text_DrawTextBox(void) {
_text_DrawTextBox:
	LD	HL,-48
	CALL	__frameset
;  203		if (textBoxType == 0) {
	LD	HL,(_textBoxType)
	CALL	__icmpzero
	JR	NZ,L_120
;  204			int points[16] = { 4,188,  12,180,  307,180,  315,188,  315,227,  307,235,  12,235,  4,227,};
	LEA	DE,IX+-48
	LD	HL,_2temp114
	LD	BC,48
;  205			gfx_SetColor(colors[13]);
	LD	IY,_colors
	LDIR	
	LD	C,(IY+13)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  206			gfx_Polygon_NoClip(points, 8);
	LD	BC,8
	PUSH	BC
	PEA	IX+-48
	CALL	_gfx_Polygon_NoClip
	POP	BC
	POP	BC
;  207			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  208			gfx_FillTriangle_NoClip(5, 188, 12, 181, 12, 188);
	LD	BC,188
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  209			gfx_FillTriangle_NoClip(314, 188, 307, 181, 307, 188);
	LD	BC,188
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,314
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  210			gfx_FillTriangle_NoClip(5, 227, 12, 234, 12, 227);
	LD	BC,227
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,234
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,227
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  211			gfx_FillTriangle_NoClip(314, 227, 307, 234, 307, 227);
	LD	BC,227
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,234
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,227
	PUSH	BC
	LD	BC,314
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  212			gfx_FillRectangle_NoClip(12, 181, 296, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  213			gfx_FillRectangle_NoClip(5, 188, 8, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  214			gfx_FillRectangle_NoClip(307, 188, 8, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,307
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  215	
;  216		}
;  217		else if (textBoxType == 1) {
	JR	L_121
L_120:
	LD	BC,1
	LD	HL,(_textBoxType)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_118
;  218			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  219			gfx_Rectangle_NoClip(0, 176, 320, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  220			gfx_Rectangle_NoClip(1, 177, 318, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,318
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  221			gfx_Rectangle_NoClip(2, 178, 316, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,316
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  222			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  223			gfx_Rectangle_NoClip(3, 179, 314, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,314
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  224			gfx_Rectangle_NoClip(4, 180, 312, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  225			gfx_Rectangle_NoClip(5, 181, 310, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,310
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  226			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  227			gfx_Rectangle_NoClip(6, 182, 308, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,308
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  228			gfx_Rectangle_NoClip(7, 183, 306, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,306
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  229			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  230			gfx_FillRectangle_NoClip(8, 184, 304, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,304
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  231		}
;  232		else if (textBoxType == 2) {
	JR	L_121
L_118:
	LD	BC,2
	LD	HL,(_textBoxType)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_116
;  233			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  234			gfx_Rectangle_NoClip(0, 176, 255, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,255
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  235			gfx_Rectangle_NoClip(1, 177, 253, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,253
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  236			gfx_Rectangle_NoClip(2, 178, 251, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,251
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  237			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  238			gfx_Rectangle_NoClip(3, 179, 249, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,249
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  239			gfx_Rectangle_NoClip(4, 180, 247, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,247
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  240			gfx_Rectangle_NoClip(5, 181, 245, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,245
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  241			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  242			gfx_Rectangle_NoClip(6, 182, 243, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,243
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  243			gfx_Rectangle_NoClip(7, 183, 241, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,241
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  244			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  245			gfx_FillRectangle_NoClip(8, 184, 239, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,239
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  246	
;  247			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  248			gfx_Rectangle_NoClip(255, 176, 66, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,255
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  249			gfx_Rectangle_NoClip(256, 177, 64, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  250			gfx_Rectangle_NoClip(257, 178, 62, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,257
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  251			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  252			gfx_Rectangle_NoClip(258, 179, 60, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,258
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  253			gfx_Rectangle_NoClip(259, 180, 58, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,58
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,259
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  254			gfx_Rectangle_NoClip(260, 181, 56, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,260
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  255			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  256			gfx_Rectangle_NoClip(261, 182, 54, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,261
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  257			gfx_Rectangle_NoClip(262, 183, 52, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,52
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,262
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  258			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  259			gfx_FillRectangle_NoClip(263, 184, 50, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  260		}
;  261		else {
	JR	L_121
L_116:
;  262			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  263			gfx_Rectangle_NoClip(0, 176, 320, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  264			gfx_Rectangle_NoClip(1, 177, 318, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,318
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  265			gfx_Rectangle_NoClip(2, 178, 316, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,316
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  266			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  267			gfx_Rectangle_NoClip(3, 179, 314, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,314
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  268			gfx_Rectangle_NoClip(4, 180, 312, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  269			gfx_Rectangle_NoClip(5, 181, 310, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,310
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  270			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  271			gfx_Rectangle_NoClip(6, 182, 308, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,308
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  272			gfx_Rectangle_NoClip(7, 183, 306, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,306
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  273			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  274			gfx_FillRectangle_NoClip(8, 184, 304, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,304
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  275		}
L_121:
;  276		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  277	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_DrawTextBox ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Rectangle_NoClip               IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_FillTriangle_NoClip            IMPORT  -----   function
;_gfx_Polygon_NoClip                 IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;_2temp114                           STATIC     48   variable
;_textBoxType                        STATIC      3   variable
;points                               IX-48     48   variable


; Stack Frame Size: 54 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_2temp114:
	DW	4
	DB	0
	DW	188
	DB	0
	DW	12
	DB	0
	DW	180
	DB	0
	DW	307
	DB	0
	DW	180
	DB	0
	DW	315
	DB	0
	DW	188
	DB	0
	DW	315
	DB	0
	DW	227
	DB	0
	DW	307
	DB	0
	DW	235
	DB	0
	DW	12
	DB	0
	DW	235
	DB	0
	DW	4
	DB	0
	DW	227
	DB	0
	SEGMENT DATA
_text_status2:
	DB	97
	DB	116
	DB	116
	DB	97
	DB	99
	DB	107
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	100
	DB	101
	DB	102
	DB	101
	DB	110
	DB	99
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	115
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	32
	DB	97
	DB	116
	DB	116
	DB	97
	DB	99
	DB	107
	DB	0
	DB	0
	DB	115
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	32
	DB	100
	DB	101
	DB	102
	DB	101
	DB	110
	DB	99
	DB	101
	DB	0
	DB	115
	DB	112
	DB	101
	DB	101
	DB	100
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	97
	DB	99
	DB	99
	DB	117
	DB	114
	DB	97
	DB	99
	DB	121
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	101
	DB	118
	DB	97
	DB	115
	DB	105
	DB	118
	DB	101
	DB	110
	DB	101
	DB	115
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_text_movecategories:
	DB	80
	DB	104
	DB	121
	DB	115
	DB	105
	DB	99
	DB	97
	DB	108
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	80
	DB	104
	DB	121
	DB	115
	DB	105
	DB	99
	DB	97
	DB	108
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	XREF _colors:ROM
	XREF _Wait:ROM
	XREF _kb_Scan:ROM
	XREF _strlen:ROM
	XREF _strncpy:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillTriangle_NoClip:ROM
	XREF _gfx_Polygon_NoClip:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle_NoClip:ROM
	XREF _gfx_SetColor:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _text_movecategories
	XDEF _text_status2
	XDEF _text_DrawTextBox
	XDEF _text_AskQuestion6
	XDEF _text_AskQuestion4
	XDEF _text_AskQuestion2
	XDEF _text_Display
	XDEF _textBoxType
	XDEF _delaytime
;  278	
;  279	
;  280	/* Text Varaibles*/
;  281	
;  282	char text_status2[7][16] = { "attack","defence","special attack","special defence","speed","accuracy","evasiveness" };
	END
