; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\TEXT.C"
	.assume ADL=1
	SEGMENT TEXT
_delaytime:
	DB	50
	SEGMENT DATA
_textBoxType:
	DW	0
	DB	0
_lastTextIndex:
	DW	0
_lastTextID:
	DW	0
;    1	#include <graphx.h>
;    2	#include <string.h>
;    3	#include <keypadc.h>
;    4	#include <stdint.h>
;    5	#include <stdarg.h> 
;    6	#include <stdio.h>
;    7	#include <stdbool.h>
;    8	
;    9	#include "text.h"
;   10	#include "misc.h"
;   11	
;   12	
;   13	/* If holding down second, the time to pause before moving to next text */
;   14	const uint8_t delaytime = 50;
;   15	
;   16	
;   17	int textBoxType = 0;
;   18	
;   19	/* Text Functions */
;   20	
;   21	uint16_t lastTextIndex = 0;
;   22	uint16_t lastTextID = 0;
	SEGMENT CODE
;   23	/* canSkip determines whether holding down 2nd before the text box pops up can do anything */
;   24	void text_Display(char text[], bool canSkip) {
_text_Display:
	LD	HL,-108
	CALL	__frameset
;   25		char newText1[50] = "";
	LEA	DE,IX+-58
	LD	HL,_0temp0
	LD	BC,50
	LDIR	
;   26		char newText2[50] = "";
	LEA	DE,IX+-108
	LD	HL,_1temp1
	LD	BC,50
	LDIR	
;   27		int textIndex = 0;
;   28		bool endText = false;
	LD	(IX+-8),0
;   29	
;   30		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   31		text_DrawTextBox();
	CALL	_text_DrawTextBox
;   32	
;   33		gfx_SetTextXY(30, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,30
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   34		for (textIndex = 0; !endText; textIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_34
L_32:
;   35			if (text[textIndex] == '\0') {
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-7),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_31
;   36				endText = true;
	LD	(IX+-8),1
;   37			}
;   38			else if (text[textIndex] == '\n' && text[textIndex + 1] == '\n' && text[textIndex + 2] == '\n') {
	JR	L_33
L_31:
	LD	HL,(IX+-7)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,10
	SBC	HL,BC
	JR	Z,L__2
	LD	A,1
	JR	L__3
L__2:
	XOR	A,A
L__3:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_29
	LD	BC,(IX+-3)
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,10
	SBC	HL,BC
	JR	NZ,L_29
	LD	IY,(IX+-3)
	LEA	BC,IY+2
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,10
	SBC	HL,BC
	JR	Z,L_6
	JR	L_29
;   39				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_7:
	CALL	_kb_Scan
L_6:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_7
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_7
;   40				while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_9
L_10:
;   41					kb_Scan();
	CALL	_kb_Scan
;   42				}
L_9:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_12
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_10
L_12:
;   43				endText = true;
;   44				lastTextIndex = textIndex + 3;
	LD	IY,(IX+-3)
;   45				gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	LEA	BC,IY+3
	LD	HL,_lastTextIndex
	LD	(HL),C
	INC	HL
	LD	(HL),B
	CALL	_gfx_SetDraw
	POP	BC
;   46				return;
	JR	L_44
;   47			}
;   48			else if (text[textIndex] == '\n' && text[textIndex + 1] == '\n') {
L_29:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_27
	LD	BC,(IX+-3)
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,10
	SBC	HL,BC
	JR	Z,L_15
	JR	L_27
;   49				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_16:
	CALL	_kb_Scan
L_15:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_16
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_16
;   50				while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_18
L_19:
;   51					kb_Scan();
	CALL	_kb_Scan
;   52				}
L_18:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_21
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_19
L_21:
;   53				gfx_SetTextXY(30, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,30
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   54				Wait(5);
	LD	BC,5
	PUSH	BC
	CALL	_Wait
	POP	BC
;   55				text_DrawTextBox();
	CALL	_text_DrawTextBox
;   56				textIndex++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   57			}
;   58			else if (text[textIndex] == '\n') {
	JR	L_33
L_27:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_25
;   59				gfx_SetTextXY(30, gfx_GetTextY() + 15);
	CALL	_gfx_GetTextY
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,30
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   60			}
;   61			else {
	JR	L_33
L_25:
;   62				gfx_PrintChar(text[textIndex]);
	LD	HL,(IX+-7)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_PrintChar
	POP	BC
;   63				if (text[textIndex] == ' ') {
	LD	HL,(IX+-7)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	JR	NZ,L_33
;   64					Wait(2);
	LD	BC,2
	PUSH	BC
	CALL	_Wait
	POP	BC
;   65				}
;   66			}
;   67		}
L_33:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_34:
	LD	A,(IX+-8)
	OR	A,A
	JR	Z,L_32
;   68		
;   69		Wait(10);
	LD	BC,10
	PUSH	BC
	CALL	_Wait
	POP	BC
;   70		kb_Scan();
	CALL	_kb_Scan
;   71		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_37
L_38:
	CALL	_kb_Scan
L_37:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_38
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_38
;   72		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) { kb_Scan(); }
	JR	L_40
L_41:
	CALL	_kb_Scan
L_40:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_43
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_41
L_43:
;   73		
;   74		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   75	}
L_44:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_Display ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintChar                      IMPORT  -----   function
;_gfx_GetTextY                       IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_lastTextIndex                      STATIC      2   variable
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_1temp1                             STATIC     50   variable
;_0temp0                             STATIC     50   variable
;newText2                            IX-108     50   variable
;newText1                             IX-58     50   variable
;endText                               IX-8      1   variable
;G_0                                   IX-7      3   variable
;G_1                                   IX-4      1   variable
;textIndex                             IX-3      3   variable
;canSkip                               IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 120 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_0temp0:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_1temp1:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;   76	int text_AskQuestion2(char text1[], char text2[], bool canSkip) {
_text_AskQuestion2:
	LD	HL,-1
	CALL	__frameset
;   77		int8_t tv1, tv2;
;   78		tv1 = 1;
	LD	(IX+-1),1
;   79		tv2 = 1;
;   80	
;   81	
;   82		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   83		text_DrawTextBox();
	CALL	_text_DrawTextBox
;   84	
;   85		gfx_PrintStringXY(">", 25, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__25
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   86		gfx_PrintStringXY(text1, 35, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   87		gfx_PrintStringXY(text2, 35, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   88	
;   89		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   90		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   91	
;   92		kb_Scan();
	CALL	_kb_Scan
;   93		if (!canSkip) {
	LD	A,(IX+12)
	OR	A,A
	JR	NZ,L_52
;   94			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_46
L_47:
	CALL	_kb_Scan
L_46:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_47
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_47
;   95		}
L_52:
;   96		if (canSkip && (kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
	LD	A,(IX+12)
	OR	A,A
	JR	Z,L_50
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_51
L_50:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_53
L_51:
;   97			Wait(delaytime);
	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;   98		}
L_53:
;   99		kb_Scan();
	CALL	_kb_Scan
;  100		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_62
L_63:
;  101			kb_Scan();
	CALL	_kb_Scan
;  102			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_61
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_61
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_61
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_62
L_61:
;  103				if (tv1 == 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_59
;  104					tv1 = 2;
	LD	(IX+-1),2
;  105				}
;  106				else {
	JR	L_60
L_59:
;  107					tv1 = 1;
	LD	(IX+-1),1
;  108				}
L_60:
;  109				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  110				gfx_PrintStringXY(">", 25, 175 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,175
	ADD	HL,BC
	PUSH	HL
	LD	BC,25
	PUSH	BC
	LD	BC,L__37
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  111				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  112			}
;  113		}
L_62:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_65
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_63
L_65:
;  114		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_66
;  115			tv1 = 0;
	LD	(IX+-1),0
;  116		}
L_66:
;  117		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  118		return tv1;
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
;  119	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion2 ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;tv1                                   IX-1      1   variable
;canSkip                              IX+12      1   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__25:
	DB	">"
	DB	0
L__37:
	DB	">"
	DB	0
	SEGMENT CODE
;  120	int text_AskQuestion4(char text1[], char text2[], char text3[], char text4[], bool canSkip) {
_text_AskQuestion4:
	LD	HL,-8
	CALL	__frameset
;  121		int8_t tv1, tv2;
;  122		tv1 = 0;
	LD	(IX+-1),0
;  123		tv2 = 0;
	LD	(IX+-2),0
;  124	
;  125		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  126		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  127	
;  128		gfx_PrintStringXY(">", 25, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__42
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  129		gfx_PrintStringXY(text1, 35, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  130		gfx_PrintStringXY(text2, 35, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  131		gfx_PrintStringXY(text3, 165, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  132		gfx_PrintStringXY(text4, 165, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  133	
;  134		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  135		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  136	
;  137		kb_Scan();
	CALL	_kb_Scan
;  138		if (!canSkip) {
	LD	A,(IX+18)
	OR	A,A
	JR	NZ,L_75
;  139			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_69
L_70:
	CALL	_kb_Scan
L_69:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_70
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_70
;  140		}
L_75:
;  141		if (canSkip && (kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
	LD	A,(IX+18)
	OR	A,A
	JR	Z,L_73
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_74
L_73:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_76
L_74:
;  142			Wait(delaytime);
	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;  143		}
L_76:
;  144		kb_Scan();
	CALL	_kb_Scan
;  145		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_91
L_92:
;  146			kb_Scan();
	CALL	_kb_Scan
;  147			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_83
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_90
L_83:
;  148				tv1 = !tv1;
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_80
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_81
L_80:
	LD	BC,0
	LD	(IX+-8),BC
L_81:
	LD	A,(IX+-8)
	LD	(IX+-1),A
;  149				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  150				gfx_FillRectangle(154, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  151				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__52
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  152				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  153			}
L_90:
;  154			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_89
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_91
L_89:
;  155				tv2 = !tv2;
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_86
	LD	BC,1
	LD	(IX+-5),BC
	JR	L_87
L_86:
	LD	BC,0
	LD	(IX+-5),BC
L_87:
	LD	A,(IX+-5)
	LD	(IX+-2),A
;  156				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  157				gfx_FillRectangle(154, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  158				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__56
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  159				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  160			}
;  161		}
L_91:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_99
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_92
L_99:
;  162		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_100
;  163			if (!canSkip) {
	LD	A,(IX+18)
	OR	A,A
	JR	NZ,L_97
;  164				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_94
L_95:
	CALL	_kb_Scan
L_94:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_95
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_95
;  165			}
L_97:
	OR	A,A
;  166			return(0);
	SBC	HL,HL
	JR	L_101
;  167		}
L_100:
;  168		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  169		return (tv1 + 1 + 2 * (tv2));
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  170	}
L_101:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion4 ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;temp82                                IX-8      3   variable
;temp88                                IX-5      3   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable
;canSkip                              IX+18      1   parameter
;text4                                IX+15      3   parameter
;text3                                IX+12      3   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__42:
	DB	">"
	DB	0
L__52:
	DB	">"
	DB	0
L__56:
	DB	">"
	DB	0
	SEGMENT CODE
;  171	int text_AskQuestion6(char text1[], char text2[], char text3[], char text4[], char text5[], char text6[]) {
_text_AskQuestion6:
	LD	HL,-3
	CALL	__frameset
;  172		int8_t tv1, tv2;
;  173		tv1 = 0;
	LD	(IX+-1),0
;  174		tv2 = 0;
	LD	(IX+-2),0
;  175		
;  176		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  177		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  178	
;  179		gfx_PrintStringXY(">", 25, 160);
	LD	BC,160
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__64
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  180		gfx_PrintStringXY(text1, 35, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  181		gfx_PrintStringXY(text2, 35, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  182		gfx_PrintStringXY(text3, 35, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  183		gfx_PrintStringXY(text4, 165, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  184		gfx_PrintStringXY(text5, 165, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  185		gfx_PrintStringXY(text6, 165, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+21)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  186	
;  187		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  188		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  189	
;  190		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_103
L_104:
	CALL	_kb_Scan
L_103:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_104
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_104
;  191		kb_Scan();
	CALL	_kb_Scan
;  192		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_127
L_128:
;  193			kb_Scan();
	CALL	_kb_Scan
;  194			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_126
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_126
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_126
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_127
L_126:
;  195				if ((kb_Data[7] & kb_Up) && tv1 > 0) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_116
	XOR	A,A
	CP	A,(IX+-1)
	JP	P,L_116
;  196					tv1--;
	DEC	(IX+-1)
;  197				}
L_116:
;  198				if ((kb_Data[7] & kb_Down) && tv1 < 2) {
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_120
	LD	A,(IX+-1)
	CP	A,2
	JP	P,L_120
;  199					tv1++;
	INC	(IX+-1)
;  200				}
L_120:
;  201				if ((kb_Data[7] & kb_Left) && tv2 > 0) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_124
	XOR	A,A
	CP	A,(IX+-2)
	JP	P,L_124
;  202					tv2--;
	DEC	(IX+-2)
;  203				}
L_124:
;  204				if ((kb_Data[7] & kb_Right) && tv2 < 1) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_125
	LD	A,(IX+-2)
	CP	A,1
	JP	P,L_125
;  205					tv2++;
	INC	(IX+-2)
;  206				}
L_125:
;  207				gfx_FillRectangle(24, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  208				gfx_FillRectangle(154, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  209				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__79
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  210				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  211			}
;  212		}
L_127:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_134
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_128
L_134:
;  213		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_130
	JR	L_135
;  214			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_131:
	CALL	_kb_Scan
L_130:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_131
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_131
	OR	A,A
;  215			return(0);
	SBC	HL,HL
	JR	L_140
;  216		}
L_135:
;  217		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  218		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_137
L_138:
	CALL	_kb_Scan
L_137:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_138
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_138
;  219		return (tv1 + 1 + 3 * tv2);
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  220	}
L_140:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion6 ***************************
;Name                         Addr/Register   Size   Type
;_Wait                               IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;G_5                                   IX-3      1   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable
;text6                                IX+21      3   parameter
;text5                                IX+18      3   parameter
;text4                                IX+15      3   parameter
;text3                                IX+12      3   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__64:
	DB	">"
	DB	0
L__79:
	DB	">"
	DB	0
	SEGMENT CODE
;  221	void text_DrawTextBox(void) {
_text_DrawTextBox:
	LD	HL,-48
	CALL	__frameset
;  222		if (textBoxType == 0) {
	LD	HL,(_textBoxType)
	CALL	__icmpzero
	JR	NZ,L_147
;  223			int points[16] = { 4,188,  12,180,  307,180,  315,188,  315,227,  307,235,  12,235,  4,227,};
	LEA	DE,IX+-48
	LD	HL,_2temp141
	LD	BC,48
;  224			gfx_SetColor(colors[13]);
	LD	IY,_colors
	LDIR	
	LD	C,(IY+13)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  225			gfx_Polygon_NoClip(points, 8);
	LD	BC,8
	PUSH	BC
	PEA	IX+-48
	CALL	_gfx_Polygon_NoClip
	POP	BC
	POP	BC
;  226			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  227			gfx_FillTriangle_NoClip(5, 188, 12, 181, 12, 188);
	LD	BC,188
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  228			gfx_FillTriangle_NoClip(314, 188, 307, 181, 307, 188);
	LD	BC,188
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,314
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  229			gfx_FillTriangle_NoClip(5, 227, 12, 234, 12, 227);
	LD	BC,227
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,234
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,227
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  230			gfx_FillTriangle_NoClip(314, 227, 307, 234, 307, 227);
	LD	BC,227
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,234
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,227
	PUSH	BC
	LD	BC,314
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  231			gfx_FillRectangle_NoClip(12, 181, 296, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  232			gfx_FillRectangle_NoClip(5, 188, 8, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  233			gfx_FillRectangle_NoClip(307, 188, 8, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,307
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  234	
;  235		}
;  236		else if (textBoxType == 1) {
	JR	L_148
L_147:
	LD	BC,1
	LD	HL,(_textBoxType)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_145
;  237			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  238			gfx_Rectangle_NoClip(0, 176, 320, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  239			gfx_Rectangle_NoClip(1, 177, 318, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,318
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  240			gfx_Rectangle_NoClip(2, 178, 316, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,316
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  241			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  242			gfx_Rectangle_NoClip(3, 179, 314, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,314
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  243			gfx_Rectangle_NoClip(4, 180, 312, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  244			gfx_Rectangle_NoClip(5, 181, 310, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,310
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  245			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  246			gfx_Rectangle_NoClip(6, 182, 308, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,308
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  247			gfx_Rectangle_NoClip(7, 183, 306, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,306
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  248			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  249			gfx_FillRectangle_NoClip(8, 184, 304, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,304
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  250		}
;  251		else if (textBoxType == 2) {
	JR	L_148
L_145:
	LD	BC,2
	LD	HL,(_textBoxType)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_143
;  252			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  253			gfx_Rectangle_NoClip(0, 176, 255, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,255
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  254			gfx_Rectangle_NoClip(1, 177, 253, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,253
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  255			gfx_Rectangle_NoClip(2, 178, 251, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,251
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  256			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  257			gfx_Rectangle_NoClip(3, 179, 249, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,249
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  258			gfx_Rectangle_NoClip(4, 180, 247, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,247
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  259			gfx_Rectangle_NoClip(5, 181, 245, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,245
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  260			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  261			gfx_Rectangle_NoClip(6, 182, 243, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,243
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  262			gfx_Rectangle_NoClip(7, 183, 241, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,241
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  263			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  264			gfx_FillRectangle_NoClip(8, 184, 239, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,239
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  265	
;  266			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  267			gfx_Rectangle_NoClip(255, 176, 66, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,255
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  268			gfx_Rectangle_NoClip(256, 177, 64, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  269			gfx_Rectangle_NoClip(257, 178, 62, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,257
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  270			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  271			gfx_Rectangle_NoClip(258, 179, 60, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,258
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  272			gfx_Rectangle_NoClip(259, 180, 58, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,58
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,259
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  273			gfx_Rectangle_NoClip(260, 181, 56, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,260
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  274			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  275			gfx_Rectangle_NoClip(261, 182, 54, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,261
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  276			gfx_Rectangle_NoClip(262, 183, 52, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,52
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,262
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  277			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  278			gfx_FillRectangle_NoClip(263, 184, 50, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  279		}
;  280		else {
	JR	L_148
L_143:
;  281			gfx_SetColor(colors[14]);
	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  282			gfx_Rectangle_NoClip(0, 176, 320, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  283			gfx_Rectangle_NoClip(1, 177, 318, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,318
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  284			gfx_Rectangle_NoClip(2, 178, 316, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,316
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  285			gfx_SetColor(colors[15]);
	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  286			gfx_Rectangle_NoClip(3, 179, 314, 58);
	LD	BC,58
	PUSH	BC
	LD	BC,314
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  287			gfx_Rectangle_NoClip(4, 180, 312, 56);
	LD	BC,56
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  288			gfx_Rectangle_NoClip(5, 181, 310, 54);
	LD	BC,54
	PUSH	BC
	LD	BC,310
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  289			gfx_SetColor(colors[16]);
	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  290			gfx_Rectangle_NoClip(6, 182, 308, 52);
	LD	BC,52
	PUSH	BC
	LD	BC,308
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  291			gfx_Rectangle_NoClip(7, 183, 306, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,306
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  292			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  293			gfx_FillRectangle_NoClip(8, 184, 304, 48);
	LD	BC,48
	PUSH	BC
	LD	BC,304
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  294		}
L_148:
;  295		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  296	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_DrawTextBox ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Rectangle_NoClip               IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_FillTriangle_NoClip            IMPORT  -----   function
;_gfx_Polygon_NoClip                 IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;_2temp141                           STATIC     48   variable
;_textBoxType                        STATIC      3   variable
;points                               IX-48     48   variable


; Stack Frame Size: 54 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_2temp141:
	DW	4
	DB	0
	DW	188
	DB	0
	DW	12
	DB	0
	DW	180
	DB	0
	DW	307
	DB	0
	DW	180
	DB	0
	DW	315
	DB	0
	DW	188
	DB	0
	DW	315
	DB	0
	DW	227
	DB	0
	DW	307
	DB	0
	DW	235
	DB	0
	DW	12
	DB	0
	DW	235
	DB	0
	DW	4
	DB	0
	DW	227
	DB	0
	SEGMENT DATA
_text_status2:
	DB	97
	DB	116
	DB	116
	DB	97
	DB	99
	DB	107
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	100
	DB	101
	DB	102
	DB	101
	DB	110
	DB	99
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	115
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	32
	DB	97
	DB	116
	DB	116
	DB	97
	DB	99
	DB	107
	DB	0
	DB	0
	DB	115
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	32
	DB	100
	DB	101
	DB	102
	DB	101
	DB	110
	DB	99
	DB	101
	DB	0
	DB	115
	DB	112
	DB	101
	DB	101
	DB	100
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	97
	DB	99
	DB	99
	DB	117
	DB	114
	DB	97
	DB	99
	DB	121
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	101
	DB	118
	DB	97
	DB	115
	DB	105
	DB	118
	DB	101
	DB	110
	DB	101
	DB	115
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_text_movecategories:
	DB	80
	DB	104
	DB	121
	DB	115
	DB	105
	DB	99
	DB	97
	DB	108
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	80
	DB	104
	DB	121
	DB	115
	DB	105
	DB	99
	DB	97
	DB	108
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	XREF _colors:ROM
	XREF _Wait:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_GetTextY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintChar:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillTriangle_NoClip:ROM
	XREF _gfx_Polygon_NoClip:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle_NoClip:ROM
	XREF _gfx_SetColor:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _text_movecategories
	XDEF _text_status2
	XDEF _text_DrawTextBox
	XDEF _text_AskQuestion6
	XDEF _text_AskQuestion4
	XDEF _text_AskQuestion2
	XDEF _text_Display
	XDEF _lastTextID
	XDEF _lastTextIndex
	XDEF _textBoxType
	XDEF _delaytime
;  297	
;  298	
;  299	/* Text Varaibles*/
;  300	
;  301	char text_status2[7][16] = { "attack","defence","special attack","special defence","speed","accuracy","evasiveness" };
	END
