; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\TEXT.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME3"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME7"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME8",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.ENDREC "NONAME9"
.BEGREC "NONAME10",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME8"
.TYPE 104
.ENDEF
.ENDREC "NONAME10"
.BEGREC "NONAME11",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME9"
.TYPE 104
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME8"
.TYPE 104
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME15"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
	SEGMENT TEXT
_delaytime:
	DB	50
.DEFINE "delaytime"
.ALIAS "_delaytime"
.CLASS 84
.VALUE _delaytime
.TYPE 12
.ENDEF
	SEGMENT DATA
_textBoxType:
	DW	0
	DB	0
.DEFINE "textBoxType"
.ALIAS "_textBoxType"
.CLASS 69
.VALUE _textBoxType
.TYPE 4
.ENDEF
	SEGMENT BSS
_lastTextIndex:
	DS	1
.DEFINE "lastTextIndex"
.ALIAS "_lastTextIndex"
.CLASS 83
.VALUE _lastTextIndex
.TYPE 12
.ENDEF
;    1	#include <graphx.h>
;    2	#include <string.h>
;    3	#include <keypadc.h>
;    4	#include <stdint.h>
;    5	#include <stdarg.h> 
;    6	#include <stdio.h>
;    7	#include <stdbool.h>
;    8	
;    9	#include "text.h"
;   10	#include "misc.h"
;   11	
;   12	
;   13	/* If holding down second, the time to pause before moving to next text */
;   14	const uint8_t delaytime = 50;
;   15	
;   16	
;   17	int textBoxType = 0;
;   18	
;   19	/* Text Functions */
;   20	
;   21	uint8_t lastTextIndex;
	SEGMENT CODE
;   22	/* canSkip determines whether holding down 2nd before the text box pops up can do anything */
;   23	void text_Display(char text[], bool canSkip) {
_text_Display:
.DEFINE "_text_Display"

.VALUE _text_Display

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "text_Display",23,"_text_Display"

.LINE 23

.DEFINE "text"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "canSkip"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "textIndex"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "endText"

.CLASS 65

.VALUE -8

.TYPE 12

.ENDEF

.DEFINE "newText1"

.CLASS 65

.VALUE -58

.DIM 50

.TYPE 98

.ENDEF

.DEFINE "newText2"

.CLASS 65

.VALUE -108

.DIM 50

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-108
	LD	SP,HL
;   24		char newText1[50] = "";
.LINE 24

	LEA	DE,IX+-58
	LD	HL,_0temp0
	LD	BC,50
	LDIR	
;   25		char newText2[50] = "";
.LINE 25

	LEA	DE,IX+-108
	LD	HL,_1temp1
	LD	BC,50
	LDIR	
;   26		int textIndex;
;   27		bool endText = false;
.LINE 27

	LD	(IX+-8),0
;   28		lastTextIndex = 0;
.LINE 28

	XOR	A,A
	LD	(_lastTextIndex),A
;   29	
;   30		gfx_SetDrawScreen();
.LINE 30

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   31		text_DrawTextBox();
.LINE 31

	CALL	_text_DrawTextBox
;   32	
;   33		gfx_SetTextXY(30, 190);
.LINE 33

	LD	BC,190
	PUSH	BC
	LD	BC,30
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   34		for (textIndex = 0; !endText; textIndex++) {
.LINE 34

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_33
L_31:
;   35			if (text[textIndex] == '\0') {
.LINE 35

	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-7),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_30
;   36				endText = true;
.LINE 36

	LD	(IX+-8),1
;   37			}
;   38			else if (text[textIndex] == '\n' && text[textIndex + 1] == '\n' && text[textIndex + 2] == '\n') {
.LINE 38

	JR	L_32
L_30:
	LD	HL,(IX+-7)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JR	Z,L__2
	LD	A,1
	JR	L__3
L__2:
	XOR	A,A
L__3:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_28
	LD	BC,(IX+-3)
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_28
	LD	IY,(IX+-3)
	LEA	BC,IY+2
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JR	Z,L_6
	JR	L_28
;   39				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_7:
.LINE 39

	CALL	_kb_Scan
L_6:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_7
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_7
;   40				while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 40

	JR	L_9
L_10:
;   41					kb_Scan();
.LINE 41

	CALL	_kb_Scan
;   42				}
L_9:
.LINE 42

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_12
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_10
L_12:
;   43				endText = true;
;   44				lastTextIndex = textIndex;
.LINE 44

	LD	A,(IX+-3)
	LD	(_lastTextIndex),A
;   45				gfx_SetDrawBuffer();
.LINE 45

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   46				return;
.LINE 46

	JR	L_43
;   47			}
;   48			else if (text[textIndex] == '\n' && text[textIndex + 1] == '\n') {
L_28:
.LINE 48

	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_26
	LD	BC,(IX+-3)
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JR	Z,L_15
	JR	L_26
;   49				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_16:
.LINE 49

	CALL	_kb_Scan
L_15:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_16
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_16
;   50				while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 50

	JR	L_18
L_19:
;   51					kb_Scan();
.LINE 51

	CALL	_kb_Scan
;   52				}
L_18:
.LINE 52

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_21
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_19
L_21:
;   53				gfx_SetTextXY(30, 190);
.LINE 53

	LD	BC,190
	PUSH	BC
	LD	BC,30
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   54				Wait(5);
.LINE 54

	LD	BC,5
	PUSH	BC
	CALL	_Wait
	POP	BC
;   55				text_DrawTextBox();
.LINE 55

	CALL	_text_DrawTextBox
;   56				textIndex++;
.LINE 56

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   57			}
;   58			else if (text[textIndex] == '\n') {
.LINE 58

	JR	L_32
L_26:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_24
;   59				gfx_SetTextXY(30, gfx_GetTextY() + 15);
.LINE 59

	CALL	_gfx_GetTextY
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,30
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   60			}
;   61			else {
.LINE 61

	JR	L_32
L_24:
;   62				gfx_PrintChar(text[textIndex]);
.LINE 62

	LD	HL,(IX+-7)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_PrintChar
	POP	BC
;   63				Wait(1);
.LINE 63

	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;   64			}
;   65		}
L_32:
.LINE 65

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_33:
	LD	A,(IX+-8)
	OR	A,A
	JR	Z,L_31
;   66		
;   67		Wait(10);
.LINE 67

	LD	BC,10
	PUSH	BC
	CALL	_Wait
	POP	BC
;   68		kb_Scan();
.LINE 68

	CALL	_kb_Scan
;   69		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
.LINE 69

	JR	L_36
L_37:
	CALL	_kb_Scan
L_36:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_37
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_37
;   70		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) { kb_Scan(); }
.LINE 70

	JR	L_39
L_40:
	CALL	_kb_Scan
L_39:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_42
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_40
L_42:
;   71		
;   72		gfx_SetDrawBuffer();
.LINE 72

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   73	}
L_43:
.LINE 73

	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_Display ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintChar                      IMPORT  -----   function
;_gfx_GetTextY                       IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_lastTextIndex                      STATIC      1   variable
;_1temp1                             STATIC     50   variable
;_0temp0                             STATIC     50   variable
;newText2                            IX-108     50   variable
;newText1                             IX-58     50   variable
;endText                               IX-8      1   variable
;G_0                                   IX-7      3   variable
;G_1                                   IX-4      1   variable
;textIndex                             IX-3      3   variable
;canSkip                               IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 120 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "text_Display",73,"_text_Display"
	SEGMENT TEXT
_0temp0:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_1temp1:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;   74	int text_AskQuestion2(char text1[], char text2[], bool canSkip) {
_text_AskQuestion2:
.DEFINE "_text_AskQuestion2"

.VALUE _text_AskQuestion2

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "text_AskQuestion2",74,"_text_AskQuestion2"

.LINE 74

.DEFINE "text1"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "text2"

.CLASS 65

.VALUE 9

.TYPE 34

.ENDEF

.DEFINE "canSkip"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "tv1"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;   75		int8_t tv1, tv2;
;   76		tv1 = 1;
.LINE 76

	LD	(IX+-1),1
;   77		tv2 = 1;
;   78	
;   79	
;   80		gfx_Blit(gfx_screen);
.LINE 80

	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   81		text_DrawTextBox();
.LINE 81

	CALL	_text_DrawTextBox
;   82	
;   83		gfx_PrintStringXY(">", 25, 190);
.LINE 83

	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   84		gfx_PrintStringXY(text1, 35, 190);
.LINE 84

	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   85		gfx_PrintStringXY(text2, 35, 205);
.LINE 85

	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   86	
;   87		gfx_SwapDraw();
.LINE 87

	CALL	_gfx_SwapDraw
;   88		gfx_SetDrawScreen();
.LINE 88

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   89	
;   90		kb_Scan();
.LINE 90

	CALL	_kb_Scan
;   91		if (!canSkip) {
.LINE 91

	LD	A,(IX+12)
	OR	A,A
	JR	NZ,L_51
;   92			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
.LINE 92

	JR	L_45
L_46:
	CALL	_kb_Scan
L_45:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_46
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_46
;   93		}
L_51:
.LINE 93

;   94		if (canSkip && (kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
.LINE 94

	LD	A,(IX+12)
	OR	A,A
	JR	Z,L_49
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_50
L_49:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_52
L_50:
;   95			Wait(delaytime);
.LINE 95

	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;   96		}
L_52:
.LINE 96

;   97		kb_Scan();
.LINE 97

	CALL	_kb_Scan
;   98		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 98

	JR	L_61
L_62:
;   99			kb_Scan();
.LINE 99

	CALL	_kb_Scan
;  100			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Left)) {
.LINE 100

	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_60
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_60
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_60
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_61
L_60:
;  101				if (tv1 == 1) {
.LINE 101

	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_58
;  102					tv1 = 2;
.LINE 102

	LD	(IX+-1),2
;  103				}
;  104				else {
.LINE 104

	JR	L_59
L_58:
;  105					tv1 = 1;
.LINE 105

	LD	(IX+-1),1
;  106				}
L_59:
.LINE 106

;  107				gfx_FillRectangle(24, 185, 10, 45);
.LINE 107

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  108				gfx_PrintStringXY(">", 25, 175 + 15 * tv1);
.LINE 108

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,175
	ADD	HL,BC
	PUSH	HL
	LD	BC,25
	PUSH	BC
	LD	BC,L__36
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  109				Wait(20);
.LINE 109

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  110			}
;  111		}
L_61:
.LINE 111

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_64
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_62
L_64:
;  112		if (kb_Data[6] & kb_Clear) {
.LINE 112

	LD	A,(16056348)
	AND	A,64
	JR	Z,L_65
;  113			tv1 = 0;
.LINE 113

	LD	(IX+-1),0
;  114		}
L_65:
.LINE 114

;  115		gfx_SetDrawBuffer();
.LINE 115

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  116		return tv1;
.LINE 116

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
;  117	}
.LINE 117

	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion2 ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;tv1                                   IX-1      1   variable
;canSkip                              IX+12      1   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "text_AskQuestion2",117,"_text_AskQuestion2"
	SEGMENT STRSECT
L__24:
	DB	">"
	DB	0
L__36:
	DB	">"
	DB	0
	SEGMENT CODE
;  118	int text_AskQuestion4(char text1[], char text2[], char text3[], char text4[], bool canSkip) {
_text_AskQuestion4:
.DEFINE "_text_AskQuestion4"

.VALUE _text_AskQuestion4

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "text_AskQuestion4",118,"_text_AskQuestion4"

.LINE 118

.DEFINE "text1"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "text2"

.CLASS 65

.VALUE 9

.TYPE 34

.ENDEF

.DEFINE "text3"

.CLASS 65

.VALUE 12

.TYPE 34

.ENDEF

.DEFINE "text4"

.CLASS 65

.VALUE 15

.TYPE 34

.ENDEF

.DEFINE "canSkip"

.CLASS 65

.VALUE 18

.TYPE 12

.ENDEF

.DEFINE "tv1"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

.DEFINE "tv2"

.CLASS 65

.VALUE -2

.TYPE 2

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
	DEC	SP
;  119		int8_t tv1, tv2;
;  120		tv1 = 0;
.LINE 120

	LD	(IX+-1),0
;  121		tv2 = 0;
.LINE 121

	LD	(IX+-2),0
;  122	
;  123		gfx_Blit(gfx_screen);
.LINE 123

	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  124		text_DrawTextBox();
.LINE 124

	CALL	_text_DrawTextBox
;  125	
;  126		gfx_PrintStringXY(">", 25, 190);
.LINE 126

	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  127		gfx_PrintStringXY(text1, 35, 190);
.LINE 127

	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  128		gfx_PrintStringXY(text2, 35, 205);
.LINE 128

	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  129		gfx_PrintStringXY(text3, 165, 190);
.LINE 129

	LD	BC,190
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  130		gfx_PrintStringXY(text4, 165, 205);
.LINE 130

	LD	BC,205
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  131	
;  132		gfx_SwapDraw();
.LINE 132

	CALL	_gfx_SwapDraw
;  133		gfx_SetDrawScreen();
.LINE 133

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  134	
;  135		kb_Scan();
.LINE 135

	CALL	_kb_Scan
;  136		if (!canSkip) {
.LINE 136

	LD	A,(IX+18)
	OR	A,A
	JR	NZ,L_74
;  137			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
.LINE 137

	JR	L_68
L_69:
	CALL	_kb_Scan
L_68:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_69
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_69
;  138		}
L_74:
.LINE 138

;  139		if (canSkip && (kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
.LINE 139

	LD	A,(IX+18)
	OR	A,A
	JR	Z,L_72
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_73
L_72:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_75
L_73:
;  140			Wait(delaytime);
.LINE 140

	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;  141		}
L_75:
.LINE 141

;  142		kb_Scan();
.LINE 142

	CALL	_kb_Scan
;  143		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 143

	JR	L_90
L_91:
;  144			kb_Scan();
.LINE 144

	CALL	_kb_Scan
;  145			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
.LINE 145

	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_82
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_89
L_82:
;  146				tv1 = !tv1;
.LINE 146

	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_79
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_80
L_79:
	LD	BC,0
	LD	(IX+-8),BC
L_80:
	LD	A,(IX+-8)
	LD	(IX+-1),A
;  147				gfx_FillRectangle(24, 185, 10, 45);
.LINE 147

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  148				gfx_FillRectangle(154, 185, 10, 45);
.LINE 148

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  149				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
.LINE 149

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__51
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  150				Wait(20);
.LINE 150

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  151			}
L_89:
.LINE 151

;  152			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
.LINE 152

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_88
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_90
L_88:
;  153				tv2 = !tv2;
.LINE 153

	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_85
	LD	BC,1
	LD	(IX+-5),BC
	JR	L_86
L_85:
	LD	BC,0
	LD	(IX+-5),BC
L_86:
	LD	A,(IX+-5)
	LD	(IX+-2),A
;  154				gfx_FillRectangle(24, 185, 10, 45);
.LINE 154

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  155				gfx_FillRectangle(154, 185, 10, 45);
.LINE 155

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  156				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
.LINE 156

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__55
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  157				Wait(20);
.LINE 157

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  158			}
;  159		}
L_90:
.LINE 159

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_98
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_91
L_98:
;  160		if (kb_Data[6] & kb_Clear) {
.LINE 160

	LD	A,(16056348)
	AND	A,64
	JR	Z,L_99
;  161			if (!canSkip) {
.LINE 161

	LD	A,(IX+18)
	OR	A,A
	JR	NZ,L_96
;  162				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
.LINE 162

	JR	L_93
L_94:
	CALL	_kb_Scan
L_93:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_94
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_94
;  163			}
L_96:
.LINE 163

;  164			return(0);
.LINE 164

	OR	A,A
	SBC	HL,HL
	JR	L_100
;  165		}
L_99:
.LINE 165

;  166		gfx_SetDrawBuffer();
.LINE 166

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  167		return (tv1 + 1 + 2 * (tv2));
.LINE 167

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  168	}
L_100:
.LINE 168

	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion4 ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;temp81                                IX-8      3   variable
;temp87                                IX-5      3   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable
;canSkip                              IX+18      1   parameter
;text4                                IX+15      3   parameter
;text3                                IX+12      3   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "text_AskQuestion4",168,"_text_AskQuestion4"
	SEGMENT STRSECT
L__41:
	DB	">"
	DB	0
L__51:
	DB	">"
	DB	0
L__55:
	DB	">"
	DB	0
	SEGMENT CODE
;  169	int text_AskQuestion6(char text1[], char text2[], char text3[], char text4[], char text5[], char text6[]) {
_text_AskQuestion6:
.DEFINE "_text_AskQuestion6"

.VALUE _text_AskQuestion6

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "text_AskQuestion6",169,"_text_AskQuestion6"

.LINE 169

.DEFINE "text1"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "text2"

.CLASS 65

.VALUE 9

.TYPE 34

.ENDEF

.DEFINE "text3"

.CLASS 65

.VALUE 12

.TYPE 34

.ENDEF

.DEFINE "text4"

.CLASS 65

.VALUE 15

.TYPE 34

.ENDEF

.DEFINE "text5"

.CLASS 65

.VALUE 18

.TYPE 34

.ENDEF

.DEFINE "text6"

.CLASS 65

.VALUE 21

.TYPE 34

.ENDEF

.DEFINE "tv1"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

.DEFINE "tv2"

.CLASS 65

.VALUE -2

.TYPE 2

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  170		int8_t tv1, tv2;
;  171		tv1 = 0;
.LINE 171

	LD	(IX+-1),0
;  172		tv2 = 0;
.LINE 172

	LD	(IX+-2),0
;  173		
;  174		gfx_Blit(gfx_screen);
.LINE 174

	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  175		text_DrawTextBox();
.LINE 175

	CALL	_text_DrawTextBox
;  176	
;  177		gfx_PrintStringXY(">", 25, 160);
.LINE 177

	LD	BC,160
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__63
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  178		gfx_PrintStringXY(text1, 35, 190);
.LINE 178

	LD	BC,190
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  179		gfx_PrintStringXY(text2, 35, 205);
.LINE 179

	LD	BC,205
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  180		gfx_PrintStringXY(text3, 35, 220);
.LINE 180

	LD	BC,220
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  181		gfx_PrintStringXY(text4, 165, 190);
.LINE 181

	LD	BC,190
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  182		gfx_PrintStringXY(text5, 165, 205);
.LINE 182

	LD	BC,205
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  183		gfx_PrintStringXY(text6, 165, 220);
.LINE 183

	LD	BC,220
	PUSH	BC
	LD	BC,165
	PUSH	BC
	LD	BC,(IX+21)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  184	
;  185		gfx_SwapDraw();
.LINE 185

	CALL	_gfx_SwapDraw
;  186		gfx_SetDrawScreen();
.LINE 186

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  187	
;  188		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
.LINE 188

	JR	L_102
L_103:
	CALL	_kb_Scan
L_102:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_103
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_103
;  189		kb_Scan();
.LINE 189

	CALL	_kb_Scan
;  190		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 190

	JR	L_126
L_127:
;  191			kb_Scan();
.LINE 191

	CALL	_kb_Scan
;  192			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
.LINE 192

	LD	A,(16056350)
	AND	A,1
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_125
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_125
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_125
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_126
L_125:
;  193				if ((kb_Data[7] & kb_Up) && tv1 > 0) {
.LINE 193

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_115
	XOR	A,A
	CP	A,(IX+-1)
	JP	P,L_115
;  194					tv1--;
.LINE 194

	DEC	(IX+-1)
;  195				}
L_115:
.LINE 195

;  196				if ((kb_Data[7] & kb_Down) && tv1 < 2) {
.LINE 196

	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_119
	LD	A,(IX+-1)
	CP	A,2
	JP	P,L_119
;  197					tv1++;
.LINE 197

	INC	(IX+-1)
;  198				}
L_119:
.LINE 198

;  199				if ((kb_Data[7] & kb_Left) && tv2 > 0) {
.LINE 199

	LD	A,(16056350)
	AND	A,2
	JR	Z,L_123
	XOR	A,A
	CP	A,(IX+-2)
	JP	P,L_123
;  200					tv2--;
.LINE 200

	DEC	(IX+-2)
;  201				}
L_123:
.LINE 201

;  202				if ((kb_Data[7] & kb_Right) && tv2 < 1) {
.LINE 202

	LD	A,(16056350)
	AND	A,4
	JR	Z,L_124
	LD	A,(IX+-2)
	CP	A,1
	JP	P,L_124
;  203					tv2++;
.LINE 203

	INC	(IX+-2)
;  204				}
L_124:
.LINE 204

;  205				gfx_FillRectangle(24, 185, 10, 45);
.LINE 205

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  206				gfx_FillRectangle(154, 185, 10, 45);
.LINE 206

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,154
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  207				gfx_PrintStringXY(">", 25 + tv2 * 130, 190 + 15 * tv1);
.LINE 207

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,130
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,L__78
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  208				Wait(20);
.LINE 208

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  209			}
;  210		}
L_126:
.LINE 210

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_133
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_127
L_133:
;  211		if (kb_Data[6] & kb_Clear) {
.LINE 211

	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_129
	JR	L_134
;  212			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_130:
.LINE 212

	CALL	_kb_Scan
L_129:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_130
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_130
;  213			return(0);
.LINE 213

	OR	A,A
	SBC	HL,HL
	JR	L_139
;  214		}
L_134:
.LINE 214

;  215		gfx_SetDrawBuffer();
.LINE 215

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  216		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
.LINE 216

	JR	L_136
L_137:
	CALL	_kb_Scan
L_136:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_137
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_137
;  217		return (tv1 + 1 + 3 * tv2);
.LINE 217

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  218	}
L_139:
.LINE 218

	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_AskQuestion6 ***************************
;Name                         Addr/Register   Size   Type
;_Wait                               IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;G_4                                   IX-3      1   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable
;text6                                IX+21      3   parameter
;text5                                IX+18      3   parameter
;text4                                IX+15      3   parameter
;text3                                IX+12      3   parameter
;text2                                 IX+9      3   parameter
;text1                                 IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "text_AskQuestion6",218,"_text_AskQuestion6"
	SEGMENT STRSECT
L__63:
	DB	">"
	DB	0
L__78:
	DB	">"
	DB	0
	SEGMENT CODE
;  219	void text_DrawTextBox(void) {
_text_DrawTextBox:
.DEFINE "_text_DrawTextBox"

.VALUE _text_DrawTextBox

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "text_DrawTextBox",219,"_text_DrawTextBox"

.LINE 219

.DEFINE "points"

.CLASS 65

.VALUE -48

.DIM 16

.TYPE 100

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-48
	LD	SP,HL
;  220		if (textBoxType == 0) {
.LINE 220

	LD	HL,(_textBoxType)
	CALL	__icmpzero
	JR	NZ,L_146
;  221			int points[16] = { 4,188,  12,180,  307,180,  315,188,  315,227,  307,235,  12,235,  4,227,};
.LINE 221

	LEA	DE,IX+-48
	LD	HL,_2temp140
	LD	BC,48
	LDIR	
;  222			gfx_SetColor(colors[13]);
.LINE 222

	LD	HL,_colors+13
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  223			gfx_Polygon_NoClip(points, 8);
.LINE 223

	LD	BC,8
	PUSH	BC
	PEA	IX+-48
	CALL	_gfx_Polygon_NoClip
	POP	BC
	POP	BC
;  224			gfx_SetColor(colors[0]);
.LINE 224

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  225			gfx_FillTriangle_NoClip(5, 188, 12, 181, 12, 188);
.LINE 225

	LD	BC,188
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  226			gfx_FillTriangle_NoClip(314, 188, 307, 181, 307, 188);
.LINE 226

	LD	BC,188
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,314
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  227			gfx_FillTriangle_NoClip(5, 227, 12, 234, 12, 227);
.LINE 227

	LD	BC,227
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,234
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,227
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  228			gfx_FillTriangle_NoClip(314, 227, 307, 234, 307, 227);
.LINE 228

	LD	BC,227
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,234
	PUSH	BC
	LD	BC,307
	PUSH	BC
	LD	BC,227
	PUSH	BC
	LD	BC,314
	PUSH	BC
	CALL	_gfx_FillTriangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  229			gfx_FillRectangle_NoClip(12, 181, 296, 54);
.LINE 229

	LD	BC,54
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  230			gfx_FillRectangle_NoClip(5, 188, 8, 40);
.LINE 230

	LD	BC,40
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  231			gfx_FillRectangle_NoClip(307, 188, 8, 40);
.LINE 231

	LD	BC,40
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,188
	PUSH	BC
	LD	BC,307
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  232	
;  233		}
;  234		else if (textBoxType == 1) {
.LINE 234

	JR	L_147
L_146:
	LD	BC,1
	LD	HL,(_textBoxType)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_144
;  235			gfx_SetColor(colors[14]);
.LINE 235

	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  236			gfx_Rectangle_NoClip(0, 176, 320, 64);
.LINE 236

	LD	BC,64
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  237			gfx_Rectangle_NoClip(1, 177, 318, 62);
.LINE 237

	LD	BC,62
	PUSH	BC
	LD	BC,318
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  238			gfx_Rectangle_NoClip(2, 178, 316, 60);
.LINE 238

	LD	BC,60
	PUSH	BC
	LD	BC,316
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  239			gfx_SetColor(colors[15]);
.LINE 239

	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  240			gfx_Rectangle_NoClip(3, 179, 314, 58);
.LINE 240

	LD	BC,58
	PUSH	BC
	LD	BC,314
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  241			gfx_Rectangle_NoClip(4, 180, 312, 56);
.LINE 241

	LD	BC,56
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  242			gfx_Rectangle_NoClip(5, 181, 310, 54);
.LINE 242

	LD	BC,54
	PUSH	BC
	LD	BC,310
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  243			gfx_SetColor(colors[16]);
.LINE 243

	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  244			gfx_Rectangle_NoClip(6, 182, 308, 52);
.LINE 244

	LD	BC,52
	PUSH	BC
	LD	BC,308
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  245			gfx_Rectangle_NoClip(7, 183, 306, 50);
.LINE 245

	LD	BC,50
	PUSH	BC
	LD	BC,306
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  246			gfx_SetColor(colors[0]);
.LINE 246

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  247			gfx_FillRectangle_NoClip(8, 184, 304, 48);
.LINE 247

	LD	BC,48
	PUSH	BC
	LD	BC,304
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  248		}
;  249		else if (textBoxType == 2) {
.LINE 249

	JR	L_147
L_144:
	LD	BC,2
	LD	HL,(_textBoxType)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_142
;  250			gfx_SetColor(colors[14]);
.LINE 250

	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  251			gfx_Rectangle_NoClip(0, 176, 255, 64);
.LINE 251

	LD	BC,64
	PUSH	BC
	LD	BC,255
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  252			gfx_Rectangle_NoClip(1, 177, 253, 62);
.LINE 252

	LD	BC,62
	PUSH	BC
	LD	BC,253
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  253			gfx_Rectangle_NoClip(2, 178, 251, 60);
.LINE 253

	LD	BC,60
	PUSH	BC
	LD	BC,251
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  254			gfx_SetColor(colors[15]);
.LINE 254

	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  255			gfx_Rectangle_NoClip(3, 179, 249, 58);
.LINE 255

	LD	BC,58
	PUSH	BC
	LD	BC,249
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  256			gfx_Rectangle_NoClip(4, 180, 247, 56);
.LINE 256

	LD	BC,56
	PUSH	BC
	LD	BC,247
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  257			gfx_Rectangle_NoClip(5, 181, 245, 54);
.LINE 257

	LD	BC,54
	PUSH	BC
	LD	BC,245
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  258			gfx_SetColor(colors[16]);
.LINE 258

	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  259			gfx_Rectangle_NoClip(6, 182, 243, 52);
.LINE 259

	LD	BC,52
	PUSH	BC
	LD	BC,243
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  260			gfx_Rectangle_NoClip(7, 183, 241, 50);
.LINE 260

	LD	BC,50
	PUSH	BC
	LD	BC,241
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  261			gfx_SetColor(colors[0]);
.LINE 261

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  262			gfx_FillRectangle_NoClip(8, 184, 239, 48);
.LINE 262

	LD	BC,48
	PUSH	BC
	LD	BC,239
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  263	
;  264			gfx_SetColor(colors[14]);
.LINE 264

	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  265			gfx_Rectangle_NoClip(255, 176, 66, 64);
.LINE 265

	LD	BC,64
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,255
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  266			gfx_Rectangle_NoClip(256, 177, 64, 62);
.LINE 266

	LD	BC,62
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  267			gfx_Rectangle_NoClip(257, 178, 62, 60);
.LINE 267

	LD	BC,60
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,257
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  268			gfx_SetColor(colors[15]);
.LINE 268

	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  269			gfx_Rectangle_NoClip(258, 179, 60, 58);
.LINE 269

	LD	BC,58
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,258
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  270			gfx_Rectangle_NoClip(259, 180, 58, 56);
.LINE 270

	LD	BC,56
	PUSH	BC
	LD	BC,58
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,259
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  271			gfx_Rectangle_NoClip(260, 181, 56, 54);
.LINE 271

	LD	BC,54
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,260
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  272			gfx_SetColor(colors[16]);
.LINE 272

	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  273			gfx_Rectangle_NoClip(261, 182, 54, 52);
.LINE 273

	LD	BC,52
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,261
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  274			gfx_Rectangle_NoClip(262, 183, 52, 50);
.LINE 274

	LD	BC,50
	PUSH	BC
	LD	BC,52
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,262
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  275			gfx_SetColor(colors[0]);
.LINE 275

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  276			gfx_FillRectangle_NoClip(263, 184, 50, 48);
.LINE 276

	LD	BC,48
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  277		}
;  278		else {
.LINE 278

	JR	L_147
L_142:
;  279			gfx_SetColor(colors[14]);
.LINE 279

	LD	HL,_colors+14
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  280			gfx_Rectangle_NoClip(0, 176, 320, 64);
.LINE 280

	LD	BC,64
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,176
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  281			gfx_Rectangle_NoClip(1, 177, 318, 62);
.LINE 281

	LD	BC,62
	PUSH	BC
	LD	BC,318
	PUSH	BC
	LD	BC,177
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  282			gfx_Rectangle_NoClip(2, 178, 316, 60);
.LINE 282

	LD	BC,60
	PUSH	BC
	LD	BC,316
	PUSH	BC
	LD	BC,178
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  283			gfx_SetColor(colors[15]);
.LINE 283

	LD	HL,_colors+15
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  284			gfx_Rectangle_NoClip(3, 179, 314, 58);
.LINE 284

	LD	BC,58
	PUSH	BC
	LD	BC,314
	PUSH	BC
	LD	BC,179
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  285			gfx_Rectangle_NoClip(4, 180, 312, 56);
.LINE 285

	LD	BC,56
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,180
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  286			gfx_Rectangle_NoClip(5, 181, 310, 54);
.LINE 286

	LD	BC,54
	PUSH	BC
	LD	BC,310
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  287			gfx_SetColor(colors[16]);
.LINE 287

	LD	HL,_colors+16
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  288			gfx_Rectangle_NoClip(6, 182, 308, 52);
.LINE 288

	LD	BC,52
	PUSH	BC
	LD	BC,308
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  289			gfx_Rectangle_NoClip(7, 183, 306, 50);
.LINE 289

	LD	BC,50
	PUSH	BC
	LD	BC,306
	PUSH	BC
	LD	BC,183
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_gfx_Rectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  290			gfx_SetColor(colors[0]);
.LINE 290

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  291			gfx_FillRectangle_NoClip(8, 184, 304, 48);
.LINE 291

	LD	BC,48
	PUSH	BC
	LD	BC,304
	PUSH	BC
	LD	BC,184
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  292		}
L_147:
.LINE 292

;  293		gfx_SetColor(colors[0]);
.LINE 293

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  294	}
.LINE 294

	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_DrawTextBox ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Rectangle_NoClip               IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_FillTriangle_NoClip            IMPORT  -----   function
;_gfx_Polygon_NoClip                 IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;_2temp140                           STATIC     48   variable
;_textBoxType                        STATIC      3   variable
;points                               IX-48     48   variable


; Stack Frame Size: 54 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "text_DrawTextBox",294,"_text_DrawTextBox"
	SEGMENT TEXT
_2temp140:
	DW	4
	DB	0
	DW	188
	DB	0
	DW	12
	DB	0
	DW	180
	DB	0
	DW	307
	DB	0
	DW	180
	DB	0
	DW	315
	DB	0
	DW	188
	DB	0
	DW	315
	DB	0
	DW	227
	DB	0
	DW	307
	DB	0
	DW	235
	DB	0
	DW	12
	DB	0
	DW	235
	DB	0
	DW	4
	DB	0
	DW	227
	DB	0
	SEGMENT DATA
_text_status2:
	DB	97
	DB	116
	DB	116
	DB	97
	DB	99
	DB	107
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	100
	DB	101
	DB	102
	DB	101
	DB	110
	DB	99
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	115
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	32
	DB	97
	DB	116
	DB	116
	DB	97
	DB	99
	DB	107
	DB	0
	DB	0
	DB	115
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	32
	DB	100
	DB	101
	DB	102
	DB	101
	DB	110
	DB	99
	DB	101
	DB	0
	DB	115
	DB	112
	DB	101
	DB	101
	DB	100
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	97
	DB	99
	DB	99
	DB	117
	DB	114
	DB	97
	DB	99
	DB	121
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	101
	DB	118
	DB	97
	DB	115
	DB	105
	DB	118
	DB	101
	DB	110
	DB	101
	DB	115
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
.DEFINE "text_status2"
.ALIAS "_text_status2"
.CLASS 69
.VALUE _text_status2
.DIM 7
.DIM 16
.TYPE 866
.ENDEF
_text_movecategories:
	DB	80
	DB	104
	DB	121
	DB	115
	DB	105
	DB	99
	DB	97
	DB	108
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	112
	DB	101
	DB	99
	DB	105
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	116
	DB	97
	DB	116
	DB	117
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	80
	DB	104
	DB	121
	DB	115
	DB	105
	DB	99
	DB	97
	DB	108
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	79
	DB	116
	DB	104
	DB	101
	DB	114
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
.DEFINE "text_movecategories"
.ALIAS "_text_movecategories"
.CLASS 69
.VALUE _text_movecategories
.DIM 18
.DIM 10
.TYPE 866
.ENDEF
	XREF _colors:ROM
	XREF _Wait:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_GetTextY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintChar:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillTriangle_NoClip:ROM
	XREF _gfx_Polygon_NoClip:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle_NoClip:ROM
	XREF _gfx_SetColor:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _text_movecategories
	XDEF _text_status2
	XDEF _text_DrawTextBox
	XDEF _text_AskQuestion6
	XDEF _text_AskQuestion4
	XDEF _text_AskQuestion2
	XDEF _text_Display
	XDEF _lastTextIndex
	XDEF _textBoxType
	XDEF _delaytime
;  295	
;  296	
;  297	/* Text Varaibles*/
;  298	
;  299	char text_status2[7][16] = { "attack","defence","special attack","special defence","speed","accuracy","evasiveness" };
	END
