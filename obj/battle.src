; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\BATTLE.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME1"
.TYPE 104
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME7"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME8",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME9"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME10"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME10",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME10"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
.BEGREC "NONAME11",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME11"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME15"
.BEGREC "pokemonData",34
.DEFINE "id"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "moves"
.VALUE 1
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "pp"
.VALUE 5
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "level"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "xp"
.VALUE 10
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "currenthealth"
.VALUE 13
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "currentstatus"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "healthIV"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "attackIV"
.VALUE 17
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "defenceIV"
.VALUE 18
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "specialattackIV"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "specialdefenceIV"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "speedIV"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "healthEV"
.VALUE 22
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attackEV"
.VALUE 24
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "defenceEV"
.VALUE 26
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialattackEV"
.VALUE 28
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialdefenceEV"
.VALUE 30
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "speedEV"
.VALUE 32
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "pokemonData"
.BEGREC "pokemonType",51
.DEFINE "name"
.VALUE 0
.CLASS 8
.DIM 16
.TYPE 98
.ENDEF
.DEFINE "element1"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "element2"
.VALUE 17
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basehealth"
.VALUE 18
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "baseattack"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basedefence"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basespecialattack"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basespecialdefence"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basespeed"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "movelevels"
.VALUE 24
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.DEFINE "moveids"
.VALUE 34
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.DEFINE "evolvelevel"
.VALUE 44
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "evolveid"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "evolvesfrom"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "xpdrop"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "xptype"
.VALUE 49
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "catchrate"
.VALUE 50
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "pokemonType"
.BEGREC "pokemonStats",12
.DEFINE "health"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attack"
.VALUE 2
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "defence"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialattack"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialdefence"
.VALUE 8
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "speed"
.VALUE 10
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "pokemonStats"
.BEGREC "move",21
.DEFINE "name"
.VALUE 0
.CLASS 8
.DIM 14
.TYPE 98
.ENDEF
.DEFINE "element"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "power"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "accuracy"
.VALUE 17
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "uses"
.VALUE 18
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "statustype"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "statuschance"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "move"
.BEGREC "zoneData",640
.DEFINE "spawnids"
.VALUE 0
.CLASS 8
.DIM 5
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "spawnminlevels"
.VALUE 80
.CLASS 8
.DIM 5
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "spawnmaxlevels"
.VALUE 160
.CLASS 8
.DIM 5
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "exitzone"
.VALUE 240
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "exitx"
.VALUE 256
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "exity"
.VALUE 272
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doorzones"
.VALUE 288
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doorx"
.VALUE 304
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doory"
.VALUE 320
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doornpc1"
.VALUE 336
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doornpc2"
.VALUE 352
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainerspawnids"
.VALUE 368
.CLASS 8
.DIM 6
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "trainerspawnlevels"
.VALUE 464
.CLASS 8
.DIM 6
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "trainerx"
.VALUE 560
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainery"
.VALUE 576
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainerdir"
.VALUE 592
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "data_trainerText"
.VALUE 608
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainerreward"
.VALUE 624
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.ENDREC "zoneData"
	SEGMENT TEXT
_statmodvalues:
	DW	25
	DB	0
	DW	29
	DB	0
	DW	33
	DB	0
	DW	40
	DB	0
	DW	50
	DB	0
	DW	67
	DB	0
	DW	100
	DB	0
	DW	150
	DB	0
	DW	200
	DB	0
	DW	250
	DB	0
	DW	300
	DB	0
	DW	350
	DB	0
	DW	400
	DB	0
.DEFINE "statmodvalues"
.ALIAS "_statmodvalues"
.CLASS 84
.VALUE _statmodvalues
.DIM 13
.TYPE 100
.ENDEF
_clearcharacter:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
.DEFINE "clearcharacter"
.ALIAS "_clearcharacter"
.CLASS 84
.VALUE _clearcharacter
.TAG "pokemonData"
.TYPE 8
.ENDEF
	SEGMENT BSS
_currentplayer:
	DS	1
.DEFINE "currentplayer"
.ALIAS "_currentplayer"
.CLASS 83
.VALUE _currentplayer
.TYPE 12
.ENDEF
_currentenemy:
	DS	1
.DEFINE "currentenemy"
.ALIAS "_currentenemy"
.CLASS 83
.VALUE _currentenemy
.TYPE 12
.ENDEF
_playername:
	DS	20
.DEFINE "playername"
.ALIAS "_playername"
.CLASS 83
.VALUE _playername
.DIM 20
.TYPE 98
.ENDEF
_enemyname:
	DS	20
.DEFINE "enemyname"
.ALIAS "_enemyname"
.CLASS 83
.VALUE _enemyname
.DIM 20
.TYPE 98
.ENDEF
_playerSprite:
	DS	3
.DEFINE "playerSprite"
.ALIAS "_playerSprite"
.CLASS 83
.VALUE _playerSprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_enemySprite:
	DS	3
.DEFINE "enemySprite"
.ALIAS "_enemySprite"
.CLASS 83
.VALUE _enemySprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_backgroundSprite:
	DS	3
.DEFINE "backgroundSprite"
.ALIAS "_backgroundSprite"
.CLASS 83
.VALUE _backgroundSprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_hpBarSprite:
	DS	3
.DEFINE "hpBarSprite"
.ALIAS "_hpBarSprite"
.CLASS 83
.VALUE _hpBarSprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_statusSprites:
	DS	15
.DEFINE "statusSprites"
.ALIAS "_statusSprites"
.CLASS 83
.VALUE _statusSprites
.DIM 5
.TAG "NONAME11"
.TYPE 360
.ENDEF
_enemyparty:
	DS	204
.DEFINE "enemyparty"
.ALIAS "_enemyparty"
.CLASS 83
.VALUE _enemyparty
.DIM 6
.TAG "pokemonData"
.TYPE 104
.ENDEF
	SEGMENT DATA
_attackturn:
	DB	0
.DEFINE "attackturn"
.ALIAS "_attackturn"
.CLASS 69
.VALUE _attackturn
.TYPE 12
.ENDEF
	SEGMENT BSS
_chosenmove:
	DS	2
.DEFINE "chosenmove"
.ALIAS "_chosenmove"
.CLASS 83
.VALUE _chosenmove
.DIM 2
.TYPE 108
.ENDEF
_wild:
	DS	1
.DEFINE "wild"
.ALIAS "_wild"
.CLASS 83
.VALUE _wild
.TYPE 12
.ENDEF
_stats:
	DS	24
.DEFINE "stats"
.ALIAS "_stats"
.CLASS 83
.VALUE _stats
.DIM 2
.TAG "pokemonStats"
.TYPE 104
.ENDEF
_currentStatusPointer:
	DS	6
.DEFINE "currentStatusPointer"
.ALIAS "_currentStatusPointer"
.CLASS 83
.VALUE _currentStatusPointer
.DIM 2
.TYPE 364
.ENDEF
_statmods:
	DS	14
.DEFINE "statmods"
.ALIAS "_statmods"
.CLASS 83
.VALUE _statmods
.DIM 2
.DIM 7
.TYPE 876
.ENDEF
_confusedturns:
	DS	2
.DEFINE "confusedturns"
.ALIAS "_confusedturns"
.CLASS 83
.VALUE _confusedturns
.DIM 2
.TYPE 108
.ENDEF
_leech:
	DS	2
.DEFINE "leech"
.ALIAS "_leech"
.CLASS 83
.VALUE _leech
.DIM 2
.TYPE 108
.ENDEF
_trapturns:
	DS	2
.DEFINE "trapturns"
.ALIAS "_trapturns"
.CLASS 83
.VALUE _trapturns
.DIM 2
.TYPE 108
.ENDEF
_reflectturns:
	DS	2
.DEFINE "reflectturns"
.ALIAS "_reflectturns"
.CLASS 83
.VALUE _reflectturns
.DIM 2
.TYPE 108
.ENDEF
_lightscreenturns:
	DS	2
.DEFINE "lightscreenturns"
.ALIAS "_lightscreenturns"
.CLASS 83
.VALUE _lightscreenturns
.DIM 2
.TYPE 108
.ENDEF
_mistturns:
	DS	2
.DEFINE "mistturns"
.ALIAS "_mistturns"
.CLASS 83
.VALUE _mistturns
.DIM 2
.TYPE 108
.ENDEF
_flinch:
	DS	2
.DEFINE "flinch"
.ALIAS "_flinch"
.CLASS 83
.VALUE _flinch
.DIM 2
.TYPE 108
.ENDEF
_highcritratio:
	DS	2
.DEFINE "highcritratio"
.ALIAS "_highcritratio"
.CLASS 83
.VALUE _highcritratio
.DIM 2
.TYPE 108
.ENDEF
_rage:
	DS	2
.DEFINE "rage"
.ALIAS "_rage"
.CLASS 83
.VALUE _rage
.DIM 2
.TYPE 108
.ENDEF
_disabledmove:
	DS	2
.DEFINE "disabledmove"
.ALIAS "_disabledmove"
.CLASS 83
.VALUE _disabledmove
.DIM 2
.TYPE 108
.ENDEF
_disabledturns:
	DS	2
.DEFINE "disabledturns"
.ALIAS "_disabledturns"
.CLASS 83
.VALUE _disabledturns
.DIM 2
.TYPE 108
.ENDEF
_lastmove:
	DS	2
.DEFINE "lastmove"
.ALIAS "_lastmove"
.CLASS 83
.VALUE _lastmove
.DIM 2
.TYPE 108
.ENDEF
_attackturns:
	DS	2
.DEFINE "attackturns"
.ALIAS "_attackturns"
.CLASS 83
.VALUE _attackturns
.DIM 2
.TYPE 108
.ENDEF
_air:
	DS	2
.DEFINE "air"
.ALIAS "_air"
.CLASS 83
.VALUE _air
.DIM 2
.TYPE 108
.ENDEF
_run:
	DS	1
.DEFINE "run"
.ALIAS "_run"
.CLASS 83
.VALUE _run
.TYPE 12
.ENDEF
	SEGMENT DATA
_battleMenuState1:
	DB	0
.DEFINE "battleMenuState1"
.ALIAS "_battleMenuState1"
.CLASS 69
.VALUE _battleMenuState1
.TYPE 12
.ENDEF
_battleMenuState2:
	DB	0
.DEFINE "battleMenuState2"
.ALIAS "_battleMenuState2"
.CLASS 69
.VALUE _battleMenuState2
.TYPE 12
.ENDEF
_battleMenuCurrent:
	DB	1
.DEFINE "battleMenuCurrent"
.ALIAS "_battleMenuCurrent"
.CLASS 69
.VALUE _battleMenuCurrent
.TYPE 12
.ENDEF
	SEGMENT TEXT
_statuscolors:
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
.DEFINE "statuscolors"
.ALIAS "_statuscolors"
.CLASS 84
.VALUE _statuscolors
.DIM 5
.TYPE 108
.ENDEF
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <fileioc.h>
;   12	#include <debug.h>
;   13	#include <compression.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "text.h"
;   21	#include "savegame.h"
;   22	#include "stats.h"
;   23	#include "gfx/battle_gfx.h"
;   24	#include "items.h"
;   25	
;   26	#include "gfx/PKMNSD0.h"
;   27	#include "gfx/PKMNSD1.h"
;   28	#include "gfx/PKMNSD2.h"
;   29	#include "gfx/PKMNSD3.h"
;   30	#include "gfx/PKMNSD5.h"
;   31	
;   32	void SetupBattleGfx(void);
;   33	
;   34	bool playerturn(void);
;   35	bool enemyturn(void);
;   36	int selectMove(void);
;   37	void redrawcharacters(void);
;   38	void attack(bool player, uint8_t move);
;   39	
;   40	uint8_t CalculateXpPercent(void);
;   41	void applystatus(bool player);
;   42	void resetstatus(bool player);
;   43	void takedamage(bool player, int amount);
;   44	void heal(bool player, int amount);
;   45	
;   46	void addxp(void);
;   47	bool capture(uint8_t ball);
;   48	
;   49	
;   50	const int statmodvalues[] = { 25,29,33,40,50,67,100,150,200,250,300,350,400 };
;   51	const struct pokemonData clearcharacter = { 0 };
;   52	
;   53	uint8_t currentplayer;
;   54	uint8_t currentenemy;
;   55	
;   56	char playername[20];
;   57	char enemyname[20];
;   58	
;   59	gfx_sprite_t *playerSprite;
;   60	gfx_sprite_t *enemySprite;
;   61	
;   62	gfx_sprite_t *backgroundSprite;
;   63	gfx_sprite_t *hpBarSprite;
;   64	gfx_sprite_t *statusSprites[5];
;   65	
;   66	struct pokemonData enemyparty[6];
;   67	uint8_t attackturn = 0;
;   68	uint8_t chosenmove[2];
;   69	bool wild;
;   70	
;   71	struct pokemonStats stats[2];
;   72	uint8_t *currentStatusPointer[2];
;   73	uint8_t statmods[2][7];
;   74	
;   75	uint8_t confusedturns[2];
;   76	bool leech[2];
;   77	uint8_t trapturns[2];
;   78	uint8_t reflectturns[2];
;   79	uint8_t lightscreenturns[2];
;   80	uint8_t mistturns[2];
;   81	bool flinch[2];
;   82	bool highcritratio[2];
;   83	bool rage[2];
;   84	
;   85	uint8_t disabledmove[2];
;   86	uint8_t disabledturns[2];
;   87	uint8_t lastmove[2];
;   88	uint8_t attackturns[2];
;   89	bool air[2];
;   90	bool run;
;   91	
;   92	uint8_t battleMenuState1 = 0;
;   93	uint8_t battleMenuState2 = 0;
;   94	uint8_t battleMenuCurrent = 1;
;   95	
;   96	const uint8_t statuscolors[5] = { 2,3,4,5,6 };
	SEGMENT CODE
;   97	
;   98	void battle_Initialize(void) {
_battle_Initialize:
.DEFINE "_battle_Initialize"

.VALUE _battle_Initialize

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_Initialize",98,"_battle_Initialize"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   99		PKMNSD0_init();
.LINE 99

	CALL	_PKMNSD0_init
;  100		PKMNSD1_init();
.LINE 100

	CALL	_PKMNSD1_init
;  101		PKMNSD2_init();
.LINE 101

	CALL	_PKMNSD2_init
;  102		PKMNSD3_init();
.LINE 102

	CALL	_PKMNSD3_init
;  103		PKMNSD5_init();
.LINE 103

	CALL	_PKMNSD5_init
;  104	}
.LINE 104

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD5_init                       IMPORT  -----   function
;_PKMNSD3_init                       IMPORT  -----   function
;_PKMNSD2_init                       IMPORT  -----   function
;_PKMNSD1_init                       IMPORT  -----   function
;_PKMNSD0_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "battle_Initialize",104,"_battle_Initialize"
;  105	void battle_Setup(void) {
_battle_Setup:
.DEFINE "_battle_Setup"

.VALUE _battle_Setup

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_Setup",105,"_battle_Setup"

.LINE 105

.DEFINE "pokemonIndex"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-30
	LD	SP,HL
;  106		int pokemonIndex;
;  107		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {//This makes sure the pokemon sent out has not fainted
.LINE 107

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
;  108			if (party[pokemonIndex].currenthealth != 0 && party[pokemonIndex].id != 0) {
.LINE 108

	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_5
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_5
;  109				currentplayer = pokemonIndex;
.LINE 109

	LD	A,(IX+-3)
	LD	(_currentplayer),A
;  110				pokemonIndex = 6;
.LINE 110

	LD	BC,6
	LD	(IX+-3),BC
;  111			}
;  112		}
L_5:
.LINE 112

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_4
;  113		
;  114		SetupBattleGfx();
.LINE 114

	CALL	_SetupBattleGfx
;  115	
;  116		battleMenuState1 = 0;
.LINE 116

	XOR	A,A
	LD	(_battleMenuState1),A
;  117		battleMenuState2 = 0;
.LINE 117

	XOR	A,A
	LD	(_battleMenuState2),A
;  118		battleMenuCurrent = 1;
.LINE 118

	LD	A,1
	LD	(_battleMenuCurrent),A
;  119	
;  120		stats[0] = stats_CalculateStats(enemyparty[0]);
.LINE 120

	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LD	HL,_enemyparty
	LD	BC,34
	LDIR	
	PEA	IX+-18
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats
	LD	BC,12
	LDIR	
;  121		stats[1] = stats_CalculateStats(party[0]);
.LINE 121

	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LD	HL,_party
	LD	BC,34
	LDIR	
	PEA	IX+-30
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
;  122		currentenemy = 0;
.LINE 122

	XOR	A,A
	LD	(_currentenemy),A
;  123		attackturn = 0;
.LINE 123

	XOR	A,A
	LD	(_attackturn),A
;  124	
;  125		playerSprite = gfx_MallocSprite(56, 56);
.LINE 125

	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_playerSprite),HL
;  126		enemySprite = gfx_MallocSprite(56, 56);
.LINE 126

	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_enemySprite),HL
;  127	
;  128		resetstatus(true);
.LINE 128

	LD	BC,1
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  129		resetstatus(false);
.LINE 129

	LD	BC,0
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  130	
;  131		run = false;
.LINE 131

	XOR	A,A
	LD	(_run),A
;  132	}
.LINE 132

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Setup ***************************
;Name                         Addr/Register   Size   Type
;_run                                STATIC      1   variable
;_resetstatus                        IMPORT  -----   function
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_attackturn                         STATIC      1   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_enemyparty                         STATIC    204   variable
;_stats_CalculateStats               IMPORT  -----   function
;_battleMenuCurrent                  STATIC      1   variable
;_battleMenuState2                   STATIC      1   variable
;_battleMenuState1                   STATIC      1   variable
;_SetupBattleGfx                     IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;G_0                                   IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "battle_Setup",132,"_battle_Setup"
;  133	void SetupBattleGfx(void) {
_SetupBattleGfx:
.DEFINE "_SetupBattleGfx"

.VALUE _SetupBattleGfx

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "SetupBattleGfx",133,"_SetupBattleGfx"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  134		zx7_Decompress(textBoxSprite1, battletextbox1_compressed);
.LINE 134

	LD	HL,_PKMNSD5+6
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  135		zx7_Decompress(textBoxSprite2, battletextbox2_compressed);
.LINE 135

	LD	HL,_PKMNSD5+9
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  136		backgroundSprite = gfx_MallocSprite(160, 88);
.LINE 136

	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_backgroundSprite),HL
;  137		zx7_Decompress(backgroundSprite, background_compressed);
.LINE 137

	LD	HL,_PKMNSD5+105
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  138		hpBarSprite = gfx_MallocSprite(98, 10);
.LINE 138

	LD	BC,_malloc
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,98
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_hpBarSprite),HL
;  139		zx7_Decompress(hpBarSprite, hpbar_compressed);
.LINE 139

	LD	HL,_PKMNSD5+108
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  140	
;  141		MallocIcons();
.LINE 141

	CALL	_MallocIcons
;  142	
;  143		SetColors(1);
.LINE 143

	LD	BC,1
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  144		gfx_FillScreen(colors[0]);
.LINE 144

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  145		gfx_SetPalette(battle_gfx_pal, sizeof_battle_gfx_pal, 0);
.LINE 145

	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	HL,_PKMNSD5+111
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  146		gfx_SwapDraw();
.LINE 146

	CALL	_gfx_SwapDraw
;  147		gfx_SetTextScale(1, 1);
.LINE 147

	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  148		gfx_SetTextFGColor(colors[1]);
.LINE 148

	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  149		gfx_SetColor(colors[0]);
.LINE 149

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  150	}
.LINE 150

	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetupBattleGfx ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_MallocIcons                        IMPORT  -----   function
;_hpBarSprite                        STATIC      3   variable
;_backgroundSprite                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "SetupBattleGfx",150,"_SetupBattleGfx"
;  151	int battle_Loop(void) {
_battle_Loop:
.DEFINE "_battle_Loop"

.VALUE _battle_Loop

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "battle_Loop",151,"_battle_Loop"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	PUSH	BC
;  152		/* Battle */
;  153		redrawcharacters();
.LINE 153

	CALL	_redrawcharacters
;  154		/* Switch to a new poketmon or lose battle if health is 0 */
;  155		if (party[currentplayer].currenthealth == 0) {
.LINE 155

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_26
;  156			sprintf(str, "%s fainted", playername);
.LINE 156

	LD	BC,_playername
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  157			text_Display(str, false);
.LINE 157

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  158			attackturn = 0;
.LINE 158

	XOR	A,A
	LD	(_attackturn),A
;  159	
;  160			i = 0;
.LINE 160

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  161			while (i < 6) {
.LINE 161

	JR	L_14
L_15:
;  162				if (party[i].currenthealth != 0 && party[i].id != 0) {
.LINE 162

	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_13
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_13
;  163					currentplayer = i;
.LINE 163

	LD	A,(_i)
	LD	(_currentplayer),A
;  164					resetstatus(true);
.LINE 164

	LD	BC,1
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  165					return 1;
.LINE 165

	LD	HL,1
	JR	L_46
;  166				}
L_13:
.LINE 166

;  167				i++;
.LINE 167

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  168			}
L_14:
.LINE 168

	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_15
;  169	
;  170			map_LoseFight();
.LINE 170

	CALL	_map_LoseFight
;  171			return 0;
.LINE 171

	OR	A,A
	SBC	HL,HL
	JR	L_46
;  172		}
L_26:
.LINE 172

;  173		if (enemyparty[currentenemy].currenthealth == 0) {
.LINE 173

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_44
;  174			sprintf(str, "%s fainted", enemyname);
.LINE 174

	LD	BC,_enemyname
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  175			text_Display(str, false);
.LINE 175

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  176			addxp();
.LINE 176

	CALL	_addxp
;  177			attackturn = 0;
.LINE 177

	XOR	A,A
	LD	(_attackturn),A
;  178	
;  179			i = 0;
.LINE 179

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  180			while (i < 6) {
.LINE 180

	JR	L_22
L_23:
;  181				if (enemyparty[i].currenthealth != 0 && enemyparty[i].id != 0) {
.LINE 181

	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_21
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_21
;  182					currentenemy = i;
.LINE 182

	LD	A,(_i)
	LD	(_currentenemy),A
;  183					resetstatus(false);
.LINE 183

	LD	BC,0
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  184					return 1;
.LINE 184

	LD	HL,1
	JR	L_46
;  185				}
L_21:
.LINE 185

;  186				i++;
.LINE 186

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  187			}
L_22:
.LINE 187

	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_23
;  188	
;  189			
;  190			map_WinFight(wild, enemyparty[0].level * 40);
.LINE 190

	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
;  191			return 0;
.LINE 191

	OR	A,A
	SBC	HL,HL
	JR	L_46
;  192		}
L_44:
.LINE 192

;  193		/* If 0 determine who attacks first, if 1 or 2 let other character attack, if 3 do end of turn stuff */
;  194		if (attackturn == 0) {
.LINE 194

	LD	A,(_attackturn)
	OR	A,A
	JR	NZ,L_43
;  195			while (!playerturn()) {};
L_28:
.LINE 195

	CALL	_playerturn
	OR	A,A
	JR	Z,L_28
;  196			while (!enemyturn()) {};
L_31:
.LINE 196

	CALL	_enemyturn
	OR	A,A
	JR	Z,L_31
;  197			if (run) {
.LINE 197

	LD	A,(_run)
	OR	A,A
	JR	Z,L_36
;  198				return 0;
.LINE 198

	OR	A,A
	SBC	HL,HL
	JR	L_46
;  199			}
L_36:
.LINE 199

;  200			/* Paralysis gets a speed reduction */
;  201			if ((stats[0].speed / (1+(((*currentStatusPointer[0]) == 4) * 3))) > (stats[1].speed / (1 + (((*currentStatusPointer[1]) == 4) * 3)))) {
.LINE 201

	LD	IY,_stats
	LD	BC,(IY+22)
	CALL	__stoiu
	LD	DE,HL
	LD	HL,_currentStatusPointer+3
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__21
	LD	B,1
	JR	L__22
L__21:
	LD	B,0
L__22:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	LD	BC,(_stats+10)
	CALL	__stoiu
	LD	(IX+-9),HL
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__24
	LD	B,1
	JR	L__25
L__24:
	LD	B,0
L__25:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,(IX+-9)
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_35
;  202				attack(false, chosenmove[false]);
.LINE 202

	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  203				attackturn = 1;
.LINE 203

	LD	A,1
	LD	(_attackturn),A
;  204			}
;  205			else {
.LINE 205

	JR	L_45
L_35:
;  206				attack(true, chosenmove[true]);
.LINE 206

	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  207				
;  208				attackturn = 2;
.LINE 208

	LD	A,2
	LD	(_attackturn),A
;  209			}
;  210		}
;  211		else if(attackturn < 3) {
.LINE 211

	JR	L_45
L_43:
	LD	A,(_attackturn)
	CP	A,3
	JR	NC,L_41
;  212			if (attackturn == 1) {
.LINE 212

	LD	A,(_attackturn)
	CP	A,1
	JR	NZ,L_39
;  213				attack(true, chosenmove[true]);
.LINE 213

	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  214				attackturn = 3;
.LINE 214

	LD	A,3
	LD	(_attackturn),A
;  215			}
L_39:
.LINE 215

;  216			if (attackturn == 2) {
.LINE 216

	LD	A,(_attackturn)
	CP	A,2
	JR	NZ,L_45
;  217				attack(false, chosenmove[false]);
.LINE 217

	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  218				attackturn = 3;
.LINE 218

	LD	A,3
	LD	(_attackturn),A
;  219			}
;  220		}
;  221		else {
.LINE 221

	JR	L_45
L_41:
;  222			/* After both turns */
;  223			applystatus(true);
.LINE 223

	LD	BC,1
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  224			applystatus(false);
.LINE 224

	LD	BC,0
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  225			flinch[true] = false;
.LINE 225

	LD	HL,_flinch
	INC	HL
	LD	(HL),0
;  226			flinch[false] = false;
.LINE 226

	XOR	A,A
	LD	(_flinch),A
;  227			attackturn = 0;
.LINE 227

	XOR	A,A
	LD	(_attackturn),A
;  228			return 1;
.LINE 228

	LD	HL,1
	JR	L_46
;  229		}
L_45:
.LINE 229

;  230		
;  231	
;  232		return 1;
.LINE 232

	LD	HL,1
;  233	}
L_46:
.LINE 233

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Loop ***************************
;Name                         Addr/Register   Size   Type
;_flinch                             STATIC      2   variable
;_applystatus                        IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_attack                             IMPORT  -----   function
;_currentStatusPointer               STATIC      6   variable
;_stats                              STATIC     24   variable
;_run                                STATIC      1   variable
;_enemyturn                          IMPORT  -----   function
;_playerturn                         IMPORT  -----   function
;_wild                               STATIC      1   variable
;_map_WinFight                       IMPORT  -----   function
;_addxp                              IMPORT  -----   function
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_map_LoseFight                      IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_i                                  IMPORT      2   variable
;_attackturn                         STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playername                         STATIC     20   variable
;_sprintf                            IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_redrawcharacters                   IMPORT  -----   function
;G_4                                   IX-6      3   variable
;G_2                                   IX-3      3   variable


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "battle_Loop",233,"_battle_Loop"
	SEGMENT STRSECT
L__7:
	DB	"%s fainted"
	DB	0
L__12:
	DB	"%s fainted"
	DB	0
	SEGMENT CODE
;  234	
;  235	
;  236	void battle_SpawnWild(uint8_t id, uint8_t minlevel, uint8_t maxlevel) {
_battle_SpawnWild:
.DEFINE "_battle_SpawnWild"

.VALUE _battle_SpawnWild

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_SpawnWild",236,"_battle_SpawnWild"

.LINE 236

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "minlevel"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "maxlevel"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "partyIndex"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-43
	LD	SP,HL
;  237		int partyIndex;
;  238		for(partyIndex = 0; partyIndex < 6; partyIndex++){
.LINE 238

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_50
L_48:
;  239			enemyparty[partyIndex] = clearcharacter;
.LINE 239

	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_clearcharacter
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  240		}
L_50:
.LINE 240

	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_48
;  241		enemyparty[0] = stats_NewCharacter(id,(rand() % (maxlevel-minlevel+1))+minlevel);
.LINE 241

	CALL	_rand
	LD	DE,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	(IX+-40),BC	; spill
	LD	(IX+-43),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-43)	; unspill
	SBC	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__irems
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_enemyparty
	LD	BC,34
	LDIR	
;  242		wild = true;
.LINE 242

	LD	A,1
	LD	(_wild),A
;  243	}
.LINE 243

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnWild ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats_NewCharacter                 IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_clearcharacter                     STATIC     34   variable
;partyIndex                            IX-3      3   variable
;maxlevel                             IX+12      1   parameter
;minlevel                              IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 58 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "battle_SpawnWild",243,"_battle_SpawnWild"
;  244	void battle_SpawnTrainer(uint8_t ids[6][16], uint8_t levels[6][16], uint8_t trainernum) {
_battle_SpawnTrainer:
.DEFINE "_battle_SpawnTrainer"

.VALUE _battle_SpawnTrainer

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_SpawnTrainer",244,"_battle_SpawnTrainer"

.LINE 244

.DEFINE "ids"

.CLASS 65

.VALUE 6

.DIM 16

.TYPE 812

.ENDEF

.DEFINE "levels"

.CLASS 65

.VALUE 9

.DIM 16

.TYPE 812

.ENDEF

.DEFINE "trainernum"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "partyIndex"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-37
	LD	SP,HL
;  245		int partyIndex;
;  246		for(partyIndex = 0; partyIndex < 6; partyIndex++){
.LINE 246

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_56
L_54:
;  247			enemyparty[partyIndex] = stats_NewCharacter(ids[partyIndex][trainernum],levels[partyIndex][trainernum]);
.LINE 247

	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	BC,DE
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,DE
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  248		}
L_56:
.LINE 248

	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_54
;  249		wild = false;
.LINE 249

	XOR	A,A
	LD	(_wild),A
;  250	}
.LINE 250

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnTrainer ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_stats_NewCharacter                 IMPORT  -----   function
;partyIndex                            IX-3      3   variable
;trainernum                           IX+12      1   parameter
;levels                                IX+9      3   parameter
;ids                                   IX+6      3   parameter


; Stack Frame Size: 52 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "battle_SpawnTrainer",250,"_battle_SpawnTrainer"
;  251	
;  252	bool playerturn() {
_playerturn:
.DEFINE "_playerturn"

.VALUE _playerturn

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "playerturn",252,"_playerturn"

.LINE 252

.DEFINE "selectedMove"

.CLASS 65

.VALUE -9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-33
	LD	SP,HL
;  253		if (attackturns[true] > 0 && party[currentplayer].pp[lastmove[true]] > 0) {
.LINE 253

	LD	HL,_attackturns
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_61
	LD	BC,_lastmove
	INC	BC
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_61
;  254			chosenmove[true] = lastmove[true];
.LINE 254

	LD	IY,(IX+-15)
	LD	HL,_chosenmove
	INC	HL
	LD	A,(IY)
	LD	(HL),A
;  255			return true;
.LINE 255

	LD	A,1
	JR	L_139
;  256		}
L_61:
.LINE 256

;  257		i = 0;
.LINE 257

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  258		/* Select Whether to fight, run, ect */
;  259		if (battleMenuState1 == 0) {
.LINE 259

	LD	A,(_battleMenuState1)
	OR	A,A
	JR	NZ,L_137
;  260			switch (text_AskQuestion4("Fight","Item","Switch","Run", true))
.LINE 260

	LD	BC,1
	PUSH	BC
	LD	BC,L__38
	PUSH	BC
	LD	BC,L__39
	PUSH	BC
	LD	BC,L__40
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcaseD
	JP	(HL)
L__42:
	DW	5
	DW	0
	DB	0
	DW24	L_62	

	DW24	L_63	

	DW24	L_64	

	DW24	L_65	

	DW24	L_70	

	DW24	L_137	

;  261			{
;  262			case 0:
L_62:
.LINE 262

;  263				return false;
.LINE 263

	XOR	A,A
	JR	L_139
;  264			case 1:
L_63:
.LINE 264

;  265				battleMenuState1 = 1;
.LINE 265

	LD	A,1
	LD	(_battleMenuState1),A
;  266				return false;
.LINE 266

	XOR	A,A
	JR	L_139
;  267			case 2:
L_64:
.LINE 267

;  268				battleMenuState1 = 2;
.LINE 268

	LD	A,2
	LD	(_battleMenuState1),A
;  269				return false;
.LINE 269

	XOR	A,A
	JR	L_139
;  270			case 3:
L_65:
.LINE 270

;  271				i = text_AskQuestion6(data_pokemon[party[0].id].name, data_pokemon[party[1].id].name, data_pokemon[party[2].id].name, data_pokemon[party[3].id].name, data_pokemon[party[4].id].name, data_pokemon[party[5].id].name);
.LINE 271

	LD	BC,170
	LD	HL,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,136
	LD	HL,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,_party
	LD	A,(IY+102)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,_party
	LD	A,(IY+68)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,_party
	LD	A,(IY+34)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	A,(_party)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_text_AskQuestion6
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  272				if (i != 0 && (i - 1) != currentplayer && party[i - 1].id != 0) {
.LINE 272

	LD	HL,(_i)
	CALL	__scmpzero
	JR	Z,L_69
	LD	BC,(_i)
	CALL	__stoiu
	DEC	HL
	LD	(IX+-18),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-18)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_69
	LD	HL,34
	LD	BC,(IX+-18)
	CALL	__imulu
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_69
;  273					currentplayer = i - 1;
.LINE 273

	LD	A,(_i)
	DEC	A
	LD	(_currentplayer),A
;  274					resetstatus(true);
.LINE 274

	LD	BC,1
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  275					redrawcharacters();
.LINE 275

	CALL	_redrawcharacters
;  276					return true;
.LINE 276

	LD	A,1
	JR	L_139
;  277				}
L_69:
.LINE 277

;  278				return false;
.LINE 278

	XOR	A,A
	JR	L_139
;  279			case 4:
L_70:
.LINE 279

;  280				if (!wild) {
.LINE 280

	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_75
;  281					text_Display("Can't run from trainers!", true);
.LINE 281

	LD	BC,1
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  282					return false;
.LINE 282

	XOR	A,A
	JR	L_139
;  283				}
L_75:
.LINE 283

;  284				//NOT REAL RUN FUNCTION
;  285				if (stats[1].speed > stats[0].speed || (rand() % 3) == 0) {
.LINE 285

	LD	IY,_stats
	LD	BC,(IY+22)
	LD	HL,(_stats+10)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_73
	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_74
L_73:
;  286					run = true;
.LINE 286

	LD	A,1
	LD	(_run),A
;  287					return true;
.LINE 287

	JR	L_139
;  288				}
;  289				else {
L_74:
.LINE 289

;  290					text_Display("Failed to run away!", true);
.LINE 290

	LD	BC,1
	PUSH	BC
	LD	BC,L__50
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  291					return true;
.LINE 291

	LD	A,1
	JR	L_139
;  292				}
;  293				return false;
;  294			}
;  295		}
L_137:
.LINE 295

;  296		/* Select which move to use */
;  297		if (battleMenuState1 == 1) {
.LINE 297

	LD	A,(_battleMenuState1)
	CP	A,1
	JR	NZ,L_136
;  298			int selectedMove;
;  299			selectedMove = selectMove();
.LINE 299

	CALL	_selectMove
	LD	(IX+-9),HL
;  300			battleMenuState1 = 0;
.LINE 300

	XOR	A,A
	LD	(_battleMenuState1),A
;  301			/* Checks if the move can be used */
;  302			if (selectedMove == 0 || party[currentplayer].pp[selectedMove - 1] == 0 || disabledmove[true] == selectedMove) {
.LINE 302

	LD	HL,(IX+-9)
	CALL	__icmpzero
	JR	Z,L_80
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,(IX+-9)
	DEC	BC
	LD	(IX+-3),BC
	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(IX+-3)
	LD	IY,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_80
	LD	HL,_disabledmove
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_81
L_80:
;  303				return false;
.LINE 303

	XOR	A,A
	JR	L_139
;  304			}
L_81:
.LINE 304

;  305			chosenmove[true] = party[currentplayer].moves[selectedMove - 1];
.LINE 305

	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-24),HL
	LD	BC,(IX+-3)
	LD	IY,(IX+-24)
	LEA	HL,IY+1
	ADD	HL,BC
	LD	IY,_chosenmove
	LD	A,(HL)
	LD	(IY+1),A
;  306			party[currentplayer].pp[selectedMove - 1]--;
.LINE 306

	LD	BC,(IX+-3)
	LD	IY,(IX+-24)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	(IX+-33),HL	; spill
	LD	BC,(IX+-3)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	(IX+-30),HL	; spill
	LD	HL,(IX+-33)	; unspill
	LD	A,(HL)
	LD	HL,(IX+-30)	; unspill
	DEC	A
	LD	(HL),A
;  307		}
;  308		/* Items */
;  309		else if (battleMenuState1 == 2) {
.LINE 309

	JR	L_138
L_136:
	LD	A,(_battleMenuState1)
	CP	A,2
	JR	NZ,L_138
;  310			battleMenuCurrent = 0;
.LINE 310

	XOR	A,A
	LD	(_battleMenuCurrent),A
;  311			battleMenuState2 = 0;
.LINE 311

	XOR	A,A
	LD	(_battleMenuState2),A
;  312		
;  313		redrawitems:
.LINE 313

L_83:
;  314			gfx_SetDrawScreen();
.LINE 314

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  315			gfx_SetColor(colors[0]);
.LINE 315

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  316			gfx_FillRectangle(20, 20, 280, 200);
.LINE 316

	LD	BC,200
	PUSH	BC
	LD	BC,280
	PUSH	BC
	LD	BC,20
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  317			gfx_SetColor(colors[1]);
.LINE 317

	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  318			gfx_Rectangle(20, 20, 280, 200);
.LINE 318

	LD	BC,200
	PUSH	BC
	LD	BC,280
	PUSH	BC
	LD	BC,20
	PUSH	BC
	PUSH	BC
	CALL	_gfx_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  319			gfx_SetColor(colors[0]);
.LINE 319

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  320	
;  321			gfx_PrintStringXY(">", 25, 25 + 20 * (battleMenuCurrent));
.LINE 321

	LD	A,(_battleMenuCurrent)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__56
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  322			for (i = 0; i < 10 && i + battleMenuState2 < 16; i++) {
.LINE 322

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_88
L_86:
;  323				gfx_PrintStringXY(itemNames[i + battleMenuState2], 35, 25 + i * 20);
.LINE 323

	LD	BC,(_i)
	CALL	__stoiu
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	HL,(IX+-12)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  324				sprintf(str, "%u", playerItems[i + battleMenuState2]);
.LINE 324

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LD	A,(_battleMenuState2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_playerItems
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__57
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  325				gfx_PrintStringXY(str, 150, 25 + i * 20);
.LINE 325

	LD	BC,(_i)
	CALL	__stoiu
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  326			}
L_88:
.LINE 326

	LD.LIS	BC,10
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_89
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LD	A,(_battleMenuState2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	BC,16
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JP	M,L_86
L_89:
;  327			Wait(20);
.LINE 327

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  328	
;  329			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
.LINE 329

	JR	L_91
L_92:
	CALL	_kb_Scan
L_91:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_92
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_92
;  330			kb_Scan();
.LINE 330

	CALL	_kb_Scan
;  331			while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 331

	JR	L_112
L_113:
;  332				kb_Scan();
.LINE 332

	CALL	_kb_Scan
;  333				if ((kb_Data[7] & kb_Down) && battleMenuCurrent + battleMenuState2 < 15) {
.LINE 333

	LD	A,(16056350)
	AND	A,1
	JR	Z,L_111
	LD	A,(_battleMenuCurrent)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(_battleMenuState2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,15
	OR	A,A
	SBC	HL,BC
	JP	P,L_111
;  334					battleMenuCurrent++;
.LINE 334

	LD	A,(_battleMenuCurrent)
	INC	A
	LD	(_battleMenuCurrent),A
;  335					if (battleMenuCurrent == 5 && battleMenuState2 < 5) {
.LINE 335

	CP	A,5
	JR	NZ,L_83
	LD	A,(_battleMenuState2)
	CP	A,5
	JR	NC,L_83
;  336						battleMenuState2++;
.LINE 336

	LD	A,(_battleMenuState2)
	INC	A
	LD	(_battleMenuState2),A
;  337						battleMenuCurrent--;
.LINE 337

	LD	A,(_battleMenuCurrent)
	DEC	A
	LD	(_battleMenuCurrent),A
;  338					}
.LINE 338

;  339					goto redrawitems;
.LINE 339

	JR	L_83
;  340				}
L_111:
.LINE 340

;  341				if ((kb_Data[7] & kb_Up) && battleMenuCurrent != 0) {
.LINE 341

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_112
	LD	A,(_battleMenuCurrent)
	OR	A,A
	JR	Z,L_112
;  342					battleMenuCurrent--;
.LINE 342

	LD	A,(_battleMenuCurrent)
	DEC	A
	LD	(_battleMenuCurrent),A
;  343					if (battleMenuCurrent == 4 && battleMenuState2 > 0) {
.LINE 343

	CP	A,4
	JR	NZ,L_83
	XOR	A,A
	LD	HL,_battleMenuState2
	CP	A,(HL)
	JR	NC,L_83
;  344						battleMenuState2--;
.LINE 344

	LD	A,(_battleMenuState2)
	DEC	A
	LD	(_battleMenuState2),A
;  345						battleMenuCurrent++;
.LINE 345

	LD	A,(_battleMenuCurrent)
	INC	A
	LD	(_battleMenuCurrent),A
;  346					}
.LINE 346

;  347					goto redrawitems;
.LINE 347

	JR	L_83
;  348				}
;  349			}
L_112:
.LINE 349

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_114
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_113
L_114:
;  350			gfx_SetDrawBuffer();
.LINE 350

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  351			redrawcharacters();
.LINE 351

	CALL	_redrawcharacters
;  352			if (kb_Data[6] & kb_Clear) {
.LINE 352

	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_116
	JR	L_121
;  353				while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_117:
.LINE 353

	CALL	_kb_Scan
L_116:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_117
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_117
;  354				battleMenuState1 = 0;
.LINE 354

	XOR	A,A
	LD	(_battleMenuState1),A
;  355				return false;
.LINE 355

	XOR	A,A
	JR	L_139
;  356			}
;  357			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
L_122:
.LINE 357

	CALL	_kb_Scan
L_121:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_122
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_122
;  358	
;  359			if (playerItems[battleMenuCurrent] == 0) {
.LINE 359

	LD	A,(_battleMenuCurrent)
	UEXT	HL
	LD	L,A
	LD	BC,_playerItems
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_126
;  360				battleMenuCurrent = 0;
.LINE 360

	XOR	A,A
	LD	(_battleMenuCurrent),A
;  361				return false;
.LINE 361

	XOR	A,A
	JR	L_139
;  362			}
L_126:
.LINE 362

;  363			battleMenuState1 = 0;
.LINE 363

	XOR	A,A
	LD	(_battleMenuState1),A
;  364			if (battleMenuCurrent < 4) {
.LINE 364

	LD	A,(_battleMenuCurrent)
	CP	A,4
	JR	NC,L_133
;  365				sprintf(str, "Used a %s", itemNames[battleMenuCurrent]);
.LINE 365

	LD	A,(_battleMenuCurrent)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__79
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  366				text_Display(str, true);
.LINE 366

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  367				playerItems[battleMenuCurrent]--;
.LINE 367

	LD	A,(_battleMenuCurrent)
	UEXT	HL
	LD	L,A
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	IY,(IX+-27)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
;  368				if (capture(battleMenuCurrent + 1)) {
.LINE 368

	LD	A,(_battleMenuCurrent)
	INC	A
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_capture
	POP	BC
	OR	A,A
	JR	Z,L_129
;  369					map_WinFight(wild, enemyparty[0].level * 40);
.LINE 369

	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
;  370					run = true;
.LINE 370

	LD	A,1
	LD	(_run),A
;  371					return true;
.LINE 371

	JR	L_139
;  372				}
;  373				else {
L_129:
.LINE 373

;  374					chosenmove[true] = 0;
.LINE 374

	LD	HL,_chosenmove
	INC	HL
	LD	(HL),0
;  375				}
;  376			}
;  377			else {
.LINE 377

	JR	L_138
L_133:
;  378				if (items_UseItem(battleMenuCurrent)) {
.LINE 378

	LD	A,(_battleMenuCurrent)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_items_UseItem
	POP	BC
	OR	A,A
	JR	Z,L_131
;  379					redrawcharacters();
.LINE 379

	CALL	_redrawcharacters
;  380					chosenmove[true] = 0;
.LINE 380

	LD	HL,_chosenmove
	INC	HL
	LD	(HL),0
;  381				}
;  382				else {
.LINE 382

	JR	L_138
L_131:
;  383					return false;
.LINE 383

	XOR	A,A
	JR	L_139
;  384				}
;  385			}
;  386		}
L_138:
.LINE 386

;  387		return true;
.LINE 387

	LD	A,1
;  388	}
L_139:
.LINE 388

	LD	SP,IX
	POP	IX
	RET	


;**************************** _playerturn ***************************
;Name                         Addr/Register   Size   Type
;_items_UseItem                      IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_map_WinFight                       IMPORT  -----   function
;_capture                            IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playerItems                        IMPORT    185   variable
;_sprintf                            IMPORT  -----   function
;_itemNames                          IMPORT    320   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Rectangle                      IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_battleMenuState2                   STATIC      1   variable
;_battleMenuCurrent                  STATIC      1   variable
;_disabledmove                       STATIC      2   variable
;_selectMove                         IMPORT  -----   function
;_run                                STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats                              STATIC     24   variable
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;_redrawcharacters                   IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_data_pokemon                       IMPORT  unknown variable
;_text_AskQuestion6                  IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_battleMenuState1                   STATIC      1   variable
;_i                                  IMPORT      2   variable
;_chosenmove                         STATIC      2   variable
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_7                                  IX-18      3   variable
;G_6                                  IX-15      3   variable
;G_10                                 IX-12      3   variable
;selectedMove                          IX-9      3   variable
;G_8                                   IX-6      3   variable
;G_9                                   IX-3      3   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "playerturn",388,"_playerturn"
	SEGMENT STRSECT
L__38:
	DB	"Run"
	DB	0
L__39:
	DB	"Switch"
	DB	0
L__40:
	DB	"Item"
	DB	0
L__41:
	DB	"Fight"
	DB	0
L__47:
	DB	"Can't run from trainers!"
	DB	0
L__50:
	DB	"Failed to run away!"
	DB	0
L__56:
	DB	">"
	DB	0
L__57:
	DB	"%u"
	DB	0
L__79:
	DB	"Used a %s"
	DB	0
	SEGMENT CODE
;  389	
;  390	int selectMove(void) {
_selectMove:
.DEFINE "_selectMove"

.VALUE _selectMove

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "selectMove",390,"_selectMove"

.LINE 390

.DEFINE "tv1"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

.DEFINE "tv2"

.CLASS 65

.VALUE -2

.TYPE 2

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-26
	LD	SP,HL
;  391		int8_t tv1, tv2, iconIndex;
;  392		tv1 = 0;
.LINE 392

	LD	(IX+-1),0
;  393		tv2 = 0;
.LINE 393

	LD	(IX+-2),0
;  394	
;  395		zx7_Decompress(textBoxSprite2, battletextbox3_compressed);
.LINE 395

	LD	HL,_PKMNSD5+12
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  396		gfx_Blit(gfx_screen);
.LINE 396

	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  397		text_DrawTextBox();
.LINE 397

	CALL	_text_DrawTextBox
;  398	
;  399	
;  400	
;  401		gfx_PrintStringXY(">", 15, 190);
.LINE 401

	LD	BC,190
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__83
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  402		gfx_PrintStringXY(data_moves[party[currentplayer].moves[0]].name, 25, 190);
.LINE 402

	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  403		gfx_PrintStringXY(data_moves[party[currentplayer].moves[1]].name, 25, 205);
.LINE 403

	LD	BC,205
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+1
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  404		gfx_PrintStringXY(data_moves[party[currentplayer].moves[2]].name, 145, 190);
.LINE 404

	LD	BC,190
	PUSH	BC
	LD	BC,145
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  405		gfx_PrintStringXY(data_moves[party[currentplayer].moves[3]].name, 145, 205);
.LINE 405

	LD	BC,205
	PUSH	BC
	LD	BC,145
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+4
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  406	
;  407		if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
.LINE 407

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	LD	(IX+-14),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_141
;  408			gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
.LINE 408

	LD	BC,193
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	HL,(IX+-14)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  409			sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
.LINE 409

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-20),HL
	LD	IY,(IX+-20)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-20)
	LD	A,(IY+5)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__85
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  410			gfx_PrintStringXY(str, 271, 209);
.LINE 410

	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  411		}
L_141:
.LINE 411

;  412		
;  413	
;  414		gfx_SwapDraw();
.LINE 414

	CALL	_gfx_SwapDraw
;  415		gfx_SetDrawScreen();
.LINE 415

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  416	
;  417		kb_Scan();
.LINE 417

	CALL	_kb_Scan
;  418		if ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
.LINE 418

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_143
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_144
L_143:
;  419			Wait(50);
.LINE 419

	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;  420		}
L_144:
.LINE 420

;  421		kb_Scan();
.LINE 421

	CALL	_kb_Scan
;  422		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 422

	JR	L_161
L_162:
;  423			kb_Scan();
.LINE 423

	CALL	_kb_Scan
;  424			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
.LINE 424

	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_152
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_160
L_152:
;  425				if (tv1 == 1) {
.LINE 425

	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_148
;  426					tv1 = 0;
.LINE 426

	LD	(IX+-1),0
;  427				}
;  428				else {
.LINE 428

	JR	L_149
L_148:
;  429					tv1 = 1;
.LINE 429

	LD	(IX+-1),1
;  430				}
L_149:
.LINE 430

;  431				gfx_FillRectangle(14, 185, 10, 45);
.LINE 431

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  432				gfx_FillRectangle(134, 185, 10, 45);
.LINE 432

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  433				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
.LINE 433

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__91
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  434	
;  435				gfx_FillRectangle(263, 185, 48, 46);
.LINE 435

	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  436				if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
.LINE 436

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	(IX+-5),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_151
;  437					gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
.LINE 437

	LD	BC,193
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	HL,(IX+-11)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  438					sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
.LINE 438

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LD	IY,(IX+-23)
	LEA	HL,IY+1
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-23)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__93
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  439					gfx_PrintStringXY(str, 271, 209);
.LINE 439

	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  440				}
L_151:
.LINE 440

;  441	
;  442				Wait(20);
.LINE 442

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  443			}
L_160:
.LINE 443

;  444			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
.LINE 444

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_159
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_161
L_159:
;  445				if (tv2 == 1) {
.LINE 445

	LD	A,(IX+-2)
	CP	A,1
	JR	NZ,L_155
;  446					tv2 = 0;
.LINE 446

	LD	(IX+-2),0
;  447				}
;  448				else {
.LINE 448

	JR	L_156
L_155:
;  449					tv2 = 1;
.LINE 449

	LD	(IX+-2),1
;  450				}
L_156:
.LINE 450

;  451				gfx_FillRectangle(14, 185, 10, 45);
.LINE 451

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  452				gfx_FillRectangle(134, 185, 10, 45);
.LINE 452

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  453				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
.LINE 453

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__97
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  454	
;  455				gfx_FillRectangle(263, 185, 48, 46);
.LINE 455

	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  456				if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
.LINE 456

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	(IX+-8),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-8)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-17),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_158
;  457					gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
.LINE 457

	LD	BC,193
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	HL,(IX+-17)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  458					sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
.LINE 458

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-8)
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LD	IY,(IX+-26)
	LEA	HL,IY+1
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-26)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__99
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  459					gfx_PrintStringXY(str, 271, 209);
.LINE 459

	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  460				}
L_158:
.LINE 460

;  461	
;  462				Wait(20);
.LINE 462

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  463			}
;  464		}
L_161:
.LINE 464

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_163
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_162
L_163:
;  465		zx7_Decompress(textBoxSprite2, battletextbox2_compressed);
.LINE 465

	LD	HL,_PKMNSD5+9
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  466		if (kb_Data[6] & kb_Clear) {
.LINE 466

	LD	A,(16056348)
	AND	A,64
	JR	Z,L_165
;  467			return(0);
.LINE 467

	OR	A,A
	SBC	HL,HL
	JR	L_166
;  468		}
L_165:
.LINE 468

;  469		gfx_SetDrawBuffer();
.LINE 469

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  470		return (tv1 + 1 + 2 * (tv2));
.LINE 470

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  471	}
L_166:
.LINE 471

	LD	SP,IX
	POP	IX
	RET	


;**************************** _selectMove ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_typeIcons                          IMPORT     51   variable
;_gfx_Sprite                         IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_data_moves                         IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;G_15                                 IX-17      3   variable
;G_12                                 IX-14      3   variable
;G_13                                 IX-11      3   variable
;G_16                                  IX-8      3   variable
;G_14                                  IX-5      3   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable


; Stack Frame Size: 32 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "selectMove",471,"_selectMove"
	SEGMENT STRSECT
L__83:
	DB	">"
	DB	0
L__85:
	DB	"%u/%u"
	DB	0
L__91:
	DB	">"
	DB	0
L__93:
	DB	"%u/%u"
	DB	0
L__97:
	DB	">"
	DB	0
L__99:
	DB	"%u/%u"
	DB	0
	SEGMENT CODE
;  472	
;  473	bool enemyturn() {
_enemyturn:
.DEFINE "_enemyturn"

.VALUE _enemyturn

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "enemyturn",473,"_enemyturn"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-12
	LD	SP,HL
;  474		if (attackturns[false] > 0) {
.LINE 474

	LD	A,(_attackturns)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_184
;  475			chosenmove[false] = lastmove[false];
.LINE 475

	LD	A,(_lastmove)
	LD	(_chosenmove),A
;  476			return true;
.LINE 476

	LD	A,1
	JR	L_186
;  477		}
L_184:
.LINE 477

;  478		switch (rand() % 4)
.LINE 478

	CALL	_rand
	LD	BC,4
	CALL	__irems
	CALL	__seqcaseD
	JP	(HL)
L__105:
	DW	4
	DW	0
	DB	0
	DW24	L_168	

	DW24	L_172	

	DW24	L_176	

	DW24	L_180	

	DW24	L_185	

;  479		{
;  480		case 0:
L_168:
.LINE 480

;  481			if (enemyparty[currentenemy].moves[0] == 0 || disabledmove[false] == 1) {
.LINE 481

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	LD	(IX+-3),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_170
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_171
L_170:
;  482				return false;
.LINE 482

	XOR	A,A
	JR	L_186
;  483			}
L_171:
.LINE 483

;  484			chosenmove[false] = enemyparty[currentenemy].moves[0];
.LINE 484

	LD	HL,(IX+-3)
	LD	A,(HL)
	LD	(_chosenmove),A
;  485			break;
.LINE 485

	JR	L_185
;  486		case 1:
L_172:
.LINE 486

;  487			if (enemyparty[currentenemy].moves[1] == 0 || disabledmove[false] == 2) {
.LINE 487

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	INC	BC
	LD	(IX+-6),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_174
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_175
L_174:
;  488				return false;
.LINE 488

	XOR	A,A
	JR	L_186
;  489			}
L_175:
.LINE 489

;  490			chosenmove[false] = enemyparty[currentenemy].moves[1];
.LINE 490

	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	(_chosenmove),A
;  491			break;
.LINE 491

	JR	L_185
;  492		case 2:
L_176:
.LINE 492

;  493			if (enemyparty[currentenemy].moves[2] == 0 || disabledmove[false] == 3) {
.LINE 493

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+3
	LD	(IX+-9),IY
	LD	HL,(IX+-9)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_178
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_179
L_178:
;  494				return false;
.LINE 494

	XOR	A,A
	JR	L_186
;  495			}
L_179:
.LINE 495

;  496			chosenmove[false] = enemyparty[currentenemy].moves[2];
.LINE 496

	LD	HL,(IX+-9)
	LD	A,(HL)
	LD	(_chosenmove),A
;  497			break;
.LINE 497

	JR	L_185
;  498		case 3:
L_180:
.LINE 498

;  499			if (enemyparty[currentenemy].moves[3] == 0 || disabledmove[false] == 4) {
.LINE 499

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+4
	LD	(IX+-12),IY
	LD	HL,(IX+-12)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_182
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_183
L_182:
;  500				return false;
.LINE 500

	XOR	A,A
	JR	L_186
;  501			}
L_183:
.LINE 501

;  502			chosenmove[false] = enemyparty[currentenemy].moves[3];
.LINE 502

	LD	HL,(IX+-12)
	LD	A,(HL)
	LD	(_chosenmove),A
;  503			break;
;  504		}
L_185:
.LINE 504

;  505		return true;
.LINE 505

	LD	A,1
;  506	}
L_186:
.LINE 506

	LD	SP,IX
	POP	IX
	RET	


;**************************** _enemyturn ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_rand                               IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_21                                 IX-12      3   variable
;G_20                                  IX-9      3   variable
;G_19                                  IX-6      3   variable
;G_18                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "enemyturn",506,"_enemyturn"
;  507	void redrawcharacters(void) {
_redrawcharacters:
.DEFINE "_redrawcharacters"

.VALUE _redrawcharacters

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "redrawcharacters",507,"_redrawcharacters"

.LINE 507

.DEFINE "healthRatio"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	PUSH	BC
;  508		int statusIndex, healthRatio;
;  509		gfx_SetColor(colors[1]);
.LINE 509

	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  510		text_DrawTextBox();
.LINE 510

	CALL	_text_DrawTextBox
;  511	
;  512		gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
.LINE 512

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  513		gfx_ScaledTransparentSprite_NoClip(playerSprite, 20, 64, 2, 2);
.LINE 513

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  514		gfx_ScaledTransparentSprite_NoClip(enemySprite, 190, 8, 2, 2);
.LINE 514

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,190
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  515	
;  516		/* Display Information about player and enemy */
;  517		
;  518		gfx_PrintStringXY(data_pokemon[enemyparty[currentenemy].id].name, 17, 29);
.LINE 518

	LD	BC,29
	PUSH	BC
	LD	BC,17
	PUSH	BC
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  519		sprintf(str, "Lv%u", enemyparty[currentenemy].level);
.LINE 519

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__115
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  520		gfx_PrintStringXY(str, 98, 29);
.LINE 520

	LD	BC,29
	PUSH	BC
	LD	BC,98
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  521		gfx_Sprite(hpBarSprite, 40, 40);
.LINE 521

	LD	BC,40
	PUSH	BC
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  522		healthRatio = (enemyparty[currentenemy].currenthealth * 78) / stats[0].health;
.LINE 522

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	DE,HL
	LD	BC,(_stats)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	(IX+-3),HL
;  523		if (healthRatio > 34) {
.LINE 523

	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	JP	P,L_190
;  524			gfx_SetColor(colors[8]);
.LINE 524

	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  525		}else if (healthRatio > 14) {
.LINE 525

	JR	L_191
L_190:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_188
;  526			gfx_SetColor(colors[9]);
.LINE 526

	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  527		}else {
.LINE 527

	JR	L_191
L_188:
;  528			gfx_SetColor(colors[10]);
.LINE 528

	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  529		}
L_191:
.LINE 529

;  530		gfx_FillRectangle(58, 42, healthRatio, 6);
.LINE 530

	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,58
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  531		if (enemyparty[currentenemy].currentstatus > 0) {
.LINE 531

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-9),HL
	XOR	A,A
	LD	IY,(IX+-9)
	CP	A,(IY+15)
	JR	NC,L_193
;  532			gfx_TransparentSprite_NoClip(statusSprites[enemyparty[currentenemy].currentstatus-1], 18, 41);
.LINE 532

	LD	BC,41
	PUSH	BC
	LD	BC,18
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  533		}
L_193:
.LINE 533

;  534	
;  535		gfx_PrintStringXY(data_pokemon[party[currentplayer].id].name, 181, 129);
.LINE 535

	LD	BC,129
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  536		sprintf(str, "Lv%u", party[currentplayer].level);
.LINE 536

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__119
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  537		gfx_PrintStringXY(str, 264, 129);
.LINE 537

	LD	BC,129
	PUSH	BC
	LD	BC,264
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  538		gfx_Sprite(hpBarSprite, 204, 140);
.LINE 538

	LD	BC,140
	PUSH	BC
	LD	BC,204
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  539		healthRatio = (party[currentplayer].currenthealth * 78) / stats[1].health;
.LINE 539

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	DE,HL
	LD	IY,_stats
	LD	BC,(IY+12)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	(IX+-3),HL
;  540		if (healthRatio > 34) {
.LINE 540

	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_197
;  541			gfx_SetColor(colors[8]);
.LINE 541

	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  542		}
;  543		else if (healthRatio > 14) {
.LINE 543

	JR	L_198
L_197:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_195
;  544			gfx_SetColor(colors[9]);
.LINE 544

	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  545		}
;  546		else {
.LINE 546

	JR	L_198
L_195:
;  547			gfx_SetColor(colors[10]);
.LINE 547

	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  548		}
L_198:
.LINE 548

;  549		gfx_FillRectangle(222, 142, healthRatio, 6);
.LINE 549

	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,142
	PUSH	BC
	LD	BC,222
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  550		
;  551		sprintf(str, "%u/%u", party[currentplayer].currenthealth, stats[1].health);
.LINE 551

	LD	IY,_stats
	LD	BC,(IY+12)
	CALL	__stoiu
	PUSH	HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__122
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  552		gfx_PrintStringXY(str, 247, 153);
.LINE 552

	LD	BC,153
	PUSH	BC
	LD	BC,247
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  553	
;  554		gfx_SetTextFGColor(colors[11]);
.LINE 554

	LD	HL,_colors+11
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  555		gfx_PrintStringXY("XP", 193, 166);
.LINE 555

	LD	BC,166
	PUSH	BC
	LD	BC,193
	PUSH	BC
	LD	BC,L__123
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  556		gfx_SetColor(colors[7]);
.LINE 556

	LD	HL,_colors+7
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  557		if (party[currentplayer].level < 100) {
.LINE 557

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_201
;  558			gfx_FillRectangle(210, 168, CalculateXpPercent(), 4);
.LINE 558

	LD	BC,4
	PUSH	BC
	CALL	_CalculateXpPercent
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,168
	PUSH	BC
	LD	BC,210
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  559		}
L_201:
.LINE 559

;  560		if (party[currentplayer].currentstatus > 0) {
.LINE 560

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	XOR	A,A
	CP	A,(IY+15)
	JR	NC,L_202
;  561			gfx_TransparentSprite_NoClip(statusSprites[party[currentplayer].currentstatus - 1], 182, 141);
.LINE 561

	LD	BC,141
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	IY,(IX+-6)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  562		}
L_202:
.LINE 562

;  563	
;  564		gfx_SetColor(colors[0]);
.LINE 564

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  565		gfx_SetTextFGColor(colors[1]);
.LINE 565

	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  566		gfx_SwapDraw();
.LINE 566

	CALL	_gfx_SwapDraw
;  567	}
.LINE 567

	LD	SP,IX
	POP	IX
	RET	


;**************************** _redrawcharacters ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_CalculateXpPercent                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_statusSprites                      STATIC     15   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_stats                              STATIC     24   variable
;_hpBarSprite                        STATIC      3   variable
;_gfx_Sprite                         IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_backgroundSprite                   STATIC      3   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;G_23                                  IX-9      3   variable
;G_25                                  IX-6      3   variable
;healthRatio                           IX-3      3   variable


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "redrawcharacters",567,"_redrawcharacters"
	SEGMENT STRSECT
L__115:
	DB	"Lv%u"
	DB	0
L__119:
	DB	"Lv%u"
	DB	0
L__122:
	DB	"%u/%u"
	DB	0
L__123:
	DB	"XP"
	DB	0
	SEGMENT CODE
;  568	
;  569	uint8_t CalculateXpPercent(void) {
_CalculateXpPercent:
.DEFINE "_CalculateXpPercent"

.VALUE _CalculateXpPercent

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "CalculateXpPercent",569,"_CalculateXpPercent"

.LINE 569

.DEFINE "sXp"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "cXp"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "mXp"

.CLASS 65

.VALUE -9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-21
	LD	SP,HL
;  570		int cXp, sXp, mXp;
;  571		cXp = party[currentplayer].xp;
.LINE 571

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	BC,(IY+10)
	LD	(IX+-6),BC
;  572		sXp = xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level];
.LINE 572

	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	D,(IY+9)
	LD	IY,(IX+-12)
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	(IX+-21),HL	; spill
	LD	A,D
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,(IX+-21)	; unspill
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-3),BC
;  573		mXp = xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level + 1];
.LINE 573

	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	BC,HL
	LD	A,D
	UEXT	HL
	LD	L,A
	INC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-9),BC
;  574		return((uint8_t)((92 * (cXp - sXp)) / (mXp - sXp)));
.LINE 574

	LD	BC,(IX+-3)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	A,92
	CALL	__imul_b
	LD	DE,HL
	LD	BC,(IX+-3)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	A,L
;  575	
;  576	}
.LINE 576

	LD	SP,IX
	POP	IX
	RET	


;**************************** _CalculateXpPercent ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_data_pokemon                       IMPORT  unknown variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;mXp                                   IX-9      3   variable
;cXp                                   IX-6      3   variable
;sXp                                   IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "CalculateXpPercent",576,"_CalculateXpPercent"
;  577	
;  578	void battle_End(void) {
_battle_End:
.DEFINE "_battle_End"

.VALUE _battle_End

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_End",578,"_battle_End"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  579		free(playerSprite);
.LINE 579

	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  580		free(enemySprite);
.LINE 580

	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  581		free(backgroundSprite);
.LINE 581

	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  582		free(hpBarSprite);
.LINE 582

	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  583		FreeIcons();
.LINE 583

	CALL	_FreeIcons
;  584	}
.LINE 584

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_End ***************************
;Name                         Addr/Register   Size   Type
;_FreeIcons                          IMPORT  -----   function
;_hpBarSprite                        STATIC      3   variable
;_backgroundSprite                   STATIC      3   variable
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_free                               IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "battle_End",584,"_battle_End"
;  585	
;  586	void attack(bool player, uint8_t move) {
_attack:
.DEFINE "_attack"

.VALUE _attack

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "attack",586,"_attack"

.LINE 586

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "move"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "damage"

.CLASS 65

.VALUE -7

.TYPE 15

.ENDEF

.DEFINE "userlevel"

.CLASS 65

.VALUE -23

.TYPE 12

.ENDEF

.DEFINE "hitcount"

.CLASS 65

.VALUE -27

.TYPE 12

.ENDEF

.DEFINE "nonuserelement1"

.CLASS 65

.VALUE -55

.TYPE 12

.ENDEF

.DEFINE "nonuserelement2"

.CLASS 65

.VALUE -56

.TYPE 12

.ENDEF

.DEFINE "nonuserlevel"

.CLASS 65

.VALUE -90

.TYPE 12

.ENDEF

.DEFINE "userelement1"

.CLASS 65

.VALUE -91

.TYPE 12

.ENDEF

.DEFINE "userelement2"

.CLASS 65

.VALUE -92

.TYPE 12

.ENDEF

.DEFINE "username"

.CLASS 65

.VALUE -343

.DIM 20

.TYPE 98

.ENDEF

.DEFINE "nonusername"

.CLASS 65

.VALUE -363

.DIM 20

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	HL,-501
	ADD	HL,SP
	LD	SP,HL
;  587		
;  588		char username[20];
;  589		char nonusername[20];
;  590		uint32_t damage;
;  591		uint8_t hitcount = 0;
.LINE 591

	LD	(IX+-27),0
;  592		uint8_t userlevel;
;  593		uint8_t nonuserlevel;
;  594	
;  595		uint8_t userelement1;
;  596		uint8_t userelement2;
;  597		uint8_t nonuserelement1;
;  598		uint8_t nonuserelement2;
;  599	
;  600		if (move == 0) {
.LINE 600

	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_582
;  601			return;
.LINE 601

;  602		}
.LINE 602

;  603		
;  604		
;  605		rage[player] = false;
.LINE 605

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
;  606	
;  607		if (player) {
.LINE 607

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_209
;  608			strcpy(username, playername);
.LINE 608

	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  609			strcpy(nonusername, enemyname);
.LINE 609

	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  610			userlevel = party[currentplayer].level;
.LINE 610

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	BC,-375
	CALL	__istix
	LD	BC,-375
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  611			nonuserlevel = enemyparty[currentenemy].level;
.LINE 611

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-369
	CALL	__istix
	LD	BC,-369
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-90),A
;  612			userelement1 = data_pokemon[party[currentplayer].id].element1;
.LINE 612

	LD	BC,-375
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-372
	CALL	__istix
	LD	BC,-372
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-91),A
;  613			userelement2 = data_pokemon[party[currentplayer].id].element2;
.LINE 613

	LD	BC,-372
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-92),A
;  614			nonuserelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
.LINE 614

	LD	BC,-369
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-366
	CALL	__istix
	LD	BC,-366
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-55),A
;  615			nonuserelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
.LINE 615

	LD	BC,-366
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-56),A
;  616	
;  617		}
;  618		else {
.LINE 618

	JR	L_211
L_209:
;  619			strcpy(username, enemyname);
.LINE 619

	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  620			strcpy(nonusername, playername);
.LINE 620

	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  621			userlevel = enemyparty[currentenemy].level;
.LINE 621

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-387
	CALL	__istix
	LD	BC,-387
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  622			nonuserlevel = party[currentplayer].level;
.LINE 622

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	BC,-381
	CALL	__istix
	LD	BC,-381
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-90),A
;  623			userelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
.LINE 623

	LD	BC,-387
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-384
	CALL	__istix
	LD	BC,-384
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-91),A
;  624			userelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
.LINE 624

	LD	BC,-384
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-92),A
;  625			nonuserelement1 = data_pokemon[party[currentplayer].id].element1;
.LINE 625

	LD	BC,-381
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-378
	CALL	__istix
	LD	BC,-378
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-55),A
;  626			nonuserelement2 = data_pokemon[party[currentplayer].id].element2;
.LINE 626

	LD	BC,-378
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-56),A
;  627		}
L_211:
.LINE 627

;  628	
;  629		if (flinch[player]) {
.LINE 629

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_213
;  630			sprintf(str, "%s flinched", username);
.LINE 630

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__132
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  631			text_Display(str, true);
.LINE 631

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  632		}
L_213:
.LINE 632

;  633		if (data_moves[move].type == 16) {
.LINE 633

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-284
	CALL	__istix
	LD	BC,-284
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,16
	JR	NZ,L_214
;  634			sprintf(str, "%s used %s", username, data_moves[move].name);
.LINE 634

	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__134
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  635			text_Display(str, true);
.LINE 635

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  636			move = 1 + (rand() % 165);
.LINE 636

	CALL	_rand
	LD	BC,165
	CALL	__irems
	INC	L
	LD	(IX+9),L
;  637		}
L_214:
.LINE 637

;  638		sprintf(str, "%s used %s", username, data_moves[move].name);
.LINE 638

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-287
	CALL	__istix
	LD	BC,-287
	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__135
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  639		text_Display(str, true);
.LINE 639

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  640	
;  641		
;  642		if (data_moves[move].type == 17) {
.LINE 642

	LD	BC,-287
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,17
	JR	NZ,L_220
;  643			move = lastmove[!player];
.LINE 643

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_216
	LD	HL,1
	LD	BC,-296
	CALL	__istix
	JR	L_217
L_216:
	OR	A,A
	SBC	HL,HL
	LD	BC,-296
	CALL	__istix
L_217:
	LD	BC,_lastmove
	LD	HL,-296
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+9),A
;  644		}
L_220:
.LINE 644

;  645		lastmove[player] = move;
.LINE 645

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(IX+9)
	LD	(HL),A
;  646	
;  647		if (data_moves[move].type == 19 && data_moves[lastmove[!player]].type != 0) {
.LINE 647

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-68),HL
	LD	BC,-293
	CALL	__istix
	LD	HL,(IX+-68)
	LD	BC,-290
	CALL	__istix
	LD	BC,_data_moves
	LD	HL,(IX+-68)
	ADD	HL,BC
	LD	(IX+-22),HL
	LD	IY,(IX+-22)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_231
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_222
	LD	HL,1
	LD	BC,-299
	CALL	__istix
	JR	L_223
L_222:
	OR	A,A
	SBC	HL,HL
	LD	BC,-299
	CALL	__istix
L_223:
	LD	BC,_lastmove
	LD	HL,-299
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_231
;  648			text_Display("It Failed", true);
.LINE 648

	LD	BC,1
	PUSH	BC
	LD	BC,L__141
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  649			return;
.LINE 649

	JR	L_582
;  650		}
L_231:
.LINE 650

;  651	
;  652		if (data_moves[move].statustype == 32) {
.LINE 652

	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_236
;  653			if (attackturns[player] == 0) {
.LINE 653

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-101),HL
	LD	BC,-302
	CALL	__istix
	LD	HL,(IX+-101)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_229
;  654				attackturns[player] = (rand() % 2) + 2;
.LINE 654

	LD	HL,(IX+-101)
	CALL	__istix
	CALL	_rand
	LD	BC,2
	CALL	__irems
	INC	HL
	INC	HL
	LD	IY,(IX+-101)
	LD	(IY),L
;  655			}
L_229:
.LINE 655

;  656			attackturns[player]--;
.LINE 656

	LD	BC,-302
	CALL	__ildix
	LD	BC,-390
	CALL	__istix
	LD	BC,-390
	CALL	__ildix
	LD	IY,HL
	LD	BC,-390
	CALL	__ildix
	LD	A,(IY)
	DEC	A
	LD	(HL),A
;  657		}
L_236:
.LINE 657

;  658		if (data_moves[move].statustype == 33) {
.LINE 658

	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,33
	JR	NZ,L_241
;  659			if (attackturns[player] == 0) {
.LINE 659

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-36),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_234
;  660				attackturns[player] = 1;
.LINE 660

	LD	HL,(IX+-36)
	LD	(HL),1
;  661				return;
.LINE 661

	JR	L_582
;  662			}
;  663			else if (attackturns[player] == 1) {
L_234:
.LINE 663

	LD	HL,(IX+-36)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_241
;  664				attackturns[player] = 0;
.LINE 664

	LD	HL,(IX+-36)
	LD	(HL),0
;  665			}
;  666		}
L_241:
.LINE 666

;  667		if (data_moves[move].statustype == 34) {
.LINE 667

	LD	HL,(IX+-22)
	LD	BC,-311
	CALL	__istix
	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,34
	JR	NZ,L_244
;  668			if (attackturns[player] == 0) {
.LINE 668

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-48),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_239
;  669				attackturns[player] = 1;
.LINE 669

	LD	HL,(IX+-48)
	LD	(HL),1
;  670				air[player] = true;
.LINE 670

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),1
;  671				return;
.LINE 671

	JR	L_582
;  672			}
;  673			else if (attackturns[player] == 1) {
L_239:
.LINE 673

	LD	HL,(IX+-48)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_244
;  674				attackturns[player] = 0;
.LINE 674

	LD	HL,(IX+-48)
	LD	(HL),0
;  675				air[player] = false;
.LINE 675

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),0
;  676			}
;  677		}
L_244:
.LINE 677

;  678		
;  679	
;  680		/* Exit if character's status prevents movement */
;  681		if ((*currentStatusPointer[player] == 3) && (rand() % 4 == 1)) {
.LINE 681

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-51),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_248
	CALL	_rand
	LD	BC,4
	CALL	__irems
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_248
;  682			sprintf(str, "%s is paralysed", username);
.LINE 682

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__152
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  683			text_Display(str, true);
.LINE 683

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  684			return;
.LINE 684

	JR	L_582
;  685		}
L_248:
.LINE 685

;  686		if (*currentStatusPointer[player] == 4) {
.LINE 686

	LD	HL,(IX+-51)
	LD	BC,-320
	CALL	__istix
	LD	HL,(IX+-51)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_252
;  687			if (rand() % 3 == 0) {
.LINE 687

	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_246
;  688				*currentStatusPointer[player] = 1;
.LINE 688

	LD	HL,(IX+-51)
	LD	BC,-320
	CALL	__istix
	LD	HL,(IX+-51)
	LD	HL,(HL)
	LD	(HL),1
;  689				sprintf(str, "%s woke up", username);
.LINE 689

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__155
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  690				text_Display(str, true);
.LINE 690

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  691			}
;  692			else {
.LINE 692

	JR	L_252
L_246:
;  693				sprintf(str, "%s is asleep", username);
.LINE 693

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__156
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  694				text_Display(str, true);
.LINE 694

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  695				return;
.LINE 695

	JR	L_582
;  696			}
;  697		}
L_252:
.LINE 697

;  698		if (*currentStatusPointer[player] == 5) {
.LINE 698

	LD	BC,-320
	CALL	__ildix
	LD	(IX+-89),HL
	LD	BC,-323
	CALL	__istix
	LD	HL,(IX+-89)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,5
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_256
;  699			if (rand() % 5 == 0) {
.LINE 699

	CALL	_rand
	LD	BC,5
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_250
;  700				*currentStatusPointer[player] = 0;
.LINE 700

	LD	HL,(IX+-89)
	LD	BC,-323
	CALL	__istix
	LD	HL,(IX+-89)
	LD	HL,(HL)
	LD	(HL),0
;  701				sprintf(str, "%s thawed out", username);
.LINE 701

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__159
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  702				text_Display(str, true);
.LINE 702

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  703			}
;  704			else {
.LINE 704

	JR	L_256
L_250:
;  705				sprintf(str, "%s is frozen", username);
.LINE 705

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__160
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  706				text_Display(str, true);
.LINE 706

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  707				return;
.LINE 707

	JR	L_582
;  708			}
;  709		}
L_256:
.LINE 709

;  710		if (confusedturns[player] > 0) {
.LINE 710

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(IX+-65),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_269
;  711			confusedturns[player] --;
.LINE 711

	LD	HL,(IX+-65)
	LD	IY,(IX+-65)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
;  712			if (rand() % 2 == 0) {
.LINE 712

	CALL	_rand
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_269
;  713				sprintf(str, "%s hurt itself in its confusion", username);
.LINE 713

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__163
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  714				text_Display(str, true);
.LINE 714

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  715				return;
.LINE 715

	JR	L_582
;  716			}
;  717		}
L_269:
.LINE 717

;  718	
;  719		if (air[!player] || (data_moves[move].accuracy * statmodvalues[statmods[player][5]] / statmodvalues[statmods[!player][6]]) < (rand() % 100)) {
.LINE 719

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_258
	LD	HL,1
	LD	BC,-305
	CALL	__istix
	JR	L_259
L_258:
	OR	A,A
	SBC	HL,HL
	LD	BC,-305
	CALL	__istix
L_259:
	LD	BC,_air
	LD	HL,-305
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_268
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_262
	LD	HL,1
	LD	BC,-308
	CALL	__istix
	JR	L_263
L_262:
	OR	A,A
	SBC	HL,HL
	LD	BC,-308
	CALL	__istix
L_263:
	LD	HL,(IX+-22)
	LD	BC,-311
	CALL	__istix
	LD	BC,(IX+-22)
	LEA	IY,IX+-128
	LD	(IY+-30),BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	(IX+-33),HL
	LD	(IY+-6),HL
	LD	BC,_statmods
	LD	HL,(IX+-33)
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	(IX+-30),HL
	LD	(IX+-116),HL
	LD	(IX+-86),HL
	LD	(IX+-98),HL
	LD	(IX+-54),HL
	LD	IY,(IX+-10)
	LEA	HL,IY+5
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-494	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	IY,(IX+-22)
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	LD	BC,-494	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	DE,HL
	LD	BC,7
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-497	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-308
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-449	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-497	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-449	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+6
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	LD	BC,(HL)
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_272
L_268:
;  720			text_Display("It Missed", true);
.LINE 720

	LD	BC,1
	PUSH	BC
	LD	BC,L__168
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  721			if (data_moves[move].statustype == 25) {
.LINE 721

	LD	BC,-311
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,25
	JR	NZ,L_582
;  722				takedamage(player, stats[player].health);
.LINE 722

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  723			}
.LINE 723

;  724			return;
.LINE 724

	JR	L_582
;  725		}
L_272:
.LINE 725

;  726		if (!(*currentStatusPointer[player] == 4) && data_moves[move].statustype == 26) {
.LINE 726

	LD	BC,-323
	CALL	__ildix
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	Z,L_274
	LD	BC,(IX+-22)
	LEA	IY,IX+-128
	LD	(IY+-30),BC
	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_274
;  727			text_Display("It Failed", true);
.LINE 727

	LD	BC,1
	PUSH	BC
	LD	BC,L__172
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  728		}
L_274:
.LINE 728

;  729		if (data_moves[move].statustype == 22) {
.LINE 729

	LEA	IY,IX+-128
	LD	BC,(IY+-30)
	LD	(IX+-122),BC
	LD	IY,(IX+-122)
	LD	A,(IY+19)
	CP	A,22
	JR	NZ,L_276
;  730			hitcount = (rand() % 3) + 1;
.LINE 730

	CALL	_rand
	LD	BC,3
	CALL	__irems
	INC	HL
	LD	(IX+-27),L
;  731		}
L_276:
.LINE 731

;  732		if (data_moves[move].statustype == 23) {
.LINE 732

	LD	BC,(IX+-122)
	LD	(IX+-113),BC
	LD	IY,(IX+-122)
	LD	A,(IY+19)
	CP	A,23
	JR	NZ,L_449
;  733			hitcount = 1;
.LINE 733

	LD	(IX+-27),1
;  734		}
L_449:
.LINE 734

;  735	
;  736	startattack:
.LINE 736

L_277:
;  737		if (data_moves[move].type < 2 || data_moves[move].type == 19) {
.LINE 737

	LD	BC,(IX+-113)
	LD	(IX+-3),BC
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	C,L_447
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_448
L_447:
;  738			if (data_moves[move].type == 0) {
.LINE 738

	LEA	IY,IX+-128
	LD	BC,(IY+-39)
	LD	(IX+-26),BC
	LD	IY,(IX+-26)
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_310
;  739				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
.LINE 739

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_280
	LD	HL,1
	LD	BC,-314
	CALL	__istix
	JR	L_281
L_280:
	OR	A,A
	SBC	HL,HL
	LD	BC,-314
	CALL	__istix
L_281:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_284
	LD	HL,1
	LD	BC,-317
	CALL	__istix
	JR	L_285
L_284:
	OR	A,A
	SBC	HL,HL
	LD	BC,-317
	CALL	__istix
L_285:
	LD	BC,(IX+-10)
	LD	(IX+-30),BC
	LD	(IX+-116),BC
	LD	BC,(IX+-26)
	LD	(IX+-119),BC
	LD	BC,(IX+-26)
	LD	(IX+-59),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-19),HL
	LD	(IX+-110),HL
	LD	(IX+-107),HL
	LD	(IX+-125),HL
	LD	BC,(IX+-30)
	LD	(IX+-86),BC
	LD	BC,(IX+-30)
	LD	(IX+-98),BC
	LD	BC,(IX+-30)
	LD	(IX+-54),BC
	LD	HL,(IX+-30)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-467	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-467	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-470	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,5
	LD	HL,(IX+-19)
	CALL	__idivs
	LD	DE,HL
	INC	DE
	INC	DE
	LD	IY,(IX+-26)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-449	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-470	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-449	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LD	BC,7
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-317
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-449	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-449	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-476	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,12
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-479	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-314
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-449	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-479	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-449	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-476	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  740			}
;  741			else if (data_moves[move].type == 1) {
.LINE 741

	JR	L_311
L_310:
	LD	BC,(IX+-26)
	LD	(IX+-119),BC
	LD	BC,(IX+-26)
	LD	(IX+-59),BC
	LD	IY,(IX+-26)
	LD	A,(IY+15)
	CP	A,1
	JR	NZ,L_308
;  742				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].specialattack*statmodvalues[statmods[player][2]] / 100) / (stats[!player].specialdefence * statmodvalues[statmods[!player][3]] / 100)) / 50) + 2;
.LINE 742

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_288
	LD	BC,1
	LD	(IX+-128),BC
	JR	L_289
L_288:
	LD	BC,0
	LD	(IX+-128),BC
L_289:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_292
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	JR	L_293
L_292:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-3),BC
L_293:
	LD	BC,(IX+-30)
	LD	(IX+-10),BC
	LD	(IX+-116),BC
	LD	BC,(IX+-26)
	LD	(IX+-119),BC
	LD	BC,(IX+-26)
	LD	(IX+-59),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-19),HL
	LD	(IX+-110),HL
	LD	(IX+-107),HL
	LD	(IX+-125),HL
	LD	BC,(IX+-10)
	LD	(IX+-86),BC
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-54),BC
	LD	IY,(IX+-10)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-458	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+6)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-458	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-461	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,5
	LD	HL,(IX+-19)
	CALL	__idivs
	LD	DE,HL
	INC	DE
	INC	DE
	LD	IY,(IX+-26)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-449	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-461	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-449	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-3)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-464	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,12
	LD	BC,(IX+-128)
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+8)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-464	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  743			}
;  744			else {
.LINE 744

	JR	L_311
L_308:
;  745				damage = ((((2 * userlevel / 5) + 2) * data_moves[lastmove[!player]].power * 2 * (stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
.LINE 745

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_296
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-9),BC
	JR	L_297
L_296:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-9),BC
L_297:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_300
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-12),BC
	JR	L_301
L_300:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-12),BC
L_301:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_304
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-15),BC
	JR	L_305
L_304:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-15),BC
L_305:
	LD	BC,(IX+-116)
	LD	(IX+-10),BC
	LD	(IX+-30),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-19),HL
	LD	(IX+-110),HL
	LD	(IX+-107),HL
	LD	(IX+-125),HL
	LD	BC,(IX+-10)
	LD	(IX+-86),BC
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-54),BC
	LD	HL,(IX+-10)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-440	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-440	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	DE,HL
	LD	BC,_lastmove
	LD	HL,-137
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-443	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,IX
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-446	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-443	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-443	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-446	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-443	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-452	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,5
	LD	HL,(IX+-19)
	CALL	__idivs
	LD	BC,HL
	INC	BC
	INC	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-449	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-452	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-449	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	ADD	HL,HL
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	DE,HL
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-15)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-455	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,12
	LD	BC,(IY+-12)
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-455	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  746			}
L_311:
.LINE 746

;  747			damage *= ((rand() % 16) + 85);//  /100
.LINE 747

	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+85
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  748			damage *= elements[data_moves[move].element][nonuserelement1];// /2
.LINE 748

	LD	BC,(IX+-68)
	LD	(IX+-16),BC
	LD	BC,_data_moves
	LD	HL,(IX+-16)
	ADD	HL,BC
	LD	BC,-393
	CALL	__istix
	LD	BC,-393
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-55)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  749			damage *= elements[data_moves[move].element][nonuserelement2];// /2
.LINE 749

	LD	BC,-393
	CALL	__ildix
	LD	IY,HL
	LD	H,(IY+14)
	PUSH	IY
	PUSH	BC
	LD	IY,-434	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-434	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,18
	CALL	__imulu
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-56)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  750			damage /= 400;
.LINE 750

	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,400
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  751			if (data_moves[move].element == userelement1 || data_moves[move].element == userelement2) {
.LINE 751

	LD	A,(IX+-91)
	PUSH	IY
	PUSH	BC
	LD	IY,-434	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CP	A,H
	JR	Z,L_313
	LD	BC,(IX+-119)
	LD	(IX+-59),BC
	LD	IY,(IX+-59)
	LD	A,(IY+14)
	CP	A,(IX+-92)
	JR	NZ,L_325
L_313:
;  752				damage *= 1.5;
.LINE 752

	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__ultof
	LD	HL,12582912
	LD	E,63
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  753			}
L_325:
.LINE 753

;  754	
;  755			/* Critical Hit */
;  756			if (data_moves[move].statustype == 24 || highcritratio[player]) {
.LINE 756

	LD	BC,(IX+-59)
	LD	(IX+-83),BC
	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,24
	JR	Z,L_323
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_324
L_323:
;  757				if (player) {
.LINE 757

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_318
;  758					if (data_pokemon[party[currentplayer].id].basespeed * 4 < (rand() % 256)) {
.LINE 758

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_330
;  759						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 759

	LD	IY,(IX+-19)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  760					}
;  761				}
;  762				else {
.LINE 762

	JR	L_330
L_318:
;  763					if (data_pokemon[enemyparty[currentenemy].id].basespeed * 4 < (rand() % 256)) {
.LINE 763

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_330
;  764						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 764

	LD	IY,(IX+-110)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  765					}
;  766				}
;  767			}
;  768			else {
.LINE 768

	JR	L_330
L_324:
;  769				if (player) {
.LINE 769

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_322
;  770					if (data_pokemon[party[currentplayer].id].basespeed / 2 < (rand() % 256)) {
.LINE 770

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_330
;  771						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 771

	LD	IY,(IX+-107)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  772					}
;  773				}
;  774				else {
.LINE 774

	JR	L_330
L_322:
;  775					if (data_pokemon[enemyparty[currentenemy].id].basespeed / 2 < (rand() % 256)) {
.LINE 775

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_330
;  776						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 776

	LD	IY,(IX+-125)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  777					}
;  778				}
;  779			}
L_330:
.LINE 779

;  780	
;  781			takedamage(!player, damage);
.LINE 781

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_327
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-18),BC
	JR	L_328
L_327:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-18),BC
L_328:
	LD	BC,(IX+-7)
	PUSH	BC
	LEA	IY,IX+-128
	LD	A,(IY+-18)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  782	
;  783			if (data_moves[move].statustype == 21 || data_moves[move].statustype == 26) {
.LINE 783

	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,21
	JR	Z,L_332
	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_334
L_332:
;  784				heal(player, damage / 2);
.LINE 784

	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	LD	L,1
	CALL	__lshru
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  785			}
L_334:
.LINE 785

;  786			if (data_moves[move].statustype == 19) {
.LINE 786

	LD	BC,(IX+-16)
	LD	(IX+-68),BC
	LD	HL,(IX+-16)
	LD	BC,-293
	CALL	__istix
	LD	HL,(IX+-16)
	LD	BC,-290
	CALL	__istix
	LD	BC,_data_moves
	LD	HL,(IX+-16)
	ADD	HL,BC
	LD	(IX+-113),HL
	LD	IY,(IX+-113)
	LD	A,(IY+19)
	CP	A,19
	JR	NZ,L_337
;  787				takedamage(player, damage / 3);
.LINE 787

	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,3
	XOR	A,A
	CALL	__ldivu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  788			}
L_337:
.LINE 788

;  789			if (hitcount > 0) {
.LINE 789

	XOR	A,A
	CP	A,(IX+-27)
	JR	NC,L_339
;  790				hitcount--;
.LINE 790

	DEC	(IX+-27)
;  791				redrawcharacters();
.LINE 791

	CALL	_redrawcharacters
;  792				Wait(15);
.LINE 792

	LD	BC,15
	PUSH	BC
	CALL	_Wait
	POP	BC
;  793				goto startattack;
.LINE 793

	JR	L_277
;  794			}
L_339:
.LINE 794

;  795	
;  796			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] < 4) {
.LINE 796

	LD	BC,_data_moves
	LD	HL,(IX+-16)
	ADD	HL,BC
	LD	BC,-396
	CALL	__istix
	LD	BC,-396
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-55)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-396
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-56)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JP	P,L_341
;  797				text_Display("Not Very Effective", true);
.LINE 797

	LD	BC,1
	PUSH	BC
	LD	BC,L__202
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  798			}
L_341:
.LINE 798

;  799			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] > 4) {
.LINE 799

	LD	BC,_data_moves
	LD	HL,(IX+-16)
	ADD	HL,BC
	LD	BC,-399
	CALL	__istix
	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-55)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-56)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_352
;  800				text_Display("Super Effective", true);
.LINE 800

	LD	BC,1
	PUSH	BC
	LD	BC,L__204
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  801			}
L_352:
.LINE 801

;  802			if (rage[!player]) {
.LINE 802

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_343
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-21),BC
	JR	L_344
L_343:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-21),BC
L_344:
	LD	BC,_rage
	LD	HL,-149
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_353
;  803				statmods[!player][0]++;
.LINE 803

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_347
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-24),BC
	JR	L_348
L_347:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-24),BC
L_348:
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-24)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-402
	CALL	__istix
	LD	BC,-402
	CALL	__ildix
	LD	IY,HL
	LD	BC,-402
	CALL	__ildix
	LD	A,(IY)
	INC	A
	LD	(HL),A
;  804			}
L_353:
.LINE 804

;  805			redrawcharacters();
.LINE 805

	CALL	_redrawcharacters
;  806		}
;  807		/* Raise user stat */
;  808		else if (data_moves[move].type == 2) {
.LINE 808

	JR	L_578
L_448:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-72),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	NZ,L_446
;  809			if (statmods[player][data_moves[move].statustype] + data_moves[move].power > 12) {
.LINE 809

	LD	BC,-293
	CALL	__ildix
	LD	(IX+-39),HL
	LD	BC,_data_moves
	LD	HL,(IX+-39)
	ADD	HL,BC
	LD	BC,-405
	CALL	__istix
	LD	BC,(IX+-86)
	LEA	IY,IX+-128
	LD	(IY+-78),BC
	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-206
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	JP	P,L_355
;  810				statmods[player][data_moves[move].statustype] = 12;
.LINE 810

	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-72),BC
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-206
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	LD	(HL),12
;  811			}
;  812			else {
.LINE 812

	JR	L_356
L_355:
;  813				statmods[player][data_moves[move].statustype] += data_moves[move].power;
.LINE 813

	LD	BC,_data_moves
	LD	HL,(IX+-39)
	ADD	HL,BC
	LD	BC,-411
	CALL	__istix
	LD	BC,(IX+-33)
	LEA	IY,IX+-128
	LD	(IY+-6),BC
	LD	BC,_statmods
	LD	HL,(IX+-33)
	ADD	HL,BC
	LD	BC,-408
	CALL	__istix
	LD	BC,-411
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-408
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-491	; spill
	CALL	__istix
	POP	BC
	LD	BC,-411
	CALL	__ildix
	LD	DE,HL
	LD	BC,-411
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-408
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-482	; spill
	CALL	__istix
	LD	BC,-491	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-482	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	ADD	A,(IY+16)
	LD	(HL),A
;  814			}
L_356:
.LINE 814

;  815			sprintf(str, "%s's %s rose", username, text_status2[data_moves[move].statustype]);
.LINE 815

	LEA	IY,IX+-128
	LD	IY,(IY+-72)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__210
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  816			text_Display(str, true);
.LINE 816

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  817		}
;  818		/* Lower non-user stat */
;  819		else if (data_moves[move].type == 3) {
.LINE 819

	JR	L_578
L_446:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-81),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,3
	JR	NZ,L_444
;  820			if (statmods[!player][data_moves[move].statustype] < data_moves[move].power) {
.LINE 820

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_358
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-27),BC
	JR	L_359
L_358:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-27),BC
L_359:
	LD	BC,-290
	CALL	__ildix
	LD	(IX+-42),HL
	LD	BC,_data_moves
	LD	HL,(IX+-42)
	ADD	HL,BC
	LD	BC,-414
	CALL	__istix
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-27)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,-414
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	IY,HL
	LD	BC,-414
	CALL	__ildix
	LD	A,(IY)
	LD	IY,HL
	CP	A,(IY+16)
	JR	NC,L_370
;  821				statmods[!player][data_moves[move].statustype] = 0;
.LINE 821

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_362
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-33),BC
	JR	L_363
L_362:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-33),BC
L_363:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-81),BC
	LD	HL,7
	LD	BC,(IY+-33)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),0
;  822			}
;  823			else {
.LINE 823

	JR	L_371
L_370:
;  824				statmods[!player][data_moves[move].statustype] -= data_moves[move].power;
.LINE 824

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_366
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-36),BC
	JR	L_367
L_366:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-36),BC
L_367:
	LD	BC,_data_moves
	LD	HL,(IX+-42)
	ADD	HL,BC
	LD	BC,-420
	CALL	__istix
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-36)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-417
	CALL	__istix
	LD	BC,-420
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-417
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-488	; spill
	CALL	__istix
	POP	BC
	LD	BC,-420
	CALL	__ildix
	LD	DE,HL
	LD	BC,-420
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-417
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-482	; spill
	CALL	__istix
	LD	BC,-488	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-482	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	SUB	A,(IY+16)
	LD	(HL),A
;  825			}
L_371:
.LINE 825

;  826			sprintf(str, "%s's %s fell", nonusername, text_status2[data_moves[move].statustype]);
.LINE 826

	LEA	IY,IX+-128
	LD	IY,(IY+-81)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__216
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  827			text_Display(str, true);
.LINE 827

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  828		}
;  829		else if (data_moves[move].type == 5) {
.LINE 829

	JR	L_578
L_444:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,5
	JR	NZ,L_442
;  830			takedamage(!player, data_moves[move].power);
.LINE 830

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_373
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-42),BC
	JR	L_374
L_373:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-42),BC
L_374:
	LD	IY,(IX+-3)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-42)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  831		}
;  832		else if (data_moves[move].type == 6 || data_moves[move].type == 7) {
.LINE 832

	JR	L_578
L_442:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,6
	JR	Z,L_439
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,7
	JR	NZ,L_440
L_439:
;  833			if (wild) {
.LINE 833

	LD	A,(_wild)
	OR	A,A
	JR	Z,L_378
;  834				run = true;
.LINE 834

	LD	A,1
	LD	(_run),A
;  835			}
;  836			else {
.LINE 836

	JR	L_578
L_378:
;  837				text_Display("It Failed", true);
.LINE 837

	LD	BC,1
	PUSH	BC
	LD	BC,L__222
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  838			}
;  839		}
;  840		else if (data_moves[move].type == 8) {
.LINE 840

	JR	L_578
L_440:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,8
	JR	NZ,L_438
;  841			heal(player, stats[player].health / 2);
.LINE 841

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  842		}
;  843		else if (data_moves[move].type == 9) {
.LINE 843

	JR	L_578
L_438:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,9
	JR	NZ,L_436
;  844			takedamage(!player, userlevel);
.LINE 844

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_380
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-45),BC
	JR	L_381
L_380:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-45),BC
L_381:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-45)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  845		}
;  846		else if (data_moves[move].type == 10) {
.LINE 846

	JR	L_578
L_436:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,10
	JR	NZ,L_434
;  847			takedamage(!player, userlevel * 20 / (10 + (rand() % 20)));
.LINE 847

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_384
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-48),BC
	JR	L_385
L_384:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-48),BC
L_385:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,20
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+10
	LD	HL,DE
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-48)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  848		}
;  849		else if (data_moves[move].type == 11) {
.LINE 849

	JR	L_578
L_434:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,11
	JR	NZ,L_432
;  850			takedamage(!player, stats[!player].health / 2);
.LINE 850

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_388
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-51),BC
	JR	L_389
L_388:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-51),BC
L_389:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_392
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-54),BC
	JR	L_393
L_392:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-54),BC
L_393:
	LD	HL,12
	LEA	IY,IX+-128
	LD	BC,(IY+-54)
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-51)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  851		}
;  852		else if (data_moves[move].type == 12) {
.LINE 852

	JR	L_578
L_432:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,12
	JR	NZ,L_430
;  853			i = 0;
.LINE 853

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  854			while (i < sizeof(statmods[player])) {
.LINE 854

	JR	L_396
L_397:
;  855				statmods[player][i] = 6;
.LINE 855

	LD	BC,(IX+-98)
	LD	(IX+-54),BC
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-54)
	ADD	HL,BC
	LD	(HL),6
;  856				i++;
.LINE 856

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  857			}
L_396:
.LINE 857

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,7
	OR	A,A
	SBC	HL,BC
	JR	C,L_397
;  858			while (i < sizeof(statmods[!player])) {
.LINE 858

	JR	L_403
L_404:
;  859				statmods[player][i] = 6;
.LINE 859

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-54)
	ADD	HL,BC
	LD	(HL),6
;  860				i++;
.LINE 860

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  861			}
L_403:
.LINE 861

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,7
	OR	A,A
	SBC	HL,BC
	JR	C,L_404
	JR	L_578
;  862		}
;  863		else if (data_moves[move].type == 13) {
L_430:
.LINE 863

	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,13
	JR	NZ,L_428
;  864			*currentStatusPointer[player] = 4;
.LINE 864

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),4
;  865			heal(player, 1000);
.LINE 865

	LD	BC,1000
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  866		}
;  867		else if (data_moves[move].type == 14) {
.LINE 867

	JR	L_578
L_428:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,14
	JR	NZ,L_426
;  868			disabledturns[!player] = (rand() % 7) + 2;
.LINE 868

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_407
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-57),BC
	JR	L_408
L_407:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-57),BC
L_408:
	CALL	_rand
	LD	BC,7
	CALL	__irems
	INC	HL
	INC	HL
	LD	A,L
	LD	BC,_disabledturns
	LD	HL,-185
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),A
;  869			disabledmove[!player] = lastmove[!player];
.LINE 869

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_415
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-60),BC
	JR	L_416
L_415:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-60),BC
L_416:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_411
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-63),BC
	JR	L_412
L_411:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-63),BC
L_412:
	LD	BC,_lastmove
	LD	HL,-188
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,_disabledmove
	LD	HL,-191
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
;  870		}
;  871		else if (data_moves[move].type == 15) {
.LINE 871

	JR	L_578
L_426:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,15
	JR	NZ,L_578
;  872			if ((int)userlevel - (int)nonuserlevel + 30 > (rand() % 100)) {
.LINE 872

	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-90)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	DE,IY+30
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_423
;  873				takedamage(!player, 800);
.LINE 873

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_419
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-66),BC
	JR	L_420
L_419:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-66),BC
L_420:
	LD	BC,800
	PUSH	BC
	LEA	IY,IX+-128
	LD	A,(IY+-66)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  874			}
;  875			else {
.LINE 875

	JR	L_578
L_423:
;  876				text_Display("It Missed", true);
.LINE 876

	LD	BC,1
	PUSH	BC
	LD	BC,L__242
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  877			}
;  878		}
L_578:
.LINE 878

;  879		/* Apply Stat or Status Effects */
;  880		if (data_moves[move].type == 4 || (rand() % 100) < data_moves[move].statuschance) {
.LINE 880

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-95),HL
	LD	BC,_data_moves
	LD	HL,(IX+-95)
	ADD	HL,BC
	LD	(IX+-62),HL
	LEA	IY,IX+-128
	LD	(IY+-90),HL
	LD	IY,(IX+-62)
	LD	A,(IY+15)
	CP	A,4
	JR	Z,L_577
	LD	BC,(IX+-62)
	LEA	IY,IX+-128
	LD	(IY+-90),BC
	LD	BC,(IX+-62)
	LD	(IY+-96),BC
	LD	IY,(IX+-62)
	LD	A,(IY+20)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-500
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-500
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-501
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_581
L_577:
;  881			if (data_moves[move].statustype == 30) {
.LINE 881

	LEA	IY,IX+-128
	LD	BC,(IY+-90)
	LD	(IX+-45),BC
	LD	IY,(IX+-45)
	LD	A,(IY+19)
	CP	A,30
	JR	NZ,L_452
;  882				e = rand() % 3;
.LINE 882

	CALL	_rand
	LD	BC,3
	CALL	__irems
	LD	BC,HL
	LD	HL,_e
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  883			}
;  884			else {
.LINE 884

	JR	L_470
L_452:
;  885				e = 3;
.LINE 885

	LD	HL,_e
	LD	(HL),3
	INC	HL
	LD	(HL),0
;  886			}
L_470:
.LINE 886

;  887			if (data_moves[move].statustype < 7) {
.LINE 887

	LD	BC,(IX+-45)
	LEA	IY,IX+-128
	LD	(IY+-102),BC
	LD	IY,(IX+-45)
	LD	A,(IY+19)
	CP	A,7
	JR	NC,L_483
;  888				if (mistturns[!player] || statmods[!player][data_moves[move].statustype] == 0) {
.LINE 888

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_454
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-69),BC
	JR	L_455
L_454:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-69),BC
L_455:
	LD	BC,_mistturns
	LD	HL,-197
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_467
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_458
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-75),BC
	JR	L_459
L_458:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-75),BC
L_459:
	LD	BC,(IX+-45)
	LEA	IY,IX+-128
	LD	(IY+-102),BC
	LD	HL,7
	LD	BC,(IY+-75)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-45)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_468
L_467:
;  889					text_Display("It Failed", true);
.LINE 889

	LD	BC,1
	PUSH	BC
	LD	BC,L__251
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  890				}
;  891				else {
.LINE 891

	JR	L_483
L_468:
;  892					statmods[!player][data_moves[move].statustype] --;
.LINE 892

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_463
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-84),BC
	JR	L_464
L_463:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-84),BC
L_464:
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-84)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-426
	CALL	__istix
	LD	BC,_data_moves
	LD	HL,(IX+-95)
	ADD	HL,BC
	LD	BC,-423
	CALL	__istix
	LD	BC,-423
	CALL	__ildix
	LD	IY,HL
	LD	B,(IY+19)
	LD	A,B
	UEXT	HL
	LD	L,A
	LD	IY,-426
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	ADD	HL,DE
	PUSH	BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	BC
	LD	A,B
	UEXT	HL
	LD	L,A
	LD	IY,-426
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	ADD	HL,DE
	PUSH	BC
	LD	BC,-482	; spill
	CALL	__istix
	LD	BC,-485	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-482	; unspill
	CALL	__ildix
	POP	BC
	DEC	A
	LD	(HL),A
;  893					sprintf(str, "%s's %s fell", true, nonusername, text_status2[data_moves[move].statustype]);
.LINE 893

	LD	A,B
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,L__253
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  894					text_Display(str, true);
.LINE 894

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  895				}
;  896			}
L_483:
.LINE 896

;  897			if (data_moves[move].statustype == 7) {
.LINE 897

	LEA	IY,IX+-128
	LD	BC,(IY+-102)
	LD	(IX+-104),BC
	LD	(IY+-105),BC
	LD	IY,(IX+-104)
	LD	A,(IY+19)
	CP	A,7
	JR	NZ,L_497
;  898				if (*currentStatusPointer[!player] == 0) {
.LINE 898

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_472
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-87),BC
	JR	L_473
L_472:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-87),BC
L_473:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-87)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_481
;  899					*currentStatusPointer[!player] = 1;
.LINE 899

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_476
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-93),BC
	JR	L_477
L_476:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-93),BC
L_477:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-93)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),1
;  900					sprintf(str, "%s was poisoned", nonusername);
.LINE 900

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__258
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  901					text_Display(str, true);
.LINE 901

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  902				}
;  903				else if (data_moves[move].type == 4) {
.LINE 903

	JR	L_497
L_481:
	LD	BC,(IX+-104)
	LEA	IY,IX+-128
	LD	(IY+-105),BC
	LD	IY,(IX+-104)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_497
;  904					text_Display("It failed", true);
.LINE 904

	LD	BC,1
	PUSH	BC
	LD	BC,L__260
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  905				}
;  906			}
L_497:
.LINE 906

;  907			if (data_moves[move].statustype == 8 || e == 0) {
.LINE 907

	LEA	IY,IX+-128
	LD	BC,(IY+-105)
	LD	(IX+-71),BC
	LD	(IY+-111),BC
	LD	IY,(IX+-71)
	LD	A,(IY+19)
	CP	A,8
	JR	Z,L_496
	LD	HL,(_e)
	CALL	__scmpzero
	JR	NZ,L_511
L_496:
;  908				if (*currentStatusPointer[!player] == 0) {
.LINE 908

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_486
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-99),BC
	JR	L_487
L_486:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-99),BC
L_487:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-99)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_495
;  909					*currentStatusPointer[!player] = 2;
.LINE 909

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_490
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-108),BC
	JR	L_491
L_490:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-108),BC
L_491:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-108)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),2
;  910					sprintf(str, "%s was burned", nonusername);
.LINE 910

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__266
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  911					text_Display(str, true);
.LINE 911

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  912				}
;  913				else if (data_moves[move].type == 4) {
.LINE 913

	JR	L_511
L_495:
	LD	BC,(IX+-71)
	LEA	IY,IX+-128
	LD	(IY+-111),BC
	LD	IY,(IX+-71)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_511
;  914					text_Display("It failed", true);
.LINE 914

	LD	BC,1
	PUSH	BC
	LD	BC,L__268
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  915				}
;  916			}
L_511:
.LINE 916

;  917			if (data_moves[move].statustype == 9 || e == 1) {
.LINE 917

	LEA	IY,IX+-128
	LD	BC,(IY+-111)
	LD	(IX+-74),BC
	LD	(IY+-117),BC
	LD	IY,(IX+-74)
	LD	A,(IY+19)
	CP	A,9
	JR	Z,L_510
	LD.LIS	BC,1
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_524
L_510:
;  918				if (*currentStatusPointer[!player] == 0) {
.LINE 918

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_500
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-114),BC
	JR	L_501
L_500:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-114),BC
L_501:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-114)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_509
;  919					*currentStatusPointer[!player] = 3;
.LINE 919

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_504
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-120),BC
	JR	L_505
L_504:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-120),BC
L_505:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-120)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),3
;  920					sprintf(str, "%s was paralysed", nonusername);
.LINE 920

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__274
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  921					text_Display(str, true);
.LINE 921

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  922				}
;  923				else if (data_moves[move].type == 4) {
.LINE 923

	JR	L_524
L_509:
	LD	BC,(IX+-74)
	LEA	IY,IX+-128
	LD	(IY+-117),BC
	LD	IY,(IX+-74)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_524
;  924					text_Display("It failed", true);
.LINE 924

	LD	BC,1
	PUSH	BC
	LD	BC,L__276
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  925				}
;  926			}
L_524:
.LINE 926

;  927			if (data_moves[move].statustype == 10) {
.LINE 927

	LEA	IY,IX+-128
	LD	BC,(IY+-117)
	LD	(IX+-77),BC
	LD	(IY+-123),BC
	LD	IY,(IX+-77)
	LD	A,(IY+19)
	CP	A,10
	JR	NZ,L_538
;  928				if (*currentStatusPointer[!player] == 0) {
.LINE 928

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_513
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-126),BC
	JR	L_514
L_513:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-126),BC
L_514:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-126)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_522
;  929					*currentStatusPointer[!player] = 4;
.LINE 929

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_517
	LD	HL,1
	LD	BC,-260
	CALL	__istix
	JR	L_518
L_517:
	OR	A,A
	SBC	HL,HL
	LD	BC,-260
	CALL	__istix
L_518:
	LD	DE,3
	CALL	__ildix
	LD	BC,HL
	LD	HL,DE
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),4
;  930					sprintf(str, "%s fell asleep", nonusername);
.LINE 930

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__281
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  931					text_Display(str, true);
.LINE 931

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  932				}
;  933				else if (data_moves[move].type == 4) {
.LINE 933

	JR	L_538
L_522:
	LD	BC,(IX+-77)
	LEA	IY,IX+-128
	LD	(IY+-123),BC
	LD	IY,(IX+-77)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_538
;  934					text_Display("It failed", true);
.LINE 934

	LD	BC,1
	PUSH	BC
	LD	BC,L__283
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  935				}
;  936			}
L_538:
.LINE 936

;  937			if (data_moves[move].statustype == 11 || e == 2) {
.LINE 937

	LEA	IY,IX+-128
	LD	BC,(IY+-123)
	LD	(IX+-80),BC
	LD	HL,BC
	LD	BC,-257
	CALL	__istix
	LD	IY,(IX+-80)
	LD	A,(IY+19)
	CP	A,11
	JR	Z,L_537
	LD.LIS	BC,2
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_544
L_537:
;  938				if (*currentStatusPointer[!player] == 0) {
.LINE 938

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_527
	LD	HL,1
	LD	BC,-263
	CALL	__istix
	JR	L_528
L_527:
	OR	A,A
	SBC	HL,HL
	LD	BC,-263
	CALL	__istix
L_528:
	LD	DE,3
	CALL	__ildix
	LD	BC,HL
	LD	HL,DE
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_536
;  939					*currentStatusPointer[!player] = 5;
.LINE 939

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_531
	LD	HL,1
	LD	BC,-269
	CALL	__istix
	JR	L_532
L_531:
	OR	A,A
	SBC	HL,HL
	LD	BC,-269
	CALL	__istix
L_532:
	CALL	__ildix
	LD	BC,HL
	LD	HL,DE
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),5
;  940					sprintf(str, "%s was frozen", nonusername);
.LINE 940

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__289
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  941					text_Display(str, true);
.LINE 941

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  942				}
;  943				else if (data_moves[move].type == 4) {
.LINE 943

	JR	L_544
L_536:
	LD	HL,(IX+-80)
	LD	BC,-257
	CALL	__istix
	LD	IY,(IX+-80)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_544
;  944					text_Display("It failed", true);
.LINE 944

	LD	BC,1
	PUSH	BC
	LD	BC,L__291
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  945				}
;  946			}
L_544:
.LINE 946

;  947	
;  948			if (data_moves[move].statustype == 12) {
.LINE 948

	LD	BC,-257
	CALL	__ildix
	LD	(IX+-13),HL
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,12
	JR	NZ,L_550
;  949				confusedturns[!player] = (rand() % 4) + 1;
.LINE 949

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_540
	LD	HL,1
	LD	BC,-272
	CALL	__istix
	JR	L_541
L_540:
	OR	A,A
	SBC	HL,HL
	LD	BC,-272
	CALL	__istix
L_541:
	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	A,L
	LD	BC,_confusedturns
	LD	HL,-272
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),A
;  950				sprintf(str, "%s was confused", nonusername);
.LINE 950

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__294
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  951				text_Display(str, true);
.LINE 951

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  952			}
L_550:
.LINE 952

;  953			if (data_moves[move].statustype == 13) {
.LINE 953

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,13
	JR	NZ,L_556
;  954				leech[!player] = true;
.LINE 954

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_546
	LD	HL,1
	LD	BC,-275
	CALL	__istix
	JR	L_547
L_546:
	OR	A,A
	SBC	HL,HL
	LD	BC,-275
	CALL	__istix
L_547:
	LD	BC,_leech
	LD	HL,-275
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),1
;  955				sprintf(str, "%s was leeched", nonusername);
.LINE 955

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__297
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  956				text_Display(str, true);
.LINE 956

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  957			}
L_556:
.LINE 957

;  958			if (data_moves[move].statustype == 14) {
.LINE 958

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,14
	JR	NZ,L_558
;  959				trapturns[!player] = (rand() % 2) + 4;
.LINE 959

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_552
	LD	HL,1
	LD	BC,-278
	CALL	__istix
	JR	L_553
L_552:
	OR	A,A
	SBC	HL,HL
	LD	BC,-278
	CALL	__istix
L_553:
	CALL	_rand
	LD	BC,2
	CALL	__irems
	LD	IY,HL
	LEA	HL,IY+4
	LD	A,L
	LD	BC,_trapturns
	LD	HL,-278
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),A
;  960				sprintf(str, "%s was trapped", nonusername);
.LINE 960

	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__300
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  961				text_Display(str, true);
.LINE 961

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  962			}
L_558:
.LINE 962

;  963			if (data_moves[move].statustype == 15) {
.LINE 963

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,15
	JR	NZ,L_560
;  964				reflectturns[player] = 5;
.LINE 964

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(HL),5
;  965			}
L_560:
.LINE 965

;  966			if (data_moves[move].statustype == 16) {
.LINE 966

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,16
	JR	NZ,L_562
;  967				lightscreenturns[player] = 5;
.LINE 967

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(HL),5
;  968			}
L_562:
.LINE 968

;  969			if (data_moves[move].statustype == 17) {
.LINE 969

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,17
	JR	NZ,L_568
;  970				mistturns[player] = 5;
.LINE 970

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),5
;  971			}
L_568:
.LINE 971

;  972			if (data_moves[move].statustype == 18) {
.LINE 972

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,18
	JR	NZ,L_570
;  973				flinch[!player] = true;
.LINE 973

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_564
	LD	HL,1
	LD	BC,-281
	CALL	__istix
	JR	L_565
L_564:
	OR	A,A
	SBC	HL,HL
	LD	BC,-281
	CALL	__istix
L_565:
	LD	BC,_flinch
	LD	HL,-281
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),1
;  974			}
L_570:
.LINE 974

;  975			if (data_moves[move].statustype == 27) {
.LINE 975

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,27
	JR	NZ,L_574
;  976				highcritratio[player] = true;
.LINE 976

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),1
;  977			}
L_574:
.LINE 977

;  978			if (data_moves[move].statustype == 28) {
.LINE 978

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,28
	JR	NZ,L_576
;  979				statmods[player][0]++;
.LINE 979

	LEA	IY,IX+-128
	LD	HL,(IY+-6)
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-432
	CALL	__istix
	LD	BC,-432
	CALL	__ildix
	LD	IY,HL
	LD	BC,-432
	CALL	__ildix
	LD	A,(IY)
	INC	A
	LD	(HL),A
;  980				statmods[player][1]++;
.LINE 980

	LD	HL,-432
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	INC	HL
	LD	BC,-429
	CALL	__istix
	LD	BC,-429
	CALL	__ildix
	LD	IY,-432
	LD	BC,IX
	ADD	IY,BC
	LD	IY,(IY)
	LD	A,(HL)
	INC	A
	LD	(IY+1),A
;  981			}
L_576:
.LINE 981

;  982			if (data_moves[move].statustype == 29) {
.LINE 982

	LD	BC,(IX+-13)
	LEA	IY,IX+-128
	LD	(IY+-96),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,29
	JR	NZ,L_581
;  983				rage[player] = true;
.LINE 983

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),1
;  984			}
;  985		}
L_581:
.LINE 985

;  986	
;  987		
;  988	
;  989		if (attackturns[player] == 1 && data_moves[move].statustype == 32) {
.LINE 989

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	BC,-266
	CALL	__istix
	LD	BC,-266
	CALL	__ildix
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_582
	LEA	IY,IX+-128
	LD	IY,(IY+-96)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_582
;  990			attackturns[player] = 0;
.LINE 990

	LD	BC,-266
	CALL	__ildix
	LD	(HL),0
;  991			confusedturns[player] = (rand() % 4) + 1;
.LINE 991

	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	B,L
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_confusedturns
	ADD	HL,DE
	LD	(HL),B
;  992			sprintf(str, "%s became confused", username);
.LINE 992

	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__311
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  993			text_Display(str, true);
.LINE 993

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  994		}
;  995	}
L_582:
.LINE 995

	LD	SP,IX
	POP	IX
	RET	


;**************************** _attack ***************************
;Name                         Addr/Register   Size   Type
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_e                                  IMPORT      2   variable
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_i                                  IMPORT      2   variable
;_run                                STATIC      1   variable
;_wild                               STATIC      1   variable
;_text_status2                       IMPORT    112   variable
;_Wait                               IMPORT  -----   function
;_redrawcharacters                   IMPORT  -----   function
;_heal                               IMPORT  -----   function
;_highcritratio                      STATIC      2   variable
;_elements                           IMPORT    324   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_statmodvalues                      STATIC     39   variable
;_statmods                           STATIC     14   variable
;_confusedturns                      STATIC      2   variable
;_currentStatusPointer               STATIC      6   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_rand                               IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_flinch                             STATIC      2   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;_rage                               STATIC      2   variable
;nonusername                         IX-363     20   variable
;username                            IX-343     20   variable
;G_47                                IX-323      3   variable
;G_42                                IX-320      3   variable
;temp286                             IX-317      3   variable
;temp282                             IX-314      3   variable
;G_46                                IX-311      3   variable
;temp264                             IX-308      3   variable
;temp260                             IX-305      3   variable
;G_31                                IX-302      3   variable
;temp224                             IX-299      3   variable
;temp218                             IX-296      3   variable
;G_73                                IX-293      3   variable
;G_81                                IX-290      3   variable
;G_28                                IX-287      3   variable
;G_27                                IX-284      3   variable
;temp566                             IX-281      3   variable
;temp554                             IX-278      3   variable
;temp548                             IX-275      3   variable
;temp542                             IX-272      3   variable
;temp533                             IX-269      3   variable
;G_126                               IX-266      3   variable
;temp529                             IX-263      3   variable
;temp519                             IX-260      3   variable
;G_114                               IX-257      3   variable
;temp515                             IX-254      3   variable
;G_112                               IX-251      3   variable
;temp506                             IX-248      3   variable
;G_110                               IX-245      3   variable
;temp502                             IX-242      3   variable
;G_108                               IX-239      3   variable
;temp492                             IX-236      3   variable
;G_106                               IX-233      3   variable
;G_104                               IX-230      3   variable
;temp488                             IX-227      3   variable
;G_125                               IX-224      3   variable
;temp478                             IX-221      3   variable
;G_100                               IX-218      3   variable
;temp474                             IX-215      3   variable
;temp465                             IX-212      3   variable
;G_84                                IX-209      3   variable
;G_75                                IX-206      3   variable
;temp460                             IX-203      3   variable
;G_79                                IX-200      3   variable
;temp456                             IX-197      3   variable
;temp421                             IX-194      3   variable
;temp413                             IX-191      3   variable
;temp417                             IX-188      3   variable
;temp409                             IX-185      3   variable
;temp394                             IX-182      3   variable
;temp390                             IX-179      3   variable
;temp386                             IX-176      3   variable
;temp382                             IX-173      3   variable
;temp375                             IX-170      3   variable
;G_53                                IX-167      3   variable
;temp368                             IX-164      3   variable
;temp364                             IX-161      3   variable
;G_49                                IX-158      3   variable
;temp360                             IX-155      3   variable
;temp349                             IX-152      3   variable
;temp345                             IX-149      3   variable
;temp329                             IX-146      3   variable
;temp306                             IX-143      3   variable
;temp302                             IX-140      3   variable
;temp298                             IX-137      3   variable
;G_123                               IX-134      3   variable
;temp294                             IX-131      3   variable
;temp290                             IX-128      3   variable
;G_66                                IX-125      3   variable
;G_50                                IX-122      3   variable
;G_61                                IX-119      3   variable
;G_59                                IX-116      3   variable
;G_51                                IX-113      3   variable
;G_64                                IX-110      3   variable
;G_65                                IX-107      3   variable
;G_105                               IX-104      3   variable
;G_30                                IX-101      3   variable
;G_94                                 IX-98      3   variable
;G_103                                IX-95      3   variable
;userelement2                         IX-92      1   variable
;userelement1                         IX-91      1   variable
;nonuserlevel                         IX-90      1   variable
;G_43                                 IX-89      3   variable
;G_74                                 IX-86      3   variable
;G_67                                 IX-83      3   variable
;G_113                                IX-80      3   variable
;G_111                                IX-77      3   variable
;G_109                                IX-74      3   variable
;G_107                                IX-71      3   variable
;G_60                                 IX-68      3   variable
;G_44                                 IX-65      3   variable
;G_99                                 IX-62      3   variable
;G_62                                 IX-59      3   variable
;nonuserelement2                      IX-56      1   variable
;nonuserelement1                      IX-55      1   variable
;G_95                                 IX-54      3   variable
;G_40                                 IX-51      3   variable
;G_37                                 IX-48      3   variable
;G_101                                IX-45      3   variable
;G_83                                 IX-42      3   variable
;G_77                                 IX-39      3   variable
;G_33                                 IX-36      3   variable
;G_78                                 IX-33      3   variable
;G_57                                 IX-30      3   variable
;hitcount                             IX-27      1   variable
;G_55                                 IX-26      3   variable
;userlevel                            IX-23      1   variable
;G_29                                 IX-22      3   variable
;G_63                                 IX-19      3   variable
;G_69                                 IX-16      3   variable
;G_115                                IX-13      3   variable
;G_54                                 IX-10      3   variable
;damage                                IX-7      4   variable
;G_52                                  IX-3      3   variable
;move                                  IX+9      1   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 513 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "attack",995,"_attack"
	SEGMENT STRSECT
L__132:
	DB	"%s flinched"
	DB	0
L__134:
	DB	"%s used %s"
	DB	0
L__135:
	DB	"%s used %s"
	DB	0
L__141:
	DB	"It Failed"
	DB	0
L__152:
	DB	"%s is paralysed"
	DB	0
L__155:
	DB	"%s woke up"
	DB	0
L__156:
	DB	"%s is asleep"
	DB	0
L__159:
	DB	"%s thawed out"
	DB	0
L__160:
	DB	"%s is frozen"
	DB	0
L__163:
	DB	"%s hurt itself in its confusion"
	DB	0
L__168:
	DB	"It Missed"
	DB	0
L__172:
	DB	"It Failed"
	DB	0
L__202:
	DB	"Not Very Effective"
	DB	0
L__204:
	DB	"Super Effective"
	DB	0
L__210:
	DB	"%s's %s rose"
	DB	0
L__216:
	DB	"%s's %s fell"
	DB	0
L__222:
	DB	"It Failed"
	DB	0
L__242:
	DB	"It Missed"
	DB	0
L__251:
	DB	"It Failed"
	DB	0
L__253:
	DB	"%s's %s fell"
	DB	0
L__258:
	DB	"%s was poisoned"
	DB	0
L__260:
	DB	"It failed"
	DB	0
L__266:
	DB	"%s was burned"
	DB	0
L__268:
	DB	"It failed"
	DB	0
L__274:
	DB	"%s was paralysed"
	DB	0
L__276:
	DB	"It failed"
	DB	0
L__281:
	DB	"%s fell asleep"
	DB	0
L__283:
	DB	"It failed"
	DB	0
L__289:
	DB	"%s was frozen"
	DB	0
L__291:
	DB	"It failed"
	DB	0
L__294:
	DB	"%s was confused"
	DB	0
L__297:
	DB	"%s was leeched"
	DB	0
L__300:
	DB	"%s was trapped"
	DB	0
L__311:
	DB	"%s became confused"
	DB	0
	SEGMENT CODE
;  996	
;  997	void applystatus(bool player) {
_applystatus:
.DEFINE "_applystatus"

.VALUE _applystatus

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "applystatus",997,"_applystatus"

.LINE 997

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "name"

.CLASS 65

.VALUE -32

.DIM 20

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-41
	LD	SP,HL
;  998		char name[20];
;  999		if (player) {
.LINE 999

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_584
; 1000			strcpy(name, playername);
.LINE 1000

	LD	BC,_playername
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
; 1001		}
; 1002		else {
.LINE 1002

	JR	L_586
L_584:
; 1003			strcpy(name, enemyname);
.LINE 1003

	LD	BC,_enemyname
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
; 1004		}
L_586:
.LINE 1004

; 1005		/* Poison */
; 1006		if (*currentStatusPointer[player] == 1) {
.LINE 1006

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_588
; 1007			sprintf(str, "%s was hurt by its poison", name);
.LINE 1007

	PEA	IX+-32
	LD	BC,L__315
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1008			text_Display(str, true);
.LINE 1008

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1009			takedamage(player, stats[player].health / 12);
.LINE 1009

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1010		}
L_588:
.LINE 1010

; 1011		/* Burn */
; 1012		if (*currentStatusPointer[player] == 2) {
.LINE 1012

	LD	HL,(IX+-9)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_594
; 1013			sprintf(str, "%s was hurt by its burn", name);
.LINE 1013

	PEA	IX+-32
	LD	BC,L__317
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1014			text_Display(str, true);
.LINE 1014

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1015			takedamage(player, stats[player].health / 12);
.LINE 1015

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1016		}
L_594:
.LINE 1016

; 1017		/* Leech */
; 1018		if (leech[player]) {
.LINE 1018

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_597
; 1019			sprintf(str, "%s's health was stolen by leech seed", name);
.LINE 1019

	PEA	IX+-32
	LD	BC,L__319
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1020			text_Display(str, true);
.LINE 1020

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1021			takedamage(player, stats[player].health / 8);
.LINE 1021

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1022			heal(!player, stats[player].health / 8);
.LINE 1022

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_590
	LD	BC,1
	LD	(IX+-12),BC
	JR	L_591
L_590:
	LD	BC,0
	LD	(IX+-12),BC
L_591:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
; 1023		}
L_597:
.LINE 1023

; 1024		/* Trap */
; 1025		if (trapturns[player] > 0) {
.LINE 1025

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_599
; 1026			sprintf(str, "%s's was hurt by the trap", name);
.LINE 1026

	PEA	IX+-32
	LD	BC,L__322
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1027			text_Display(str, true);
.LINE 1027

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1028			takedamage(player, stats[player].health / 16);
.LINE 1028

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1029			trapturns[player]--;
.LINE 1029

	LD	HL,(IX+-3)
	LD	IY,(IX+-3)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1030		}
L_599:
.LINE 1030

; 1031	
; 1032		reflectturns[player]--;
.LINE 1032

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	IY,(IX+-41)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1033		lightscreenturns[player]--;
.LINE 1033

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	IY,(IX+-38)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1034		mistturns[player]--;
.LINE 1034

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(IX+-35),HL
	LD	IY,(IX+-35)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1035		if (disabledturns[player] == 1) {
.LINE 1035

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_604
; 1036			disabledmove[player] = 0;
.LINE 1036

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1037		}
L_604:
.LINE 1037

; 1038		disabledturns[player]--;
.LINE 1038

	LD	IY,(IX+-6)
	LD	HL,(IX+-6)
	LD	A,(IY)
	DEC	A
	LD	(HL),A
; 1039	}
.LINE 1039

	LD	SP,IX
	POP	IX
	RET	


;**************************** _applystatus ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_heal                               IMPORT  -----   function
;_leech                              STATIC      2   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentStatusPointer               STATIC      6   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;name                                 IX-32     20   variable
;temp592                              IX-12      3   variable
;G_127                                 IX-9      3   variable
;G_129                                 IX-6      3   variable
;G_128                                 IX-3      3   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 50 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "applystatus",1039,"_applystatus"
	SEGMENT STRSECT
L__315:
	DB	"%s was hurt by its poison"
	DB	0
L__317:
	DB	"%s was hurt by its burn"
	DB	0
L__319:
	DB	"%s's health was stolen by leech seed"
	DB	0
L__322:
	DB	"%s's was hurt by the trap"
	DB	0
	SEGMENT CODE
; 1040	/* When a new pokemon is sent out, reset everything 
; 1041	   This also decompresses the new pokemon's sprite
; 1042	 */
; 1043	void resetstatus(bool player) {
_resetstatus:
.DEFINE "_resetstatus"

.VALUE _resetstatus

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "resetstatus",1043,"_resetstatus"

.LINE 1043

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "pokemonID"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "pokemonID"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-44
	LD	SP,HL
; 1044		i = 0;
.LINE 1044

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1045		while (i < sizeof(statmods[player])) {
.LINE 1045

	JR	L_607
L_608:
; 1046			statmods[player][i] = 6;
.LINE 1046

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_i)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),6
; 1047			i++;
.LINE 1047

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1048		}
L_607:
.LINE 1048

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,7
	OR	A,A
	SBC	HL,BC
	JR	C,L_608
; 1049		confusedturns[player] = 0;
.LINE 1049

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(HL),0
; 1050		leech[player] = false;
.LINE 1050

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	(HL),0
; 1051		leech[!player] = false;
.LINE 1051

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_611
	LD	BC,1
	LD	(IX+-11),BC
	JR	L_612
L_611:
	LD	BC,0
	LD	(IX+-11),BC
L_612:
	LD	BC,_leech
	LD	HL,(IX+-11)
	ADD	HL,BC
	LD	(HL),0
; 1052		trapturns[player] = 0;
.LINE 1052

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(HL),0
; 1053		reflectturns[!player] = 0;
.LINE 1053

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_615
	LD	BC,1
	LD	(IX+-14),BC
	JR	L_616
L_615:
	LD	BC,0
	LD	(IX+-14),BC
L_616:
	LD	BC,_reflectturns
	LD	HL,(IX+-14)
	ADD	HL,BC
	LD	(HL),0
; 1054		lightscreenturns[!player] = 0;
.LINE 1054

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_619
	LD	BC,1
	LD	(IX+-5),BC
	JR	L_620
L_619:
	LD	BC,0
	LD	(IX+-5),BC
L_620:
	LD	BC,_lightscreenturns
	LD	HL,(IX+-5)
	ADD	HL,BC
	LD	(HL),0
; 1055		mistturns[player] = 0;
.LINE 1055

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),0
; 1056		flinch[player] = false;
.LINE 1056

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	(HL),0
; 1057		flinch[!player] = false;
.LINE 1057

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_623
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_624
L_623:
	LD	BC,0
	LD	(IX+-8),BC
L_624:
	LD	BC,_flinch
	LD	HL,(IX+-8)
	ADD	HL,BC
	LD	(HL),0
; 1058		highcritratio[player] = false;
.LINE 1058

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),0
; 1059		rage[player] = false;
.LINE 1059

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
; 1060		disabledmove[player] = 0;
.LINE 1060

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1061		disabledturns[player] = 0;
.LINE 1061

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(HL),0
; 1062		lastmove[player] = 0;
.LINE 1062

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	(HL),0
; 1063		attackturns[player] = 0;
.LINE 1063

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(HL),0
; 1064		air[player] = false;
.LINE 1064

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),0
; 1065		chosenmove[player] = 0;
.LINE 1065

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_chosenmove
	ADD	HL,BC
	LD	(HL),0
; 1066	
; 1067		if (player) {
.LINE 1067

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_633
; 1068			uint8_t pokemonID;
; 1069			sprintf(playername, "%s", data_pokemon[party[currentplayer].id].name);
.LINE 1069

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__331
	PUSH	BC
	LD	BC,_playername
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1070			stats[1] = stats_CalculateStats(party[currentplayer]);
.LINE 1070

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,34
	LDIR	
	PEA	IX+-26
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
; 1071	
; 1072			pokemonID = party[currentplayer].id;
.LINE 1072

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-1),A
; 1073			if (pokemonID < 80) {
.LINE 1073

	CP	A,80
	JR	NC,L_627
; 1074				zx7_Decompress(playerSprite, PKMNSD2[pokemonID]);
.LINE 1074

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD2
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1075			}
; 1076			else {
.LINE 1076

	JR	L_628
L_627:
; 1077				zx7_Decompress(playerSprite, PKMNSD3[pokemonID - 80]);
.LINE 1077

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD3
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1078			}
L_628:
.LINE 1078

; 1079			currentStatusPointer[1] = &party[currentplayer].currentstatus;
.LINE 1079

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-41),HL	; spill
	LD	HL,_currentStatusPointer+3
	LD	(IX+-44),HL	; spill
	LD	IY,(IX+-41)
	LEA	BC,IY+15
	LD	HL,(IX+-44)	; unspill
	LD	(HL),BC
; 1080		}
; 1081		else {
.LINE 1081

	JR	L_634
L_633:
; 1082			uint8_t pokemonID;
; 1083			sprintf(enemyname, "Enemy %s", data_pokemon[enemyparty[currentenemy].id].name);
.LINE 1083

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__333
	PUSH	BC
	LD	BC,_enemyname
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1084			stats[0] = stats_CalculateStats(enemyparty[currentenemy]);
.LINE 1084

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,34
	LDIR	
	PEA	IX+-38
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats
	LD	BC,12
	LDIR	
; 1085	
; 1086			pokemonID = enemyparty[currentenemy].id;
.LINE 1086

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-2),A
; 1087			
; 1088			if (pokemonID < 80) {
.LINE 1088

	CP	A,80
	JR	NC,L_630
; 1089				zx7_Decompress(enemySprite, PKMNSD0[pokemonID]);
.LINE 1089

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1090			}
; 1091			else {
.LINE 1091

	JR	L_631
L_630:
; 1092				zx7_Decompress(enemySprite, PKMNSD1[pokemonID - 80]);
.LINE 1092

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1093			}
L_631:
.LINE 1093

; 1094			currentStatusPointer[0] = &enemyparty[currentenemy].currentstatus;
.LINE 1094

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+15
	LD	(_currentStatusPointer),BC
; 1095		}
; 1096	}
L_634:
.LINE 1096

	LD	SP,IX
	POP	IX
	RET	


;**************************** _resetstatus ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD1                            IMPORT    219   variable
;_enemySprite                        STATIC      3   variable
;_PKMNSD0                            IMPORT    240   variable
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_PKMNSD3                            IMPORT    219   variable
;_playerSprite                       STATIC      3   variable
;_PKMNSD2                            IMPORT    240   variable
;_zx7_Decompress                     IMPORT  -----   function
;_stats                              STATIC     24   variable
;_stats_CalculateStats               IMPORT  -----   function
;_playername                         STATIC     20   variable
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_disabledmove                       STATIC      2   variable
;_rage                               STATIC      2   variable
;_highcritratio                      STATIC      2   variable
;_flinch                             STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_confusedturns                      STATIC      2   variable
;_statmods                           STATIC     14   variable
;_i                                  IMPORT      2   variable
;temp617                              IX-14      3   variable
;temp613                              IX-11      3   variable
;temp625                               IX-8      3   variable
;temp621                               IX-5      3   variable
;pokemonID                             IX-2      1   variable
;pokemonID                             IX-1      1   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 53 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "resetstatus",1096,"_resetstatus"
	SEGMENT STRSECT
L__331:
	DB	"%s"
	DB	0
L__333:
	DB	"Enemy %s"
	DB	0
	SEGMENT CODE
; 1097	
; 1098	void takedamage(bool player, int amount) {
_takedamage:
.DEFINE "_takedamage"

.VALUE _takedamage

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "takedamage",1098,"_takedamage"

.LINE 1098

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "amount"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-18
	LD	SP,HL
; 1099		if (player) {
.LINE 1099

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_640
; 1100			if (party[currentplayer].currenthealth <= amount) {
.LINE 1100

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_636
; 1101				party[currentplayer].currenthealth = 0;
.LINE 1101

	LD	IY,(IX+-9)
	LD	(IY+13),0
	LD	(IY+14),0
; 1102			}
; 1103			else {
.LINE 1103

	JR	L_641
L_636:
; 1104				party[currentplayer].currenthealth -= amount;
.LINE 1104

	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-15)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1105			}
; 1106		}
; 1107		else {
.LINE 1107

	JR	L_641
L_640:
; 1108			if (enemyparty[currentenemy].currenthealth <= amount) {
.LINE 1108

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_enemyparty
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(IX+-12)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_638
; 1109				enemyparty[currentenemy].currenthealth = 0;
.LINE 1109

	LD	IY,(IX+-12)
	LD	(IY+13),0
	LD	(IY+14),0
; 1110			}
; 1111			else {
.LINE 1111

	JR	L_641
L_638:
; 1112				enemyparty[currentenemy].currenthealth -= amount;
.LINE 1112

	LD	BC,_enemyparty
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-18)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1113			}
; 1114		}
L_641:
.LINE 1114

; 1115		redrawcharacters();
.LINE 1115

	CALL	_redrawcharacters
; 1116	}
.LINE 1116

	LD	SP,IX
	POP	IX
	RET	


;**************************** _takedamage ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;G_134                                IX-12      3   variable
;G_131                                 IX-9      3   variable
;G_135                                 IX-6      3   variable
;G_132                                 IX-3      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "takedamage",1116,"_takedamage"
; 1117	void heal(bool player, int amount) {
_heal:
.DEFINE "_heal"

.VALUE _heal

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "heal",1117,"_heal"

.LINE 1117

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "amount"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-12
	LD	SP,HL
; 1118		if (player) {
.LINE 1118

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_646
; 1119			party[currentplayer].currenthealth += amount;
.LINE 1119

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1120			if (party[currentplayer].currenthealth >= stats[1].health) {
.LINE 1120

	LD	IY,_stats
	LD	BC,(IY+12)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_647
; 1121				party[currentplayer].currenthealth = stats[1].health;
.LINE 1121

	LD	IY,_stats
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(IY+12)
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1122			}
; 1123		}
; 1124		else {
.LINE 1124

	JR	L_647
L_646:
; 1125			enemyparty[currentenemy].currenthealth += amount;
.LINE 1125

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_enemyparty
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-12)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1126			if (enemyparty[currentenemy].currenthealth >= stats[0].health) {
.LINE 1126

	LD	BC,(_stats)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_647
; 1127				enemyparty[currentenemy].currenthealth = stats[0].health;
.LINE 1127

	LD	BC,_enemyparty
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(_stats)
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1128			}
; 1129		}
L_647:
.LINE 1129

; 1130		redrawcharacters();
.LINE 1130

	CALL	_redrawcharacters
; 1131	}
.LINE 1131

	LD	SP,IX
	POP	IX
	RET	


;**************************** _heal ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;G_139                                 IX-6      3   variable
;G_137                                 IX-3      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "heal",1131,"_heal"
; 1132	
; 1133	
; 1134	
; 1135	void addxp(void) {
_addxp:
.DEFINE "_addxp"

.VALUE _addxp

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "addxp",1135,"_addxp"

.LINE 1135

.DEFINE "xpgain"

.CLASS 65

.VALUE -14

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-68
	LD	SP,HL
; 1136		uint16_t xpgain = (enemyparty[currentenemy].level * data_pokemon[enemyparty[currentenemy].id].xpdrop) / 7;
.LINE 1136

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	IY,(IX+-23)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+47)
	CALL	__stoiu
	LD	DE,HL
	LD	IY,(IX+-23)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,7
	CALL	__idivs
	LD	(IX+-14),L
	LD	(IX+-13),H
; 1137		party[currentplayer].xp += xpgain;
.LINE 1137

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-20),HL
	LD	BC,(IX+-14)
	CALL	__stoiu
	LD	IY,(IX+-20)
	LD	BC,(IY+10)
	ADD	HL,BC
	LD	(IY+10),HL
; 1138		while ((party[currentplayer].level < 100) && (party[currentplayer].xp >= xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level + 1])) {
.LINE 1138

	JR	L_665
L_666:
; 1139			party[currentplayer].level++;
.LINE 1139

	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	IY,(IX+-26)
	LD	A,(IY+9)
	INC	A
	LD	(IY+9),A
; 1140			sprintf(str, "%s leveled up", data_pokemon[party[currentplayer].id].name);
.LINE 1140

	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__344
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1141			text_Display(str, false);
.LINE 1141

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1142			for (i = 0; i < 10; i++)
.LINE 1142

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_661
L_659:
; 1143			{
; 1144				if (data_pokemon[party[currentplayer].id].movelevels[i] == party[currentplayer].level) {
.LINE 1144

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-29),HL
	LD	IY,(IX+-29)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+24
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-29)
	CP	A,(IY+9)
	JR	NZ,L_658
; 1145					sprintf(str, "%s wants to learn %s", data_pokemon[party[currentplayer].id].name, data_moves[data_pokemon[party[currentplayer].id].moveids[i]].name);
.LINE 1145

	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	IY,(IX+-32)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-32)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__346
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1146					text_Display(str, false);
.LINE 1146

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1147					sprintf(str, "Choose a move to replace with %s", data_moves[data_pokemon[party[currentplayer].id].moveids[i]].name);
.LINE 1147

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__347
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1148					text_Display(str, false);
.LINE 1148

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1149					switch (text_AskQuestion4(data_moves[party[currentplayer].moves[0]].name, data_moves[party[currentplayer].moves[1]].name, data_moves[party[currentplayer].moves[2]].name, data_moves[party[currentplayer].moves[3]].name, false))
.LINE 1149

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	IY,(IX+-38)
	LEA	BC,IY+1
	LD	(IX+-35),BC
	LD	BC,0
	PUSH	BC
	LD	IY,(IX+-35)
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-35)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-35)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcaseD
	JP	(HL)
L__348:
	DW	4
	DW	1
	DB	0
	DW24	L_652	

	DW24	L_653	

	DW24	L_654	

	DW24	L_655	

	DW24	L_658	

; 1150					{
; 1151					case 1:
L_652:
.LINE 1151

; 1152						party[currentplayer].moves[0] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1152

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	IY,(IX+-41)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-41)
	LD	(IY+1),A
; 1153						break;
.LINE 1153

	JR	L_658
; 1154					case 2:
L_653:
.LINE 1154

; 1155						party[currentplayer].moves[1] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1155

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-44),HL
	LD	IY,(IX+-44)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	IY,(IX+-44)
	LD	A,(HL)
	LD	(IY+2),A
; 1156						break;
.LINE 1156

	JR	L_658
; 1157					case 3:
L_654:
.LINE 1157

; 1158						party[currentplayer].moves[2] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1158

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-47),HL
	LD	IY,(IX+-47)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	IY,(IX+-47)
	LD	A,(HL)
	LD	(IY+3),A
; 1159						break;
.LINE 1159

	JR	L_658
; 1160					case 4:
L_655:
.LINE 1160

; 1161						party[currentplayer].moves[3] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1161

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-50),HL
	LD	IY,(IX+-50)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	IY,(IX+-50)
	LD	A,(HL)
	LD	(IY+4),A
; 1162						break;
; 1163					}
; 1164				}
L_658:
.LINE 1164

; 1165				i++;
.LINE 1165

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1166			}
L_661:
.LINE 1166

	LD.LIS	BC,10
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_659
; 1167			if (party[currentplayer].level == data_pokemon[party[currentplayer].id].evolvelevel) {
.LINE 1167

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-53),HL
	LD	IY,(IX+-53)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+44)
	LD	IY,(IX+-53)
	CP	A,(IY+9)
	JR	NZ,L_665
; 1168				sprintf(str, "%s is evolving", data_pokemon[party[currentplayer].id].name);
.LINE 1168

	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__351
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1169				text_Display(str, false);
.LINE 1169

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1170				if (text_AskQuestion2("Continue", "Stop", false) == 1) {
.LINE 1170

	LD	BC,0
	PUSH	BC
	LD	BC,L__352
	PUSH	BC
	LD	BC,L__353
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_665
; 1171					party[currentplayer].id = data_pokemon[party[currentplayer].id].evolveid;
.LINE 1171

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-56),HL
	LD	IY,(IX+-56)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+45)
	LD	IY,(IX+-56)
	LD	(IY+0),A
; 1172				}
; 1173			}
; 1174		}
L_665:
.LINE 1174

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	(IX+-12),HL
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_667
	LD	BC,(IX+-3)
	LD	(IX+-17),BC
	LD	BC,(IX+-3)
	LD	(IX+-12),BC
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-59),HL
	LD	IY,(IX+-59)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	DE,HL
	LD	IY,(IX+-59)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	LD	HL,(IY+10)
	OR	A,A
	SBC	HL,BC
	JP	P,L_666
L_667:
; 1175		party[currentplayer].healthEV += data_pokemon[enemyparty[currentenemy].id].basehealth;
.LINE 1175

	LD	BC,_party
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-68),HL
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-65),HL
	LD	IY,(IX+-65)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	C,(IY+18)
	LD	B,0
	LD	IY,(IX+-68)
	LD	DE,(IY+22)
	LD	HL,BC
	ADD.SIS	HL,DE
	LD	BC,HL
	LD	(IY+22),C
	LD	(IY+23),B
; 1176		party[currentplayer].attackEV += data_pokemon[enemyparty[currentenemy].id].baseattack;
.LINE 1176

	LD	IY,(IX+-65)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-62),HL
	LD	IY,(IX+-62)
	LD	C,(IY+19)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+24)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+24),C
	LD	(IY+25),B
; 1177		party[currentplayer].defenceEV += data_pokemon[enemyparty[currentenemy].id].basedefence;
.LINE 1177

	LD	IY,(IX+-62)
	LD	C,(IY+20)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+26)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+26),C
	LD	(IY+27),B
; 1178		party[currentplayer].specialattackEV += data_pokemon[enemyparty[currentenemy].id].basespecialattack;
.LINE 1178

	LD	IY,(IX+-62)
	LD	C,(IY+21)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+28)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+28),C
	LD	(IY+29),B
; 1179		party[currentplayer].specialdefenceEV += data_pokemon[enemyparty[currentenemy].id].basespecialdefence;
.LINE 1179

	LD	IY,(IX+-62)
	LD	C,(IY+22)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+30)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+30),C
	LD	(IY+31),B
; 1180		party[currentplayer].speedEV += data_pokemon[enemyparty[currentenemy].id].basespeed;
.LINE 1180

	LD	IY,(IX+-62)
	LD	C,(IY+23)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+32)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+32),C
	LD	(IY+33),B
; 1181	}
.LINE 1181

	LD	SP,IX
	POP	IX
	RET	


;**************************** _addxp ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_text_AskQuestion2                  IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_i                                  IMPORT      2   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;G_140                                IX-17      3   variable
;xpgain                               IX-14      2   variable
;G_144                                IX-12      3   variable
;G_142                                 IX-9      3   variable
;G_141                                 IX-6      3   variable
;G_143                                 IX-3      3   variable


; Stack Frame Size: 74 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "addxp",1181,"_addxp"
	SEGMENT STRSECT
L__344:
	DB	"%s leveled up"
	DB	0
L__346:
	DB	"%s wants to learn %s"
	DB	0
L__347:
	DB	"Choose a move to replace with %s"
	DB	0
L__351:
	DB	"%s is evolving"
	DB	0
L__352:
	DB	"Stop"
	DB	0
L__353:
	DB	"Continue"
	DB	0
	SEGMENT CODE
; 1182	/* ball is 1-4 */
; 1183	bool capture(uint8_t ball) {
_capture:
.DEFINE "_capture"

.VALUE _capture

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "capture",1183,"_capture"

.LINE 1183

.DEFINE "ball"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "slot"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "f"

.CLASS 65

.VALUE -5

.TYPE 15

.ENDEF

.DEFINE "captured"

.CLASS 65

.VALUE -6

.TYPE 12

.ENDEF

.DEFINE "n1"

.CLASS 65

.VALUE -7

.TYPE 12

.ENDEF

.DEFINE "n2"

.CLASS 65

.VALUE -8

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-14
	LD	SP,HL
; 1184		uint8_t n1;
; 1185		uint8_t n2;
; 1186		uint32_t f;
; 1187		bool captured = false;
.LINE 1187

	LD	(IX+-6),0
; 1188		uint8_t slot = 0;
; 1189		/* Check if pokemon is captured*/
; 1190		if (!wild) {
.LINE 1190

	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_694
; 1191			text_Display("You cannot catch trainer pokemon", true);
.LINE 1191

	LD	BC,1
	PUSH	BC
	LD	BC,L__359
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1192			return false;
.LINE 1192

	XOR	A,A
	JR	L_708
; 1193		}
L_694:
.LINE 1193

; 1194		if (ball == 4) {
.LINE 1194

	LD	A,(IX+6)
	CP	A,4
	JR	NZ,L_693
; 1195			captured = true;
.LINE 1195

	LD	(IX+-6),1
; 1196		}
; 1197		else {
.LINE 1197

	JR	L_706
L_693:
; 1198			if (ball = 1) {
.LINE 1198

	LD	(IX+6),1
; 1199				n1 = rand() % 255;
.LINE 1199

	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	(IX+-7),L
; 1200			}
.LINE 1200

; 1201			if (ball = 2) {
; 1202				n1 = rand() % 200;
.LINE 1202

	CALL	_rand
	LD	BC,200
	CALL	__irems
	LD	(IX+-7),L
; 1203			}
.LINE 1203

; 1204			if (ball = 3) {
; 1205				n1 = rand() % 150;
.LINE 1205

	CALL	_rand
	LD	BC,150
	CALL	__irems
	LD	(IX+-7),L
; 1206			}
.LINE 1206

; 1207			n2 = n1;
.LINE 1207

	LD	A,(IX+-7)
	LD	(IX+-8),A
; 1208			if (*currentStatusPointer[false] == 4 || *currentStatusPointer[false] == 5) {
.LINE 1208

	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	Z,L_679
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,5
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_685
L_679:
; 1209				if (n1 < 25) {
.LINE 1209

	LD	A,(IX+-7)
	CP	A,25
	JR	NC,L_678
; 1210					captured = true;
.LINE 1210

	LD	(IX+-6),1
; 1211				}
; 1212				else {
.LINE 1212

	JR	L_685
L_678:
; 1213					n2 -= 25;
.LINE 1213

	LD	A,(IX+-7)
	SUB	A,25
	LD	(IX+-8),A
; 1214				}
; 1215			}
L_685:
.LINE 1215

; 1216			if (*currentStatusPointer[false] == 1 || *currentStatusPointer[false] == 2 || *currentStatusPointer[false] == 3) {
.LINE 1216

	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	Z,L_684
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_684
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_691
L_684:
; 1217				if (n1 < 12) {
.LINE 1217

	LD	A,(IX+-7)
	CP	A,12
	JR	NC,L_683
; 1218					captured = true;
.LINE 1218

	LD	(IX+-6),1
; 1219				}
; 1220				else {
.LINE 1220

	JR	L_691
L_683:
; 1221					n2 -= 12;
.LINE 1221

	LD	A,(IX+-8)
	SUB	A,12
	LD	(IX+-8),A
; 1222				}
; 1223			}
L_691:
.LINE 1223

; 1224			if (n2 <= data_pokemon[enemyparty[currentenemy].id].catchrate) {
.LINE 1224

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	IY,(IX+-11)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+50)
	CP	A,(IX+-8)
	JR	C,L_706
; 1225				f = stats[false].health;
.LINE 1225

	LD	BC,(_stats)
	CALL	__stoiu
	XOR	A,A
	LD	(IX+-5),HL
	LD	(IX+-2),A
; 1226				f *= 255;
.LINE 1226

	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,255
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1227				f *= 4;
.LINE 1227

	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1228				f /= enemyparty[currentenemy].currenthealth;
.LINE 1228

	LD	IY,(IX+-11)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1229				if (ball == 2) {
; 1230					f /= 8;
; 1231				}
; 1232				else {
.LINE 1232

; 1233					f /= 12;
.LINE 1233

	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,12
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1234				}
.LINE 1234

; 1235				if (f >= (rand() % 255)) {
.LINE 1235

	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	BC,HL
	CALL	__itol
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	CALL	__lcmpu
	JR	C,L_706
; 1236					captured = true;
.LINE 1236

	LD	(IX+-6),1
; 1237				}
; 1238			}
; 1239		}
L_706:
.LINE 1239

; 1240		/* Find open slot if pokemon is captured */
; 1241		if (captured) {
.LINE 1241

	LD	A,(IX+-6)
	OR	A,A
	JR	Z,L_705
; 1242			sprintf(str, "%s was caught", data_pokemon[enemyparty[currentenemy].id].name);
.LINE 1242

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__371
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1243			text_Display(str, false);
.LINE 1243

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1244			for (slot = 0; slot < 36; slot++) {
.LINE 1244

	LD	(IX+-1),0
	JR	L_701
L_699:
; 1245				if (party[slot].id == 0) {
.LINE 1245

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-14),HL
	LD	IY,(IX+-14)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_698
; 1246					party[slot] = enemyparty[currentenemy];
.LINE 1246

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,(IX+-14)
	LD	BC,34
	LDIR	
; 1247					slot = 40;
.LINE 1247

	LD	(IX+-1),40
; 1248				}
L_698:
.LINE 1248

; 1249				i++;
.LINE 1249

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	(IX+-1)
; 1250			}
L_701:
.LINE 1250

	LD	A,(IX+-1)
	CP	A,36
	JR	C,L_699
; 1251			if (slot == 36) {
.LINE 1251

	LD	A,(IX+-1)
	CP	A,36
	JR	NZ,L_707
; 1252				text_Display("No open slots for pokemon", false);
.LINE 1252

	LD	BC,0
	PUSH	BC
	LD	BC,L__375
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1253			}
; 1254		}
; 1255		else {
.LINE 1255

	JR	L_707
L_705:
; 1256			sprintf(str, "%s broke free", data_pokemon[enemyparty[currentenemy].id].name);
.LINE 1256

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__376
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1257			text_Display(str, true);
.LINE 1257

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1258		}
L_707:
.LINE 1258

; 1259		return captured;
.LINE 1259

	LD	A,(IX+-6)
; 1260	}
L_708:
.LINE 1260

	LD	SP,IX
	POP	IX
	RET	


;**************************** _capture ***************************
;Name                         Addr/Register   Size   Type
;_i                                  IMPORT      2   variable
;_party                              IMPORT   1224   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_stats                              STATIC     24   variable
;_data_pokemon                       IMPORT  unknown variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_rand                               IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;G_147                                IX-14      3   variable
;G_146                                IX-11      3   variable
;n2                                    IX-8      1   variable
;n1                                    IX-7      1   variable
;captured                              IX-6      1   variable
;f                                     IX-5      4   variable
;slot                                  IX-1      1   variable
;ball                                  IX+6      1   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "capture",1260,"_capture"
	SEGMENT STRSECT
L__359:
	DB	"You cannot catch trainer pokemon"
	DB	0
L__371:
	DB	"%s was caught"
	DB	0
L__375:
	DB	"No open slots for pokemon"
	DB	0
L__376:
	DB	"%s broke free"
	DB	0
	XREF _PKMNSD5_init:ROM
	XREF _PKMNSD5:ROM
	XREF _PKMNSD3_init:ROM
	XREF _PKMNSD3:ROM
	XREF _PKMNSD2_init:ROM
	XREF _PKMNSD2:ROM
	XREF _PKMNSD1_init:ROM
	XREF _PKMNSD1:ROM
	XREF _PKMNSD0_init:ROM
	XREF _PKMNSD0:ROM
	XREF _itemNames:ROM
	XREF _items_UseItem:ROM
	XREF _stats_NewCharacter:ROM
	XREF _stats_CalculateStats:ROM
	XREF _playerItems:ROM
	XREF _party:ROM
	XREF _text_status2:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_DrawTextBox:ROM
	XREF _text_AskQuestion6:ROM
	XREF _text_AskQuestion4:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _colors:ROM
	XREF _e:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _FreeIcons:ROM
	XREF _MallocIcons:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _typeIcons:ROM
	XREF _map_WinFight:ROM
	XREF _map_LoseFight:ROM
	XREF _xpPerLevel:ROM
	XREF _elements:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _strcpy:ROM
	XREF _sprintf:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmpu:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __imulu:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __smulu:ROM
	XREF __irems:ROM
	XREF __lshru:ROM
	XREF __fmul:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __icmpzero:ROM
	XREF __seqcaseD:ROM
	XREF __imul_b:ROM
	XDEF _capture
	XDEF _addxp
	XDEF _heal
	XDEF _takedamage
	XDEF _resetstatus
	XDEF _applystatus
	XDEF _attack
	XDEF _battle_End
	XDEF _CalculateXpPercent
	XDEF _redrawcharacters
	XDEF _enemyturn
	XDEF _selectMove
	XDEF _playerturn
	XDEF _battle_SpawnTrainer
	XDEF _battle_SpawnWild
	XDEF _battle_Loop
	XDEF _SetupBattleGfx
	XDEF _battle_Setup
	XDEF _battle_Initialize
	XDEF _statuscolors
	XDEF _battleMenuCurrent
	XDEF _battleMenuState2
	XDEF _battleMenuState1
	XDEF _run
	XDEF _air
	XDEF _attackturns
	XDEF _lastmove
	XDEF _disabledturns
	XDEF _disabledmove
	XDEF _rage
	XDEF _highcritratio
	XDEF _flinch
	XDEF _mistturns
	XDEF _lightscreenturns
	XDEF _reflectturns
	XDEF _trapturns
	XDEF _leech
	XDEF _confusedturns
	XDEF _statmods
	XDEF _currentStatusPointer
	XDEF _stats
	XDEF _wild
	XDEF _chosenmove
	XDEF _attackturn
	XDEF _enemyparty
	XDEF _statusSprites
	XDEF _hpBarSprite
	XDEF _backgroundSprite
	XDEF _enemySprite
	XDEF _playerSprite
	XDEF _enemyname
	XDEF _playername
	XDEF _currentenemy
	XDEF _currentplayer
	XDEF _clearcharacter
	XDEF _statmodvalues
	END
