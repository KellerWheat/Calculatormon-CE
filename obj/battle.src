; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\BATTLE.C"
	.assume ADL=1
	SEGMENT TEXT
_statmodvalues:
	DW	25
	DB	0
	DW	29
	DB	0
	DW	33
	DB	0
	DW	40
	DB	0
	DW	50
	DB	0
	DW	67
	DB	0
	DW	100
	DB	0
	DW	150
	DB	0
	DW	200
	DB	0
	DW	250
	DB	0
	DW	300
	DB	0
	DW	350
	DB	0
	DW	400
	DB	0
_clearcharacter:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_currentplayer:
	DS	1
_currentenemy:
	DS	1
_playername:
	DS	20
_enemyname:
	DS	20
_playerSprite:
	DS	3
_enemySprite:
	DS	3
_backgroundSprite:
	DS	3
_hpBarSprite:
	DS	3
_statusSprites:
	DS	15
_enemyparty:
	DS	204
	SEGMENT DATA
_attackturn:
	DB	0
	SEGMENT BSS
_chosenmove:
	DS	2
_wild:
	DS	1
_stats:
	DS	24
_currentStatusPointer:
	DS	6
_statmods:
	DS	14
_confusedturns:
	DS	2
_leech:
	DS	2
_trapturns:
	DS	2
_reflectturns:
	DS	2
_lightscreenturns:
	DS	2
_mistturns:
	DS	2
_flinch:
	DS	2
_highcritratio:
	DS	2
_rage:
	DS	2
_transformed:
	DS	2
_converted:
	DS	2
_originalpokemon:
	DS	68
_bidedamage:
	DS	4
_substitutehealth:
	DS	4
_disabledmove:
	DS	2
_disabledturns:
	DS	2
_lastmove:
	DS	2
_attackturns:
	DS	2
_air:
	DS	2
_payday:
	DS	2*1
_run:
	DS	1
	SEGMENT DATA
_battleMenuState1:
	DB	0
_battleMenuState2:
	DB	0
_battleMenuCurrent:
	DB	1
	SEGMENT TEXT
_statuscolors:
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <fileioc.h>
;   12	#include <debug.h>
;   13	#include <compression.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "text.h"
;   21	#include "savegame.h"
;   22	#include "stats.h"
;   23	#include "gfx/battle_gfx.h"
;   24	#include "items.h"
;   25	
;   26	#include "gfx/PKMNSD0.h"
;   27	#include "gfx/PKMNSD1.h"
;   28	#include "gfx/PKMNSD2.h"
;   29	#include "gfx/PKMNSD3.h"
;   30	#include "gfx/PKMNSD5.h"
;   31	#include "gfx/PKMNSD6.h"
;   32	
;   33	void SetupBattleGfx(void);
;   34	
;   35	bool playerturn(void);
;   36	bool enemyturn(void);
;   37	int selectMove(void);
;   38	void redrawcharacters(void);
;   39	void attack(bool player, uint8_t move);
;   40	
;   41	uint8_t CalculateXpPercent(void);
;   42	void applystatus(bool player);
;   43	void resetstatus(bool player);
;   44	void takedamage(bool player, int amount);
;   45	void heal(bool player, int amount);
;   46	bool capture(uint8_t ball);
;   47	void addxp(void);
;   48	
;   49	
;   50	const int statmodvalues[] = { 25,29,33,40,50,67,100,150,200,250,300,350,400 };
;   51	const struct pokemonData clearcharacter = { 0 };
;   52	
;   53	uint8_t currentplayer;
;   54	uint8_t currentenemy;
;   55	
;   56	char playername[20];
;   57	char enemyname[20];
;   58	
;   59	gfx_sprite_t *playerSprite;
;   60	gfx_sprite_t *enemySprite;
;   61	
;   62	gfx_sprite_t *backgroundSprite;
;   63	gfx_sprite_t *hpBarSprite;
;   64	gfx_sprite_t *statusSprites[5];
;   65	
;   66	struct pokemonData enemyparty[6];
;   67	uint8_t attackturn = 0;
;   68	uint8_t chosenmove[2];
;   69	bool wild;
;   70	
;   71	struct pokemonStats stats[2];
;   72	uint8_t *currentStatusPointer[2];
;   73	
;   74	uint8_t statmods[2][7];
;   75	uint8_t confusedturns[2];
;   76	bool leech[2];
;   77	uint8_t trapturns[2];
;   78	uint8_t reflectturns[2];
;   79	uint8_t lightscreenturns[2];
;   80	uint8_t mistturns[2];
;   81	bool flinch[2];
;   82	bool highcritratio[2];
;   83	bool rage[2];
;   84	bool transformed[2];
;   85	bool converted[2];
;   86	struct pokemonData originalpokemon[2];
;   87	uint16_t bidedamage[2];
;   88	uint16_t substitutehealth[2];
;   89	
;   90	uint8_t disabledmove[2];
;   91	uint8_t disabledturns[2];
;   92	uint8_t lastmove[2];
;   93	uint8_t attackturns[2];
;   94	bool air[2];
;   95	uint16_t payday;
;   96	bool run;
;   97	
;   98	uint8_t battleMenuState1 = 0;
;   99	uint8_t battleMenuState2 = 0;
;  100	uint8_t battleMenuCurrent = 1;
;  101	
;  102	const uint8_t statuscolors[5] = { 2,3,4,5,6 };
	SEGMENT CODE
;  103	
;  104	void battle_Initialize(void) {
_battle_Initialize:
;  105		PKMNSD0_init();
	CALL	_PKMNSD0_init
;  106		PKMNSD1_init();
	CALL	_PKMNSD1_init
;  107		PKMNSD2_init();
	CALL	_PKMNSD2_init
;  108		PKMNSD3_init();
	CALL	_PKMNSD3_init
;  109		PKMNSD5_init();
	CALL	_PKMNSD5_init
;  110		PKMNSD6_init();
	CALL	_PKMNSD6_init
;  111	}
	RET	


;**************************** _battle_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD6_init                       IMPORT  -----   function
;_PKMNSD5_init                       IMPORT  -----   function
;_PKMNSD3_init                       IMPORT  -----   function
;_PKMNSD2_init                       IMPORT  -----   function
;_PKMNSD1_init                       IMPORT  -----   function
;_PKMNSD0_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  112	void battle_Setup(void) {
_battle_Setup:
	LD	HL,-30
	CALL	__frameset
;  113		int pokemonIndex;
;  114		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {//This makes sure the pokemon sent out has not fainted
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
;  115			if (currentSave.party[pokemonIndex].currenthealth != 0 && currentSave.party[pokemonIndex].id != 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_5
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_5
;  116				currentplayer = pokemonIndex;
	LD	A,(IX+-3)
	LD	(_currentplayer),A
;  117				pokemonIndex = 6;
	LD	BC,6
	LD	(IX+-3),BC
;  118			}
;  119		}
L_5:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_4
;  120		SetupBattleGfx();
	CALL	_SetupBattleGfx
;  121	
;  122		battleMenuState1 = 0;
;  123		battleMenuState2 = 0;
;  124		battleMenuCurrent = 1;
;  125	
;  126		
;  127		stats[0] = stats_CalculateStats(enemyparty[0]);
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	PEA	IX+-18
	LD	DE,HL
	XOR	A,A
	LD	(_battleMenuState1),A
	XOR	A,A
	LD	(_battleMenuState2),A
	LD	A,1
	LD	(_battleMenuCurrent),A
	LD	HL,_enemyparty
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats
	LD	BC,12
	LDIR	
;  128		stats[1] = stats_CalculateStats(currentSave.party[0]);
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	PEA	IX+-30
	LD	DE,HL
	LD	HL,_currentSave+10
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
;  129		currentenemy = 0;
	XOR	A,A
;  130		attackturn = 0;
;  131	
;  132		resetstatus(true);
	LD	BC,1
	PUSH	BC
	LD	(_currentenemy),A
	XOR	A,A
	LD	(_attackturn),A
	CALL	_resetstatus
	POP	BC
;  133		resetstatus(false);
	LD	BC,0
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  134		payday = 0;
	LD	HL,_payday
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  135	
;  136		run = false;
	XOR	A,A
	LD	(_run),A
;  137	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Setup ***************************
;Name                         Addr/Register   Size   Type
;_run                                STATIC      1   variable
;_payday                             STATIC      2   variable
;_resetstatus                        IMPORT  -----   function
;_attackturn                         STATIC      1   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_enemyparty                         STATIC    204   variable
;_stats_CalculateStats               IMPORT  -----   function
;_battleMenuCurrent                  STATIC      1   variable
;_battleMenuState2                   STATIC      1   variable
;_battleMenuState1                   STATIC      1   variable
;_SetupBattleGfx                     IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;G_0                                   IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


;  138	void SetupBattleGfx(void) {
_SetupBattleGfx:
	LD	HL,-6
	CALL	__frameset
;  139		textBoxType = 1;
;  140		backgroundSprite = gfx_MallocSprite(160, 88);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	LD	BC,1
	LD	(_textBoxType),BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  141		zx7_Decompress(backgroundSprite, background_compressed);
	LD	IY,_PKMNSD5
	LD	(_backgroundSprite),HL
	LD	BC,(IY+93)
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  142		hpBarSprite = gfx_MallocSprite(98, 10);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,98
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  143		zx7_Decompress(hpBarSprite, hpbar_compressed);
	LD	IY,_PKMNSD5
	LD	(_hpBarSprite),HL
	LD	BC,(IY+96)
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  144		playerSprite = gfx_MallocSprite(56, 56);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  145		enemySprite = gfx_MallocSprite(56, 56);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	LD	(_playerSprite),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_enemySprite),HL
;  146	
;  147		if (currentSave.party[currentplayer].id < 80) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	CP	A,80
	JR	NC,L_10
;  148			zx7_Decompress(playerSprite, PKMNSD2[currentSave.party[currentplayer].id]);
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD2
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  149		}
;  150		else {
	JR	L_13
L_10:
;  151			zx7_Decompress(playerSprite, PKMNSD3[currentSave.party[currentplayer].id - 80]);
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD3
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  152		}
L_13:
;  153		if (enemyparty[currentenemy].id < 80) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	CP	A,80
	JR	NC,L_12
;  154			zx7_Decompress(enemySprite, PKMNSD0[enemyparty[currentenemy].id]);
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  155		}
;  156		else {
	JR	L_14
L_12:
;  157			zx7_Decompress(enemySprite, PKMNSD1[enemyparty[currentenemy].id - 80]);
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  158		}
L_14:
;  159	
;  160	
;  161		MallocIcons();
	CALL	_MallocIcons
;  162	
;  163		SetColors(1);
	LD	BC,1
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  164		gfx_FillScreen(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  165		gfx_SetPalette(battle_gfx_pal, sizeof_battle_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD5+99
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  166		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  167		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  168		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  169		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  170	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetupBattleGfx ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_MallocIcons                        IMPORT  -----   function
;_PKMNSD1                            IMPORT    216   variable
;_PKMNSD0                            IMPORT    240   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_PKMNSD3                            IMPORT    216   variable
;_PKMNSD2                            IMPORT    240   variable
;_currentplayer                      STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_hpBarSprite                        STATIC      3   variable
;_PKMNSD5                            IMPORT    102   variable
;_zx7_Decompress                     IMPORT  -----   function
;_backgroundSprite                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;G_6                                   IX-6      3   variable
;G_2                                   IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  171	int battle_Loop(void) {
_battle_Loop:
	LD	HL,-21
	CALL	__frameset
;  172		/* Battle */
;  173		redrawcharacters();
	CALL	_redrawcharacters
;  174		/* Switch to a new poketmon or lose battle if health is 0 */
;  175		if (currentSave.party[currentplayer].currenthealth == 0) {
	LD	BC,_currentSave+10
	LD	(IX+-3),BC
	LD	(IX+-15),BC
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_40
;  176			sprintf(str, "%s fainted", playername);
	LD	BC,_playername
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  177			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  178			attackturn = 0;
	XOR	A,A
;  179	
;  180			if (transformed[true]) {
	LD	HL,_transformed
	INC	HL
	LD	(_attackturn),A
	LD	A,(HL)
	OR	A,A
	JR	Z,L_18
;  181				currentSave.party[currentplayer] = originalpokemon[true];
	LD	BC,(IX+-3)
	LD	(IX+-15),BC
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_originalpokemon+34
	LD	BC,34
	LDIR	
;  182			}
L_18:
;  183			if (converted[true]) {
	LD	HL,_converted
	INC	HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_19
;  184				data_pokemon[currentSave.party[currentplayer].id].element1 = 1;
	LD	BC,(IX+-15)
	LD	(IX+-6),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+16),1
;  185			}
L_19:
;  186	
;  187			i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  188			while (i < 6) {
	JR	L_24
L_25:
;  189				if (currentSave.party[i].currenthealth != 0 && currentSave.party[i].id != 0) {
	LD	BC,(IX+-6)
	LD	(IX+-9),BC
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	(IX+-18),HL
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_23
	LD	BC,(IX+-9)
	LD	(IX+-6),BC
	LD	BC,(IX+-18)
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_23
;  190					currentplayer = i;
;  191					resetstatus(true);
	LD	BC,1
	PUSH	BC
	LD	A,(_i)
	LD	(_currentplayer),A
	CALL	_resetstatus
	POP	BC
;  192					return 1;
	LD	HL,1
	JR	L_66
;  193				}
L_23:
;  194				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  195			}
L_24:
	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_25
;  196	
;  197			map_LoseFight();
	CALL	_map_LoseFight
	OR	A,A
;  198			return 0;
	SBC	HL,HL
	JR	L_66
;  199		}
L_40:
;  200		if (enemyparty[currentenemy].currenthealth == 0) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_64
;  201			sprintf(str, "%s fainted", enemyname);
	LD	BC,_enemyname
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  202			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  203			addxp();
	CALL	_addxp
;  204			attackturn = 0;
	XOR	A,A
	LD	(_attackturn),A
;  205	
;  206			if (transformed[false]) {
	LD	A,(_transformed)
	OR	A,A
	JR	Z,L_30
;  207				enemyparty[currentenemy] = originalpokemon[false];
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_originalpokemon
	LD	BC,34
	LDIR	
;  208			}
L_30:
;  209			if (converted[false]) {
	LD	A,(_converted)
	OR	A,A
	JR	Z,L_31
;  210				data_pokemon[enemyparty[currentenemy].id].element1 = 1;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+16),1
;  211			}
L_31:
;  212	
;  213			i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  214			while (i < 6) {
	JR	L_36
L_37:
;  215				if (enemyparty[i].currenthealth != 0 && enemyparty[i].id != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(IX+-12)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_35
	LD	IY,(IX+-12)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_35
;  216					currentenemy = i;
;  217					resetstatus(false);
	LD	BC,0
	PUSH	BC
	LD	A,(_i)
	LD	(_currentenemy),A
	CALL	_resetstatus
	POP	BC
;  218					return 1;
	LD	HL,1
	JR	L_66
;  219				}
L_35:
;  220				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  221			}
L_36:
	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_37
;  222	
;  223			currentSave.playerMoney += payday;
	LD	BC,(_payday)
	CALL	__stoiu
	LD	A,(_currentSave+1242)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_currentSave+1239)
	CALL	__ladd
	LD	(_currentSave+1239),HL
	LD	A,E
	LD	(_currentSave+1242),A
;  224			map_WinFight(wild, enemyparty[0].level * 40);
	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
	OR	A,A
;  225			return 0;
	SBC	HL,HL
	JR	L_66
;  226		}
L_64:
;  227		/* If 0 determine who attacks first, if 1 or 2 let other character attack, if 3 do end of turn stuff */
;  228		if (attackturn == 0) {
	LD	A,(_attackturn)
	OR	A,A
	JR	NZ,L_63
;  229			while (!playerturn()) {};
L_41:
	CALL	_playerturn
	OR	A,A
	JR	Z,L_41
;  230			kb_Scan();
	CALL	_kb_Scan
;  231			while (!enemyturn()) {};
L_45:
	CALL	_enemyturn
	OR	A,A
	JR	Z,L_45
;  232			if (run) {
	LD	A,(_run)
	OR	A,A
	JR	Z,L_56
	OR	A,A
;  233				return 0;
	SBC	HL,HL
	JR	L_66
;  234			}
L_56:
;  235			if (kb_Data[6] & kb_Div) {
	LD	A,(16056348)
	AND	A,16
	JR	Z,L_55
;  236				enemyparty[currentenemy].currenthealth = 0;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+13),0
	LD	(IY+14),0
;  237			}
;  238			else {
	JR	L_65
L_55:
;  239				/* Paralysis gets a speed reduction */
;  240				if ((((stats[0].speed / (1 + (((*currentStatusPointer[0]) == 4) * 3))) > (stats[1].speed / (1 + (((*currentStatusPointer[1]) == 4) * 3)))) || data_moves[chosenmove[false]].statustype == 31) && data_moves[chosenmove[true]].statustype != 31) {
	LD	IY,_stats
	LD	BC,(IY+22)
	CALL	__stoiu
	LD	DE,HL
	LD	HL,_currentStatusPointer+3
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__28
	LD	B,1
	JR	L__29
L__28:
	LD	B,0
L__29:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	LD	BC,(_stats+10)
	CALL	__stoiu
	LD	IY,(_currentStatusPointer)
	LD	A,(IY)
	LD	(IX+-21),HL
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__31
	LD	B,1
	JR	L__32
L__31:
	LD	B,0
L__32:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-21)
	INC	BC
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	M,L_49
	LD	A,(_chosenmove)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,31
	JR	NZ,L_51
L_49:
	LD	HL,_chosenmove
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,31
	JR	Z,L_51
;  241					attack(false, chosenmove[false]);
	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  242					attackturn = 1;
	LD	A,1
	LD	(_attackturn),A
;  243				}
;  244				else {
	JR	L_53
L_51:
;  245					attack(true, chosenmove[true]);
	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  246					attackturn = 2;
	LD	A,2
	LD	(_attackturn),A
;  247				}
L_53:
;  248				if (run) {
	LD	A,(_run)
	OR	A,A
	JR	Z,L_65
	OR	A,A
;  249					return 0;
	SBC	HL,HL
	JR	L_66
;  250				}
;  251			}
;  252		}
;  253		else if(attackturn < 3) {
L_63:
	LD	A,(_attackturn)
	CP	A,3
	JR	NC,L_61
;  254			if (attackturn == 1) {
	LD	A,(_attackturn)
	CP	A,1
	JR	NZ,L_59
;  255				attack(true, chosenmove[true]);
	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  256				attackturn = 3;
	LD	A,3
	LD	(_attackturn),A
;  257			}
L_59:
;  258			if (attackturn == 2) {
	LD	A,(_attackturn)
	CP	A,2
	JR	NZ,L_65
;  259				attack(false, chosenmove[false]);
	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  260				attackturn = 3;
	LD	A,3
	LD	(_attackturn),A
;  261			}
;  262		}
;  263		else {
	JR	L_65
L_61:
;  264			/* After both turns */
;  265			applystatus(true);
	LD	BC,1
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  266			applystatus(false);
	LD	BC,0
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  267			flinch[true] = false;
	LD	HL,_flinch
	INC	HL
	LD	(HL),0
;  268			flinch[false] = false;
	XOR	A,A
	LD	(_flinch),A
;  269			attackturn = 0;
	XOR	A,A
	LD	(_attackturn),A
;  270			return 1;
	LD	HL,1
	JR	L_66
;  271		}
L_65:
;  272		
;  273	
;  274		return 1;
	LD	HL,1
;  275	}
L_66:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Loop ***************************
;Name                         Addr/Register   Size   Type
;_flinch                             STATIC      2   variable
;_applystatus                        IMPORT  -----   function
;_attack                             IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_data_moves                         IMPORT  unknown variable
;_currentStatusPointer               STATIC      6   variable
;_stats                              STATIC     24   variable
;_run                                STATIC      1   variable
;_enemyturn                          IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_playerturn                         IMPORT  -----   function
;_wild                               STATIC      1   variable
;_map_WinFight                       IMPORT  -----   function
;_payday                             STATIC      2   variable
;_addxp                              IMPORT  -----   function
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_map_LoseFight                      IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_i                                  IMPORT      2   variable
;_data_pokemon                       IMPORT  unknown variable
;_converted                          STATIC      2   variable
;_originalpokemon                    STATIC     68   variable
;_transformed                        STATIC      2   variable
;_attackturn                         STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playername                         STATIC     20   variable
;_sprintf                            IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_redrawcharacters                   IMPORT  -----   function
;G_14                                 IX-18      3   variable
;G_11                                 IX-15      3   variable
;G_15                                 IX-12      3   variable
;G_13                                  IX-9      3   variable
;G_12                                  IX-6      3   variable
;G_10                                  IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__9:
	DB	"%s fainted"
	DB	0
L__16:
	DB	"%s fainted"
	DB	0
	SEGMENT CODE
;  276	
;  277	
;  278	void battle_SpawnWild(uint8_t id, uint8_t minlevel, uint8_t maxlevel) {
_battle_SpawnWild:
	LD	HL,-43
	CALL	__frameset
;  279		int partyIndex;
;  280		for(partyIndex = 0; partyIndex < 6; partyIndex++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_70
L_68:
;  281			enemyparty[partyIndex] = clearcharacter;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_clearcharacter
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  282		}
L_70:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_68
;  283		enemyparty[0] = stats_NewCharacter(id,(rand() % (maxlevel-minlevel+1))+minlevel);
	CALL	_rand
	LD	DE,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	(IX+-40),BC	; spill
	LD	(IX+-43),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-43)	; unspill
	SBC	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__irems
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_enemyparty
	LD	BC,34
	LDIR	
;  284		wild = true;
	LD	A,1
	LD	(_wild),A
;  285	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnWild ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats_NewCharacter                 IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_clearcharacter                     STATIC     34   variable
;partyIndex                            IX-3      3   variable
;maxlevel                             IX+12      1   parameter
;minlevel                              IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 58 (bytes)
;       Spill Code: -1 (instruction)


;  286	void battle_SpawnTrainer(uint8_t ids[6][16], uint8_t levels[6][16], uint8_t trainernum) {
_battle_SpawnTrainer:
	LD	HL,-37
	CALL	__frameset
;  287		int partyIndex;
;  288		for(partyIndex = 0; partyIndex < 6; partyIndex++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_76
L_74:
;  289			enemyparty[partyIndex] = stats_NewCharacter(ids[partyIndex][trainernum],levels[partyIndex][trainernum]);
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	BC,DE
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	HL,(IX+6)
	ADD	HL,DE
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  290		}
L_76:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_74
;  291		wild = false;
	XOR	A,A
	LD	(_wild),A
;  292	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnTrainer ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_stats_NewCharacter                 IMPORT  -----   function
;partyIndex                            IX-3      3   variable
;trainernum                           IX+12      1   parameter
;levels                                IX+9      3   parameter
;ids                                   IX+6      3   parameter


; Stack Frame Size: 52 (bytes)
;       Spill Code: -1 (instruction)


;  293	
;  294	bool playerturn() {
_playerturn:
	LD	HL,-30
	CALL	__frameset
;  295		if (attackturns[true] > 0) {
	LD	HL,_attackturns
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_80
;  296			chosenmove[true] = lastmove[true];
	LD	IY,_lastmove
	LD	HL,_chosenmove
	INC	HL
	LD	A,(IY+1)
	LD	(HL),A
;  297			return true;
	LD	A,1
	JR	L_115
;  298		}
L_80:
;  299		i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  300		/* Select Whether to fight, run, ect */
;  301		if (battleMenuState1 == 0) {
	LD	A,(_battleMenuState1)
	OR	A,A
	JR	NZ,L_113
;  302			switch (text_AskQuestion4("Fight","Item","Switch","Run", true))
	LD	BC,1
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	LD	BC,L__49
	PUSH	BC
	LD	BC,L__50
	PUSH	BC
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcase
L__51:
	DW	5
	DW	0
	DB	0
	DW24	L_81	

	DW24	L_82	

	DW24	L_83	

	DW24	L_84	

	DW24	L_89	

	DW24	L_113	

;  303			{
;  304			case 0:
L_81:
;  305				return false;
	XOR	A,A
	JR	L_115
;  306			case 1:
L_82:
;  307				battleMenuState1 = 1;
	LD	A,1
	LD	(_battleMenuState1),A
;  308				return false;
	XOR	A,A
	JR	L_115
;  309			case 2:
L_83:
;  310				battleMenuState1 = 2;
	LD	A,2
	LD	(_battleMenuState1),A
;  311				return false;
	XOR	A,A
	JR	L_115
;  312			case 3:
L_84:
;  313				battle_End();
	CALL	_battle_End
;  314				i = menu_PokemonMenu(false);
	LD	BC,0
	PUSH	BC
	CALL	_menu_PokemonMenu
	POP	BC
	LD	BC,HL
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  315				SetupBattleGfx();
	CALL	_SetupBattleGfx
;  316				if (i != 0 && (i - 1) != currentplayer && currentSave.party[i - 1].id != 0) {
	LD	HL,(_i)
	CALL	__scmpzero
	JR	Z,L_88
	LD	BC,(_i)
	CALL	__stoiu
	DEC	HL
	LD	(IX+-18),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-18)
	SBC	HL,BC
	JR	Z,L_88
	LD	HL,34
	LD	BC,(IX+-18)
	CALL	__imulu
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_88
;  317					currentplayer = i - 1;
;  318					resetstatus(true);
	LD	BC,1
	PUSH	BC
	LD	A,(_i)
	DEC	A
	LD	(_currentplayer),A
	CALL	_resetstatus
	POP	BC
;  319					redrawcharacters();
	CALL	_redrawcharacters
;  320					return true;
	LD	A,1
	JR	L_115
;  321				}
L_88:
;  322				redrawcharacters();
	CALL	_redrawcharacters
;  323				return false;
	XOR	A,A
	JR	L_115
;  324			case 4:
L_89:
;  325				if (!wild) {
	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_94
;  326					text_Display("Can't run from trainers!", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__56
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  327					return false;
	XOR	A,A
	JR	L_115
;  328				}
L_94:
;  329				//NOT REAL RUN FUNCTION
;  330				if (stats[1].speed > stats[0].speed || (rand() % 3) == 0) {
	LD	IY,_stats
	LD	BC,(IY+22)
	LD	HL,(_stats+10)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_92
	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_93
L_92:
;  331					run = true;
	LD	A,1
	LD	(_run),A
;  332					return true;
	JR	L_115
;  333				}
;  334				else {
L_93:
;  335					text_Display("Failed to run away!", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__59
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  336					return true;
	LD	A,1
	JR	L_115
;  337				}
;  338				return false;
;  339			}
;  340		}
L_113:
;  341		/* Select which move to use */
;  342		if (battleMenuState1 == 1) {
	LD	A,(_battleMenuState1)
	CP	A,1
	JR	NZ,L_112
;  343			int selectedMove;
;  344			selectedMove = selectMove();
	CALL	_selectMove
	LD	(IX+-15),HL
;  345			battleMenuState1 = 0;
	XOR	A,A
	LD	(_battleMenuState1),A
;  346			/* Checks if the move can be used */
;  347			if (selectedMove == 0 || currentSave.party[currentplayer].pp[selectedMove - 1] == 0 || disabledmove[true] == selectedMove) {
	LD	HL,(IX+-15)
	CALL	__icmpzero
	JR	Z,L_99
	LD	BC,_currentSave+10
	LD	(IX+-12),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,(IX+-15)
	DEC	BC
	LD	(IX+-6),BC
	LD	BC,(IX+-9)
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+5
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_99
	LD	HL,_disabledmove
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-15)
	SBC	HL,BC
	JR	NZ,L_100
L_99:
;  348				return false;
	XOR	A,A
	JR	L_115
;  349			}
L_100:
;  350			chosenmove[true] = currentSave.party[currentplayer].moves[selectedMove - 1];
	LD	BC,(IX+-9)
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-24),HL
	LD	IY,(IX+-24)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,_chosenmove
	LD	A,(HL)
	LD	(IY+1),A
;  351			currentSave.party[currentplayer].pp[selectedMove - 1]--;
	LD	IY,(IX+-24)
	LEA	BC,IY+5
	LD	HL,BC
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	IY,(IX+-21)
	LD	A,(IY)
	LD	BC,(IX+-9)
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+5
	LD	BC,(IX+-6)
	ADD	HL,BC
	DEC	A
	LD	(HL),A
;  352		}
;  353		/* Items */
;  354		else if (battleMenuState1 == 2) {
	JR	L_114
L_112:
	LD	A,(_battleMenuState1)
	CP	A,2
	JR	NZ,L_114
;  355			int chosenItem;
;  356			battleMenuState1 = 0;
	XOR	A,A
	LD	(_battleMenuState1),A
;  357			battle_End();
	CALL	_battle_End
;  358			chosenItem = menu_Items(true);
	LD	BC,1
	PUSH	BC
	CALL	_menu_Items
	POP	BC
	LD	(IX+-3),HL
;  359			SetupBattleGfx();
	CALL	_SetupBattleGfx
;  360			redrawcharacters();
	CALL	_redrawcharacters
;  361			if (chosenItem == -1) {
	LD	BC,16777215
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_109
;  362				return false;
	XOR	A,A
	JR	L_115
;  363			}
L_109:
;  364			if (chosenItem < 4) {
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_108
;  365				sprintf(str, "Used a %s", itemNames[chosenItem]);
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__67
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  366				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  367				currentSave.playerItems[chosenItem]--;
	LD	BC,_currentSave+1243
	LD	(IX+-30),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-30)
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	IY,(IX+-27)
	LD	BC,(IX+-3)
	LD	HL,(IX+-30)
	ADD	HL,BC
	LD	A,(IY)
	DEC	A
;  368				chosenmove[true] = 0;
	LD	IY,_chosenmove
	LD	(HL),A
	LD	(IY+1),0
;  369				if (capture(chosenItem + 1)) {
	LD	C,(IX+-3)
	INC	C
	LD	B,0
	PUSH	BC
	CALL	_capture
	POP	BC
	OR	A,A
	JR	Z,L_114
;  370					map_WinFight(wild, enemyparty[0].level * 40);
	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
;  371					run = true;
	LD	A,1
	LD	(_run),A
;  372					return true;
	JR	L_115
;  373				}
;  374			}
;  375			else {
L_108:
;  376				battle_End();
	CALL	_battle_End
;  377				if (items_UseItem(chosenItem)) {
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	CALL	_items_UseItem
	POP	BC
	OR	A,A
	JR	Z,L_106
;  378					chosenmove[true] = 0;
	LD	HL,_chosenmove
	INC	HL
	LD	(HL),0
;  379					SetupBattleGfx();
	CALL	_SetupBattleGfx
;  380					redrawcharacters();
	CALL	_redrawcharacters
;  381				}
;  382				else {
	JR	L_114
L_106:
;  383					SetupBattleGfx();
	CALL	_SetupBattleGfx
;  384					redrawcharacters();
	CALL	_redrawcharacters
;  385					return false;
	XOR	A,A
	JR	L_115
;  386				}
;  387			}
;  388		}
L_114:
;  389		return true;
	LD	A,1
;  390	}
L_115:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _playerturn ***************************
;Name                         Addr/Register   Size   Type
;_items_UseItem                      IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_map_WinFight                       IMPORT  -----   function
;_capture                            IMPORT  -----   function
;_str                                IMPORT    100   variable
;_itemNames                          IMPORT    320   variable
;_sprintf                            IMPORT  -----   function
;_menu_Items                         IMPORT  -----   function
;_disabledmove                       STATIC      2   variable
;_selectMove                         IMPORT  -----   function
;_run                                STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats                              STATIC     24   variable
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;_redrawcharacters                   IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_currentSave                        IMPORT   4142   variable
;_currentplayer                      STATIC      1   variable
;_SetupBattleGfx                     IMPORT  -----   function
;_menu_PokemonMenu                   IMPORT  -----   function
;_battle_End                         IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_battleMenuState1                   STATIC      1   variable
;_i                                  IMPORT      2   variable
;_chosenmove                         STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_17                                 IX-18      3   variable
;selectedMove                         IX-15      3   variable
;G_18                                 IX-12      3   variable
;G_19                                  IX-9      3   variable
;G_20                                  IX-6      3   variable
;chosenItem                            IX-3      3   variable


; Stack Frame Size: 36 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__47:
	DB	"Run"
	DB	0
L__48:
	DB	"Switch"
	DB	0
L__49:
	DB	"Item"
	DB	0
L__50:
	DB	"Fight"
	DB	0
L__56:
	DB	"Can't run from trainers!"
	DB	0
L__59:
	DB	"Failed to run away!"
	DB	0
L__67:
	DB	"Used a %s"
	DB	0
	SEGMENT CODE
;  391	
;  392	int selectMove(void) {
_selectMove:
	LD	HL,-44
	CALL	__frameset
;  393		int8_t tv1, tv2, iconIndex;
;  394		tv1 = 0;
	LD	(IX+-1),0
;  395		tv2 = 0;
	LD	(IX+-5),0
;  396	
;  397		textBoxType = 2;
;  398		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	LD	BC,2
	LD	(_textBoxType),BC
	CALL	_gfx_Blit
	POP	BC
;  399		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  400	
;  401	
;  402	
;  403		gfx_PrintStringXY(">", 15, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__71
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  404		gfx_PrintStringXY(data_moves[currentSave.party[currentplayer].moves[0]].name, 25, 190);
	LD	BC,_currentSave+10
	LD	(IX+-4),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,(IX+-4)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  405		gfx_PrintStringXY(data_moves[currentSave.party[currentplayer].moves[1]].name, 25, 205);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,205
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,(IX+-4)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+1
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  406		gfx_PrintStringXY(data_moves[currentSave.party[currentplayer].moves[2]].name, 145, 190);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,190
	PUSH	BC
	LD	BC,145
	PUSH	BC
	LD	BC,(IX+-4)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  407		gfx_PrintStringXY(data_moves[currentSave.party[currentplayer].moves[3]].name, 145, 205);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,205
	PUSH	BC
	LD	BC,145
	PUSH	BC
	LD	BC,(IX+-4)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+4
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  408	
;  409		if (currentSave.party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-4)
	ADD	HL,BC
	LD	(IX+-8),HL
	LD	IY,(IX+-8)
	LD	A,(IY+1)
	OR	A,A
	JR	Z,L_117
;  410			gfx_Sprite(typeIcons[data_moves[currentSave.party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
	LD	BC,_data_moves
	LD	DE,193
	PUSH	DE
	LD	DE,271
	PUSH	DE
	LD	IY,(IX+-8)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  411			sprintf(str, "%u/%u", currentSave.party[currentplayer].pp[tv1 + 2 * tv2], data_moves[currentSave.party[currentplayer].moves[tv1 + 2 * tv2]].uses);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-4)
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	(IX+-29),HL
	LD	IY,(IX+-29)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-29)
	LD	A,(IY+5)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__73
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  412			gfx_PrintStringXY(str, 271, 209);
	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  413		}
L_117:
;  414		
;  415	
;  416		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  417		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  418	
;  419		kb_Scan();
	CALL	_kb_Scan
;  420		if ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_119
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_120
L_119:
;  421			Wait(50);
	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;  422		}
L_120:
;  423		kb_Scan();
	CALL	_kb_Scan
;  424		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_137
L_138:
;  425			kb_Scan();
	CALL	_kb_Scan
;  426			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_128
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_136
L_128:
;  427				if (tv1 == 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_124
;  428					tv1 = 0;
	LD	(IX+-1),0
;  429				}
;  430				else {
	JR	L_125
L_124:
;  431					tv1 = 1;
	LD	(IX+-1),1
;  432				}
L_125:
;  433				gfx_FillRectangle(14, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  434				gfx_FillRectangle(134, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  435				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-5)
	SEXT	HL
	LD	L,(IX+-5)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__79
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  436	
;  437				gfx_FillRectangle(263, 185, 48, 46);
	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  438				if (currentSave.party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
	LD	BC,_currentSave+10
	LD	(IX+-14),BC
	LD	A,(IX+-5)
	SEXT	HL
	LD	L,(IX+-5)
	ADD	HL,HL
	LD	(IX+-11),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-14)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-11)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_127
;  439					gfx_Sprite(typeIcons[data_moves[currentSave.party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
	LD	BC,_data_moves
	LD	DE,193
	PUSH	DE
	LD	DE,271
	PUSH	DE
	LD	HL,(IX+-23)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  440					sprintf(str, "%u/%u", currentSave.party[currentplayer].pp[tv1 + 2 * tv2], data_moves[currentSave.party[currentplayer].moves[tv1 + 2 * tv2]].uses);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-14)
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	(IX+-35),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-11)
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-35)
	LEA	HL,IY+1
	LD	DE,BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-35)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__81
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  441					gfx_PrintStringXY(str, 271, 209);
	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  442				}
L_127:
;  443	
;  444				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  445			}
L_136:
;  446			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_135
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_137
L_135:
;  447				if (tv2 == 1) {
	LD	A,(IX+-5)
	CP	A,1
	JR	NZ,L_131
;  448					tv2 = 0;
	LD	(IX+-5),0
;  449				}
;  450				else {
	JR	L_132
L_131:
;  451					tv2 = 1;
	LD	(IX+-5),1
;  452				}
L_132:
;  453				gfx_FillRectangle(14, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  454				gfx_FillRectangle(134, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  455				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-5)
	SEXT	HL
	LD	L,(IX+-5)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__85
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  456	
;  457				gfx_FillRectangle(263, 185, 48, 46);
	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  458				if (currentSave.party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
	LD	BC,_currentSave+10
	LD	(IX+-20),BC
	LD	A,(IX+-5)
	SEXT	HL
	LD	L,(IX+-5)
	ADD	HL,HL
	LD	(IX+-17),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-20)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-17)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_134
;  459					gfx_Sprite(typeIcons[data_moves[currentSave.party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
	LD	BC,_data_moves
	LD	DE,193
	PUSH	DE
	LD	DE,271
	PUSH	DE
	LD	HL,(IX+-26)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  460					sprintf(str, "%u/%u", currentSave.party[currentplayer].pp[tv1 + 2 * tv2], data_moves[currentSave.party[currentplayer].moves[tv1 + 2 * tv2]].uses);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-20)
	ADD	HL,BC
	LD	(IX+-44),HL
	LD	(IX+-41),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-17)
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-41)
	LEA	HL,IY+1
	LD	DE,BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-41)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__87
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  461					gfx_PrintStringXY(str, 271, 209);
	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  462				}
L_134:
;  463	
;  464				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  465			}
;  466		}
L_137:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_140
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_138
L_140:
;  467		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_141
;  468			textBoxType = 1;
	LD	BC,1
	LD	(_textBoxType),BC
	OR	A,A
;  469			return(0);
	SBC	HL,HL
	JR	L_142
;  470		}
L_141:
;  471		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  472		textBoxType = 1;
	LD	BC,1
	LD	(_textBoxType),BC
;  473		return (tv1 + 1 + 2 * (tv2));
	LD	A,(IX+-5)
	SEXT	HL
	LD	L,(IX+-5)
	ADD	HL,HL
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  474	}
L_142:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _selectMove ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_typeIcons                          IMPORT     51   variable
;_gfx_Sprite                         IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_data_moves                         IMPORT  unknown variable
;_currentSave                        IMPORT   4142   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;G_31                                 IX-26      3   variable
;G_28                                 IX-23      3   variable
;G_32                                 IX-20      3   variable
;G_33                                 IX-17      3   variable
;G_29                                 IX-14      3   variable
;G_30                                 IX-11      3   variable
;G_25                                  IX-8      3   variable
;tv2                                   IX-5      1   variable
;G_21                                  IX-4      3   variable
;tv1                                   IX-1      1   variable


; Stack Frame Size: 50 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__71:
	DB	">"
	DB	0
L__73:
	DB	"%u/%u"
	DB	0
L__79:
	DB	">"
	DB	0
L__81:
	DB	"%u/%u"
	DB	0
L__85:
	DB	">"
	DB	0
L__87:
	DB	"%u/%u"
	DB	0
	SEGMENT CODE
;  475	
;  476	bool enemyturn() {
_enemyturn:
	LD	HL,-12
	CALL	__frameset
;  477		if (attackturns[false] > 0) {
	LD	A,(_attackturns)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_160
;  478			chosenmove[false] = lastmove[false];
	LD	A,(_lastmove)
	LD	(_chosenmove),A
;  479			return true;
	LD	A,1
	JR	L_162
;  480		}
L_160:
;  481		switch (rand() % 4)
	CALL	_rand
	LD	BC,4
	CALL	__irems
	CALL	__seqcase
L__93:
	DW	4
	DW	0
	DB	0
	DW24	L_144	

	DW24	L_148	

	DW24	L_152	

	DW24	L_156	

	DW24	L_161	

;  482		{
;  483		case 0:
L_144:
;  484			if (enemyparty[currentenemy].moves[0] == 0 || disabledmove[false] == 1) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	LD	(IX+-3),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_146
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_147
L_146:
;  485				return false;
	XOR	A,A
	JR	L_162
;  486			}
L_147:
;  487			chosenmove[false] = enemyparty[currentenemy].moves[0];
	LD	HL,(IX+-3)
	LD	A,(HL)
	LD	(_chosenmove),A
;  488			break;
	JR	L_161
;  489		case 1:
L_148:
;  490			if (enemyparty[currentenemy].moves[1] == 0 || disabledmove[false] == 2) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	INC	BC
	LD	(IX+-6),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_150
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_151
L_150:
;  491				return false;
	XOR	A,A
	JR	L_162
;  492			}
L_151:
;  493			chosenmove[false] = enemyparty[currentenemy].moves[1];
	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	(_chosenmove),A
;  494			break;
	JR	L_161
;  495		case 2:
L_152:
;  496			if (enemyparty[currentenemy].moves[2] == 0 || disabledmove[false] == 3) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+3
	LD	(IX+-9),IY
	LD	HL,(IX+-9)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_154
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_155
L_154:
;  497				return false;
	XOR	A,A
	JR	L_162
;  498			}
L_155:
;  499			chosenmove[false] = enemyparty[currentenemy].moves[2];
	LD	HL,(IX+-9)
	LD	A,(HL)
	LD	(_chosenmove),A
;  500			break;
	JR	L_161
;  501		case 3:
L_156:
;  502			if (enemyparty[currentenemy].moves[3] == 0 || disabledmove[false] == 4) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+4
	LD	(IX+-12),IY
	LD	HL,(IX+-12)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_158
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_159
L_158:
;  503				return false;
	XOR	A,A
	JR	L_162
;  504			}
L_159:
;  505			chosenmove[false] = enemyparty[currentenemy].moves[3];
	LD	HL,(IX+-12)
	LD	A,(HL)
	LD	(_chosenmove),A
;  506			break;
;  507		}
L_161:
;  508		return true;
	LD	A,1
;  509	}
L_162:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _enemyturn ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_rand                               IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_38                                 IX-12      3   variable
;G_37                                  IX-9      3   variable
;G_36                                  IX-6      3   variable
;G_35                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  510	void redrawcharacters(void) {
_redrawcharacters:
	LD	HL,-12
	CALL	__frameset
;  511		int statusIndex, healthRatio;
;  512		gfx_SetColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  513		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  514	
;  515		gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  516		gfx_ScaledTransparentSprite_NoClip(playerSprite, 20, 64, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  517		gfx_ScaledTransparentSprite_NoClip(enemySprite, 190, 8, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,190
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  518	
;  519		/* Display Information about player and enemy */
;  520		
;  521		gfx_PrintStringXY(data_pokemon[enemyparty[currentenemy].id].name, 17, 29);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,29
	PUSH	BC
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,17
	PUSH	BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  522		sprintf(str, "Lv%u", enemyparty[currentenemy].level);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__103
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  523		gfx_PrintStringXY(str, 98, 29);
	LD	BC,29
	PUSH	BC
	LD	BC,98
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  524		gfx_Sprite(hpBarSprite, 40, 40);
	LD	BC,40
	PUSH	BC
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
;  525		healthRatio = (enemyparty[currentenemy].currenthealth * 78) / stats[0].health;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	DE,HL
	LD	BC,(_stats)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
;  526		if (healthRatio > 34) {
	OR	A,A
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-6),HL
	LD	BC,HL
	LD	HL,34
	SBC	HL,BC
	JP	P,L_166
;  527			gfx_SetColor(colors[8]);
	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  528		}else if (healthRatio > 14) {
	JR	L_167
L_166:
	LD	BC,(IX+-6)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_164
;  529			gfx_SetColor(colors[9]);
	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  530		}else {
	JR	L_167
L_164:
;  531			gfx_SetColor(colors[10]);
	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  532		}
L_167:
;  533		gfx_FillRectangle(58, 42, healthRatio, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,58
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  534		if (enemyparty[currentenemy].currentstatus > 0) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(IX+-12)
	XOR	A,A
	CP	A,(IY+15)
	JR	NC,L_169
;  535			gfx_TransparentSprite_NoClip(statusIcons[enemyparty[currentenemy].currentstatus - 1], 18, 41);
	LD	BC,41
	PUSH	BC
	LD	BC,18
	PUSH	BC
	LD	IY,(IX+-12)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  536		}
L_169:
;  537	
;  538		gfx_PrintStringXY(data_pokemon[currentSave.party[currentplayer].id].name, 181, 129);
	LD	BC,_currentSave+10
	LD	(IX+-3),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,129
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  539		sprintf(str, "Lv%u", currentSave.party[currentplayer].level);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__107
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  540		gfx_PrintStringXY(str, 264, 129);
	LD	BC,129
	PUSH	BC
	LD	BC,264
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  541		gfx_Sprite(hpBarSprite, 204, 140);
	LD	BC,140
	PUSH	BC
	LD	BC,204
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  542		healthRatio = (currentSave.party[currentplayer].currenthealth * 78) / stats[1].health;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	IY,_stats
	LD	BC,(IY+12)
	LD	DE,HL
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	(IX+-6),HL
;  543		if (healthRatio > 34) {
	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_173
;  544			gfx_SetColor(colors[8]);
	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  545		}
;  546		else if (healthRatio > 14) {
	JR	L_174
L_173:
	LD	BC,(IX+-6)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_171
;  547			gfx_SetColor(colors[9]);
	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  548		}
;  549		else {
	JR	L_174
L_171:
;  550			gfx_SetColor(colors[10]);
	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  551		}
L_174:
;  552		gfx_FillRectangle(222, 142, healthRatio, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,142
	PUSH	BC
	LD	BC,222
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  553		
;  554		sprintf(str, "%u/%u", currentSave.party[currentplayer].currenthealth, stats[1].health);
	LD	IY,_stats
	LD	BC,(IY+12)
	CALL	__stoiu
	PUSH	HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__110
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  555		gfx_PrintStringXY(str, 247, 153);
	LD	BC,153
	PUSH	BC
	LD	BC,247
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  556	
;  557		gfx_SetTextFGColor(colors[11]);
	LD	HL,_colors+11
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  558		gfx_PrintStringXY("XP", 193, 166);
	LD	BC,166
	PUSH	BC
	LD	BC,193
	PUSH	BC
	LD	BC,L__111
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  559		gfx_SetColor(colors[7]);
	LD	HL,_colors+7
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  560		if (currentSave.party[currentplayer].level < 100) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_177
;  561			gfx_FillRectangle(210, 168, CalculateXpPercent(), 4);
	LD	BC,4
	PUSH	BC
	CALL	_CalculateXpPercent
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,168
	PUSH	BC
	LD	BC,210
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  562		}
L_177:
;  563		if (currentSave.party[currentplayer].currentstatus > 0) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	XOR	A,A
	CP	A,(IY+15)
	JR	NC,L_178
;  564			gfx_TransparentSprite_NoClip(statusIcons[currentSave.party[currentplayer].currentstatus - 1], 182, 141);
	LD	BC,141
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  565		}
L_178:
;  566	
;  567		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  568		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  569		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  570	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _redrawcharacters ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_CalculateXpPercent                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_statusIcons                        IMPORT     15   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_stats                              STATIC     24   variable
;_hpBarSprite                        STATIC      3   variable
;_gfx_Sprite                         IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_backgroundSprite                   STATIC      3   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;G_40                                 IX-12      3   variable
;G_47                                  IX-9      3   variable
;healthRatio                           IX-6      3   variable
;G_41                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__103:
	DB	"Lv%u"
	DB	0
L__107:
	DB	"Lv%u"
	DB	0
L__110:
	DB	"%u/%u"
	DB	0
L__111:
	DB	"XP"
	DB	0
	SEGMENT CODE
;  571	
;  572	uint8_t CalculateXpPercent(void) {
_CalculateXpPercent:
	LD	HL,-21
	CALL	__frameset
;  573		int cXp, sXp, mXp;
;  574		cXp = currentSave.party[currentplayer].xp;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	BC,(IY+10)
	LD	(IX+-6),BC
;  575		sXp = xpPerLevel[data_pokemon[currentSave.party[currentplayer].id].xptype][currentSave.party[currentplayer].level];
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	D,(IY+9)
	LD	IY,(IX+-12)
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	(IX+-21),HL	; spill
	LD	A,D
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,(IX+-21)	; unspill
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-3),BC
;  576		mXp = xpPerLevel[data_pokemon[currentSave.party[currentplayer].id].xptype][currentSave.party[currentplayer].level + 1];
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	BC,HL
	LD	A,D
	UEXT	HL
	LD	L,A
	INC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-9),BC
;  577		return((uint8_t)((92 * (cXp - sXp)) / (mXp - sXp)));
	LD	BC,(IX+-3)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	A,92
	CALL	__imul_b
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	A,L
;  578	
;  579	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _CalculateXpPercent ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_data_pokemon                       IMPORT  unknown variable
;_currentSave                        IMPORT   4142   variable
;_currentplayer                      STATIC      1   variable
;mXp                                   IX-9      3   variable
;cXp                                   IX-6      3   variable
;sXp                                   IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: -1 (instruction)


;  580	
;  581	void battle_End(void) {
_battle_End:
;  582		free(playerSprite);
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  583		free(enemySprite);
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  584		free(backgroundSprite);
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  585		free(hpBarSprite);
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  586		FreeIcons();
	CALL	_FreeIcons
;  587	}
	RET	


;**************************** _battle_End ***************************
;Name                         Addr/Register   Size   Type
;_FreeIcons                          IMPORT  -----   function
;_hpBarSprite                        STATIC      3   variable
;_backgroundSprite                   STATIC      3   variable
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_free                               IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -1 (instruction)


;  588	
;  589	void attack(bool player, uint8_t move) {
_attack:
	LD	HL,-564
	CALL	__frameset
;  590		
;  591		char username[20];
;  592		char nonusername[20];
;  593		uint32_t damage;
;  594		uint8_t hitcount = 0;
	LD	(IX+-36),0
;  595		uint8_t userlevel;
;  596		uint8_t nonuserlevel;
;  597	
;  598		uint8_t userelement1;
;  599		uint8_t userelement2;
;  600		uint8_t nonuserelement1;
;  601		uint8_t nonuserelement2;
;  602	
;  603		if (move == 0) {
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_592
;  604			return;
;  605		}
;  606		
;  607		
;  608		rage[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
;  609	
;  610		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_185
;  611			strcpy(username, playername);
	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  612			strcpy(nonusername, enemyname);
	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  613			userlevel = currentSave.party[currentplayer].level;
	LD	HL,_currentSave+10
	LD	BC,-411
	CALL	__istix
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	BC,IX
	LD	IY,-411
	ADD	IY,BC
	LD	A,34
	CALL	__imul_b
	LD	BC,(IY)
	ADD	HL,BC
	LD	BC,-408
	CALL	__istix
	LD	BC,-408
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  614			nonuserlevel = enemyparty[currentenemy].level;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-402
	CALL	__istix
	LD	BC,-402
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-108),A
;  615			userelement1 = data_pokemon[currentSave.party[currentplayer].id].element1;
	LD	BC,-408
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-405
	CALL	__istix
	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-109),A
;  616			userelement2 = data_pokemon[currentSave.party[currentplayer].id].element2;
	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-110),A
;  617			nonuserelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
	LD	BC,-402
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-399
	CALL	__istix
	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-64),A
;  618			nonuserelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-65),A
;  619	
;  620		}
;  621		else {
	JR	L_187
L_185:
;  622			strcpy(username, enemyname);
	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  623			strcpy(nonusername, playername);
	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  624			userlevel = enemyparty[currentenemy].level;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-426
	CALL	__istix
	LD	BC,-426
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  625			nonuserlevel = currentSave.party[currentplayer].level;
	LD	HL,_currentSave+10
	LD	BC,-420
	CALL	__istix
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	BC,IX
	LD	IY,-420
	ADD	IY,BC
	LD	A,34
	CALL	__imul_b
	LD	BC,(IY)
	ADD	HL,BC
	LD	BC,-417
	CALL	__istix
	LD	BC,-417
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-108),A
;  626			userelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
	LD	BC,-426
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-423
	CALL	__istix
	LD	BC,-423
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-109),A
;  627			userelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
	LD	BC,-423
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-110),A
;  628			nonuserelement1 = data_pokemon[currentSave.party[currentplayer].id].element1;
	LD	BC,-417
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-414
	CALL	__istix
	LD	BC,-414
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-64),A
;  629			nonuserelement2 = data_pokemon[currentSave.party[currentplayer].id].element2;
	LD	BC,-414
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-65),A
;  630		}
L_187:
;  631	
;  632		if (flinch[player]) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_189
;  633			sprintf(str, "%s flinched", username);
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__120
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  634			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  635		}
L_189:
;  636		if (data_moves[move].type == 16) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-293
	CALL	__istix
	LD	BC,-293
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,16
	JR	NZ,L_195
;  637			sprintf(str, "%s used %s", username, data_moves[move].name);
	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__122
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  638			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  639			move = 1 + (rand() % 165);
	CALL	_rand
	LD	BC,165
	CALL	__irems
	INC	L
	LD	(IX+9),L
;  640		}
L_195:
;  641	
;  642	
;  643		
;  644		if (data_moves[move].type == 17) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-296
	CALL	__istix
	LD	BC,-296
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,17
	JR	NZ,L_196
;  645			sprintf(str, "%s used %s", username, data_moves[move].name);
	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__124
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  646			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  647			move = lastmove[!player];
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_191
	LD	HL,1
	LD	BC,-305
	CALL	__istix
	JR	L_192
L_191:
	OR	A,A
	SBC	HL,HL
	LD	BC,-305
	CALL	__istix
L_192:
	LD	HL,-305
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+9),A
;  648		}
L_196:
;  649		lastmove[player] = move;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(IX+9)
	LD	(HL),A
;  650	
;  651		if (data_moves[move].type == 19 && data_moves[lastmove[!player]].type != 0) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-74),HL
	LD	BC,-302
	CALL	__istix
	LD	HL,(IX+-74)
	LD	BC,-299
	CALL	__istix
	LD	HL,(IX+-74)
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	IY,(IX+-13)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_207
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_198
	LD	HL,1
	LD	BC,-308
	CALL	__istix
	JR	L_199
L_198:
	OR	A,A
	SBC	HL,HL
	LD	BC,-308
	CALL	__istix
L_199:
	LD	BC,IX
	LD	DE,_lastmove
	LD	HL,-308
	ADD	HL,BC
	LD	HL,(HL)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_207
;  652			text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__129
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  653			return;
	JR	L_592
;  654		}
L_207:
;  655	
;  656		if (data_moves[move].statustype == 32) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_215
;  657			if (attackturns[player] == 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-113),HL
	LD	BC,-311
	CALL	__istix
	LD	HL,(IX+-113)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_205
;  658				attackturns[player] = (rand() % 2) + 2;
	LD	HL,(IX+-113)
	CALL	__istix
	CALL	_rand
	LD	BC,2
	CALL	__irems
	INC	HL
	INC	HL
	LD	IY,(IX+-113)
	LD	(IY),L
;  659			}
L_205:
;  660			attackturns[player]--;
	LD	BC,-311
	CALL	__ildix
	LD	BC,-429
	CALL	__istix
	LD	BC,-429
	CALL	__ildix
	LD	IY,HL
	LD	BC,-429
	CALL	__ildix
	LD	A,(IY)
	DEC	A
	LD	(HL),A
;  661		}
L_215:
;  662		if (data_moves[move].statustype == 33 || data_moves[move].statustype == 36 || data_moves[move].statustype == 37 || data_moves[move].statustype == 38) {
	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,33
	JR	Z,L_214
	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,36
	JR	Z,L_214
	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,37
	JR	Z,L_214
	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,38
	JR	NZ,L_220
L_214:
;  663			if (attackturns[player] == 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-51),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_213
;  664				attackturns[player] = 1;
	LD	HL,(IX+-51)
	LD	(HL),1
;  665				sprintf(str, "%s is building up power", username, data_moves[move].name);
	LD	IY,(IX+-107)
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__137
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  666				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  667				return;
	JR	L_592
;  668			}
;  669			else if (attackturns[player] == 1) {
L_213:
	LD	HL,(IX+-51)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_220
;  670				attackturns[player] = 0;
	LD	HL,(IX+-51)
	LD	(HL),0
;  671			}
;  672		}
L_220:
;  673		if (data_moves[move].statustype == 34) {
	LD	BC,(IX+-122)
	LD	(IX+-26),BC
	LD	IY,(IX+-26)
	LD	A,(IY+19)
	CP	A,34
	JR	NZ,L_227
;  674			if (attackturns[player] == 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-63),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_218
;  675				attackturns[player] = 1;
	LD	HL,(IX+-63)
	LD	(HL),1
;  676				air[player] = true;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_air
	ADD	HL,DE
	LD	(HL),1
;  677				return;
	JR	L_592
;  678			}
;  679			else if (attackturns[player] == 1) {
L_218:
	LD	HL,(IX+-63)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_227
;  680				attackturns[player] = 0;
	LD	HL,(IX+-63)
	LD	(HL),0
;  681				air[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_air
	ADD	HL,DE
	LD	(HL),0
;  682			}
;  683		}
L_227:
;  684		if (data_moves[move].type == 20 && attackturns[player] != 1) {
	LD	IY,(IX+-26)
	LD	A,(IY+15)
	CP	A,20
	JR	NZ,L_230
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	Z,L_230
;  685			if (attackturns[player] == 0) {
	LD	HL,(IX+-32)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_224
;  686				bidedamage[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_bidedamage
	ADD	HL,BC
	LD	(HL),0
	INC	HL
;  687				attackturns[player] = 2;
;  688				sprintf(str, "%s used Bide", username);
	LD	IY,IX
	LD	BC,-376
	ADD	IY,BC
	LD	(HL),0
	LD	HL,(IX+-32)
	LD	BC,IY
	PUSH	BC
	LD	BC,L__145
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	(HL),2
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  689				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  690			}
;  691			else {
	JR	L_225
L_224:
;  692				attackturns[player]--;
	LD	HL,(IX+-32)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-32)
	LD	(HL),A
;  693			}
L_225:
;  694			sprintf(str, "%s is storing energy", username);
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__146
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  695			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  696			return;
	JR	L_592
;  697		}
L_230:
;  698	
;  699		/* Exit if character's status prevents movement */
;  700		if ((*currentStatusPointer[player] == 3) && (rand() % 4 == 1)) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-54),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_234
	CALL	_rand
	LD	BC,4
	CALL	__irems
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_234
;  701			sprintf(str, "%s is paralysed", username);
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__149
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  702			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  703			return;
	JR	L_592
;  704		}
L_234:
;  705		if (*currentStatusPointer[player] == 4) {
	LD	HL,(IX+-54)
	LD	BC,-338
	CALL	__istix
	LD	HL,(IX+-54)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_238
;  706			if (rand() % 3 == 0) {
	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_232
;  707				*currentStatusPointer[player] = 0;
	LD	HL,(IX+-54)
	LD	BC,-338
;  708				sprintf(str, "%s woke up", username);
	LD	IY,IX
	LD	DE,-376
	ADD	IY,DE
	CALL	__istix
	LD	HL,(IX+-54)
	LD	BC,IY
	PUSH	BC
	LD	BC,L__152
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),0
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  709				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  710			}
;  711			else {
	JR	L_238
L_232:
;  712				sprintf(str, "%s is asleep", username);
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__153
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  713				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  714				return;
	JR	L_592
;  715			}
;  716		}
L_238:
;  717		if (*currentStatusPointer[player] == 5) {
	LD	BC,-338
	CALL	__ildix
	LD	(IX+-101),HL
	LD	BC,-341
	CALL	__istix
	LD	HL,(IX+-101)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_242
;  718			if (rand() % 5 == 0) {
	CALL	_rand
	LD	BC,5
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_236
;  719				*currentStatusPointer[player] = 0;
	LD	HL,(IX+-101)
	LD	BC,-341
;  720				sprintf(str, "%s thawed out", username);
	LD	IY,IX
	LD	DE,-376
	ADD	IY,DE
	CALL	__istix
	LD	HL,(IX+-101)
	LD	BC,IY
	PUSH	BC
	LD	BC,L__156
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),0
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  721				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  722			}
;  723			else {
	JR	L_242
L_236:
;  724				sprintf(str, "%s is frozen", username);
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__157
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  725				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  726				return;
	JR	L_592
;  727			}
;  728		}
L_242:
;  729		if (confusedturns[player] > 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(IX+-71),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_243
;  730			confusedturns[player] --;
	LD	HL,(IX+-71)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-71)
	LD	(HL),A
;  731			if (rand() % 2 == 0) {
	CALL	_rand
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_243
;  732				sprintf(str, "%s hurt itself in its confusion", username);
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__160
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  733				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  734				return;
	JR	L_592
;  735			}
;  736		}
L_243:
;  737	
;  738		sprintf(str, "%s used %s", username, data_moves[move].name);
	LD	HL,(IX+-26)
	LD	BC,-350
	CALL	__istix
	LD	IY,(IX+-26)
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__161
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  739		text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  740	
;  741		if (air[!player] || (data_moves[move].accuracy * statmodvalues[statmods[player][5]] / statmodvalues[statmods[!player][6]]) < (rand() % 100)) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_245
	LD	HL,1
	LD	BC,-314
	CALL	__istix
	JR	L_246
L_245:
	OR	A,A
	SBC	HL,HL
	LD	BC,-314
	CALL	__istix
L_246:
	LD	HL,-314
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_air
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_255
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_249
	LD	HL,1
	LD	BC,-317
	CALL	__istix
	JR	L_250
L_249:
	OR	A,A
	SBC	HL,HL
	LD	BC,-317
	CALL	__istix
L_250:
	LD	HL,(IX+-26)
	LD	BC,-350
	CALL	__istix
	LD	DE,(IX+-26)
	LD	BC,-353
	LEA	IY,IX+-128
	LD	(IY+-36),DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	(IX+-60),HL
	CALL	__istix
	LD	HL,(IX+-60)
	LD	BC,_statmods
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	(IX+-35),HL
	LD	(IX+-128),HL
	LD	(IX+-98),HL
	LD	(IX+-119),HL
	LD	(IX+-57),HL
	LD	IY,(IX+-10)
	LEA	HL,IY+5
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,(IX+-26)
	LD	A,(IY+17)
	LD	BC,_statmodvalues
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IY)
	CALL	__imuls
	LD	DE,HL
	LD	BC,-317
	CALL	__ildix
	LD	BC,HL
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+6
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	LD	BC,(HL)
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_258
L_255:
;  742			text_Display("It Missed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__166
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  743			if (data_moves[move].statustype == 25) {
	LD	BC,-350
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,25
	JR	NZ,L_592
;  744				takedamage(player, stats[player].health);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  745			}
;  746			return;
	JR	L_592
;  747		}
L_258:
;  748		if (!(*currentStatusPointer[player] == 4) && data_moves[move].statustype == 26) {
	LD	BC,-341
	CALL	__ildix
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_260
	LD	BC,(IX+-26)
	LEA	IY,IX+-128
	LD	(IY+-36),BC
	LD	IY,(IX+-26)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_260
;  749			text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__170
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  750		}
L_260:
;  751		if (data_moves[move].statustype == 22) {
	LEA	IY,IX+-128
	LD	BC,(IY+-36)
	LD	(IY+-6),BC
	LD	IY,(IY+-6)
	LD	A,(IY+19)
	CP	A,22
	JR	NZ,L_262
;  752			hitcount = (rand() % 3) + 1;
	CALL	_rand
	LD	BC,3
	CALL	__irems
	INC	HL
	LD	(IX+-36),L
;  753		}
L_262:
;  754		if (data_moves[move].statustype == 23) {
	LEA	IY,IX+-128
	LD	BC,(IY+-6)
	LD	(IX+-125),BC
	LD	IY,(IY+-6)
	LD	A,(IY+19)
	CP	A,23
	JR	NZ,L_263
;  755			hitcount = 1;
	LD	(IX+-36),1
;  756		}
;  757	
;  758		
;  759	
;  760	
;  761	startattack:
L_263:
;  762		if (data_moves[move].type < 2 || data_moves[move].type == 19) {
	LD	BC,(IX+-125)
	LD	(IX+-3),BC
	LEA	IY,IX+-128
	LD	(IY+-45),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	C,L_452
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-45),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_453
L_452:
;  763			if (data_moves[move].type == 0) {
	LEA	IY,IX+-128
	LD	BC,(IY+-45)
	LD	(IX+-29),BC
	LD	IY,(IX+-29)
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_296
;  764				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_266
	LD	HL,1
	LD	BC,-320
	CALL	__istix
	JR	L_267
L_266:
	OR	A,A
	SBC	HL,HL
	LD	BC,-320
	CALL	__istix
L_267:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_270
	LD	HL,1
	LD	BC,-323
	CALL	__istix
	JR	L_271
L_270:
	OR	A,A
	SBC	HL,HL
	LD	BC,-323
	CALL	__istix
L_271:
	LD	BC,(IX+-10)
	LD	(IX+-35),BC
	LD	(IX+-128),BC
	LD	BC,(IX+-29)
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	LD	BC,(IX+-29)
	LD	(IX+-77),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-22),HL
	LD	(IY+-15),HL
	LD	(IY+-12),HL
	LD	(IY+-9),HL
	LD	BC,(IX+-35)
	LD	(IX+-98),BC
	LD	BC,(IX+-35)
	LD	(IX+-119),BC
	LD	BC,(IX+-35)
	LD	(IX+-57),BC
	LD	HL,(IX+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-512	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-512	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-515	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-22)
	LD	BC,5
	CALL	__idivs
	LD	DE,HL
	INC	DE
	LD	IY,(IX+-29)
	LD	A,(IY+16)
	INC	DE
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-515	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LD	BC,-323
	CALL	__ildix
	LD	BC,HL
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-518	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-320
	CALL	__ildix
	LD	BC,HL
	LD	HL,12
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-518	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  765			}
;  766			else if (data_moves[move].type == 1) {
	JR	L_297
L_296:
	LD	BC,(IX+-29)
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	LD	BC,(IX+-29)
	LD	(IX+-77),BC
	LD	IY,(IX+-29)
	LD	A,(IY+15)
	CP	A,1
	JR	NZ,L_294
;  767				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].specialattack*statmodvalues[statmods[player][2]] / 100) / (stats[!player].specialdefence * statmodvalues[statmods[!player][3]] / 100)) / 50) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_274
	LD	HL,1
	LD	BC,-326
	CALL	__istix
	JR	L_275
L_274:
	OR	A,A
	SBC	HL,HL
	LD	BC,-326
	CALL	__istix
L_275:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_278
	LD	HL,1
	LD	BC,-329
	CALL	__istix
	JR	L_279
L_278:
	OR	A,A
	SBC	HL,HL
	LD	BC,-329
	CALL	__istix
L_279:
	LD	BC,(IX+-35)
	LD	(IX+-10),BC
	LD	(IX+-128),BC
	LD	BC,(IX+-29)
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	LD	BC,(IX+-29)
	LD	(IX+-77),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-22),HL
	LD	(IY+-15),HL
	LD	(IY+-12),HL
	LD	(IY+-9),HL
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-119),BC
	LD	BC,(IX+-10)
	LD	(IX+-57),BC
	LD	IY,(IX+-10)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-503	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+6)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-503	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-506	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-22)
	LD	BC,5
	CALL	__idivs
	LD	DE,HL
	INC	DE
	LD	IY,(IX+-29)
	LD	A,(IY+16)
	INC	DE
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-506	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LD	BC,-329
	CALL	__ildix
	LD	BC,HL
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-509	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-326
	CALL	__ildix
	LD	BC,HL
	LD	HL,12
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+8)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-509	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  768			}
;  769			else {
	JR	L_297
L_294:
;  770				damage = ((((2 * userlevel / 5) + 2) * data_moves[lastmove[!player]].power * 2 * (stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_282
	LD	HL,1
	LD	BC,-332
	CALL	__istix
	JR	L_283
L_282:
	OR	A,A
	SBC	HL,HL
	LD	BC,-332
	CALL	__istix
L_283:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_286
	LD	HL,1
	LD	BC,-335
	CALL	__istix
	JR	L_287
L_286:
	OR	A,A
	SBC	HL,HL
	LD	BC,-335
	CALL	__istix
L_287:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_290
	LD	HL,1
	LD	BC,-344
	CALL	__istix
	JR	L_291
L_290:
	OR	A,A
	SBC	HL,HL
	LD	BC,-344
	CALL	__istix
L_291:
	LD	BC,(IX+-128)
	LD	(IX+-10),BC
	LD	(IX+-35),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-22),HL
	LEA	IY,IX+-128
	LD	(IY+-15),HL
	LD	(IY+-12),HL
	LD	(IY+-9),HL
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-119),BC
	LD	BC,(IX+-10)
	LD	(IX+-57),BC
	LD	HL,(IX+-10)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-494	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-494	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,IX
	LD	IY,-332
	ADD	IY,BC
	LD	DE,HL
	LD	HL,(IY)
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-497	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-22)
	LD	BC,5
	CALL	__idivs
	LD	BC,HL
	INC	BC
	INC	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-497	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	ADD	HL,HL
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	DE,HL
	LD	BC,-344
	CALL	__ildix
	LD	BC,HL
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-500	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-335
	CALL	__ildix
	LD	BC,HL
	LD	HL,12
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-500	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  771			}
L_297:
;  772			damage *= ((rand() % 16) + 85);//  /100
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+85
	CALL	__itol
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  773			damage *= elements[data_moves[move].element][nonuserelement1];// /2
	LD	BC,(IX+-74)
	LD	(IX+-19),BC
	LD	HL,BC
	LD	BC,-432
	LD	DE,_data_moves
	ADD	HL,DE
	CALL	__istix
	LD	BC,-432
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	A,(IX+-64)
	LD	BC,(IX+-7)
	LD	DE,_elements
	ADD	HL,DE
	LD	DE,HL
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  774			damage *= elements[data_moves[move].element][nonuserelement2];// /2
	LD	BC,-432
	CALL	__ildix
	LD	IY,HL
	LD	H,(IY+14)
	PUSH	IY
	PUSH	BC
	LD	IY,-482	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-482	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,18
	LD	A,(IX+-65)
	CALL	__imulu
	LD	BC,(IX+-7)
	LD	DE,_elements
	ADD	HL,DE
	LD	DE,HL
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  775			damage /= 400;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,400
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  776			if (data_moves[move].element == userelement1 || data_moves[move].element == userelement2) {
	LD	A,(IX+-109)
	PUSH	IY
	PUSH	BC
	LD	IY,-482	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CP	A,H
	JR	Z,L_299
	LEA	IY,IX+-128
	LD	BC,(IY+-3)
	LD	(IX+-77),BC
	LD	IY,(IX+-77)
	LD	A,(IY+14)
	CP	A,(IX+-110)
	JR	NZ,L_313
L_299:
;  777				damage *= 1.5;
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__ultof
	LD	HL,12582912
	LD	E,63
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  778			}
L_313:
;  779	
;  780			/* Critical Hit */
;  781			if (data_moves[move].statustype == 24 || highcritratio[player] || data_moves[move].statustype == 36) {
	LD	BC,(IX+-77)
	LD	(IX+-104),BC
	LEA	IY,IX+-128
	LD	(IY+-75),BC
	LD	IY,(IX+-104)
	LD	A,(IY+19)
	CP	A,24
	JR	Z,L_311
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_311
	LD	BC,(IX+-104)
	LEA	IY,IX+-128
	LD	(IY+-75),BC
	LD	IY,(IX+-104)
	LD	A,(IY+19)
	CP	A,36
	JR	NZ,L_312
L_311:
;  782				if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_305
;  783					if (data_pokemon[currentSave.party[currentplayer].id].basespeed * 4 < (rand() % 256)) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_306
;  784						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IX+-22)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  785					}
;  786				}
;  787				else {
	JR	L_306
L_305:
;  788					if (data_pokemon[enemyparty[currentenemy].id].basespeed * 4 < (rand() % 256)) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_306
;  789						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	IY,-143
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IY)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  790					}
;  791				}
L_306:
;  792				text_Display("Critical Hit", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__192
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  793			}
;  794			else {
	JR	L_318
L_312:
;  795				if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_310
;  796					if (data_pokemon[currentSave.party[currentplayer].id].basespeed / 2 < (rand() % 256)) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_318
;  797						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	IY,-140
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IY)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  798					}
;  799				}
;  800				else {
	JR	L_318
L_310:
;  801					if (data_pokemon[enemyparty[currentenemy].id].basespeed / 2 < (rand() % 256)) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_318
;  802						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	IY,-137
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IY)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  803					}
;  804				}
;  805			}
L_318:
;  806	
;  807			takedamage(!player, damage);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_315
	LD	HL,1
	LD	BC,-347
	CALL	__istix
	JR	L_316
L_315:
	OR	A,A
	SBC	HL,HL
	LD	BC,-347
	CALL	__istix
L_316:
	LD	DE,(IX+-7)
	PUSH	DE
	CALL	__bldix
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  808	
;  809			if (data_moves[move].statustype == 21 || data_moves[move].statustype == 26) {
	LEA	IY,IX+-128
	LD	BC,(IY+-75)
	LD	(IY+-81),BC
	LD	IY,(IY+-81)
	LD	A,(IY+19)
	CP	A,21
	JR	Z,L_320
	LEA	IY,IX+-128
	LD	IY,(IY+-81)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_322
L_320:
;  810				heal(player, damage / 2);
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	LD	L,1
	CALL	__lshru
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  811			}
L_322:
;  812			if (data_moves[move].statustype == 19) {
	LD	BC,(IX+-19)
	LD	(IX+-74),BC
	LD	HL,(IX+-19)
	LD	BC,-302
	CALL	__istix
	LD	HL,(IX+-19)
	LD	BC,-299
	CALL	__istix
	LD	HL,(IX+-19)
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-125),HL
	LD	IY,(IX+-125)
	LD	A,(IY+19)
	CP	A,19
	JR	NZ,L_325
;  813				takedamage(player, damage / 3);
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,3
	XOR	A,A
	CALL	__ldivu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  814			}
L_325:
;  815			if (hitcount > 0) {
	XOR	A,A
	CP	A,(IX+-36)
	JR	NC,L_327
;  816				hitcount--;
	DEC	(IX+-36)
;  817				redrawcharacters();
	CALL	_redrawcharacters
;  818				Wait(15);
	LD	BC,15
	PUSH	BC
	CALL	_Wait
	POP	BC
;  819				goto startattack;
	JR	L_263
;  820			}
L_327:
;  821	
;  822			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] < 4) {
	LD	BC,_data_moves
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	BC,-435
	CALL	__istix
	LD	BC,-435
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	A,(IX+-64)
	LD	BC,-435
	LD	DE,_elements
	ADD	HL,DE
	LD	DE,HL
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	A,(IX+-65)
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JP	P,L_329
;  823				text_Display("Not Very Effective", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__202
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  824			}
L_329:
;  825			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] > 4) {
	LD	BC,_data_moves
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	BC,-438
	CALL	__istix
	LD	BC,-438
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-64)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-438
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-65)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	OR	A,A
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	HL,4
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_340
;  826				text_Display("Super Effective", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__204
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  827			}
L_340:
;  828			if (rage[!player]) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_331
	LD	HL,1
	LD	BC,-356
	CALL	__istix
	JR	L_332
L_331:
	OR	A,A
	SBC	HL,HL
	LD	BC,-356
	CALL	__istix
L_332:
	LD	HL,-356
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_rage
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_341
;  829				statmods[!player][0]++;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_335
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-18),BC
	JR	L_336
L_335:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-18),BC
L_336:
	LEA	IY,IX+-128
	LD	BC,(IY+-18)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-441
	CALL	__istix
	LD	BC,-441
	CALL	__ildix
	LD	A,(HL)
	LD	BC,-441
	CALL	__ildix
	INC	A
	LD	(HL),A
;  830			}
L_341:
;  831			redrawcharacters();
	CALL	_redrawcharacters
;  832		}
;  833		/* Raise user stat */
;  834		else if (data_moves[move].type == 2) {
	JR	L_588
L_453:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-84),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	NZ,L_451
;  835			if (statmods[player][data_moves[move].statustype] + data_moves[move].power > 12) {
	LD	BC,-302
	CALL	__ildix
	LD	(IX+-45),HL
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-444
	CALL	__istix
	LD	BC,(IX+-98)
	LEA	IY,IX+-128
	LD	(IY+-90),BC
	LD	BC,-444
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	BC,IX
	LD	IY,-218
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-444
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	JP	P,L_343
;  836				statmods[player][data_moves[move].statustype] = 12;
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-84),BC
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-218
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	(HL),12
;  837			}
;  838			else {
	JR	L_344
L_343:
;  839				statmods[player][data_moves[move].statustype] += data_moves[move].power;
	LD	BC,_data_moves
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	BC,-450
	CALL	__istix
	LD	HL,(IX+-60)
	LD	BC,-353
	CALL	__istix
	LD	HL,(IX+-60)
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-447
	CALL	__istix
	LD	BC,-450
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-447
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-560	; spill
	CALL	__istix
	POP	BC
	LD	BC,-450
	CALL	__ildix
	LD	DE,HL
	LD	BC,-450
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-447
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-521	; spill
	CALL	__istix
	LD	BC,-560	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-521	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	ADD	A,(IY+16)
	LD	(HL),A
;  840			}
L_344:
;  841			sprintf(str, "%s's %s rose", username, text_status2[data_moves[move].statustype]);
	LEA	IY,IX+-128
	LD	IY,(IY+-84)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__210
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  842			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  843		}
;  844		/* Lower non-user stat */
;  845		else if (data_moves[move].type == 3) {
	JR	L_588
L_451:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-93),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,3
	JR	NZ,L_449
;  846			if (statmods[!player][data_moves[move].statustype] < data_moves[move].power) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_346
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-21),BC
	JR	L_347
L_346:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-21),BC
L_347:
	LD	BC,-299
	CALL	__ildix
	LD	(IX+-48),HL
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-453
	CALL	__istix
	LEA	IY,IX+-128
	LD	BC,(IY+-21)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,-453
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	PUSH	BC
	LD	BC,-557	; spill
	CALL	__istix
	POP	BC
	LD	BC,-453
	CALL	__ildix
	LD	IY,HL
	PUSH	BC
	LD	BC,-557	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	CP	A,(IY+16)
	JR	NC,L_358
;  847				statmods[!player][data_moves[move].statustype] = 0;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_350
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-24),BC
	JR	L_351
L_350:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-24),BC
L_351:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-93),BC
	LD	BC,(IY+-24)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),0
;  848			}
;  849			else {
	JR	L_359
L_358:
;  850				statmods[!player][data_moves[move].statustype] -= data_moves[move].power;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_354
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-27),BC
	JR	L_355
L_354:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-27),BC
L_355:
	LD	BC,_data_moves
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	BC,-459
	CALL	__istix
	LEA	IY,IX+-128
	LD	BC,(IY+-27)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-456
	CALL	__istix
	LD	BC,-459
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-456
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-554	; spill
	CALL	__istix
	POP	BC
	LD	BC,-459
	CALL	__ildix
	LD	DE,HL
	LD	BC,-459
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-456
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-521	; spill
	CALL	__istix
	LD	BC,-554	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-521	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	SUB	A,(IY+16)
	LD	(HL),A
;  851			}
L_359:
;  852			sprintf(str, "%s's %s fell", nonusername, text_status2[data_moves[move].statustype]);
	LEA	IY,IX+-128
	LD	IY,(IY+-93)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__216
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  853			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  854		}
;  855		else if (data_moves[move].type == 5) {
	JR	L_588
L_449:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,5
	JR	NZ,L_447
;  856			takedamage(!player, data_moves[move].power);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_361
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-30),BC
	JR	L_362
L_361:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-30),BC
L_362:
	LD	IY,(IX+-3)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-30)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  857		}
;  858		else if (data_moves[move].type == 6 || data_moves[move].type == 7) {
	JR	L_588
L_447:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,6
	JR	Z,L_444
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,7
	JR	NZ,L_445
L_444:
;  859			if (wild) {
	LD	A,(_wild)
	OR	A,A
	JR	Z,L_366
;  860				run = true;
	LD	A,1
	LD	(_run),A
;  861			}
;  862			else {
	JR	L_588
L_366:
;  863				text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__222
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  864			}
;  865		}
;  866		else if (data_moves[move].type == 8) {
	JR	L_588
L_445:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,8
	JR	NZ,L_443
;  867			heal(player, stats[player].health / 2);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  868		}
;  869		else if (data_moves[move].type == 9) {
	JR	L_588
L_443:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,9
	JR	NZ,L_441
;  870			takedamage(!player, userlevel);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_368
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-33),BC
	JR	L_369
L_368:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-33),BC
L_369:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-33)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  871		}
;  872		else if (data_moves[move].type == 10) {
	JR	L_588
L_441:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,10
	JR	NZ,L_439
;  873			takedamage(!player, userlevel * 20 / (10 + (rand() % 20)));
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_372
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	JR	L_373
L_372:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-39),BC
L_373:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,20
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+10
	LD	HL,DE
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-39)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  874		}
;  875		else if (data_moves[move].type == 11) {
	JR	L_588
L_439:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,11
	JR	NZ,L_437
;  876			takedamage(!player, stats[!player].health / 2);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_376
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-42),BC
	JR	L_377
L_376:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-42),BC
L_377:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_380
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-48),BC
	JR	L_381
L_380:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-48),BC
L_381:
	LEA	IY,IX+-128
	LD	BC,(IY+-48)
	LD	HL,12
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-42)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  877		}
;  878		else if (data_moves[move].type == 12) {
	JR	L_588
L_437:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,12
	JR	NZ,L_435
;  879			i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  880			while (i < sizeof(statmods[player])) {
	JR	L_384
L_385:
;  881				statmods[player][i] = 6;
	LD	BC,(IX+-119)
	LD	(IX+-57),BC
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-57)
	ADD	HL,BC
	LD	(HL),6
;  882				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  883			}
L_384:
	LD	BC,(_i)
	CALL	__stoiu
	OR	A,A
	LD	BC,7
	SBC	HL,BC
	JR	C,L_385
;  884			while (i < sizeof(statmods[!player])) {
	JR	L_391
L_392:
;  885				statmods[player][i] = 6;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-57)
	ADD	HL,BC
	LD	(HL),6
;  886				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  887			}
L_391:
	LD	BC,(_i)
	CALL	__stoiu
	OR	A,A
	LD	BC,7
	SBC	HL,BC
	JR	C,L_392
	JR	L_588
;  888		}
;  889		else if (data_moves[move].type == 13) {
L_435:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,13
	JR	NZ,L_433
;  890			*currentStatusPointer[player] = 4;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),4
;  891			heal(player, 1000);
	LD	BC,1000
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  892		}
;  893		else if (data_moves[move].type == 14) {
	JR	L_588
L_433:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,14
	JR	NZ,L_431
;  894			disabledturns[!player] = (rand() % 7) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_395
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-51),BC
	JR	L_396
L_395:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-51),BC
L_396:
	CALL	_rand
	LD	BC,7
	CALL	__irems
	INC	HL
	INC	HL
	LD	IY,-179
	LD	BC,IX
	ADD	IY,BC
	LD	A,L
	LD	HL,(IY)
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(HL),A
;  895			disabledmove[!player] = lastmove[!player];
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_403
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-54),BC
	JR	L_404
L_403:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-54),BC
L_404:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_399
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-57),BC
	JR	L_400
L_399:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-57),BC
L_400:
	LD	HL,-182
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_lastmove
	ADD	HL,BC
	LD	IY,-185
	LD	BC,IX
	ADD	IY,BC
	PUSH	BC
	LD	BC,-521	; spill
	CALL	__istix
	LD	BC,-551	; spill
	CALL	__istix
	LD	BC,-521	; unspill
	CALL	__ildix
	POP	BC
	LD	HL,(IY)
	LD	BC,_disabledmove
	ADD	HL,BC
	PUSH	BC
	LD	BC,-521	; spill
	CALL	__istix
	LD	BC,-551	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-521	; unspill
	CALL	__ildix
	POP	BC
	LD	(HL),A
;  896		}
;  897		else if (data_moves[move].type == 15) {
	JR	L_588
L_431:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,15
	JR	NZ,L_429
;  898			if ((int)userlevel - (int)nonuserlevel + 30 > (rand() % 100)) {
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-108)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	DE,IY+30
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_411
;  899				takedamage(!player, 800);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_407
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-60),BC
	JR	L_408
L_407:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-60),BC
L_408:
	LD	BC,800
	PUSH	BC
	LEA	IY,IX+-128
	LD	A,(IY+-60)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  900			}
;  901			else {
	JR	L_588
L_411:
;  902				text_Display("It Missed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__242
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  903			}
;  904		}
;  905		else if (data_moves[move].type == 18) {
	JR	L_588
L_429:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,18
	JR	NZ,L_427
;  906			if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_413
;  907				originalpokemon[player] = currentSave.party[currentplayer];
	LD	DE,IX
	LD	HL,_currentSave+10
	LD	BC,-465
	CALL	__istix
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,-462
	LD	IY,-465
	ADD	IY,DE
	LD	DE,(IY)
	ADD	HL,DE
	CALL	__istix
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,-462
	LD	DE,_originalpokemon
	ADD	HL,DE
	LD	DE,HL
	CALL	__ildix
	LD	BC,34
	LDIR	
;  908				currentSave.party[currentplayer] = enemyparty[currentenemy];
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	LD	BC,-462
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-548	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__ildix
	LD	DE,HL
	LD	BC,-548	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,34
	LDIR	
;  909			}
;  910			else {
	JR	L_588
L_413:
;  911				originalpokemon[player] = enemyparty[currentenemy];
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-488	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-488	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	A,(IX+6)
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	BC,-536	; spill
	CALL	__istix
	POP	HL
	POP	BC
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-539	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_originalpokemon
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-542	; spill
	CALL	__istix
	POP	HL
	LD	BC,-539	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-542	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-533	; spill
	CALL	__istix
	POP	HL
	LD	BC,-536	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	HL,DE
	PUSH	BC
	LD	BC,-533	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	BC,34
	LDIR	
;  912				enemyparty[currentenemy] = currentSave.party[currentplayer];
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,34
	LD	DE,_currentSave+10
	ADD	HL,DE
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-545	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-488	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-545	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LDIR	
;  913			}
;  914		}
;  915		else if (data_moves[move].type == 20) {
	JR	L_588
L_427:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,20
	JR	NZ,L_425
;  916			takedamage(!player, bidedamage[player] * 2);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_415
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-63),BC
	JR	L_416
L_415:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-63),BC
L_416:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_bidedamage
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	ADD	HL,HL
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-63)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  917			attackturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_attackturns
	ADD	HL,DE
	LD	(HL),0
;  918		}
;  919		else if (data_moves[move].type == 21) {
	JR	L_588
L_425:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,21
	JR	NZ,L_423
;  920			if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_419
;  921				data_pokemon[currentSave.party[currentplayer].id].element1 = data_pokemon[enemyparty[currentenemy].id].element1;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	DE,_currentSave+10
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	IY,BC
	LD	A,(IY+16)
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+16),A
;  922			}
;  923			else {
	JR	L_420
L_419:
;  924				data_pokemon[enemyparty[currentenemy].id].element1 = data_pokemon[currentSave.party[currentplayer].id].element1;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	IY,BC
	LD	A,(IY+16)
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+16),A
;  925			}
L_420:
;  926			converted[player] = true;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_converted
	ADD	HL,BC
	LD	(HL),1
;  927		}
;  928		else if (data_moves[move].type == 22) {
	JR	L_588
L_423:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,22
	JR	NZ,L_588
;  929			takedamage(player, stats[player].health / 4);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-99),HL
	LD	IY,(IY+-99)
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,4
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  930			substitutehealth[player] += stats[player].health / 4;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_substitutehealth
	ADD	HL,BC
	LD	BC,-468
	CALL	__istix
	LEA	IY,IX+-128
	LD	IY,(IY+-99)
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,4
	CALL	__idivs
	LD	DE,HL
	LD	BC,-468
	CALL	__ildix
	LD	IY,HL
	LD	BC,-468
	CALL	__ildix
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-527	; spill
	CALL	__istix
	POP	HL
	PUSH	HL
	LD	BC,-530	; spill
	CALL	__istix
	POP	HL
	LD	BC,-527	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,DE
	LD	BC,(IY)
	ADD.SIS	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-530	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,IY
	LD	(HL),C
	INC	HL
;  931			sprintf(str, "%s created a substitute to take damage", username);
	LD	IY,IX
	LD	DE,-376
	ADD	IY,DE
	LD	DE,IY
	PUSH	DE
	LD	DE,L__250
	PUSH	DE
	LD	DE,_str
	PUSH	DE
	LD	(HL),B
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  932			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  933		}
L_588:
;  934		/* Apply Stat or Status Effects */
;  935		if (data_moves[move].type == 4 || (rand() % 100) < data_moves[move].statuschance) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-116),HL
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-68),HL
	LEA	IY,IX+-128
	LD	(IY+-105),HL
	LD	IY,(IX+-68)
	LD	A,(IY+15)
	CP	A,4
	JR	Z,L_587
	LD	BC,(IX+-68)
	LEA	IY,IX+-128
	LD	(IY+-105),BC
	LD	BC,(IX+-68)
	LD	(IY+-111),BC
	LD	IY,(IX+-68)
	LD	A,(IY+20)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-563
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-563
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-564
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_591
L_587:
;  936			if (data_moves[move].statustype == 30) {
	LEA	IY,IX+-128
	LD	BC,(IY+-105)
	LD	(IX+-39),BC
	LD	IY,(IX+-39)
	LD	A,(IY+19)
	CP	A,30
	JR	NZ,L_457
;  937				e = rand() % 3;
	CALL	_rand
	LD	BC,3
	CALL	__irems
	LD	BC,HL
	LD	HL,_e
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  938			}
;  939			else {
	JR	L_476
L_457:
;  940				e = 3;
	LD	HL,_e
	LD	(HL),3
	INC	HL
	LD	(HL),0
;  941			}
L_476:
;  942			if (data_moves[move].statustype < 7) {
	LD	BC,(IX+-39)
	LEA	IY,IX+-128
	LD	(IY+-120),BC
	LD	BC,(IX+-39)
	LD	(IX+-80),BC
	LD	IY,(IX+-39)
	LD	A,(IY+19)
	CP	A,7
	JR	NC,L_489
;  943				if (mistturns[!player] || statmods[!player][data_moves[move].statustype] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_459
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-66),BC
	JR	L_460
L_459:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-66),BC
L_460:
	LD	HL,-194
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_mistturns
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_473
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_463
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-69),BC
	JR	L_464
L_463:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-69),BC
L_464:
	LD	BC,(IX+-39)
	LEA	IY,IX+-128
	LD	(IY+-120),BC
	LD	BC,(IX+-39)
	LD	(IX+-80),BC
	LD	BC,(IY+-69)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,(IX+-39)
	LD	A,(IY+19)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_474
L_473:
;  944					if (data_moves[move].type == 4) {
	LEA	IY,IX+-128
	LD	BC,(IY+-120)
	LD	(IX+-80),BC
	LD	IY,(IX+-80)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_489
;  945						text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__260
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  946					}
;  947				}
;  948				else {
	JR	L_489
L_474:
;  949					statmods[!player][data_moves[move].statustype] --;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_469
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-72),BC
	JR	L_470
L_469:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-72),BC
L_470:
	LEA	IY,IX+-128
	LD	BC,(IY+-72)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-474
	CALL	__istix
	LD	HL,(IX+-116)
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-471
	CALL	__istix
	LD	BC,-471
	CALL	__ildix
	LD	IY,HL
	LD	B,(IY+19)
	LD	A,B
	UEXT	HL
	LD	IY,-474
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	LD	L,A
	ADD	HL,DE
	PUSH	BC
	LD	BC,-524	; spill
	CALL	__istix
	POP	BC
	LD	A,B
	UEXT	HL
	LD	IY,-474
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	LD	L,A
	ADD	HL,DE
	PUSH	BC
	LD	BC,-521	; spill
	CALL	__istix
	LD	BC,-524	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-521	; unspill
	CALL	__ildix
	POP	BC
	DEC	A
	LD	(HL),A
;  950					sprintf(str, "%s's %s fell", nonusername, text_status2[data_moves[move].statustype]);
	LD	A,B
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__262
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  951					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  952				}
;  953			}
L_489:
;  954			if (data_moves[move].statustype == 7) {
	LD	BC,(IX+-80)
	LD	(IX+-83),BC
	LEA	IY,IX+-128
	LD	(IY+-123),BC
	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,7
	JR	NZ,L_503
;  955				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_478
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-78),BC
	JR	L_479
L_478:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-78),BC
L_479:
	LEA	IY,IX+-128
	LD	BC,(IY+-78)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_487
;  956					*currentStatusPointer[!player] = 1;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_482
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-87),BC
	JR	L_483
L_482:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-87),BC
L_483:
	LEA	IY,IX+-128
	LD	BC,(IY+-87)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  957					sprintf(str, "%s was poisoned", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__267
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),1
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  958					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  959				}
;  960				else if (data_moves[move].type == 4) {
	JR	L_503
L_487:
	LD	BC,(IX+-83)
	LEA	IY,IX+-128
	LD	(IY+-123),BC
	LD	IY,(IX+-83)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_503
;  961					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__269
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  962				}
;  963			}
L_503:
;  964			if (data_moves[move].statustype == 8 || e == 0) {
	LEA	IY,IX+-128
	LD	BC,(IY+-123)
	LD	(IX+-86),BC
	LD	HL,BC
	LD	BC,-257
	CALL	__istix
	LD	IY,(IX+-86)
	LD	A,(IY+19)
	CP	A,8
	JR	Z,L_502
	LD	HL,(_e)
	CALL	__scmpzero
	JR	NZ,L_517
L_502:
;  965				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_492
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-96),BC
	JR	L_493
L_492:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-96),BC
L_493:
	LEA	IY,IX+-128
	LD	BC,(IY+-96)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_501
;  966					*currentStatusPointer[!player] = 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_496
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-102),BC
	JR	L_497
L_496:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-102),BC
L_497:
	LEA	IY,IX+-128
	LD	BC,(IY+-102)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  967					sprintf(str, "%s was burned", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__275
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),2
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  968					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  969				}
;  970				else if (data_moves[move].type == 4) {
	JR	L_517
L_501:
	LD	HL,(IX+-86)
	LD	BC,-257
	CALL	__istix
	LD	IY,(IX+-86)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_517
;  971					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__277
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  972				}
;  973			}
L_517:
;  974			if (data_moves[move].statustype == 9 || e == 1) {
	LD	BC,-257
	CALL	__ildix
	LD	(IX+-89),HL
	LD	BC,-263
	CALL	__istix
	LD	IY,(IX+-89)
	LD	A,(IY+19)
	CP	A,9
	JR	Z,L_516
	LD.LIS	BC,1
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_530
L_516:
;  975				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_506
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-108),BC
	JR	L_507
L_506:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-108),BC
L_507:
	LEA	IY,IX+-128
	LD	BC,(IY+-108)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_515
;  976					*currentStatusPointer[!player] = 3;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_510
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-114),BC
	JR	L_511
L_510:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-114),BC
L_511:
	LEA	IY,IX+-128
	LD	BC,(IY+-114)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  977					sprintf(str, "%s was paralysed", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__283
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),3
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  978					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  979				}
;  980				else if (data_moves[move].type == 4) {
	JR	L_530
L_515:
	LD	HL,(IX+-89)
	LD	BC,-263
	CALL	__istix
	LD	IY,(IX+-89)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_530
;  981					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__285
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  982				}
;  983			}
L_530:
;  984			if (data_moves[move].statustype == 10) {
	LD	BC,-263
	CALL	__ildix
	LD	(IX+-92),HL
	LD	BC,-269
	CALL	__istix
	LD	IY,(IX+-92)
	LD	A,(IY+19)
	CP	A,10
	JR	NZ,L_544
;  985				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_519
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-117),BC
	JR	L_520
L_519:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-117),BC
L_520:
	LEA	IY,IX+-128
	LD	BC,(IY+-117)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_528
;  986					*currentStatusPointer[!player] = 4;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_523
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-126),BC
	JR	L_524
L_523:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-126),BC
L_524:
	LEA	IY,IX+-128
	LD	BC,(IY+-126)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  987					sprintf(str, "%s fell asleep", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__290
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),4
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  988					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  989				}
;  990				else if (data_moves[move].type == 4) {
	JR	L_544
L_528:
	LD	HL,(IX+-92)
	LD	BC,-269
	CALL	__istix
	LD	IY,(IX+-92)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_544
;  991					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__292
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  992				}
;  993			}
L_544:
;  994			if (data_moves[move].statustype == 11 || e == 2) {
	LD	BC,-269
	CALL	__ildix
	LD	(IX+-95),HL
	LD	BC,-275
	CALL	__istix
	LD	IY,(IX+-95)
	LD	A,(IY+19)
	CP	A,11
	JR	Z,L_543
	LD.LIS	BC,2
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_550
L_543:
;  995				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_533
	LD	HL,1
	LD	BC,-260
	CALL	__istix
	JR	L_534
L_533:
	OR	A,A
	SBC	HL,HL
	LD	BC,-260
	CALL	__istix
L_534:
	CALL	__ildix
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_542
;  996					*currentStatusPointer[!player] = 5;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_537
	LD	HL,1
	LD	BC,-266
	CALL	__istix
	JR	L_538
L_537:
	OR	A,A
	SBC	HL,HL
	LD	BC,-266
	CALL	__istix
L_538:
	CALL	__ildix
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  997					sprintf(str, "%s was frozen", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__298
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),5
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  998					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  999				}
; 1000				else if (data_moves[move].type == 4) {
	JR	L_550
L_542:
	LD	HL,(IX+-95)
	LD	BC,-275
	CALL	__istix
	LD	IY,(IX+-95)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_550
; 1001					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__300
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1002				}
; 1003			}
L_550:
; 1004	
; 1005			if (data_moves[move].statustype == 12) {
	LD	BC,-275
	CALL	__ildix
	LD	(IX+-16),HL
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,12
	JR	NZ,L_556
; 1006				confusedturns[!player] = (rand() % 4) + 1;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_546
	LD	HL,1
	LD	BC,-272
	CALL	__istix
	JR	L_547
L_546:
	OR	A,A
	SBC	HL,HL
	LD	BC,-272
	CALL	__istix
L_547:
	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	IY,-272
	LD	BC,IX
	ADD	IY,BC
	LD	A,L
	LD	HL,(IY)
	LD	BC,_confusedturns
	ADD	HL,BC
; 1007				sprintf(str, "%s was confused", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__303
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	(HL),A
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1008				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1009			}
L_556:
; 1010			if (data_moves[move].statustype == 13) {
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,13
	JR	NZ,L_562
; 1011				leech[!player] = true;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_552
	LD	HL,1
	LD	BC,-278
	CALL	__istix
	JR	L_553
L_552:
	OR	A,A
	SBC	HL,HL
	LD	BC,-278
	CALL	__istix
L_553:
	LD	HL,-278
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_leech
	ADD	HL,BC
; 1012				sprintf(str, "%s was leeched", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__306
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	(HL),1
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1013				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1014			}
L_562:
; 1015			if (data_moves[move].statustype == 14) {
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,14
	JR	NZ,L_564
; 1016				trapturns[!player] = (rand() % 2) + 4;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_558
	LD	HL,1
	LD	BC,-281
	CALL	__istix
	JR	L_559
L_558:
	OR	A,A
	SBC	HL,HL
	LD	BC,-281
	CALL	__istix
L_559:
	CALL	_rand
	LD	BC,2
	CALL	__irems
	LD	IY,HL
	LEA	HL,IY+4
	LD	IY,-281
	LD	BC,IX
	ADD	IY,BC
	LD	A,L
	LD	HL,(IY)
	LD	BC,_trapturns
	ADD	HL,BC
; 1017				sprintf(str, "%s was trapped", nonusername);
	LD	IY,IX
	LD	BC,-396
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__309
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	(HL),A
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1018				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1019			}
L_564:
; 1020			if (data_moves[move].statustype == 15) {
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,15
	JR	NZ,L_566
; 1021				reflectturns[player] = 5;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(HL),5
; 1022			}
L_566:
; 1023			if (data_moves[move].statustype == 16) {
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,16
	JR	NZ,L_568
; 1024				lightscreenturns[player] = 5;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(HL),5
; 1025			}
L_568:
; 1026			if (data_moves[move].statustype == 17) {
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,17
	JR	NZ,L_575
; 1027				mistturns[player] = 5;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),5
; 1028			}
L_575:
; 1029			if (data_moves[move].statustype == 18 || data_moves[move].statustype == 38) {
	LD	HL,(IX+-16)
	LD	BC,-284
	CALL	__istix
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,18
	JR	Z,L_574
	LD	HL,(IX+-16)
	CALL	__istix
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,38
	JR	NZ,L_577
L_574:
; 1030				flinch[!player] = true;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_571
	LD	HL,1
	LD	BC,-287
	CALL	__istix
	JR	L_572
L_571:
	OR	A,A
	SBC	HL,HL
	LD	BC,-287
	CALL	__istix
L_572:
	LD	HL,-287
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_flinch
	ADD	HL,BC
	LD	(HL),1
; 1031			}
L_577:
; 1032			if (data_moves[move].statustype == 27) {
	LD	BC,-284
	CALL	__ildix
	LD	(IX+-42),HL
	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,27
	JR	NZ,L_581
; 1033				highcritratio[player] = true;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),1
; 1034			}
L_581:
; 1035			if (data_moves[move].statustype == 28) {
	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,28
	JR	NZ,L_583
; 1036				statmods[player][0]++;
	LD	BC,-353
	CALL	__ildix
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-480
	CALL	__istix
	LD	BC,-480
	CALL	__ildix
	LD	A,(HL)
	LD	BC,-480
	CALL	__ildix
	INC	A
; 1037				statmods[player][1]++;
	LD	IY,-480
	LD	BC,IX
	ADD	IY,BC
	LD	(HL),A
	LD	HL,(IY)
	INC	HL
	LD	BC,-477
	CALL	__istix
	LD	IY,-480
	LD	BC,IX
	ADD	IY,BC
	LD	BC,-477
	CALL	__ildix
	LD	IY,(IY)
	LD	A,(HL)
	INC	A
	LD	(IY+1),A
; 1038			}
L_583:
; 1039			if (data_moves[move].statustype == 29) {
	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,29
	JR	NZ,L_586
; 1040				rage[player] = true;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),1
; 1041			}
L_586:
; 1042			if (data_moves[move].statustype == 35 && player) {
	LD	BC,(IX+-42)
	LEA	IY,IX+-128
	LD	(IY+-111),BC
	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,35
	JR	NZ,L_591
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_591
; 1043				payday += currentSave.party[currentplayer].level*2;
	LD	A,(_currentplayer)
	LD	DE,(_payday)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	IY,HL
	LD	C,(IY+9)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD.SIS	HL,DE
	LD	BC,HL
	LD	HL,_payday
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1044			}
; 1045		}
L_591:
; 1046	
; 1047		
; 1048	
; 1049		if (attackturns[player] == 1 && data_moves[move].statustype == 32) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	BC,-290
	CALL	__istix
	LD	BC,-290
	CALL	__ildix
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_592
	LEA	IY,IX+-128
	LD	IY,(IY+-111)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_592
; 1050			attackturns[player] = 0;
	LD	BC,-290
	CALL	__ildix
	LD	(HL),0
; 1051			confusedturns[player] = (rand() % 4) + 1;
	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	B,L
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_confusedturns
	ADD	HL,DE
; 1052			sprintf(str, "%s became confused", username);
	LD	IY,IX
	LD	DE,-376
	ADD	IY,DE
	LD	DE,IY
	PUSH	DE
	LD	DE,L__323
	PUSH	DE
	LD	DE,_str
	PUSH	DE
	LD	(HL),B
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1053			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1054		}
; 1055	}
L_592:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _attack ***************************
;Name                         Addr/Register   Size   Type
;_payday                             STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_e                                  IMPORT      2   variable
;_substitutehealth                   STATIC      4   variable
;_converted                          STATIC      2   variable
;_originalpokemon                    STATIC     68   variable
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_i                                  IMPORT      2   variable
;_run                                STATIC      1   variable
;_wild                               STATIC      1   variable
;_text_status2                       IMPORT    112   variable
;_Wait                               IMPORT  -----   function
;_redrawcharacters                   IMPORT  -----   function
;_heal                               IMPORT  -----   function
;_highcritratio                      STATIC      2   variable
;_elements                           IMPORT    324   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_statmodvalues                      STATIC     39   variable
;_statmods                           STATIC     14   variable
;_confusedturns                      STATIC      2   variable
;_currentStatusPointer               STATIC      6   variable
;_bidedamage                         STATIC      4   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_rand                               IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_flinch                             STATIC      2   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_currentplayer                      STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;_rage                               STATIC      2   variable
;nonusername                         IX-396     20   variable
;username                            IX-376     20   variable
;temp333                             IX-356      3   variable
;G_162                               IX-353      3   variable
;G_77                                IX-350      3   variable
;temp317                             IX-347      3   variable
;temp292                             IX-344      3   variable
;G_78                                IX-341      3   variable
;G_72                                IX-338      3   variable
;temp288                             IX-335      3   variable
;temp284                             IX-332      3   variable
;temp280                             IX-329      3   variable
;temp276                             IX-326      3   variable
;temp272                             IX-323      3   variable
;temp268                             IX-320      3   variable
;temp251                             IX-317      3   variable
;temp247                             IX-314      3   variable
;G_53                                IX-311      3   variable
;temp200                             IX-308      3   variable
;temp193                             IX-305      3   variable
;G_105                               IX-302      3   variable
;G_113                               IX-299      3   variable
;G_50                                IX-296      3   variable
;G_49                                IX-293      3   variable
;G_166                               IX-290      3   variable
;temp573                             IX-287      3   variable
;G_160                               IX-284      3   variable
;temp560                             IX-281      3   variable
;temp554                             IX-278      3   variable
;G_152                               IX-275      3   variable
;temp548                             IX-272      3   variable
;G_150                               IX-269      3   variable
;temp539                             IX-266      3   variable
;G_148                               IX-263      3   variable
;temp535                             IX-260      3   variable
;G_146                               IX-257      3   variable
;temp525                             IX-254      3   variable
;G_144                               IX-251      3   variable
;G_140                               IX-248      3   variable
;temp521                             IX-245      3   variable
;temp512                             IX-242      3   variable
;G_165                               IX-239      3   variable
;temp508                             IX-236      3   variable
;G_137                               IX-233      3   variable
;temp498                             IX-230      3   variable
;G_135                               IX-227      3   variable
;temp494                             IX-224      3   variable
;G_116                               IX-221      3   variable
;G_107                               IX-218      3   variable
;temp484                             IX-215      3   variable
;G_111                               IX-212      3   variable
;G_100                               IX-209      3   variable
;temp480                             IX-206      3   variable
;G_99                                IX-203      3   variable
;temp471                             IX-200      3   variable
;temp465                             IX-197      3   variable
;temp461                             IX-194      3   variable
;temp417                             IX-191      3   variable
;temp409                             IX-188      3   variable
;temp401                             IX-185      3   variable
;temp405                             IX-182      3   variable
;temp397                             IX-179      3   variable
;temp382                             IX-176      3   variable
;G_84                                IX-173      3   variable
;temp378                             IX-170      3   variable
;temp374                             IX-167      3   variable
;G_80                                IX-164      3   variable
;temp370                             IX-161      3   variable
;temp363                             IX-158      3   variable
;temp356                             IX-155      3   variable
;temp352                             IX-152      3   variable
;temp348                             IX-149      3   variable
;temp337                             IX-146      3   variable
;G_96                                IX-143      3   variable
;G_97                                IX-140      3   variable
;G_98                                IX-137      3   variable
;G_81                                IX-134      3   variable
;G_92                                IX-131      3   variable
;G_90                                IX-128      3   variable
;G_82                                IX-125      3   variable
;G_62                                IX-122      3   variable
;G_126                               IX-119      3   variable
;G_141                               IX-116      3   variable
;G_52                                IX-113      3   variable
;userelement2                        IX-110      1   variable
;userelement1                        IX-109      1   variable
;nonuserlevel                        IX-108      1   variable
;G_59                                IX-107      3   variable
;G_94                                IX-104      3   variable
;G_73                                IX-101      3   variable
;G_106                                IX-98      3   variable
;G_151                                IX-95      3   variable
;G_149                                IX-92      3   variable
;G_147                                IX-89      3   variable
;G_145                                IX-86      3   variable
;G_143                                IX-83      3   variable
;G_142                                IX-80      3   variable
;G_93                                 IX-77      3   variable
;G_91                                 IX-74      3   variable
;G_74                                 IX-71      3   variable
;G_136                                IX-68      3   variable
;nonuserelement2                      IX-65      1   variable
;nonuserelement1                      IX-64      1   variable
;G_63                                 IX-63      3   variable
;G_110                                IX-60      3   variable
;G_127                                IX-57      3   variable
;G_70                                 IX-54      3   variable
;G_58                                 IX-51      3   variable
;G_115                                IX-48      3   variable
;G_109                                IX-45      3   variable
;G_161                                IX-42      3   variable
;G_138                                IX-39      3   variable
;hitcount                             IX-36      1   variable
;G_88                                 IX-35      3   variable
;G_67                                 IX-32      3   variable
;G_86                                 IX-29      3   variable
;G_66                                 IX-26      3   variable
;userlevel                            IX-23      1   variable
;G_95                                 IX-22      3   variable
;G_101                                IX-19      3   variable
;G_153                                IX-16      3   variable
;G_51                                 IX-13      3   variable
;G_85                                 IX-10      3   variable
;damage                                IX-7      4   variable
;G_83                                  IX-3      3   variable
;move                                  IX+9      1   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 576 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__120:
	DB	"%s flinched"
	DB	0
L__122:
	DB	"%s used %s"
	DB	0
L__124:
	DB	"%s used %s"
	DB	0
L__129:
	DB	"It Failed"
	DB	0
L__137:
	DB	"%s is building up power"
	DB	0
L__145:
	DB	"%s used Bide"
	DB	0
L__146:
	DB	"%s is storing energy"
	DB	0
L__149:
	DB	"%s is paralysed"
	DB	0
L__152:
	DB	"%s woke up"
	DB	0
L__153:
	DB	"%s is asleep"
	DB	0
L__156:
	DB	"%s thawed out"
	DB	0
L__157:
	DB	"%s is frozen"
	DB	0
L__160:
	DB	"%s hurt itself in its confusion"
	DB	0
L__161:
	DB	"%s used %s"
	DB	0
L__166:
	DB	"It Missed"
	DB	0
L__170:
	DB	"It Failed"
	DB	0
L__192:
	DB	"Critical Hit"
	DB	0
L__202:
	DB	"Not Very Effective"
	DB	0
L__204:
	DB	"Super Effective"
	DB	0
L__210:
	DB	"%s's %s rose"
	DB	0
L__216:
	DB	"%s's %s fell"
	DB	0
L__222:
	DB	"It Failed"
	DB	0
L__242:
	DB	"It Missed"
	DB	0
L__250:
	DB	"%s created a substitute to take damage"
	DB	0
L__260:
	DB	"It Failed"
	DB	0
L__262:
	DB	"%s's %s fell"
	DB	0
L__267:
	DB	"%s was poisoned"
	DB	0
L__269:
	DB	"It failed"
	DB	0
L__275:
	DB	"%s was burned"
	DB	0
L__277:
	DB	"It failed"
	DB	0
L__283:
	DB	"%s was paralysed"
	DB	0
L__285:
	DB	"It failed"
	DB	0
L__290:
	DB	"%s fell asleep"
	DB	0
L__292:
	DB	"It failed"
	DB	0
L__298:
	DB	"%s was frozen"
	DB	0
L__300:
	DB	"It failed"
	DB	0
L__303:
	DB	"%s was confused"
	DB	0
L__306:
	DB	"%s was leeched"
	DB	0
L__309:
	DB	"%s was trapped"
	DB	0
L__323:
	DB	"%s became confused"
	DB	0
	SEGMENT CODE
; 1056	
; 1057	void applystatus(bool player) {
_applystatus:
	LD	HL,-41
	CALL	__frameset
; 1058		char name[20];
; 1059		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_594
; 1060			strcpy(name, playername);
	LD	BC,_playername
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
; 1061		}
; 1062		else {
	JR	L_596
L_594:
; 1063			strcpy(name, enemyname);
	LD	BC,_enemyname
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
; 1064		}
L_596:
; 1065		/* Poison */
; 1066		if (*currentStatusPointer[player] == 1) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_598
; 1067			sprintf(str, "%s was hurt by its poison", name);
	PEA	IX+-32
	LD	BC,L__327
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1068			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1069			takedamage(player, stats[player].health / 12);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1070		}
L_598:
; 1071		/* Burn */
; 1072		if (*currentStatusPointer[player] == 2) {
	LD	HL,(IX+-9)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_604
; 1073			sprintf(str, "%s was hurt by its burn", name);
	PEA	IX+-32
	LD	BC,L__329
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1074			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1075			takedamage(player, stats[player].health / 12);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1076		}
L_604:
; 1077		/* Leech */
; 1078		if (leech[player]) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_607
; 1079			sprintf(str, "%s's health was stolen by leech seed", name);
	PEA	IX+-32
	LD	BC,L__331
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1080			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1081			takedamage(player, stats[player].health / 8);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1082			heal(!player, stats[player].health / 8);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_600
	LD	BC,1
	LD	(IX+-12),BC
	JR	L_601
L_600:
	LD	BC,0
	LD	(IX+-12),BC
L_601:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
; 1083		}
L_607:
; 1084		/* Trap */
; 1085		if (trapturns[player] > 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_609
; 1086			sprintf(str, "%s's was hurt by the trap", name);
	PEA	IX+-32
	LD	BC,L__334
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1087			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1088			takedamage(player, stats[player].health / 16);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1089			trapturns[player]--;
	LD	HL,(IX+-3)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-3)
	LD	(HL),A
; 1090		}
L_609:
; 1091	
; 1092		reflectturns[player]--;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-41)
	LD	(HL),A
; 1093		lightscreenturns[player]--;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-38)
	LD	(HL),A
; 1094		mistturns[player]--;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(IX+-35),HL
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-35)
	LD	(HL),A
; 1095		if (disabledturns[player] == 1) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_614
; 1096			disabledmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1097		}
L_614:
; 1098		disabledturns[player]--;
	LD	HL,(IX+-6)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-6)
	LD	(HL),A
; 1099	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _applystatus ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_heal                               IMPORT  -----   function
;_leech                              STATIC      2   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentStatusPointer               STATIC      6   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;name                                 IX-32     20   variable
;temp602                              IX-12      3   variable
;G_167                                 IX-9      3   variable
;G_169                                 IX-6      3   variable
;G_168                                 IX-3      3   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 50 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__327:
	DB	"%s was hurt by its poison"
	DB	0
L__329:
	DB	"%s was hurt by its burn"
	DB	0
L__331:
	DB	"%s's health was stolen by leech seed"
	DB	0
L__334:
	DB	"%s's was hurt by the trap"
	DB	0
	SEGMENT CODE
; 1100	/* When a new pokemon is sent out, reset everything 
; 1101	   This also decompresses the new pokemon's sprite
; 1102	 */
; 1103	void resetstatus(bool player) {
_resetstatus:
	LD	HL,-47
	CALL	__frameset
; 1104		i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1105		while (i < sizeof(statmods[player])) {
	JR	L_617
L_618:
; 1106			statmods[player][i] = 6;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_i)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),6
; 1107			i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1108		}
L_617:
	LD	BC,(_i)
	CALL	__stoiu
	OR	A,A
	LD	BC,7
	SBC	HL,BC
	JR	C,L_618
; 1109		confusedturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(HL),0
; 1110		leech[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	(HL),0
; 1111		leech[!player] = false;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_621
	LD	BC,1
	LD	(IX+-11),BC
	JR	L_622
L_621:
	LD	BC,0
	LD	(IX+-11),BC
L_622:
	LD	BC,_leech
	LD	HL,(IX+-11)
	ADD	HL,BC
	LD	(HL),0
; 1112		trapturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(HL),0
; 1113		reflectturns[!player] = 0;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_625
	LD	BC,1
	LD	(IX+-14),BC
	JR	L_626
L_625:
	LD	BC,0
	LD	(IX+-14),BC
L_626:
	LD	BC,_reflectturns
	LD	HL,(IX+-14)
	ADD	HL,BC
	LD	(HL),0
; 1114		lightscreenturns[!player] = 0;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_629
	LD	BC,1
	LD	(IX+-17),BC
	JR	L_630
L_629:
	LD	BC,0
	LD	(IX+-17),BC
L_630:
	LD	BC,_lightscreenturns
	LD	HL,(IX+-17)
	ADD	HL,BC
	LD	(HL),0
; 1115		mistturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),0
; 1116		flinch[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	(HL),0
; 1117		flinch[!player] = false;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_633
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_634
L_633:
	LD	BC,0
	LD	(IX+-8),BC
L_634:
	LD	BC,_flinch
	LD	HL,(IX+-8)
	ADD	HL,BC
	LD	(HL),0
; 1118		highcritratio[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),0
; 1119		rage[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
; 1120		disabledmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1121		disabledturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(HL),0
; 1122		lastmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	(HL),0
; 1123		attackturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(HL),0
; 1124		air[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),0
; 1125		chosenmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_chosenmove
	ADD	HL,BC
	LD	(HL),0
; 1126		transformed[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_transformed
	ADD	HL,BC
	LD	(HL),0
; 1127		converted[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_converted
	ADD	HL,BC
	LD	(HL),0
; 1128		substitutehealth[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_substitutehealth
	ADD	HL,BC
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1129	
; 1130		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_643
; 1131			uint8_t pokemonID;
; 1132			sprintf(playername, "%s", data_pokemon[currentSave.party[currentplayer].id].name);
	LD	BC,_currentSave+10
	LD	(IX+-5),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__343
	PUSH	BC
	LD	BC,_playername
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1133			stats[1] = stats_CalculateStats(currentSave.party[currentplayer]);
	LD	BC,(IX+-5)
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-29
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
; 1134	
; 1135			pokemonID = currentSave.party[currentplayer].id;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-1),A
; 1136			if (pokemonID < 80) {
	CP	A,80
	JR	NC,L_637
; 1137				zx7_Decompress(playerSprite, PKMNSD2[pokemonID]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD2
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1138			}
; 1139			else {
	JR	L_638
L_637:
; 1140				zx7_Decompress(playerSprite, PKMNSD3[pokemonID - 80]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD3
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1141			}
L_638:
; 1142			currentStatusPointer[1] = &currentSave.party[currentplayer].currentstatus;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	(IX+-44),HL	; spill
	LD	HL,_currentStatusPointer+3
	LD	(IX+-47),HL	; spill
	LD	IY,(IX+-44)
	LEA	BC,IY+15
	LD	HL,(IX+-47)	; unspill
	LD	(HL),BC
; 1143		}
; 1144		else {
	JR	L_644
L_643:
; 1145			uint8_t pokemonID;
; 1146			sprintf(enemyname, "Enemy %s", data_pokemon[enemyparty[currentenemy].id].name);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__345
	PUSH	BC
	LD	BC,_enemyname
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1147			stats[0] = stats_CalculateStats(enemyparty[currentenemy]);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-41
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	DE,_stats
	LD	BC,12
	LDIR	
	LD	SP,IY
; 1148	
; 1149			pokemonID = enemyparty[currentenemy].id;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-2),A
; 1150			
; 1151			if (pokemonID < 80) {
	CP	A,80
	JR	NC,L_640
; 1152				zx7_Decompress(enemySprite, PKMNSD0[pokemonID]);
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1153			}
; 1154			else {
	JR	L_641
L_640:
; 1155				zx7_Decompress(enemySprite, PKMNSD1[pokemonID - 80]);
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1156			}
L_641:
; 1157			currentStatusPointer[0] = &enemyparty[currentenemy].currentstatus;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+15
	LD	(_currentStatusPointer),BC
; 1158		}
; 1159	}
L_644:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _resetstatus ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD1                            IMPORT    216   variable
;_enemySprite                        STATIC      3   variable
;_PKMNSD0                            IMPORT    240   variable
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_PKMNSD3                            IMPORT    216   variable
;_playerSprite                       STATIC      3   variable
;_PKMNSD2                            IMPORT    240   variable
;_zx7_Decompress                     IMPORT  -----   function
;_stats                              STATIC     24   variable
;_stats_CalculateStats               IMPORT  -----   function
;_playername                         STATIC     20   variable
;_currentplayer                      STATIC      1   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_currentSave                        IMPORT   4142   variable
;_substitutehealth                   STATIC      4   variable
;_converted                          STATIC      2   variable
;_transformed                        STATIC      2   variable
;_chosenmove                         STATIC      2   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_disabledmove                       STATIC      2   variable
;_rage                               STATIC      2   variable
;_highcritratio                      STATIC      2   variable
;_flinch                             STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_confusedturns                      STATIC      2   variable
;_statmods                           STATIC     14   variable
;_i                                  IMPORT      2   variable
;temp631                              IX-17      3   variable
;temp627                              IX-14      3   variable
;temp623                              IX-11      3   variable
;temp635                               IX-8      3   variable
;G_170                                 IX-5      3   variable
;pokemonID                             IX-2      1   variable
;pokemonID                             IX-1      1   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 56 (bytes)
;       Spill Code: -3 (instruction)


	SEGMENT STRSECT
L__343:
	DB	"%s"
	DB	0
L__345:
	DB	"Enemy %s"
	DB	0
	SEGMENT CODE
; 1160	
; 1161	void takedamage(bool player, int amount) {
_takedamage:
	LD	HL,-30
	CALL	__frameset
; 1162		bidedamage[player] += amount;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-6),HL
	LD	BC,_bidedamage
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	HL,(HL)
	LD	BC,(IX+9)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1163		if (substitutehealth[player] > 0) {
	LD	HL,(IX+-6)
	LD	BC,_substitutehealth
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_654
; 1164			text_Display("The substitute blocked the damage", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__349
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1165			if (substitutehealth[player] <= amount) {
	LD	BC,(IX+-6)
	LD	HL,_substitutehealth
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_646
; 1166				substitutehealth[player] = 0;
	LD	HL,(IX+-18)
; 1167				text_Display("The substitute was destroyed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__351
	PUSH	BC
	LD	(HL),0
	INC	HL
	LD	(HL),0
	CALL	_text_Display
	POP	BC
	POP	BC
; 1168			}
; 1169			else {
	JR	L_655
L_646:
; 1170				substitutehealth[player] -= amount;
	LD	BC,(IX+-6)
	LD	HL,_substitutehealth
	ADD	HL,BC
	LD	(IX+-24),HL
	LD	HL,(HL)
	LD	BC,(IX+9)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,(IX+-24)
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1171			}
; 1172		}
; 1173		else {
	JR	L_655
L_654:
; 1174			if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_652
; 1175				if (currentSave.party[currentplayer].currenthealth <= amount) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_648
; 1176					currentSave.party[currentplayer].currenthealth = 0;
	LD	IY,(IX+-15)
	LD	(IY+13),0
	LD	(IY+14),0
; 1177				}
; 1178				else {
	JR	L_655
L_648:
; 1179					currentSave.party[currentplayer].currenthealth -= amount;
	LD	BC,_currentSave+10
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-27)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1180				}
; 1181			}
; 1182			else {
	JR	L_655
L_652:
; 1183				if (enemyparty[currentenemy].currenthealth <= amount) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	IY,(IX+-21)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_650
; 1184					enemyparty[currentenemy].currenthealth = 0;
	LD	IY,(IX+-21)
	LD	(IY+13),0
	LD	(IY+14),0
; 1185				}
; 1186				else {
	JR	L_655
L_650:
; 1187					enemyparty[currentenemy].currenthealth -= amount;
	LD	BC,_enemyparty
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-30),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-30)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1188				}
; 1189			}
; 1190		}
L_655:
; 1191		redrawcharacters();
	CALL	_redrawcharacters
; 1192	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _takedamage ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_currentplayer                      STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_substitutehealth                   STATIC      4   variable
;_bidedamage                         STATIC      4   variable
;G_180                                IX-21      3   variable
;G_173                                IX-18      3   variable
;G_175                                IX-15      3   variable
;G_178                                IX-12      3   variable
;G_181                                 IX-9      3   variable
;G_172                                 IX-6      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 42 (bytes)
;       Spill Code: -3 (instruction)


	SEGMENT STRSECT
L__349:
	DB	"The substitute blocked the damage"
	DB	0
L__351:
	DB	"The substitute was destroyed"
	DB	0
	SEGMENT CODE
; 1193	void heal(bool player, int amount) {
_heal:
	LD	HL,-12
	CALL	__frameset
; 1194		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_660
; 1195			currentSave.party[currentplayer].currenthealth += amount;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1196			if (currentSave.party[currentplayer].currenthealth >= stats[1].health) {
	LD	IY,_stats
	LD	BC,(IY+12)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_661
; 1197				currentSave.party[currentplayer].currenthealth = stats[1].health;
	LD	IY,_stats
	LD	BC,_currentSave+10
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(IY+12)
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1198			}
; 1199		}
; 1200		else {
	JR	L_661
L_660:
; 1201			enemyparty[currentenemy].currenthealth += amount;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-12)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1202			if (enemyparty[currentenemy].currenthealth >= stats[0].health) {
	LD	BC,(_stats)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_661
; 1203				enemyparty[currentenemy].currenthealth = stats[0].health;
	LD	HL,(IX+-6)
	LD	BC,(_stats)
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1204			}
; 1205		}
L_661:
; 1206		redrawcharacters();
	CALL	_redrawcharacters
; 1207	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _heal ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_currentSave                        IMPORT   4142   variable
;_currentplayer                      STATIC      1   variable
;G_186                                 IX-6      3   variable
;G_184                                 IX-3      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: -3 (instruction)


; 1208	
; 1209	
; 1210	
; 1211	void addxp(void) {
_addxp:
	LD	HL,-176
	CALL	__frameset
; 1212		uint16_t xpgain = (enemyparty[currentenemy].level * data_pokemon[enemyparty[currentenemy].id].xpdrop) / 7;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-47),HL
	LD	IY,(IX+-47)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+47)
	CALL	__stoiu
	LD	DE,HL
	LD	IY,(IX+-47)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,7
	CALL	__idivs
	LD	(IX+-32),L
	LD	(IX+-31),H
; 1213		currentSave.party[currentplayer].xp += xpgain;
	LD	BC,_currentSave+10
	LD	(IX+-21),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	ADD	HL,BC
	LD	(IX+-44),HL
	LD	BC,(IX+-32)
	CALL	__stoiu
	LD	IY,(IX+-44)
	LD	BC,(IY+10)
	ADD	HL,BC
	LD	(IY+10),HL
; 1214		while ((currentSave.party[currentplayer].level < 100) && (currentSave.party[currentplayer].xp >= xpPerLevel[data_pokemon[currentSave.party[currentplayer].id].xptype][currentSave.party[currentplayer].level + 1])) {
	JR	L_679
L_680:
; 1215			currentSave.party[currentplayer].level++;
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	BC,(IX+-6)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-53),HL
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-50),HL
	LD	IY,(IX+-53)
	LD	A,(IY+9)
	INC	A
	LD	IY,(IX+-50)
	LD	(IY+9),A
; 1216			sprintf(str, "%s leveled up", data_pokemon[currentSave.party[currentplayer].id].name);
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__360
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1217			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1218			for (i = 0; i < 10; i++)
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_675
L_673:
; 1219			{
; 1220				if (data_pokemon[currentSave.party[currentplayer].id].movelevels[i] == currentSave.party[currentplayer].level) {
	LD	BC,(IX+-18)
	LD	(IX+-3),BC
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-24),HL
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-59),HL
	LD	(IX+-56),HL
	LD	IY,(IX+-56)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+24
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-56)
	CP	A,(IY+9)
	JR	NZ,L_672
; 1221					sprintf(str, "%s wants to learn %s", data_pokemon[currentSave.party[currentplayer].id].name, data_moves[data_pokemon[currentSave.party[currentplayer].id].moveids[i]].name);
	LD	BC,(IX+-24)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-65),HL
	LD	(IX+-62),HL
	LD	IY,(IX+-62)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-62)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__362
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1222					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1223					sprintf(str, "Choose a move to replace with %s", data_moves[data_pokemon[currentSave.party[currentplayer].id].moveids[i]].name);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__363
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1224					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1225					switch (text_AskQuestion4(data_moves[currentSave.party[currentplayer].moves[0]].name, data_moves[currentSave.party[currentplayer].moves[1]].name, data_moves[currentSave.party[currentplayer].moves[2]].name, data_moves[currentSave.party[currentplayer].moves[3]].name, false))
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	BC,(IX+-3)
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-71),HL
	LD	IY,(IX+-71)
	LEA	BC,IY+1
	LD	(IX+-68),BC
	LD	BC,_data_moves
	LD	DE,_data_moves
	OR	A,A
	SBC	HL,HL
	PUSH	HL
	LD	IY,(IX+-68)
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-68)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,DE
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-68)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-68)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcase
L__364:
	DW	4
	DW	1
	DB	0
	DW24	L_666	

	DW24	L_667	

	DW24	L_668	

	DW24	L_669	

	DW24	L_672	

; 1226					{
; 1227					case 1:
L_666:
; 1228						currentSave.party[currentplayer].moves[0] = data_pokemon[currentSave.party[currentplayer].id].moveids[i];
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	BC,(IX+-3)
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-77),HL
	LD	(IX+-74),HL
	LD	IY,(IX+-74)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-74)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+1),A
; 1229						break;
	JR	L_672
; 1230					case 2:
L_667:
; 1231						currentSave.party[currentplayer].moves[1] = data_pokemon[currentSave.party[currentplayer].id].moveids[i];
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	BC,(IX+-3)
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-83),HL
	LD	(IX+-80),HL
	LD	IY,(IX+-80)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-80)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+2),A
; 1232						break;
	JR	L_672
; 1233					case 3:
L_668:
; 1234						currentSave.party[currentplayer].moves[2] = data_pokemon[currentSave.party[currentplayer].id].moveids[i];
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	BC,(IX+-3)
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-89),HL
	LD	(IX+-86),HL
	LD	IY,(IX+-86)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-86)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+3),A
; 1235						break;
	JR	L_672
; 1236					case 4:
L_669:
; 1237						currentSave.party[currentplayer].moves[3] = data_pokemon[currentSave.party[currentplayer].id].moveids[i];
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	BC,(IX+-3)
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-95),HL
	LD	(IX+-92),HL
	LD	IY,(IX+-92)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-92)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+4),A
; 1238						break;
; 1239					}
; 1240				}
L_672:
; 1241				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1242			}
L_675:
	LD.LIS	BC,10
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_673
; 1243			if (currentSave.party[currentplayer].level == data_pokemon[currentSave.party[currentplayer].id].evolvelevel) {
	LD	BC,(IX+-15)
	LD	(IX+-12),BC
	LD	(IX+-21),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-27),HL
	LD	BC,(IX+-12)
	ADD	HL,BC
	LD	(IX+-101),HL
	LD	(IX+-98),HL
	LD	IY,(IX+-98)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+44)
	LD	IY,(IX+-98)
	CP	A,(IY+9)
	JR	NZ,L_679
; 1244				sprintf(str, "%s is evolving", data_pokemon[currentSave.party[currentplayer].id].name);
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-27)
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__367
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1245				text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1246				if (text_AskQuestion2("Continue", "Stop", false) == 1) {
	LD	BC,0
	PUSH	BC
	LD	BC,L__368
	PUSH	BC
	LD	BC,L__369
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_679
; 1247					currentSave.party[currentplayer].id = data_pokemon[currentSave.party[currentplayer].id].evolveid;
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,(IX+-12)
	ADD	HL,BC
	LD	(IX+-107),HL
	LD	(IX+-104),HL
	LD	IY,(IX+-104)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+45)
	LD	IY,(IX+-104)
	LD	(IY+0),A
; 1248				}
; 1249			}
; 1250		}
L_679:
	LD	BC,(IX+-21)
	LD	(IX+-6),BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,(IX+-6)
	LD	(IX+-30),BC
	LD	BC,(IX+-9)
	LD	(IX+-35),BC
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_681
	LD	BC,(IX+-6)
	LD	(IX+-41),BC
	LD	BC,(IX+-6)
	LD	(IX+-30),BC
	LD	BC,(IX+-9)
	LD	(IX+-38),BC
	LD	BC,(IX+-9)
	LD	(IX+-35),BC
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-113),HL
	LD	(IX+-110),HL
	LD	IY,(IX+-110)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-110)
	LD	A,(IY+9)
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	INC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	OR	A,A
	LD	BC,(HL)
	LD	HL,(IY+10)
	SBC	HL,BC
	JP	P,L_680
L_681:
; 1251		currentSave.party[currentplayer].healthEV += data_pokemon[enemyparty[currentenemy].id].basehealth;
	LD	BC,(IX+-30)
	LEA	IY,IX+-128
	LD	(IY+-12),BC
	LD	HL,-140
	LD	BC,IX
	ADD	HL,BC
	LD	DE,(IX+-35)
	LD	BC,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-9),HL
	LD	BC,(IY+-9)
	LD	(IY+-6),BC
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IY+-3),HL
	LD	IY,(IY+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	C,(IY+18)
	LEA	IY,IX+-128
	LD	HL,(IY+-6)
	PUSH	IY
	LD	(IY+-15),HL
	POP	IY
	LD	HL,(IY+-6)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-18),HL	; unspill
	LD	HL,(IY+-15)
	POP	IY
	LD	IY,HL
	LD	B,0
	LD	HL,BC
	LD	BC,(IY+22)
	ADD.SIS	HL,BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-18)
	POP	IY
	LD	IY,HL
	LD	(IY+22),C
; 1252		currentSave.party[currentplayer].attackEV += data_pokemon[enemyparty[currentenemy].id].baseattack;
	LD	HL,-140
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-21),DE
	LD	(IY+-24),IX	; unspill
	LD	DE,(IY+-21)
	LD	(IY+-21),DE
	LD	DE,(IY+-24)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-21)
	POP	IY
	LD	(IY+23),B
	LD	HL,(HL)
	LD	BC,DE
	ADD	HL,BC
	LD	(IX+-128),HL
	LEA	IY,IX+-128
	LD	IY,(IY+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-125),HL
	LEA	IY,IX+-128
	LD	HL,(IY+-6)
	LD	IY,(IX+-125)
	LD	C,(IY+19)
	LD	IY,HL
	LD	HL,(IY+24)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	IY,(IX+-128)
	LD	(IY+24),C
; 1253		currentSave.party[currentplayer].defenceEV += data_pokemon[enemyparty[currentenemy].id].basedefence;
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-27),DE
	LD	(IY+-30),IX	; unspill
	LD	DE,(IY+-27)
	POP	IY
	LD	HL,-140
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-27),DE
	LD	DE,(IY+-30)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-27)
	POP	IY
	LD	(IY+25),B
	LD	HL,(HL)
	LD	BC,DE
	ADD	HL,BC
	LD	(IX+-122),HL
	LD	IY,(IX+-125)
	LD	C,(IY+20)
	LD	IY,(IX+-128)
	LD	HL,(IY+26)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	IY,(IX+-122)
	LD	(IY+26),C
; 1254		currentSave.party[currentplayer].specialattackEV += data_pokemon[enemyparty[currentenemy].id].basespecialattack;
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-33),DE
	LD	(IY+-36),IX	; unspill
	LD	DE,(IY+-33)
	POP	IY
	LD	HL,-140
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-33),DE
	LD	DE,(IY+-36)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-33)
	POP	IY
	LD	(IY+27),B
	LD	HL,(HL)
	LD	BC,DE
	ADD	HL,BC
	LD	(IX+-119),HL
	LD	IY,(IX+-125)
	LD	C,(IY+21)
	LD	IY,(IX+-122)
	LD	HL,(IY+28)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	IY,(IX+-119)
	LD	(IY+28),C
; 1255		currentSave.party[currentplayer].specialdefenceEV += data_pokemon[enemyparty[currentenemy].id].basespecialdefence;
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-39),DE
	LD	(IY+-42),IX	; unspill
	LD	DE,(IY+-39)
	POP	IY
	LD	HL,-140
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-39),DE
	LD	DE,(IY+-42)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-39)
	POP	IY
	LD	(IY+29),B
	LD	HL,(HL)
	LD	BC,DE
	ADD	HL,BC
	LD	(IX+-116),HL
	LD	IY,(IX+-125)
	LD	C,(IY+22)
	LD	IY,(IX+-119)
	LD	HL,(IY+30)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	IY,(IX+-116)
	LD	(IY+30),C
; 1256		currentSave.party[currentplayer].speedEV += data_pokemon[enemyparty[currentenemy].id].basespeed;
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-45),DE
	LD	(IY+-48),IX	; unspill
	LD	DE,(IY+-45)
	POP	IY
	LD	HL,-140
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-45),DE
	LD	DE,(IY+-48)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-45)
	POP	IY
	LD	(IY+31),B
	LD	IY,(IX+-125)
	LD	HL,(HL)
	LD	BC,DE
	ADD	HL,BC
	LD	C,(IY+23)
	LD	IY,(IX+-116)
	LD	DE,HL
	LD	HL,(IY+32)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	IY,DE
	LD	(IY+32),C
	LD	(IY+33),B
; 1257	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _addxp ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_text_AskQuestion2                  IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_i                                  IMPORT      2   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;G_187                                IX-41      3   variable
;G_188                                IX-38      3   variable
;G_206                                IX-35      3   variable
;xpgain                               IX-32      2   variable
;G_205                                IX-30      3   variable
;G_200                                IX-27      3   variable
;G_191                                IX-24      3   variable
;G_202                                IX-21      3   variable
;G_189                                IX-18      3   variable
;G_198                                IX-15      3   variable
;G_199                                IX-12      3   variable
;G_204                                 IX-9      3   variable
;G_203                                 IX-6      3   variable
;G_190                                 IX-3      3   variable


; Stack Frame Size: 182 (bytes)
;       Spill Code: -21 (instruction)


	SEGMENT STRSECT
L__360:
	DB	"%s leveled up"
	DB	0
L__362:
	DB	"%s wants to learn %s"
	DB	0
L__363:
	DB	"Choose a move to replace with %s"
	DB	0
L__367:
	DB	"%s is evolving"
	DB	0
L__368:
	DB	"Stop"
	DB	0
L__369:
	DB	"Continue"
	DB	0
	SEGMENT CODE
; 1258	/* ball is 1-4 */
; 1259	bool capture(uint8_t ball) {
_capture:
	LD	HL,-20
	CALL	__frameset
; 1260		uint8_t n1;
; 1261		uint8_t n2;
; 1262		uint32_t f;
; 1263		bool captured = false;
	LD	(IX+-6),0
; 1264		uint8_t slot = 0;
; 1265		/* Check if pokemon is captured*/
; 1266		if (!wild) {
	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_708
; 1267			text_Display("You cannot catch trainer\npokemon.", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__375
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1268			return false;
	XOR	A,A
	JR	L_722
; 1269		}
L_708:
; 1270		if (ball == 4) {
	LD	A,(IX+6)
	CP	A,4
	JR	NZ,L_707
; 1271			captured = true;
	LD	(IX+-6),1
; 1272		}
; 1273		else {
	JR	L_720
L_707:
; 1274			if (ball = 1) {
	LD	(IX+6),1
; 1275				n1 = rand() % 255;
	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	(IX+-7),L
; 1276			}
; 1277			if (ball = 2) {
; 1278				n1 = rand() % 200;
	CALL	_rand
	LD	BC,200
	CALL	__irems
	LD	(IX+-7),L
; 1279			}
; 1280			if (ball = 3) {
; 1281				n1 = rand() % 150;
	CALL	_rand
	LD	BC,150
	CALL	__irems
	LD	(IX+-7),L
; 1282			}
; 1283			n2 = n1;
	LD	A,(IX+-7)
	LD	(IX+-8),A
; 1284			if (*currentStatusPointer[false] == 4 || *currentStatusPointer[false] == 5) {
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_693
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_699
L_693:
; 1285				if (n1 < 25) {
	LD	A,(IX+-7)
	CP	A,25
	JR	NC,L_692
; 1286					captured = true;
	LD	(IX+-6),1
; 1287				}
; 1288				else {
	JR	L_699
L_692:
; 1289					n2 -= 25;
	LD	A,(IX+-7)
	SUB	A,25
	LD	(IX+-8),A
; 1290				}
; 1291			}
L_699:
; 1292			if (*currentStatusPointer[false] == 1 || *currentStatusPointer[false] == 2 || *currentStatusPointer[false] == 3) {
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	Z,L_698
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	Z,L_698
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_705
L_698:
; 1293				if (n1 < 12) {
	LD	A,(IX+-7)
	CP	A,12
	JR	NC,L_697
; 1294					captured = true;
	LD	(IX+-6),1
; 1295				}
; 1296				else {
	JR	L_705
L_697:
; 1297					n2 -= 12;
	LD	A,(IX+-8)
	SUB	A,12
	LD	(IX+-8),A
; 1298				}
; 1299			}
L_705:
; 1300			if (n2 <= data_pokemon[enemyparty[currentenemy].id].catchrate) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	IY,(IX+-11)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+50)
	CP	A,(IX+-8)
	JR	C,L_720
; 1301				f = stats[false].health;
	LD	BC,(_stats)
	CALL	__stoiu
	LD	(IX+-5),HL
	XOR	A,A
	LD	(IX+-2),A
; 1302				f *= 255;
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,255
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1303				f *= 4;
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1304				f /= enemyparty[currentenemy].currenthealth;
	LD	IY,(IX+-11)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1305				if (ball == 2) {
; 1306					f /= 8;
; 1307				}
; 1308				else {
; 1309					f /= 12;
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,12
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1310				}
; 1311				if (f >= (rand() % 255)) {
	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	BC,HL
	CALL	__itol
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	CALL	__lcmpu
	JR	C,L_720
; 1312					captured = true;
	LD	(IX+-6),1
; 1313				}
; 1314			}
; 1315		}
L_720:
; 1316		/* Find open slot if pokemon is captured */
; 1317		if (captured) {
	LD	A,(IX+-6)
	OR	A,A
	JR	Z,L_719
; 1318			sprintf(str, "%s was caught.", data_pokemon[enemyparty[currentenemy].id].name);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__387
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1319			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1320			for (slot = 0; slot < 36; slot++) {
	LD	(IX+-1),0
	JR	L_715
L_713:
; 1321				if (currentSave.party[slot].id == 0) {
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-14),HL
	LD	IY,(IX+-14)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_712
; 1322					currentSave.party[slot] = enemyparty[currentenemy];
	LD	A,(_currentenemy)
	LD	DE,(IX+-14)
	LD	BC,34
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-17),BC	; spill
	LD	BC,_enemyparty
	LD	(IX+-20),BC	; spill
	LD	BC,(IX+-17)	; unspill
	LD	(IX+-17),BC	; spill
	LD	BC,(IX+-20)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-17)	; unspill
	LDIR	
; 1323					slot = 40;
	LD	(IX+-1),40
; 1324				}
L_712:
; 1325				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	(IX+-1)
; 1326			}
L_715:
	LD	A,(IX+-1)
	CP	A,36
	JR	C,L_713
; 1327			if (slot == 36) {
	LD	A,(IX+-1)
	CP	A,36
	JR	NZ,L_721
; 1328				text_Display("No open slots for pokemon.", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__391
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1329			}
; 1330		}
; 1331		else {
	JR	L_721
L_719:
; 1332			sprintf(str, "%s broke free.", data_pokemon[enemyparty[currentenemy].id].name);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__392
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1333			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1334		}
L_721:
; 1335		return captured;
	LD	A,(IX+-6)
; 1336	}
L_722:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _capture ***************************
;Name                         Addr/Register   Size   Type
;_i                                  IMPORT      2   variable
;_currentSave                        IMPORT   4142   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_stats                              STATIC     24   variable
;_data_pokemon                       IMPORT  unknown variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_rand                               IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;G_209                                IX-14      3   variable
;G_208                                IX-11      3   variable
;n2                                    IX-8      1   variable
;n1                                    IX-7      1   variable
;captured                              IX-6      1   variable
;f                                     IX-5      4   variable
;slot                                  IX-1      1   variable
;ball                                  IX+6      1   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: -21 (instruction)


	SEGMENT STRSECT
L__375:
	DB	"You cannot catch trainer"
	DB	10
	DB	"pokemon."
	DB	0
L__387:
	DB	"%s was caught."
	DB	0
L__391:
	DB	"No open slots for pokemon."
	DB	0
L__392:
	DB	"%s broke free."
	DB	0
	XREF _PKMNSD6_init:ROM
	XREF _PKMNSD5_init:ROM
	XREF _PKMNSD5:ROM
	XREF _PKMNSD3_init:ROM
	XREF _PKMNSD3:ROM
	XREF _PKMNSD2_init:ROM
	XREF _PKMNSD2:ROM
	XREF _PKMNSD1_init:ROM
	XREF _PKMNSD1:ROM
	XREF _PKMNSD0_init:ROM
	XREF _PKMNSD0:ROM
	XREF _itemNames:ROM
	XREF _items_UseItem:ROM
	XREF _stats_NewCharacter:ROM
	XREF _stats_CalculateStats:ROM
	XREF _currentSave:ROM
	XREF _text_status2:ROM
	XREF _textBoxType:ROM
	XREF _text_DrawTextBox:ROM
	XREF _text_AskQuestion4:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _statusIcons:ROM
	XREF _colors:ROM
	XREF _e:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _FreeIcons:ROM
	XREF _MallocIcons:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _typeIcons:ROM
	XREF _menu_Items:ROM
	XREF _menu_PokemonMenu:ROM
	XREF _map_WinFight:ROM
	XREF _map_LoseFight:ROM
	XREF _xpPerLevel:ROM
	XREF _elements:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _strcpy:ROM
	XREF _sprintf:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __imulu:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __smulu:ROM
	XREF __irems:ROM
	XREF __lshru:ROM
	XREF __fmul:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __bldix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _capture
	XDEF _addxp
	XDEF _heal
	XDEF _takedamage
	XDEF _resetstatus
	XDEF _applystatus
	XDEF _attack
	XDEF _battle_End
	XDEF _CalculateXpPercent
	XDEF _redrawcharacters
	XDEF _enemyturn
	XDEF _selectMove
	XDEF _playerturn
	XDEF _battle_SpawnTrainer
	XDEF _battle_SpawnWild
	XDEF _battle_Loop
	XDEF _SetupBattleGfx
	XDEF _battle_Setup
	XDEF _battle_Initialize
	XDEF _statuscolors
	XDEF _battleMenuCurrent
	XDEF _battleMenuState2
	XDEF _battleMenuState1
	XDEF _run
	XDEF _payday
	XDEF _air
	XDEF _attackturns
	XDEF _lastmove
	XDEF _disabledturns
	XDEF _disabledmove
	XDEF _substitutehealth
	XDEF _bidedamage
	XDEF _originalpokemon
	XDEF _converted
	XDEF _transformed
	XDEF _rage
	XDEF _highcritratio
	XDEF _flinch
	XDEF _mistturns
	XDEF _lightscreenturns
	XDEF _reflectturns
	XDEF _trapturns
	XDEF _leech
	XDEF _confusedturns
	XDEF _statmods
	XDEF _currentStatusPointer
	XDEF _stats
	XDEF _wild
	XDEF _chosenmove
	XDEF _attackturn
	XDEF _enemyparty
	XDEF _statusSprites
	XDEF _hpBarSprite
	XDEF _backgroundSprite
	XDEF _enemySprite
	XDEF _playerSprite
	XDEF _enemyname
	XDEF _playername
	XDEF _currentenemy
	XDEF _currentplayer
	XDEF _clearcharacter
	XDEF _statmodvalues
	END
