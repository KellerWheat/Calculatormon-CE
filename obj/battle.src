; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\BATTLE.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME1"
.TYPE 104
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME7"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME8",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME9"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME10"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME10",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME10"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
.BEGREC "NONAME11",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME11"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME15"
.BEGREC "pokemonData",34
.DEFINE "id"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "moves"
.VALUE 1
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "pp"
.VALUE 5
.CLASS 8
.DIM 4
.TYPE 108
.ENDEF
.DEFINE "level"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "xp"
.VALUE 10
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "currenthealth"
.VALUE 13
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "currentstatus"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "healthIV"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "attackIV"
.VALUE 17
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "defenceIV"
.VALUE 18
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "specialattackIV"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "specialdefenceIV"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "speedIV"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "healthEV"
.VALUE 22
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attackEV"
.VALUE 24
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "defenceEV"
.VALUE 26
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialattackEV"
.VALUE 28
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialdefenceEV"
.VALUE 30
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "speedEV"
.VALUE 32
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "pokemonData"
.BEGREC "pokemonType",51
.DEFINE "name"
.VALUE 0
.CLASS 8
.DIM 16
.TYPE 98
.ENDEF
.DEFINE "element1"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "element2"
.VALUE 17
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basehealth"
.VALUE 18
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "baseattack"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basedefence"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basespecialattack"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basespecialdefence"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "basespeed"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "movelevels"
.VALUE 24
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.DEFINE "moveids"
.VALUE 34
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.DEFINE "evolvelevel"
.VALUE 44
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "evolveid"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "evolvesfrom"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "xpdrop"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "xptype"
.VALUE 49
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "catchrate"
.VALUE 50
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "pokemonType"
.BEGREC "pokemonStats",12
.DEFINE "health"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attack"
.VALUE 2
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "defence"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialattack"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "specialdefence"
.VALUE 8
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "speed"
.VALUE 10
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "pokemonStats"
.BEGREC "move",21
.DEFINE "name"
.VALUE 0
.CLASS 8
.DIM 14
.TYPE 98
.ENDEF
.DEFINE "element"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "power"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "accuracy"
.VALUE 17
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "uses"
.VALUE 18
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "statustype"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "statuschance"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "move"
.BEGREC "zoneData",640
.DEFINE "spawnids"
.VALUE 0
.CLASS 8
.DIM 5
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "spawnminlevels"
.VALUE 80
.CLASS 8
.DIM 5
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "spawnmaxlevels"
.VALUE 160
.CLASS 8
.DIM 5
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "exitzone"
.VALUE 240
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "exitx"
.VALUE 256
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "exity"
.VALUE 272
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doorzones"
.VALUE 288
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doorx"
.VALUE 304
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doory"
.VALUE 320
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doornpc1"
.VALUE 336
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "doornpc2"
.VALUE 352
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainerspawnids"
.VALUE 368
.CLASS 8
.DIM 6
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "trainerspawnlevels"
.VALUE 464
.CLASS 8
.DIM 6
.DIM 16
.TYPE 876
.ENDEF
.DEFINE "trainerx"
.VALUE 560
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainery"
.VALUE 576
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainerdir"
.VALUE 592
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "data_trainerText"
.VALUE 608
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "trainerreward"
.VALUE 624
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.ENDREC "zoneData"
	SEGMENT TEXT
_statmodvalues:
	DW	25
	DB	0
	DW	29
	DB	0
	DW	33
	DB	0
	DW	40
	DB	0
	DW	50
	DB	0
	DW	67
	DB	0
	DW	100
	DB	0
	DW	150
	DB	0
	DW	200
	DB	0
	DW	250
	DB	0
	DW	300
	DB	0
	DW	350
	DB	0
	DW	400
	DB	0
.DEFINE "statmodvalues"
.ALIAS "_statmodvalues"
.CLASS 84
.VALUE _statmodvalues
.DIM 13
.TYPE 100
.ENDEF
_clearcharacter:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
.DEFINE "clearcharacter"
.ALIAS "_clearcharacter"
.CLASS 84
.VALUE _clearcharacter
.TAG "pokemonData"
.TYPE 8
.ENDEF
	SEGMENT BSS
_currentplayer:
	DS	1
.DEFINE "currentplayer"
.ALIAS "_currentplayer"
.CLASS 83
.VALUE _currentplayer
.TYPE 12
.ENDEF
_currentenemy:
	DS	1
.DEFINE "currentenemy"
.ALIAS "_currentenemy"
.CLASS 83
.VALUE _currentenemy
.TYPE 12
.ENDEF
_playername:
	DS	20
.DEFINE "playername"
.ALIAS "_playername"
.CLASS 83
.VALUE _playername
.DIM 20
.TYPE 98
.ENDEF
_enemyname:
	DS	20
.DEFINE "enemyname"
.ALIAS "_enemyname"
.CLASS 83
.VALUE _enemyname
.DIM 20
.TYPE 98
.ENDEF
_playerSprite:
	DS	3
.DEFINE "playerSprite"
.ALIAS "_playerSprite"
.CLASS 83
.VALUE _playerSprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_enemySprite:
	DS	3
.DEFINE "enemySprite"
.ALIAS "_enemySprite"
.CLASS 83
.VALUE _enemySprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_backgroundSprite:
	DS	3
.DEFINE "backgroundSprite"
.ALIAS "_backgroundSprite"
.CLASS 83
.VALUE _backgroundSprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_hpBarSprite:
	DS	3
.DEFINE "hpBarSprite"
.ALIAS "_hpBarSprite"
.CLASS 83
.VALUE _hpBarSprite
.TAG "NONAME11"
.TYPE 40
.ENDEF
_statusSprites:
	DS	15
.DEFINE "statusSprites"
.ALIAS "_statusSprites"
.CLASS 83
.VALUE _statusSprites
.DIM 5
.TAG "NONAME11"
.TYPE 360
.ENDEF
_enemyparty:
	DS	204
.DEFINE "enemyparty"
.ALIAS "_enemyparty"
.CLASS 83
.VALUE _enemyparty
.DIM 6
.TAG "pokemonData"
.TYPE 104
.ENDEF
	SEGMENT DATA
_attackturn:
	DB	0
.DEFINE "attackturn"
.ALIAS "_attackturn"
.CLASS 69
.VALUE _attackturn
.TYPE 12
.ENDEF
	SEGMENT BSS
_chosenmove:
	DS	2
.DEFINE "chosenmove"
.ALIAS "_chosenmove"
.CLASS 83
.VALUE _chosenmove
.DIM 2
.TYPE 108
.ENDEF
_wild:
	DS	1
.DEFINE "wild"
.ALIAS "_wild"
.CLASS 83
.VALUE _wild
.TYPE 12
.ENDEF
_stats:
	DS	24
.DEFINE "stats"
.ALIAS "_stats"
.CLASS 83
.VALUE _stats
.DIM 2
.TAG "pokemonStats"
.TYPE 104
.ENDEF
_currentStatusPointer:
	DS	6
.DEFINE "currentStatusPointer"
.ALIAS "_currentStatusPointer"
.CLASS 83
.VALUE _currentStatusPointer
.DIM 2
.TYPE 364
.ENDEF
_statmods:
	DS	14
.DEFINE "statmods"
.ALIAS "_statmods"
.CLASS 83
.VALUE _statmods
.DIM 2
.DIM 7
.TYPE 876
.ENDEF
_confusedturns:
	DS	2
.DEFINE "confusedturns"
.ALIAS "_confusedturns"
.CLASS 83
.VALUE _confusedturns
.DIM 2
.TYPE 108
.ENDEF
_leech:
	DS	2
.DEFINE "leech"
.ALIAS "_leech"
.CLASS 83
.VALUE _leech
.DIM 2
.TYPE 108
.ENDEF
_trapturns:
	DS	2
.DEFINE "trapturns"
.ALIAS "_trapturns"
.CLASS 83
.VALUE _trapturns
.DIM 2
.TYPE 108
.ENDEF
_reflectturns:
	DS	2
.DEFINE "reflectturns"
.ALIAS "_reflectturns"
.CLASS 83
.VALUE _reflectturns
.DIM 2
.TYPE 108
.ENDEF
_lightscreenturns:
	DS	2
.DEFINE "lightscreenturns"
.ALIAS "_lightscreenturns"
.CLASS 83
.VALUE _lightscreenturns
.DIM 2
.TYPE 108
.ENDEF
_mistturns:
	DS	2
.DEFINE "mistturns"
.ALIAS "_mistturns"
.CLASS 83
.VALUE _mistturns
.DIM 2
.TYPE 108
.ENDEF
_flinch:
	DS	2
.DEFINE "flinch"
.ALIAS "_flinch"
.CLASS 83
.VALUE _flinch
.DIM 2
.TYPE 108
.ENDEF
_highcritratio:
	DS	2
.DEFINE "highcritratio"
.ALIAS "_highcritratio"
.CLASS 83
.VALUE _highcritratio
.DIM 2
.TYPE 108
.ENDEF
_rage:
	DS	2
.DEFINE "rage"
.ALIAS "_rage"
.CLASS 83
.VALUE _rage
.DIM 2
.TYPE 108
.ENDEF
_transformed:
	DS	2
.DEFINE "transformed"
.ALIAS "_transformed"
.CLASS 83
.VALUE _transformed
.DIM 2
.TYPE 108
.ENDEF
_converted:
	DS	2
.DEFINE "converted"
.ALIAS "_converted"
.CLASS 83
.VALUE _converted
.DIM 2
.TYPE 108
.ENDEF
_originalpokemon:
	DS	68
.DEFINE "originalpokemon"
.ALIAS "_originalpokemon"
.CLASS 83
.VALUE _originalpokemon
.DIM 2
.TAG "pokemonData"
.TYPE 104
.ENDEF
_bidedamage:
	DS	4
.DEFINE "bidedamage"
.ALIAS "_bidedamage"
.CLASS 83
.VALUE _bidedamage
.DIM 2
.TYPE 109
.ENDEF
_substitutehealth:
	DS	4
.DEFINE "substitutehealth"
.ALIAS "_substitutehealth"
.CLASS 83
.VALUE _substitutehealth
.DIM 2
.TYPE 109
.ENDEF
_disabledmove:
	DS	2
.DEFINE "disabledmove"
.ALIAS "_disabledmove"
.CLASS 83
.VALUE _disabledmove
.DIM 2
.TYPE 108
.ENDEF
_disabledturns:
	DS	2
.DEFINE "disabledturns"
.ALIAS "_disabledturns"
.CLASS 83
.VALUE _disabledturns
.DIM 2
.TYPE 108
.ENDEF
_lastmove:
	DS	2
.DEFINE "lastmove"
.ALIAS "_lastmove"
.CLASS 83
.VALUE _lastmove
.DIM 2
.TYPE 108
.ENDEF
_attackturns:
	DS	2
.DEFINE "attackturns"
.ALIAS "_attackturns"
.CLASS 83
.VALUE _attackturns
.DIM 2
.TYPE 108
.ENDEF
_air:
	DS	2
.DEFINE "air"
.ALIAS "_air"
.CLASS 83
.VALUE _air
.DIM 2
.TYPE 108
.ENDEF
_payday:
	DS	2*1
.DEFINE "payday"
.ALIAS "_payday"
.CLASS 83
.VALUE _payday
.TYPE 13
.ENDEF
_run:
	DS	1
.DEFINE "run"
.ALIAS "_run"
.CLASS 83
.VALUE _run
.TYPE 12
.ENDEF
	SEGMENT DATA
_battleMenuState1:
	DB	0
.DEFINE "battleMenuState1"
.ALIAS "_battleMenuState1"
.CLASS 69
.VALUE _battleMenuState1
.TYPE 12
.ENDEF
_battleMenuState2:
	DB	0
.DEFINE "battleMenuState2"
.ALIAS "_battleMenuState2"
.CLASS 69
.VALUE _battleMenuState2
.TYPE 12
.ENDEF
_battleMenuCurrent:
	DB	1
.DEFINE "battleMenuCurrent"
.ALIAS "_battleMenuCurrent"
.CLASS 69
.VALUE _battleMenuCurrent
.TYPE 12
.ENDEF
	SEGMENT TEXT
_statuscolors:
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
.DEFINE "statuscolors"
.ALIAS "_statuscolors"
.CLASS 84
.VALUE _statuscolors
.DIM 5
.TYPE 108
.ENDEF
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <fileioc.h>
;   12	#include <debug.h>
;   13	#include <compression.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "text.h"
;   21	#include "savegame.h"
;   22	#include "stats.h"
;   23	#include "gfx/battle_gfx.h"
;   24	#include "items.h"
;   25	
;   26	#include "gfx/PKMNSD0.h"
;   27	#include "gfx/PKMNSD1.h"
;   28	#include "gfx/PKMNSD2.h"
;   29	#include "gfx/PKMNSD3.h"
;   30	#include "gfx/PKMNSD5.h"
;   31	#include "gfx/PKMNSD6.h"
;   32	
;   33	void SetupBattleGfx(void);
;   34	
;   35	bool playerturn(void);
;   36	bool enemyturn(void);
;   37	int selectMove(void);
;   38	void redrawcharacters(void);
;   39	void attack(bool player, uint8_t move);
;   40	
;   41	uint8_t CalculateXpPercent(void);
;   42	void applystatus(bool player);
;   43	void resetstatus(bool player);
;   44	void takedamage(bool player, int amount);
;   45	void heal(bool player, int amount);
;   46	bool capture(uint8_t ball);
;   47	void addxp(void);
;   48	
;   49	
;   50	const int statmodvalues[] = { 25,29,33,40,50,67,100,150,200,250,300,350,400 };
;   51	const struct pokemonData clearcharacter = { 0 };
;   52	
;   53	uint8_t currentplayer;
;   54	uint8_t currentenemy;
;   55	
;   56	char playername[20];
;   57	char enemyname[20];
;   58	
;   59	gfx_sprite_t *playerSprite;
;   60	gfx_sprite_t *enemySprite;
;   61	
;   62	gfx_sprite_t *backgroundSprite;
;   63	gfx_sprite_t *hpBarSprite;
;   64	gfx_sprite_t *statusSprites[5];
;   65	
;   66	struct pokemonData enemyparty[6];
;   67	uint8_t attackturn = 0;
;   68	uint8_t chosenmove[2];
;   69	bool wild;
;   70	
;   71	struct pokemonStats stats[2];
;   72	uint8_t *currentStatusPointer[2];
;   73	uint8_t statmods[2][7];
;   74	
;   75	uint8_t confusedturns[2];
;   76	bool leech[2];
;   77	uint8_t trapturns[2];
;   78	uint8_t reflectturns[2];
;   79	uint8_t lightscreenturns[2];
;   80	uint8_t mistturns[2];
;   81	bool flinch[2];
;   82	bool highcritratio[2];
;   83	bool rage[2];
;   84	bool transformed[2];
;   85	bool converted[2];
;   86	struct pokemonData originalpokemon[2];
;   87	uint16_t bidedamage[2];
;   88	uint16_t substitutehealth[2];
;   89	
;   90	uint8_t disabledmove[2];
;   91	uint8_t disabledturns[2];
;   92	uint8_t lastmove[2];
;   93	uint8_t attackturns[2];
;   94	bool air[2];
;   95	uint16_t payday;
;   96	bool run;
;   97	
;   98	uint8_t battleMenuState1 = 0;
;   99	uint8_t battleMenuState2 = 0;
;  100	uint8_t battleMenuCurrent = 1;
;  101	
;  102	const uint8_t statuscolors[5] = { 2,3,4,5,6 };
	SEGMENT CODE
;  103	
;  104	void battle_Initialize(void) {
_battle_Initialize:
.DEFINE "_battle_Initialize"

.VALUE _battle_Initialize

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_Initialize",104,"_battle_Initialize"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  105		PKMNSD0_init();
.LINE 105

	CALL	_PKMNSD0_init
;  106		PKMNSD1_init();
.LINE 106

	CALL	_PKMNSD1_init
;  107		PKMNSD2_init();
.LINE 107

	CALL	_PKMNSD2_init
;  108		PKMNSD3_init();
.LINE 108

	CALL	_PKMNSD3_init
;  109		PKMNSD5_init();
.LINE 109

	CALL	_PKMNSD5_init
;  110		PKMNSD6_init();
.LINE 110

	CALL	_PKMNSD6_init
;  111	}
.LINE 111

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD6_init                       IMPORT  -----   function
;_PKMNSD5_init                       IMPORT  -----   function
;_PKMNSD3_init                       IMPORT  -----   function
;_PKMNSD2_init                       IMPORT  -----   function
;_PKMNSD1_init                       IMPORT  -----   function
;_PKMNSD0_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "battle_Initialize",111,"_battle_Initialize"
;  112	void battle_Setup(void) {
_battle_Setup:
.DEFINE "_battle_Setup"

.VALUE _battle_Setup

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_Setup",112,"_battle_Setup"

.LINE 112

.DEFINE "pokemonIndex"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-30
	LD	SP,HL
;  113		int pokemonIndex;
;  114		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {//This makes sure the pokemon sent out has not fainted
.LINE 114

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
;  115			if (party[pokemonIndex].currenthealth != 0 && party[pokemonIndex].id != 0) {
.LINE 115

	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_5
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_5
;  116				currentplayer = pokemonIndex;
.LINE 116

	LD	A,(IX+-3)
	LD	(_currentplayer),A
;  117				pokemonIndex = 6;
.LINE 117

	LD	BC,6
	LD	(IX+-3),BC
;  118			}
;  119		}
L_5:
.LINE 119

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_4
;  120		SetupBattleGfx();
.LINE 120

	CALL	_SetupBattleGfx
;  121	
;  122		battleMenuState1 = 0;
.LINE 122

	XOR	A,A
	LD	(_battleMenuState1),A
;  123		battleMenuState2 = 0;
.LINE 123

	XOR	A,A
	LD	(_battleMenuState2),A
;  124		battleMenuCurrent = 1;
.LINE 124

	LD	A,1
	LD	(_battleMenuCurrent),A
;  125	
;  126		
;  127		stats[0] = stats_CalculateStats(enemyparty[0]);
.LINE 127

	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LD	HL,_enemyparty
	LD	BC,34
	LDIR	
	PEA	IX+-18
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats
	LD	BC,12
	LDIR	
;  128		stats[1] = stats_CalculateStats(party[0]);
.LINE 128

	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LD	HL,_party
	LD	BC,34
	LDIR	
	PEA	IX+-30
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
;  129		currentenemy = 0;
.LINE 129

	XOR	A,A
	LD	(_currentenemy),A
;  130		attackturn = 0;
.LINE 130

	XOR	A,A
	LD	(_attackturn),A
;  131	
;  132		resetstatus(true);
.LINE 132

	LD	BC,1
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  133		resetstatus(false);
.LINE 133

	LD	BC,0
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  134		payday = 0;
.LINE 134

	LD	HL,_payday
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  135	
;  136		run = false;
.LINE 136

	XOR	A,A
	LD	(_run),A
;  137	}
.LINE 137

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Setup ***************************
;Name                         Addr/Register   Size   Type
;_run                                STATIC      1   variable
;_payday                             STATIC      2   variable
;_resetstatus                        IMPORT  -----   function
;_attackturn                         STATIC      1   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_enemyparty                         STATIC    204   variable
;_stats_CalculateStats               IMPORT  -----   function
;_battleMenuCurrent                  STATIC      1   variable
;_battleMenuState2                   STATIC      1   variable
;_battleMenuState1                   STATIC      1   variable
;_SetupBattleGfx                     IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;G_0                                   IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "battle_Setup",137,"_battle_Setup"
;  138	void SetupBattleGfx(void) {
_SetupBattleGfx:
.DEFINE "_SetupBattleGfx"

.VALUE _SetupBattleGfx

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "SetupBattleGfx",138,"_SetupBattleGfx"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;  139		zx7_Decompress(textBoxSprite1, battletextbox1_compressed);
.LINE 139

	LD	HL,_PKMNSD5+6
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  140		zx7_Decompress(textBoxSprite2, battletextbox2_compressed);
.LINE 140

	LD	HL,_PKMNSD5+9
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  141		backgroundSprite = gfx_MallocSprite(160, 88);
.LINE 141

	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_backgroundSprite),HL
;  142		zx7_Decompress(backgroundSprite, background_compressed);
.LINE 142

	LD	HL,_PKMNSD5+108
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  143		hpBarSprite = gfx_MallocSprite(98, 10);
.LINE 143

	LD	BC,_malloc
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,98
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_hpBarSprite),HL
;  144		zx7_Decompress(hpBarSprite, hpbar_compressed);
.LINE 144

	LD	HL,_PKMNSD5+111
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  145		playerSprite = gfx_MallocSprite(56, 56);
.LINE 145

	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_playerSprite),HL
;  146		enemySprite = gfx_MallocSprite(56, 56);
.LINE 146

	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_enemySprite),HL
;  147	
;  148		if (party[currentplayer].id < 80) {
.LINE 148

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	CP	A,80
	JR	NC,L_10
;  149			zx7_Decompress(playerSprite, PKMNSD2[party[currentplayer].id]);
.LINE 149

	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD2
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  150		}
;  151		else {
.LINE 151

	JR	L_13
L_10:
;  152			zx7_Decompress(playerSprite, PKMNSD3[party[currentplayer].id - 80]);
.LINE 152

	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD3
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  153		}
L_13:
.LINE 153

;  154		if (enemyparty[currentenemy].id < 80) {
.LINE 154

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	CP	A,80
	JR	NC,L_12
;  155			zx7_Decompress(enemySprite, PKMNSD0[enemyparty[currentenemy].id]);
.LINE 155

	LD	IY,(IX+-6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  156		}
;  157		else {
.LINE 157

	JR	L_14
L_12:
;  158			zx7_Decompress(enemySprite, PKMNSD1[enemyparty[currentenemy].id - 80]);
.LINE 158

	LD	IY,(IX+-6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  159		}
L_14:
.LINE 159

;  160	
;  161	
;  162		MallocIcons();
.LINE 162

	CALL	_MallocIcons
;  163	
;  164		SetColors(1);
.LINE 164

	LD	BC,1
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  165		gfx_FillScreen(colors[0]);
.LINE 165

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  166		gfx_SetPalette(battle_gfx_pal, sizeof_battle_gfx_pal, 0);
.LINE 166

	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	HL,_PKMNSD5+114
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  167		gfx_SwapDraw();
.LINE 167

	CALL	_gfx_SwapDraw
;  168		gfx_SetTextScale(1, 1);
.LINE 168

	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  169		gfx_SetTextFGColor(colors[1]);
.LINE 169

	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  170		gfx_SetColor(colors[0]);
.LINE 170

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  171	}
.LINE 171

	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetupBattleGfx ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_MallocIcons                        IMPORT  -----   function
;_PKMNSD1                            IMPORT    216   variable
;_PKMNSD0                            IMPORT    240   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_PKMNSD3                            IMPORT    216   variable
;_PKMNSD2                            IMPORT    240   variable
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_hpBarSprite                        STATIC      3   variable
;_backgroundSprite                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    117   variable
;_zx7_Decompress                     IMPORT  -----   function
;G_6                                   IX-6      3   variable
;G_2                                   IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "SetupBattleGfx",171,"_SetupBattleGfx"
;  172	int battle_Loop(void) {
_battle_Loop:
.DEFINE "_battle_Loop"

.VALUE _battle_Loop

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "battle_Loop",172,"_battle_Loop"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-11
	LD	SP,HL
;  173		/* Battle */
;  174		redrawcharacters();
.LINE 174

	CALL	_redrawcharacters
;  175		/* Switch to a new poketmon or lose battle if health is 0 */
;  176		if (party[currentplayer].currenthealth == 0) {
.LINE 176

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_40
;  177			sprintf(str, "%s fainted", playername);
.LINE 177

	LD	BC,_playername
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  178			text_Display(str, false);
.LINE 178

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  179			attackturn = 0;
.LINE 179

	XOR	A,A
	LD	(_attackturn),A
;  180	
;  181			if (transformed[true]) {
.LINE 181

	LD	HL,_transformed
	INC	HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_18
;  182				party[currentplayer] = originalpokemon[true];
.LINE 182

	LD	BC,_originalpokemon+34
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	DE,_party
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,34
	LDIR	
;  183			}
L_18:
.LINE 183

;  184			if (converted[true]) {
.LINE 184

	LD	HL,_converted
	INC	HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_19
;  185				data_pokemon[party[currentplayer].id].element1 = 1;
.LINE 185

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+16),1
;  186			}
L_19:
.LINE 186

;  187	
;  188			i = 0;
.LINE 188

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  189			while (i < 6) {
.LINE 189

	JR	L_24
L_25:
;  190				if (party[i].currenthealth != 0 && party[i].id != 0) {
.LINE 190

	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_23
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_23
;  191					currentplayer = i;
.LINE 191

	LD	A,(_i)
	LD	(_currentplayer),A
;  192					resetstatus(true);
.LINE 192

	LD	BC,1
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  193					return 1;
.LINE 193

	LD	HL,1
	JR	L_62
;  194				}
L_23:
.LINE 194

;  195				i++;
.LINE 195

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  196			}
L_24:
.LINE 196

	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_25
;  197	
;  198			map_LoseFight();
.LINE 198

	CALL	_map_LoseFight
;  199			return 0;
.LINE 199

	OR	A,A
	SBC	HL,HL
	JR	L_62
;  200		}
L_40:
.LINE 200

;  201		if (enemyparty[currentenemy].currenthealth == 0) {
.LINE 201

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_60
;  202			sprintf(str, "%s fainted", enemyname);
.LINE 202

	LD	BC,_enemyname
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  203			text_Display(str, false);
.LINE 203

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  204			addxp();
.LINE 204

	CALL	_addxp
;  205			attackturn = 0;
.LINE 205

	XOR	A,A
	LD	(_attackturn),A
;  206	
;  207			if (transformed[false]) {
.LINE 207

	LD	A,(_transformed)
	OR	A,A
	JR	Z,L_30
;  208				enemyparty[currentenemy] = originalpokemon[false];
.LINE 208

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_originalpokemon
	LD	BC,34
	LDIR	
;  209			}
L_30:
.LINE 209

;  210			if (converted[false]) {
.LINE 210

	LD	A,(_converted)
	OR	A,A
	JR	Z,L_31
;  211				data_pokemon[enemyparty[currentenemy].id].element1 = 1;
.LINE 211

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+16),1
;  212			}
L_31:
.LINE 212

;  213	
;  214			i = 0;
.LINE 214

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  215			while (i < 6) {
.LINE 215

	JR	L_36
L_37:
;  216				if (enemyparty[i].currenthealth != 0 && enemyparty[i].id != 0) {
.LINE 216

	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_35
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_35
;  217					currentenemy = i;
.LINE 217

	LD	A,(_i)
	LD	(_currentenemy),A
;  218					resetstatus(false);
.LINE 218

	LD	BC,0
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  219					return 1;
.LINE 219

	LD	HL,1
	JR	L_62
;  220				}
L_35:
.LINE 220

;  221				i++;
.LINE 221

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  222			}
L_36:
.LINE 222

	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_37
;  223	
;  224			playerMoney += payday;
.LINE 224

	LD	BC,(_payday)
	CALL	__stoiu
	LD	BC,HL
	LD	H,0
	LD	(IX+-11),H	; spill
	LD	HL,(_playerMoney)
	LD	A,(_playerMoney+3)
	LD	E,A
	LD	(IX+-10),H	; spill
	LD	H,(IX+-11)	; unspill
	LD	A,H
	LD	H,(IX+-10)	; unspill
	CALL	__ladd
	LD	(_playerMoney),HL
	LD	A,E
	LD	(_playerMoney+3),A
;  225			map_WinFight(wild, enemyparty[0].level * 40);
.LINE 225

	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
;  226			return 0;
.LINE 226

	OR	A,A
	SBC	HL,HL
	JR	L_62
;  227		}
L_60:
.LINE 227

;  228		/* If 0 determine who attacks first, if 1 or 2 let other character attack, if 3 do end of turn stuff */
;  229		if (attackturn == 0) {
.LINE 229

	LD	A,(_attackturn)
	OR	A,A
	JR	NZ,L_59
;  230			while (!playerturn()) {};
L_42:
.LINE 230

	CALL	_playerturn
	OR	A,A
	JR	Z,L_42
;  231			while (!enemyturn()) {};
L_45:
.LINE 231

	CALL	_enemyturn
	OR	A,A
	JR	Z,L_45
;  232			if (run) {
.LINE 232

	LD	A,(_run)
	OR	A,A
	JR	Z,L_52
;  233				return 0;
.LINE 233

	OR	A,A
	SBC	HL,HL
	JR	L_62
;  234			}
L_52:
.LINE 234

;  235			/* Paralysis gets a speed reduction */
;  236			if ((((stats[0].speed / (1+(((*currentStatusPointer[0]) == 4) * 3))) > (stats[1].speed / (1 + (((*currentStatusPointer[1]) == 4) * 3)))) || data_moves[chosenmove[false]].statustype == 31) && data_moves[chosenmove[true]].statustype != 31) {
.LINE 236

	LD	IY,_stats
	LD	BC,(IY+22)
	CALL	__stoiu
	LD	DE,HL
	LD	HL,_currentStatusPointer+3
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__27
	LD	B,1
	JR	L__28
L__27:
	LD	B,0
L__28:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	LD	BC,(_stats+10)
	CALL	__stoiu
	LD	(IX+-9),HL
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__30
	LD	B,1
	JR	L__31
L__30:
	LD	B,0
L__31:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,(IX+-9)
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	M,L_49
	LD	A,(_chosenmove)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,31
	JR	NZ,L_51
L_49:
	LD	HL,_chosenmove
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,31
	JR	Z,L_51
;  237				attack(false, chosenmove[false]);
.LINE 237

	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  238				attackturn = 1;
.LINE 238

	LD	A,1
	LD	(_attackturn),A
;  239			}
;  240			else {
.LINE 240

	JR	L_61
L_51:
;  241				attack(true, chosenmove[true]);
.LINE 241

	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  242				
;  243				attackturn = 2;
.LINE 243

	LD	A,2
	LD	(_attackturn),A
;  244			}
;  245		}
;  246		else if(attackturn < 3) {
.LINE 246

	JR	L_61
L_59:
	LD	A,(_attackturn)
	CP	A,3
	JR	NC,L_57
;  247			if (attackturn == 1) {
.LINE 247

	LD	A,(_attackturn)
	CP	A,1
	JR	NZ,L_55
;  248				attack(true, chosenmove[true]);
.LINE 248

	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  249				attackturn = 3;
.LINE 249

	LD	A,3
	LD	(_attackturn),A
;  250			}
L_55:
.LINE 250

;  251			if (attackturn == 2) {
.LINE 251

	LD	A,(_attackturn)
	CP	A,2
	JR	NZ,L_61
;  252				attack(false, chosenmove[false]);
.LINE 252

	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  253				attackturn = 3;
.LINE 253

	LD	A,3
	LD	(_attackturn),A
;  254			}
;  255		}
;  256		else {
.LINE 256

	JR	L_61
L_57:
;  257			/* After both turns */
;  258			applystatus(true);
.LINE 258

	LD	BC,1
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  259			applystatus(false);
.LINE 259

	LD	BC,0
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  260			flinch[true] = false;
.LINE 260

	LD	HL,_flinch
	INC	HL
	LD	(HL),0
;  261			flinch[false] = false;
.LINE 261

	XOR	A,A
	LD	(_flinch),A
;  262			attackturn = 0;
.LINE 262

	XOR	A,A
	LD	(_attackturn),A
;  263			return 1;
.LINE 263

	LD	HL,1
	JR	L_62
;  264		}
L_61:
.LINE 264

;  265		
;  266	
;  267		return 1;
.LINE 267

	LD	HL,1
;  268	}
L_62:
.LINE 268

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Loop ***************************
;Name                         Addr/Register   Size   Type
;_flinch                             STATIC      2   variable
;_applystatus                        IMPORT  -----   function
;_attack                             IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_data_moves                         IMPORT  unknown variable
;_currentStatusPointer               STATIC      6   variable
;_stats                              STATIC     24   variable
;_run                                STATIC      1   variable
;_enemyturn                          IMPORT  -----   function
;_playerturn                         IMPORT  -----   function
;_wild                               STATIC      1   variable
;_map_WinFight                       IMPORT  -----   function
;_payday                             STATIC      2   variable
;_playerMoney                        IMPORT      4   variable
;_addxp                              IMPORT  -----   function
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_map_LoseFight                      IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_i                                  IMPORT      2   variable
;_data_pokemon                       IMPORT  unknown variable
;_converted                          STATIC      2   variable
;_originalpokemon                    STATIC     68   variable
;_transformed                        STATIC      2   variable
;_attackturn                         STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playername                         STATIC     20   variable
;_sprintf                            IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_redrawcharacters                   IMPORT  -----   function
;G_12                                  IX-6      3   variable
;G_10                                  IX-3      3   variable


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "battle_Loop",268,"_battle_Loop"
	SEGMENT STRSECT
L__9:
	DB	"%s fainted"
	DB	0
L__16:
	DB	"%s fainted"
	DB	0
	SEGMENT CODE
;  269	
;  270	
;  271	void battle_SpawnWild(uint8_t id, uint8_t minlevel, uint8_t maxlevel) {
_battle_SpawnWild:
.DEFINE "_battle_SpawnWild"

.VALUE _battle_SpawnWild

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_SpawnWild",271,"_battle_SpawnWild"

.LINE 271

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "minlevel"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "maxlevel"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "partyIndex"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-43
	LD	SP,HL
;  272		int partyIndex;
;  273		for(partyIndex = 0; partyIndex < 6; partyIndex++){
.LINE 273

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_66
L_64:
;  274			enemyparty[partyIndex] = clearcharacter;
.LINE 274

	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_clearcharacter
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  275		}
L_66:
.LINE 275

	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_64
;  276		enemyparty[0] = stats_NewCharacter(id,(rand() % (maxlevel-minlevel+1))+minlevel);
.LINE 276

	CALL	_rand
	LD	DE,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	(IX+-40),BC	; spill
	LD	(IX+-43),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-43)	; unspill
	SBC	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__irems
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_enemyparty
	LD	BC,34
	LDIR	
;  277		wild = true;
.LINE 277

	LD	A,1
	LD	(_wild),A
;  278	}
.LINE 278

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnWild ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats_NewCharacter                 IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_clearcharacter                     STATIC     34   variable
;partyIndex                            IX-3      3   variable
;maxlevel                             IX+12      1   parameter
;minlevel                              IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 58 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "battle_SpawnWild",278,"_battle_SpawnWild"
;  279	void battle_SpawnTrainer(uint8_t ids[6][16], uint8_t levels[6][16], uint8_t trainernum) {
_battle_SpawnTrainer:
.DEFINE "_battle_SpawnTrainer"

.VALUE _battle_SpawnTrainer

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_SpawnTrainer",279,"_battle_SpawnTrainer"

.LINE 279

.DEFINE "ids"

.CLASS 65

.VALUE 6

.DIM 16

.TYPE 812

.ENDEF

.DEFINE "levels"

.CLASS 65

.VALUE 9

.DIM 16

.TYPE 812

.ENDEF

.DEFINE "trainernum"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "partyIndex"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-37
	LD	SP,HL
;  280		int partyIndex;
;  281		for(partyIndex = 0; partyIndex < 6; partyIndex++){
.LINE 281

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_72
L_70:
;  282			enemyparty[partyIndex] = stats_NewCharacter(ids[partyIndex][trainernum],levels[partyIndex][trainernum]);
.LINE 282

	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	BC,DE
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,DE
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  283		}
L_72:
.LINE 283

	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_70
;  284		wild = false;
.LINE 284

	XOR	A,A
	LD	(_wild),A
;  285	}
.LINE 285

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnTrainer ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_stats_NewCharacter                 IMPORT  -----   function
;partyIndex                            IX-3      3   variable
;trainernum                           IX+12      1   parameter
;levels                                IX+9      3   parameter
;ids                                   IX+6      3   parameter


; Stack Frame Size: 52 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "battle_SpawnTrainer",285,"_battle_SpawnTrainer"
;  286	
;  287	bool playerturn() {
_playerturn:
.DEFINE "_playerturn"

.VALUE _playerturn

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "playerturn",287,"_playerturn"

.LINE 287

.DEFINE "chosenItem"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "selectedMove"

.CLASS 65

.VALUE -12

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-30
	LD	SP,HL
;  288		if (attackturns[true] > 0) {
.LINE 288

	LD	HL,_attackturns
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_76
;  289			chosenmove[true] = lastmove[true];
.LINE 289

	LD	IY,_lastmove
	LD	HL,_chosenmove
	INC	HL
	LD	A,(IY+1)
	LD	(HL),A
;  290			return true;
.LINE 290

	LD	A,1
	JR	L_111
;  291		}
L_76:
.LINE 291

;  292		i = 0;
.LINE 292

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  293		/* Select Whether to fight, run, ect */
;  294		if (battleMenuState1 == 0) {
.LINE 294

	LD	A,(_battleMenuState1)
	OR	A,A
	JR	NZ,L_109
;  295			switch (text_AskQuestion4("Fight","Item","Switch","Run", true))
.LINE 295

	LD	BC,1
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	LD	BC,L__46
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcaseD
	JP	(HL)
L__49:
	DW	5
	DW	0
	DB	0
	DW24	L_77	

	DW24	L_78	

	DW24	L_79	

	DW24	L_80	

	DW24	L_85	

	DW24	L_109	

;  296			{
;  297			case 0:
L_77:
.LINE 297

;  298				return false;
.LINE 298

	XOR	A,A
	JR	L_111
;  299			case 1:
L_78:
.LINE 299

;  300				battleMenuState1 = 1;
.LINE 300

	LD	A,1
	LD	(_battleMenuState1),A
;  301				return false;
.LINE 301

	XOR	A,A
	JR	L_111
;  302			case 2:
L_79:
.LINE 302

;  303				battleMenuState1 = 2;
.LINE 303

	LD	A,2
	LD	(_battleMenuState1),A
;  304				return false;
.LINE 304

	XOR	A,A
	JR	L_111
;  305			case 3:
L_80:
.LINE 305

;  306				battle_End();
.LINE 306

	CALL	_battle_End
;  307				i = menu_PokemonMenu(false);
.LINE 307

	LD	BC,0
	PUSH	BC
	CALL	_menu_PokemonMenu
	POP	BC
	LD	BC,HL
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  308				SetupBattleGfx();
.LINE 308

	CALL	_SetupBattleGfx
;  309				if (i != 0 && (i - 1) != currentplayer && party[i - 1].id != 0) {
.LINE 309

	LD	HL,(_i)
	CALL	__scmpzero
	JR	Z,L_84
	LD	BC,(_i)
	CALL	__stoiu
	DEC	HL
	LD	(IX+-15),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_84
	LD	HL,34
	LD	BC,(IX+-15)
	CALL	__imulu
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_84
;  310					currentplayer = i - 1;
.LINE 310

	LD	A,(_i)
	DEC	A
	LD	(_currentplayer),A
;  311					resetstatus(true);
.LINE 311

	LD	BC,1
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  312					redrawcharacters();
.LINE 312

	CALL	_redrawcharacters
;  313					return true;
.LINE 313

	LD	A,1
	JR	L_111
;  314				}
L_84:
.LINE 314

;  315				redrawcharacters();
.LINE 315

	CALL	_redrawcharacters
;  316				return false;
.LINE 316

	XOR	A,A
	JR	L_111
;  317			case 4:
L_85:
.LINE 317

;  318				if (!wild) {
.LINE 318

	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_90
;  319					text_Display("Can't run from trainers!", true);
.LINE 319

	LD	BC,1
	PUSH	BC
	LD	BC,L__54
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  320					return false;
.LINE 320

	XOR	A,A
	JR	L_111
;  321				}
L_90:
.LINE 321

;  322				//NOT REAL RUN FUNCTION
;  323				if (stats[1].speed > stats[0].speed || (rand() % 3) == 0) {
.LINE 323

	LD	IY,_stats
	LD	BC,(IY+22)
	LD	HL,(_stats+10)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_88
	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_89
L_88:
;  324					run = true;
.LINE 324

	LD	A,1
	LD	(_run),A
;  325					return true;
.LINE 325

	JR	L_111
;  326				}
;  327				else {
L_89:
.LINE 327

;  328					text_Display("Failed to run away!", true);
.LINE 328

	LD	BC,1
	PUSH	BC
	LD	BC,L__57
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  329					return true;
.LINE 329

	LD	A,1
	JR	L_111
;  330				}
;  331				return false;
;  332			}
;  333		}
L_109:
.LINE 333

;  334		/* Select which move to use */
;  335		if (battleMenuState1 == 1) {
.LINE 335

	LD	A,(_battleMenuState1)
	CP	A,1
	JR	NZ,L_108
;  336			int selectedMove;
;  337			selectedMove = selectMove();
.LINE 337

	CALL	_selectMove
	LD	(IX+-12),HL
;  338			battleMenuState1 = 0;
.LINE 338

	XOR	A,A
	LD	(_battleMenuState1),A
;  339			/* Checks if the move can be used */
;  340			if (selectedMove == 0 || party[currentplayer].pp[selectedMove - 1] == 0 || disabledmove[true] == selectedMove) {
.LINE 340

	LD	HL,(IX+-12)
	CALL	__icmpzero
	JR	Z,L_95
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,(IX+-12)
	DEC	BC
	LD	(IX+-6),BC
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	BC,(IX+-6)
	LD	IY,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_95
	LD	HL,_disabledmove
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_96
L_95:
;  341				return false;
.LINE 341

	XOR	A,A
	JR	L_111
;  342			}
L_96:
.LINE 342

;  343			chosenmove[true] = party[currentplayer].moves[selectedMove - 1];
.LINE 343

	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	BC,(IX+-6)
	LD	IY,(IX+-21)
	LEA	HL,IY+1
	ADD	HL,BC
	LD	IY,_chosenmove
	LD	A,(HL)
	LD	(IY+1),A
;  344			party[currentplayer].pp[selectedMove - 1]--;
.LINE 344

	LD	BC,(IX+-6)
	LD	IY,(IX+-21)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	(IX+-30),HL	; spill
	LD	BC,(IX+-6)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	(IX+-27),HL	; spill
	LD	HL,(IX+-30)	; unspill
	LD	A,(HL)
	LD	HL,(IX+-27)	; unspill
	DEC	A
	LD	(HL),A
;  345		}
;  346		/* Items */
;  347		else if (battleMenuState1 == 2) {
.LINE 347

	JR	L_110
L_108:
	LD	A,(_battleMenuState1)
	CP	A,2
	JR	NZ,L_110
;  348			int chosenItem;
;  349			battleMenuState1 = 0;
.LINE 349

	XOR	A,A
	LD	(_battleMenuState1),A
;  350			battle_End();
.LINE 350

	CALL	_battle_End
;  351			chosenItem = menu_Items(true);
.LINE 351

	LD	BC,1
	PUSH	BC
	CALL	_menu_Items
	POP	BC
	LD	(IX+-3),HL
;  352			SetupBattleGfx();
.LINE 352

	CALL	_SetupBattleGfx
;  353			if (chosenItem == -1) {
.LINE 353

	LD	BC,16777215
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_105
;  354				return false;
.LINE 354

	XOR	A,A
	JR	L_111
;  355			}
L_105:
.LINE 355

;  356			if (chosenItem < 4) {
.LINE 356

	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_104
;  357				redrawcharacters();
.LINE 357

	CALL	_redrawcharacters
;  358				sprintf(str, "Used a %s", itemNames[chosenItem]);
.LINE 358

	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__65
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  359				text_Display(str, true);
.LINE 359

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  360				playerItems[chosenItem]--;
.LINE 360

	LD	BC,(IX+-3)
	LD	HL,_playerItems
	ADD	HL,BC
	LD	(IX+-24),HL
	LD	IY,(IX+-24)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
;  361				chosenmove[true] = 0;
.LINE 361

	LD	HL,_chosenmove
	INC	HL
	LD	(HL),0
;  362				if (capture(chosenItem + 1)) {
.LINE 362

	LD	C,(IX+-3)
	INC	C
	LD	B,0
	PUSH	BC
	CALL	_capture
	POP	BC
	OR	A,A
	JR	Z,L_110
;  363					map_WinFight(wild, enemyparty[0].level * 40);
.LINE 363

	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
;  364					run = true;
.LINE 364

	LD	A,1
	LD	(_run),A
;  365					return true;
.LINE 365

	JR	L_111
;  366				}
;  367			}
;  368			else {
L_104:
.LINE 368

;  369				battle_End();
.LINE 369

	CALL	_battle_End
;  370				if (items_UseItem(chosenItem)) {
.LINE 370

	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	CALL	_items_UseItem
	POP	BC
	OR	A,A
	JR	Z,L_102
;  371					chosenmove[true] = 0;
.LINE 371

	LD	HL,_chosenmove
	INC	HL
	LD	(HL),0
;  372					SetupBattleGfx();
.LINE 372

	CALL	_SetupBattleGfx
;  373					redrawcharacters();
.LINE 373

	CALL	_redrawcharacters
;  374				}
;  375				else {
.LINE 375

	JR	L_110
L_102:
;  376					SetupBattleGfx();
.LINE 376

	CALL	_SetupBattleGfx
;  377					redrawcharacters();
.LINE 377

	CALL	_redrawcharacters
;  378					return false;
.LINE 378

	XOR	A,A
	JR	L_111
;  379				}
;  380			}
;  381		}
L_110:
.LINE 381

;  382		return true;
.LINE 382

	LD	A,1
;  383	}
L_111:
.LINE 383

	LD	SP,IX
	POP	IX
	RET	


;**************************** _playerturn ***************************
;Name                         Addr/Register   Size   Type
;_items_UseItem                      IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_map_WinFight                       IMPORT  -----   function
;_capture                            IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_str                                IMPORT    100   variable
;_itemNames                          IMPORT    320   variable
;_sprintf                            IMPORT  -----   function
;_menu_Items                         IMPORT  -----   function
;_disabledmove                       STATIC      2   variable
;_selectMove                         IMPORT  -----   function
;_run                                STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats                              STATIC     24   variable
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;_redrawcharacters                   IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_SetupBattleGfx                     IMPORT  -----   function
;_menu_PokemonMenu                   IMPORT  -----   function
;_battle_End                         IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_battleMenuState1                   STATIC      1   variable
;_i                                  IMPORT      2   variable
;_chosenmove                         STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_14                                 IX-15      3   variable
;selectedMove                         IX-12      3   variable
;G_15                                  IX-9      3   variable
;G_16                                  IX-6      3   variable
;chosenItem                            IX-3      3   variable


; Stack Frame Size: 36 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "playerturn",383,"_playerturn"
	SEGMENT STRSECT
L__45:
	DB	"Run"
	DB	0
L__46:
	DB	"Switch"
	DB	0
L__47:
	DB	"Item"
	DB	0
L__48:
	DB	"Fight"
	DB	0
L__54:
	DB	"Can't run from trainers!"
	DB	0
L__57:
	DB	"Failed to run away!"
	DB	0
L__65:
	DB	"Used a %s"
	DB	0
	SEGMENT CODE
;  384	
;  385	int selectMove(void) {
_selectMove:
.DEFINE "_selectMove"

.VALUE _selectMove

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "selectMove",385,"_selectMove"

.LINE 385

.DEFINE "tv1"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

.DEFINE "tv2"

.CLASS 65

.VALUE -2

.TYPE 2

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-26
	LD	SP,HL
;  386		int8_t tv1, tv2, iconIndex;
;  387		tv1 = 0;
.LINE 387

	LD	(IX+-1),0
;  388		tv2 = 0;
.LINE 388

	LD	(IX+-2),0
;  389	
;  390		zx7_Decompress(textBoxSprite2, battletextbox3_compressed);
.LINE 390

	LD	HL,_PKMNSD5+12
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  391		gfx_Blit(gfx_screen);
.LINE 391

	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  392		text_DrawTextBox();
.LINE 392

	CALL	_text_DrawTextBox
;  393	
;  394	
;  395	
;  396		gfx_PrintStringXY(">", 15, 190);
.LINE 396

	LD	BC,190
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__69
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  397		gfx_PrintStringXY(data_moves[party[currentplayer].moves[0]].name, 25, 190);
.LINE 397

	LD	BC,190
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  398		gfx_PrintStringXY(data_moves[party[currentplayer].moves[1]].name, 25, 205);
.LINE 398

	LD	BC,205
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+1
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  399		gfx_PrintStringXY(data_moves[party[currentplayer].moves[2]].name, 145, 190);
.LINE 399

	LD	BC,190
	PUSH	BC
	LD	BC,145
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  400		gfx_PrintStringXY(data_moves[party[currentplayer].moves[3]].name, 145, 205);
.LINE 400

	LD	BC,205
	PUSH	BC
	LD	BC,145
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+4
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  401	
;  402		if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
.LINE 402

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	LD	(IX+-14),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_113
;  403			gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
.LINE 403

	LD	BC,193
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	HL,(IX+-14)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  404			sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
.LINE 404

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-20),HL
	LD	IY,(IX+-20)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-20)
	LD	A,(IY+5)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__71
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  405			gfx_PrintStringXY(str, 271, 209);
.LINE 405

	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  406		}
L_113:
.LINE 406

;  407		
;  408	
;  409		gfx_SwapDraw();
.LINE 409

	CALL	_gfx_SwapDraw
;  410		gfx_SetDrawScreen();
.LINE 410

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  411	
;  412		kb_Scan();
.LINE 412

	CALL	_kb_Scan
;  413		if ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
.LINE 413

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_115
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_116
L_115:
;  414			Wait(50);
.LINE 414

	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;  415		}
L_116:
.LINE 415

;  416		kb_Scan();
.LINE 416

	CALL	_kb_Scan
;  417		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
.LINE 417

	JR	L_133
L_134:
;  418			kb_Scan();
.LINE 418

	CALL	_kb_Scan
;  419			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
.LINE 419

	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_124
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_132
L_124:
;  420				if (tv1 == 1) {
.LINE 420

	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_120
;  421					tv1 = 0;
.LINE 421

	LD	(IX+-1),0
;  422				}
;  423				else {
.LINE 423

	JR	L_121
L_120:
;  424					tv1 = 1;
.LINE 424

	LD	(IX+-1),1
;  425				}
L_121:
.LINE 425

;  426				gfx_FillRectangle(14, 185, 10, 45);
.LINE 426

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  427				gfx_FillRectangle(134, 185, 10, 45);
.LINE 427

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  428				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
.LINE 428

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__77
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  429	
;  430				gfx_FillRectangle(263, 185, 48, 46);
.LINE 430

	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  431				if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
.LINE 431

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	(IX+-5),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_123
;  432					gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
.LINE 432

	LD	BC,193
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	HL,(IX+-11)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  433					sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
.LINE 433

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LD	IY,(IX+-23)
	LEA	HL,IY+1
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-23)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__79
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  434					gfx_PrintStringXY(str, 271, 209);
.LINE 434

	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  435				}
L_123:
.LINE 435

;  436	
;  437				Wait(20);
.LINE 437

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  438			}
L_132:
.LINE 438

;  439			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
.LINE 439

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_131
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_133
L_131:
;  440				if (tv2 == 1) {
.LINE 440

	LD	A,(IX+-2)
	CP	A,1
	JR	NZ,L_127
;  441					tv2 = 0;
.LINE 441

	LD	(IX+-2),0
;  442				}
;  443				else {
.LINE 443

	JR	L_128
L_127:
;  444					tv2 = 1;
.LINE 444

	LD	(IX+-2),1
;  445				}
L_128:
.LINE 445

;  446				gfx_FillRectangle(14, 185, 10, 45);
.LINE 446

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  447				gfx_FillRectangle(134, 185, 10, 45);
.LINE 447

	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  448				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
.LINE 448

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__83
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  449	
;  450				gfx_FillRectangle(263, 185, 48, 46);
.LINE 450

	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  451				if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
.LINE 451

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	(IX+-8),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-8)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-17),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_130
;  452					gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
.LINE 452

	LD	BC,193
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	HL,(IX+-17)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  453					sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
.LINE 453

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-8)
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LD	IY,(IX+-26)
	LEA	HL,IY+1
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-26)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__85
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  454					gfx_PrintStringXY(str, 271, 209);
.LINE 454

	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  455				}
L_130:
.LINE 455

;  456	
;  457				Wait(20);
.LINE 457

	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  458			}
;  459		}
L_133:
.LINE 459

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_135
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_134
L_135:
;  460		zx7_Decompress(textBoxSprite2, battletextbox2_compressed);
.LINE 460

	LD	HL,_PKMNSD5+9
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  461		if (kb_Data[6] & kb_Clear) {
.LINE 461

	LD	A,(16056348)
	AND	A,64
	JR	Z,L_137
;  462			return(0);
.LINE 462

	OR	A,A
	SBC	HL,HL
	JR	L_138
;  463		}
L_137:
.LINE 463

;  464		gfx_SetDrawBuffer();
.LINE 464

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  465		return (tv1 + 1 + 2 * (tv2));
.LINE 465

	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  466	}
L_138:
.LINE 466

	LD	SP,IX
	POP	IX
	RET	


;**************************** _selectMove ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_typeIcons                          IMPORT     51   variable
;_gfx_Sprite                         IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_data_moves                         IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    117   variable
;_zx7_Decompress                     IMPORT  -----   function
;G_21                                 IX-17      3   variable
;G_18                                 IX-14      3   variable
;G_19                                 IX-11      3   variable
;G_22                                  IX-8      3   variable
;G_20                                  IX-5      3   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable


; Stack Frame Size: 32 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "selectMove",466,"_selectMove"
	SEGMENT STRSECT
L__69:
	DB	">"
	DB	0
L__71:
	DB	"%u/%u"
	DB	0
L__77:
	DB	">"
	DB	0
L__79:
	DB	"%u/%u"
	DB	0
L__83:
	DB	">"
	DB	0
L__85:
	DB	"%u/%u"
	DB	0
	SEGMENT CODE
;  467	
;  468	bool enemyturn() {
_enemyturn:
.DEFINE "_enemyturn"

.VALUE _enemyturn

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "enemyturn",468,"_enemyturn"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-12
	LD	SP,HL
;  469		if (attackturns[false] > 0) {
.LINE 469

	LD	A,(_attackturns)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_156
;  470			chosenmove[false] = lastmove[false];
.LINE 470

	LD	A,(_lastmove)
	LD	(_chosenmove),A
;  471			return true;
.LINE 471

	LD	A,1
	JR	L_158
;  472		}
L_156:
.LINE 472

;  473		switch (rand() % 4)
.LINE 473

	CALL	_rand
	LD	BC,4
	CALL	__irems
	CALL	__seqcaseD
	JP	(HL)
L__91:
	DW	4
	DW	0
	DB	0
	DW24	L_140	

	DW24	L_144	

	DW24	L_148	

	DW24	L_152	

	DW24	L_157	

;  474		{
;  475		case 0:
L_140:
.LINE 475

;  476			if (enemyparty[currentenemy].moves[0] == 0 || disabledmove[false] == 1) {
.LINE 476

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	LD	(IX+-3),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_142
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_143
L_142:
;  477				return false;
.LINE 477

	XOR	A,A
	JR	L_158
;  478			}
L_143:
.LINE 478

;  479			chosenmove[false] = enemyparty[currentenemy].moves[0];
.LINE 479

	LD	HL,(IX+-3)
	LD	A,(HL)
	LD	(_chosenmove),A
;  480			break;
.LINE 480

	JR	L_157
;  481		case 1:
L_144:
.LINE 481

;  482			if (enemyparty[currentenemy].moves[1] == 0 || disabledmove[false] == 2) {
.LINE 482

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	INC	BC
	LD	(IX+-6),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_146
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_147
L_146:
;  483				return false;
.LINE 483

	XOR	A,A
	JR	L_158
;  484			}
L_147:
.LINE 484

;  485			chosenmove[false] = enemyparty[currentenemy].moves[1];
.LINE 485

	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	(_chosenmove),A
;  486			break;
.LINE 486

	JR	L_157
;  487		case 2:
L_148:
.LINE 487

;  488			if (enemyparty[currentenemy].moves[2] == 0 || disabledmove[false] == 3) {
.LINE 488

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+3
	LD	(IX+-9),IY
	LD	HL,(IX+-9)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_150
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_151
L_150:
;  489				return false;
.LINE 489

	XOR	A,A
	JR	L_158
;  490			}
L_151:
.LINE 490

;  491			chosenmove[false] = enemyparty[currentenemy].moves[2];
.LINE 491

	LD	HL,(IX+-9)
	LD	A,(HL)
	LD	(_chosenmove),A
;  492			break;
.LINE 492

	JR	L_157
;  493		case 3:
L_152:
.LINE 493

;  494			if (enemyparty[currentenemy].moves[3] == 0 || disabledmove[false] == 4) {
.LINE 494

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+4
	LD	(IX+-12),IY
	LD	HL,(IX+-12)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_154
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_155
L_154:
;  495				return false;
.LINE 495

	XOR	A,A
	JR	L_158
;  496			}
L_155:
.LINE 496

;  497			chosenmove[false] = enemyparty[currentenemy].moves[3];
.LINE 497

	LD	HL,(IX+-12)
	LD	A,(HL)
	LD	(_chosenmove),A
;  498			break;
;  499		}
L_157:
.LINE 499

;  500		return true;
.LINE 500

	LD	A,1
;  501	}
L_158:
.LINE 501

	LD	SP,IX
	POP	IX
	RET	


;**************************** _enemyturn ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_rand                               IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_27                                 IX-12      3   variable
;G_26                                  IX-9      3   variable
;G_25                                  IX-6      3   variable
;G_24                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "enemyturn",501,"_enemyturn"
;  502	void redrawcharacters(void) {
_redrawcharacters:
.DEFINE "_redrawcharacters"

.VALUE _redrawcharacters

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "redrawcharacters",502,"_redrawcharacters"

.LINE 502

.DEFINE "healthRatio"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	PUSH	BC
;  503		int statusIndex, healthRatio;
;  504		gfx_SetColor(colors[1]);
.LINE 504

	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  505		text_DrawTextBox();
.LINE 505

	CALL	_text_DrawTextBox
;  506	
;  507		gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
.LINE 507

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  508		gfx_ScaledTransparentSprite_NoClip(playerSprite, 20, 64, 2, 2);
.LINE 508

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  509		gfx_ScaledTransparentSprite_NoClip(enemySprite, 190, 8, 2, 2);
.LINE 509

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,190
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  510	
;  511		/* Display Information about player and enemy */
;  512		
;  513		gfx_PrintStringXY(data_pokemon[enemyparty[currentenemy].id].name, 17, 29);
.LINE 513

	LD	BC,29
	PUSH	BC
	LD	BC,17
	PUSH	BC
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  514		sprintf(str, "Lv%u", enemyparty[currentenemy].level);
.LINE 514

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__101
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  515		gfx_PrintStringXY(str, 98, 29);
.LINE 515

	LD	BC,29
	PUSH	BC
	LD	BC,98
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  516		gfx_Sprite(hpBarSprite, 40, 40);
.LINE 516

	LD	BC,40
	PUSH	BC
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  517		healthRatio = (enemyparty[currentenemy].currenthealth * 78) / stats[0].health;
.LINE 517

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	DE,HL
	LD	BC,(_stats)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	(IX+-3),HL
;  518		if (healthRatio > 34) {
.LINE 518

	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	JP	P,L_162
;  519			gfx_SetColor(colors[8]);
.LINE 519

	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  520		}else if (healthRatio > 14) {
.LINE 520

	JR	L_163
L_162:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_160
;  521			gfx_SetColor(colors[9]);
.LINE 521

	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  522		}else {
.LINE 522

	JR	L_163
L_160:
;  523			gfx_SetColor(colors[10]);
.LINE 523

	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  524		}
L_163:
.LINE 524

;  525		gfx_FillRectangle(58, 42, healthRatio, 6);
.LINE 525

	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,58
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  526		if (enemyparty[currentenemy].currentstatus > 0) {
.LINE 526

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-9),HL
	XOR	A,A
	LD	IY,(IX+-9)
	CP	A,(IY+15)
	JR	NC,L_165
;  527			
;  528			gfx_TransparentSprite_NoClip(statusIcons[enemyparty[currentenemy].currentstatus-1], 18, 41);
.LINE 528

	LD	BC,41
	PUSH	BC
	LD	BC,18
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  529		}
L_165:
.LINE 529

;  530	
;  531		gfx_PrintStringXY(data_pokemon[party[currentplayer].id].name, 181, 129);
.LINE 531

	LD	BC,129
	PUSH	BC
	LD	BC,181
	PUSH	BC
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  532		sprintf(str, "Lv%u", party[currentplayer].level);
.LINE 532

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__105
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  533		gfx_PrintStringXY(str, 264, 129);
.LINE 533

	LD	BC,129
	PUSH	BC
	LD	BC,264
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  534		gfx_Sprite(hpBarSprite, 204, 140);
.LINE 534

	LD	BC,140
	PUSH	BC
	LD	BC,204
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  535		healthRatio = (party[currentplayer].currenthealth * 78) / stats[1].health;
.LINE 535

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	DE,HL
	LD	IY,_stats
	LD	BC,(IY+12)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	(IX+-3),HL
;  536		if (healthRatio > 34) {
.LINE 536

	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_169
;  537			gfx_SetColor(colors[8]);
.LINE 537

	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  538		}
;  539		else if (healthRatio > 14) {
.LINE 539

	JR	L_170
L_169:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_167
;  540			gfx_SetColor(colors[9]);
.LINE 540

	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  541		}
;  542		else {
.LINE 542

	JR	L_170
L_167:
;  543			gfx_SetColor(colors[10]);
.LINE 543

	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  544		}
L_170:
.LINE 544

;  545		gfx_FillRectangle(222, 142, healthRatio, 6);
.LINE 545

	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,142
	PUSH	BC
	LD	BC,222
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  546		
;  547		sprintf(str, "%u/%u", party[currentplayer].currenthealth, stats[1].health);
.LINE 547

	LD	IY,_stats
	LD	BC,(IY+12)
	CALL	__stoiu
	PUSH	HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__108
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  548		gfx_PrintStringXY(str, 247, 153);
.LINE 548

	LD	BC,153
	PUSH	BC
	LD	BC,247
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  549	
;  550		gfx_SetTextFGColor(colors[11]);
.LINE 550

	LD	HL,_colors+11
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  551		gfx_PrintStringXY("XP", 193, 166);
.LINE 551

	LD	BC,166
	PUSH	BC
	LD	BC,193
	PUSH	BC
	LD	BC,L__109
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  552		gfx_SetColor(colors[7]);
.LINE 552

	LD	HL,_colors+7
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  553		if (party[currentplayer].level < 100) {
.LINE 553

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_173
;  554			gfx_FillRectangle(210, 168, CalculateXpPercent(), 4);
.LINE 554

	LD	BC,4
	PUSH	BC
	CALL	_CalculateXpPercent
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,168
	PUSH	BC
	LD	BC,210
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  555		}
L_173:
.LINE 555

;  556		if (party[currentplayer].currentstatus > 0) {
.LINE 556

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	XOR	A,A
	CP	A,(IY+15)
	JR	NC,L_174
;  557			gfx_TransparentSprite_NoClip(statusIcons[party[currentplayer].currentstatus - 1], 182, 141);
.LINE 557

	LD	BC,141
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	IY,(IX+-6)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  558		}
L_174:
.LINE 558

;  559	
;  560		gfx_SetColor(colors[0]);
.LINE 560

	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  561		gfx_SetTextFGColor(colors[1]);
.LINE 561

	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  562		gfx_SwapDraw();
.LINE 562

	CALL	_gfx_SwapDraw
;  563	}
.LINE 563

	LD	SP,IX
	POP	IX
	RET	


;**************************** _redrawcharacters ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_CalculateXpPercent                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_statusIcons                        IMPORT     15   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_stats                              STATIC     24   variable
;_hpBarSprite                        STATIC      3   variable
;_gfx_Sprite                         IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_backgroundSprite                   STATIC      3   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;G_29                                  IX-9      3   variable
;G_31                                  IX-6      3   variable
;healthRatio                           IX-3      3   variable


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "redrawcharacters",563,"_redrawcharacters"
	SEGMENT STRSECT
L__101:
	DB	"Lv%u"
	DB	0
L__105:
	DB	"Lv%u"
	DB	0
L__108:
	DB	"%u/%u"
	DB	0
L__109:
	DB	"XP"
	DB	0
	SEGMENT CODE
;  564	
;  565	uint8_t CalculateXpPercent(void) {
_CalculateXpPercent:
.DEFINE "_CalculateXpPercent"

.VALUE _CalculateXpPercent

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "CalculateXpPercent",565,"_CalculateXpPercent"

.LINE 565

.DEFINE "sXp"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "cXp"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "mXp"

.CLASS 65

.VALUE -9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-21
	LD	SP,HL
;  566		int cXp, sXp, mXp;
;  567		cXp = party[currentplayer].xp;
.LINE 567

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	BC,(IY+10)
	LD	(IX+-6),BC
;  568		sXp = xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level];
.LINE 568

	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	D,(IY+9)
	LD	IY,(IX+-12)
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	(IX+-21),HL	; spill
	LD	A,D
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,(IX+-21)	; unspill
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-3),BC
;  569		mXp = xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level + 1];
.LINE 569

	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	BC,HL
	LD	A,D
	UEXT	HL
	LD	L,A
	INC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-9),BC
;  570		return((uint8_t)((92 * (cXp - sXp)) / (mXp - sXp)));
.LINE 570

	LD	BC,(IX+-3)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	A,92
	CALL	__imul_b
	LD	DE,HL
	LD	BC,(IX+-3)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	A,L
;  571	
;  572	}
.LINE 572

	LD	SP,IX
	POP	IX
	RET	


;**************************** _CalculateXpPercent ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_data_pokemon                       IMPORT  unknown variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;mXp                                   IX-9      3   variable
;cXp                                   IX-6      3   variable
;sXp                                   IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "CalculateXpPercent",572,"_CalculateXpPercent"
;  573	
;  574	void battle_End(void) {
_battle_End:
.DEFINE "_battle_End"

.VALUE _battle_End

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "battle_End",574,"_battle_End"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  575		free(playerSprite);
.LINE 575

	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  576		free(enemySprite);
.LINE 576

	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  577		free(backgroundSprite);
.LINE 577

	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  578		free(hpBarSprite);
.LINE 578

	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  579		FreeIcons();
.LINE 579

	CALL	_FreeIcons
;  580	}
.LINE 580

	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_End ***************************
;Name                         Addr/Register   Size   Type
;_FreeIcons                          IMPORT  -----   function
;_hpBarSprite                        STATIC      3   variable
;_backgroundSprite                   STATIC      3   variable
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_free                               IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -1 (instruction)


.ENDFUNC "battle_End",580,"_battle_End"
;  581	
;  582	void attack(bool player, uint8_t move) {
_attack:
.DEFINE "_attack"

.VALUE _attack

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "attack",582,"_attack"

.LINE 582

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "move"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "damage"

.CLASS 65

.VALUE -7

.TYPE 15

.ENDEF

.DEFINE "userlevel"

.CLASS 65

.VALUE -23

.TYPE 12

.ENDEF

.DEFINE "hitcount"

.CLASS 65

.VALUE -36

.TYPE 12

.ENDEF

.DEFINE "nonuserelement1"

.CLASS 65

.VALUE -64

.TYPE 12

.ENDEF

.DEFINE "nonuserelement2"

.CLASS 65

.VALUE -65

.TYPE 12

.ENDEF

.DEFINE "nonuserlevel"

.CLASS 65

.VALUE -108

.TYPE 12

.ENDEF

.DEFINE "userelement1"

.CLASS 65

.VALUE -109

.TYPE 12

.ENDEF

.DEFINE "userelement2"

.CLASS 65

.VALUE -110

.TYPE 12

.ENDEF

.DEFINE "username"

.CLASS 65

.VALUE -376

.DIM 20

.TYPE 98

.ENDEF

.DEFINE "nonusername"

.CLASS 65

.VALUE -396

.DIM 20

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	HL,-600
	ADD	HL,SP
	LD	SP,HL
;  583		
;  584		char username[20];
;  585		char nonusername[20];
;  586		uint32_t damage;
;  587		uint8_t hitcount = 0;
.LINE 587

	LD	(IX+-36),0
;  588		uint8_t userlevel;
;  589		uint8_t nonuserlevel;
;  590	
;  591		uint8_t userelement1;
;  592		uint8_t userelement2;
;  593		uint8_t nonuserelement1;
;  594		uint8_t nonuserelement2;
;  595	
;  596		if (move == 0) {
.LINE 596

	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_587
;  597			return;
.LINE 597

;  598		}
.LINE 598

;  599		
;  600		
;  601		rage[player] = false;
.LINE 601

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
;  602	
;  603		if (player) {
.LINE 603

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_181
;  604			strcpy(username, playername);
.LINE 604

	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  605			strcpy(nonusername, enemyname);
.LINE 605

	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  606			userlevel = party[currentplayer].level;
.LINE 606

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	BC,-408
	CALL	__istix
	LD	BC,-408
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  607			nonuserlevel = enemyparty[currentenemy].level;
.LINE 607

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-402
	CALL	__istix
	LD	BC,-402
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-108),A
;  608			userelement1 = data_pokemon[party[currentplayer].id].element1;
.LINE 608

	LD	BC,-408
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-405
	CALL	__istix
	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-109),A
;  609			userelement2 = data_pokemon[party[currentplayer].id].element2;
.LINE 609

	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-110),A
;  610			nonuserelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
.LINE 610

	LD	BC,-402
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-399
	CALL	__istix
	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-64),A
;  611			nonuserelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
.LINE 611

	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-65),A
;  612	
;  613		}
;  614		else {
.LINE 614

	JR	L_183
L_181:
;  615			strcpy(username, enemyname);
.LINE 615

	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  616			strcpy(nonusername, playername);
.LINE 616

	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  617			userlevel = enemyparty[currentenemy].level;
.LINE 617

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-420
	CALL	__istix
	LD	BC,-420
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  618			nonuserlevel = party[currentplayer].level;
.LINE 618

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	BC,-414
	CALL	__istix
	LD	BC,-414
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-108),A
;  619			userelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
.LINE 619

	LD	BC,-420
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-417
	CALL	__istix
	LD	BC,-417
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-109),A
;  620			userelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
.LINE 620

	LD	BC,-417
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-110),A
;  621			nonuserelement1 = data_pokemon[party[currentplayer].id].element1;
.LINE 621

	LD	BC,-414
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-411
	CALL	__istix
	LD	BC,-411
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-64),A
;  622			nonuserelement2 = data_pokemon[party[currentplayer].id].element2;
.LINE 622

	LD	BC,-411
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-65),A
;  623		}
L_183:
.LINE 623

;  624	
;  625		if (flinch[player]) {
.LINE 625

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_185
;  626			sprintf(str, "%s flinched", username);
.LINE 626

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__118
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  627			text_Display(str, true);
.LINE 627

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  628		}
L_185:
.LINE 628

;  629		if (data_moves[move].type == 16) {
.LINE 629

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-296
	CALL	__istix
	LD	BC,-296
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,16
	JR	NZ,L_191
;  630			sprintf(str, "%s used %s", username, data_moves[move].name);
.LINE 630

	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__120
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  631			text_Display(str, true);
.LINE 631

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  632			move = 1 + (rand() % 165);
.LINE 632

	CALL	_rand
	LD	BC,165
	CALL	__irems
	INC	L
	LD	(IX+9),L
;  633		}
L_191:
.LINE 633

;  634	
;  635	
;  636		
;  637		if (data_moves[move].type == 17) {
.LINE 637

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-299
	CALL	__istix
	LD	BC,-299
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,17
	JR	NZ,L_192
;  638			sprintf(str, "%s used %s", username, data_moves[move].name);
.LINE 638

	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__122
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  639			text_Display(str, true);
.LINE 639

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  640			move = lastmove[!player];
.LINE 640

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_187
	LD	HL,1
	LD	BC,-308
	CALL	__istix
	JR	L_188
L_187:
	OR	A,A
	SBC	HL,HL
	LD	BC,-308
	CALL	__istix
L_188:
	LD	BC,_lastmove
	LD	HL,-308
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+9),A
;  641		}
L_192:
.LINE 641

;  642		lastmove[player] = move;
.LINE 642

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(IX+9)
	LD	(HL),A
;  643	
;  644		if (data_moves[move].type == 19 && data_moves[lastmove[!player]].type != 0) {
.LINE 644

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-74),HL
	LD	BC,-305
	CALL	__istix
	LD	HL,(IX+-74)
	LD	BC,-302
	CALL	__istix
	LD	BC,_data_moves
	LD	HL,(IX+-74)
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	IY,(IX+-13)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_203
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_194
	LD	HL,1
	LD	BC,-311
	CALL	__istix
	JR	L_195
L_194:
	OR	A,A
	SBC	HL,HL
	LD	BC,-311
	CALL	__istix
L_195:
	LD	BC,_lastmove
	LD	HL,-311
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_203
;  645			text_Display("It Failed", true);
.LINE 645

	LD	BC,1
	PUSH	BC
	LD	BC,L__127
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  646			return;
.LINE 646

	JR	L_587
;  647		}
L_203:
.LINE 647

;  648	
;  649		if (data_moves[move].statustype == 32) {
.LINE 649

	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_211
;  650			if (attackturns[player] == 0) {
.LINE 650

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-113),HL
	LD	BC,-314
	CALL	__istix
	LD	HL,(IX+-113)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_201
;  651				attackturns[player] = (rand() % 2) + 2;
.LINE 651

	LD	HL,(IX+-113)
	CALL	__istix
	CALL	_rand
	LD	BC,2
	CALL	__irems
	INC	HL
	INC	HL
	LD	IY,(IX+-113)
	LD	(IY),L
;  652			}
L_201:
.LINE 652

;  653			attackturns[player]--;
.LINE 653

	LD	BC,-314
	CALL	__ildix
	LD	BC,-423
	CALL	__istix
	LD	BC,-423
	CALL	__ildix
	LD	IY,HL
	LD	BC,-423
	CALL	__ildix
	LD	A,(IY)
	DEC	A
	LD	(HL),A
;  654		}
L_211:
.LINE 654

;  655		if (data_moves[move].statustype == 33 || data_moves[move].statustype == 36 || data_moves[move].statustype == 37 || data_moves[move].statustype == 38) {
.LINE 655

	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,33
	JR	Z,L_210
	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,36
	JR	Z,L_210
	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,37
	JR	Z,L_210
	LD	BC,(IX+-13)
	LD	(IX+-107),BC
	LD	BC,(IX+-13)
	LD	(IX+-122),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,38
	JR	NZ,L_216
L_210:
;  656			if (attackturns[player] == 0) {
.LINE 656

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-51),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_209
;  657				attackturns[player] = 1;
.LINE 657

	LD	HL,(IX+-51)
	LD	(HL),1
;  658				sprintf(str, "%s is building up power", username, data_moves[move].name);
.LINE 658

	LD	IY,(IX+-107)
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__135
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  659				text_Display(str, true);
.LINE 659

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  660				return;
.LINE 660

	JR	L_587
;  661			}
;  662			else if (attackturns[player] == 1) {
L_209:
.LINE 662

	LD	HL,(IX+-51)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_216
;  663				attackturns[player] = 0;
.LINE 663

	LD	HL,(IX+-51)
	LD	(HL),0
;  664			}
;  665		}
L_216:
.LINE 665

;  666		if (data_moves[move].statustype == 34) {
.LINE 666

	LD	BC,(IX+-122)
	LD	(IX+-26),BC
	LD	IY,(IX+-26)
	LD	A,(IY+19)
	CP	A,34
	JR	NZ,L_223
;  667			if (attackturns[player] == 0) {
.LINE 667

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-63),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_214
;  668				attackturns[player] = 1;
.LINE 668

	LD	HL,(IX+-63)
	LD	(HL),1
;  669				air[player] = true;
.LINE 669

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),1
;  670				return;
.LINE 670

	JR	L_587
;  671			}
;  672			else if (attackturns[player] == 1) {
L_214:
.LINE 672

	LD	HL,(IX+-63)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_223
;  673				attackturns[player] = 0;
.LINE 673

	LD	HL,(IX+-63)
	LD	(HL),0
;  674				air[player] = false;
.LINE 674

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),0
;  675			}
;  676		}
L_223:
.LINE 676

;  677		if (data_moves[move].type == 20 && attackturns[player] != 1) {
.LINE 677

	LD	IY,(IX+-26)
	LD	A,(IY+15)
	CP	A,20
	JR	NZ,L_226
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	Z,L_226
;  678			if (attackturns[player] == 0) {
.LINE 678

	LD	HL,(IX+-32)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_220
;  679				bidedamage[player] = 0;
.LINE 679

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_bidedamage
	ADD	HL,BC
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  680				attackturns[player] = 2;
.LINE 680

	LD	HL,(IX+-32)
	LD	(HL),2
;  681				sprintf(str, "%s used Bide", username);
.LINE 681

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__143
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  682				text_Display(str, true);
.LINE 682

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  683			}
;  684			else {
.LINE 684

	JR	L_221
L_220:
;  685				attackturns[player]--;
.LINE 685

	LD	HL,(IX+-32)
	LD	IY,(IX+-32)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
;  686			}
L_221:
.LINE 686

;  687			sprintf(str, "%s is storing energy", username);
.LINE 687

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__144
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  688			text_Display(str, true);
.LINE 688

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  689			return;
.LINE 689

	JR	L_587
;  690		}
L_226:
.LINE 690

;  691	
;  692		/* Exit if character's status prevents movement */
;  693		if ((*currentStatusPointer[player] == 3) && (rand() % 4 == 1)) {
.LINE 693

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-54),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_230
	CALL	_rand
	LD	BC,4
	CALL	__irems
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_230
;  694			sprintf(str, "%s is paralysed", username);
.LINE 694

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__147
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  695			text_Display(str, true);
.LINE 695

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  696			return;
.LINE 696

	JR	L_587
;  697		}
L_230:
.LINE 697

;  698		if (*currentStatusPointer[player] == 4) {
.LINE 698

	LD	HL,(IX+-54)
	LD	BC,-341
	CALL	__istix
	LD	HL,(IX+-54)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_234
;  699			if (rand() % 3 == 0) {
.LINE 699

	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_228
;  700				*currentStatusPointer[player] = 1;
.LINE 700

	LD	HL,(IX+-54)
	LD	BC,-341
	CALL	__istix
	LD	HL,(IX+-54)
	LD	HL,(HL)
	LD	(HL),1
;  701				sprintf(str, "%s woke up", username);
.LINE 701

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__150
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  702				text_Display(str, true);
.LINE 702

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  703			}
;  704			else {
.LINE 704

	JR	L_234
L_228:
;  705				sprintf(str, "%s is asleep", username);
.LINE 705

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__151
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  706				text_Display(str, true);
.LINE 706

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  707				return;
.LINE 707

	JR	L_587
;  708			}
;  709		}
L_234:
.LINE 709

;  710		if (*currentStatusPointer[player] == 5) {
.LINE 710

	LD	BC,-341
	CALL	__ildix
	LD	(IX+-101),HL
	LD	BC,-344
	CALL	__istix
	LD	HL,(IX+-101)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,5
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_238
;  711			if (rand() % 5 == 0) {
.LINE 711

	CALL	_rand
	LD	BC,5
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_232
;  712				*currentStatusPointer[player] = 0;
.LINE 712

	LD	HL,(IX+-101)
	LD	BC,-344
	CALL	__istix
	LD	HL,(IX+-101)
	LD	HL,(HL)
	LD	(HL),0
;  713				sprintf(str, "%s thawed out", username);
.LINE 713

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__154
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  714				text_Display(str, true);
.LINE 714

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  715			}
;  716			else {
.LINE 716

	JR	L_238
L_232:
;  717				sprintf(str, "%s is frozen", username);
.LINE 717

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__155
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  718				text_Display(str, true);
.LINE 718

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  719				return;
.LINE 719

	JR	L_587
;  720			}
;  721		}
L_238:
.LINE 721

;  722		if (confusedturns[player] > 0) {
.LINE 722

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(IX+-71),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_239
;  723			confusedturns[player] --;
.LINE 723

	LD	HL,(IX+-71)
	LD	IY,(IX+-71)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
;  724			if (rand() % 2 == 0) {
.LINE 724

	CALL	_rand
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_239
;  725				sprintf(str, "%s hurt itself in its confusion", username);
.LINE 725

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__158
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  726				text_Display(str, true);
.LINE 726

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  727				return;
.LINE 727

	JR	L_587
;  728			}
;  729		}
L_239:
.LINE 729

;  730	
;  731		sprintf(str, "%s used %s", username, data_moves[move].name);
.LINE 731

	LD	HL,(IX+-26)
	LD	BC,-353
	CALL	__istix
	LD	IY,(IX+-26)
	PEA	IY+0
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__159
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  732		text_Display(str, true);
.LINE 732

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  733	
;  734		if (air[!player] || (data_moves[move].accuracy * statmodvalues[statmods[player][5]] / statmodvalues[statmods[!player][6]]) < (rand() % 100)) {
.LINE 734

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_241
	LD	HL,1
	LD	BC,-317
	CALL	__istix
	JR	L_242
L_241:
	OR	A,A
	SBC	HL,HL
	LD	BC,-317
	CALL	__istix
L_242:
	LD	BC,_air
	LD	HL,-317
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_251
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_245
	LD	HL,1
	LD	BC,-320
	CALL	__istix
	JR	L_246
L_245:
	OR	A,A
	SBC	HL,HL
	LD	BC,-320
	CALL	__istix
L_246:
	LD	HL,(IX+-26)
	LD	BC,-353
	CALL	__istix
	LD	BC,(IX+-26)
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	(IX+-60),HL
	LD	BC,-356
	CALL	__istix
	LD	BC,_statmods
	LD	HL,(IX+-60)
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	(IX+-35),HL
	LD	(IX+-128),HL
	LD	(IX+-98),HL
	LD	(IX+-119),HL
	LD	(IX+-57),HL
	LD	IY,(IX+-10)
	LEA	HL,IY+5
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-593	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	IY,(IX+-26)
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	LD	BC,-593	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	DE,HL
	LD	BC,7
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-596	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-320
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-596	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+6
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	LD	BC,(HL)
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_254
L_251:
;  735			text_Display("It Missed", true);
.LINE 735

	LD	BC,1
	PUSH	BC
	LD	BC,L__164
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  736			if (data_moves[move].statustype == 25) {
.LINE 736

	LD	BC,-353
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,25
	JR	NZ,L_587
;  737				takedamage(player, stats[player].health);
.LINE 737

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  738			}
.LINE 738

;  739			return;
.LINE 739

	JR	L_587
;  740		}
L_254:
.LINE 740

;  741		if (!(*currentStatusPointer[player] == 4) && data_moves[move].statustype == 26) {
.LINE 741

	LD	BC,-344
	CALL	__ildix
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	Z,L_256
	LD	BC,(IX+-26)
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	LD	IY,(IX+-26)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_256
;  742			text_Display("It Failed", true);
.LINE 742

	LD	BC,1
	PUSH	BC
	LD	BC,L__168
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  743		}
L_256:
.LINE 743

;  744		if (data_moves[move].statustype == 22) {
.LINE 744

	LEA	IY,IX+-128
	LD	BC,(IY+-39)
	LD	(IY+-6),BC
	LD	IY,(IY+-6)
	LD	A,(IY+19)
	CP	A,22
	JR	NZ,L_258
;  745			hitcount = (rand() % 3) + 1;
.LINE 745

	CALL	_rand
	LD	BC,3
	CALL	__irems
	INC	HL
	LD	(IX+-36),L
;  746		}
L_258:
.LINE 746

;  747		if (data_moves[move].statustype == 23) {
.LINE 747

	LEA	IY,IX+-128
	LD	BC,(IY+-6)
	LD	(IX+-125),BC
	LD	IY,(IY+-6)
	LD	A,(IY+19)
	CP	A,23
	JR	NZ,L_449
;  748			hitcount = 1;
.LINE 748

	LD	(IX+-36),1
;  749		}
L_449:
.LINE 749

;  750	
;  751		
;  752	
;  753	
;  754	startattack:
.LINE 754

L_259:
;  755		if (data_moves[move].type < 2 || data_moves[move].type == 19) {
.LINE 755

	LD	BC,(IX+-125)
	LD	(IX+-3),BC
	LEA	IY,IX+-128
	LD	(IY+-48),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	C,L_447
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-48),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_448
L_447:
;  756			if (data_moves[move].type == 0) {
.LINE 756

	LEA	IY,IX+-128
	LD	BC,(IY+-48)
	LD	(IX+-29),BC
	LD	IY,(IX+-29)
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_292
;  757				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
.LINE 757

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_262
	LD	HL,1
	LD	BC,-323
	CALL	__istix
	JR	L_263
L_262:
	OR	A,A
	SBC	HL,HL
	LD	BC,-323
	CALL	__istix
L_263:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_266
	LD	HL,1
	LD	BC,-326
	CALL	__istix
	JR	L_267
L_266:
	OR	A,A
	SBC	HL,HL
	LD	BC,-326
	CALL	__istix
L_267:
	LD	BC,(IX+-10)
	LD	(IX+-35),BC
	LD	(IX+-128),BC
	LD	BC,(IX+-29)
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	LD	BC,(IX+-29)
	LD	(IX+-77),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-22),HL
	LD	(IY+-15),HL
	LD	(IY+-12),HL
	LD	(IY+-9),HL
	LD	BC,(IX+-35)
	LD	(IX+-98),BC
	LD	BC,(IX+-35)
	LD	(IX+-119),BC
	LD	BC,(IX+-35)
	LD	(IX+-57),BC
	LD	HL,(IX+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-521	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-521	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-524	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,5
	LD	HL,(IX+-22)
	CALL	__idivs
	LD	DE,HL
	INC	DE
	INC	DE
	LD	IY,(IX+-29)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-524	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LD	BC,7
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-527	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-326
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-527	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-530	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,12
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-533	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-323
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-533	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-530	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  758			}
;  759			else if (data_moves[move].type == 1) {
.LINE 759

	JR	L_293
L_292:
	LD	BC,(IX+-29)
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	LD	BC,(IX+-29)
	LD	(IX+-77),BC
	LD	IY,(IX+-29)
	LD	A,(IY+15)
	CP	A,1
	JR	NZ,L_290
;  760				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].specialattack*statmodvalues[statmods[player][2]] / 100) / (stats[!player].specialdefence * statmodvalues[statmods[!player][3]] / 100)) / 50) + 2;
.LINE 760

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_270
	LD	HL,1
	LD	BC,-329
	CALL	__istix
	JR	L_271
L_270:
	OR	A,A
	SBC	HL,HL
	LD	BC,-329
	CALL	__istix
L_271:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_274
	LD	HL,1
	LD	BC,-332
	CALL	__istix
	JR	L_275
L_274:
	OR	A,A
	SBC	HL,HL
	LD	BC,-332
	CALL	__istix
L_275:
	LD	BC,(IX+-35)
	LD	(IX+-10),BC
	LD	(IX+-128),BC
	LD	BC,(IX+-29)
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	LD	BC,(IX+-29)
	LD	(IX+-77),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-22),HL
	LD	(IY+-15),HL
	LD	(IY+-12),HL
	LD	(IY+-9),HL
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-119),BC
	LD	BC,(IX+-10)
	LD	(IX+-57),BC
	LD	IY,(IX+-10)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-506	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+6)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-506	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-509	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,5
	LD	HL,(IX+-22)
	CALL	__idivs
	LD	DE,HL
	INC	DE
	INC	DE
	LD	IY,(IX+-29)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-509	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LD	BC,7
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-512	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-332
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-512	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-515	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,12
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-518	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-329
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-518	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+8)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-515	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  761			}
;  762			else {
.LINE 762

	JR	L_293
L_290:
;  763				damage = ((((2 * userlevel / 5) + 2) * data_moves[lastmove[!player]].power * 2 * (stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
.LINE 763

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_278
	LD	HL,1
	LD	BC,-335
	CALL	__istix
	JR	L_279
L_278:
	OR	A,A
	SBC	HL,HL
	LD	BC,-335
	CALL	__istix
L_279:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_282
	LD	HL,1
	LD	BC,-338
	CALL	__istix
	JR	L_283
L_282:
	OR	A,A
	SBC	HL,HL
	LD	BC,-338
	CALL	__istix
L_283:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_286
	LD	HL,1
	LD	BC,-347
	CALL	__istix
	JR	L_287
L_286:
	OR	A,A
	SBC	HL,HL
	LD	BC,-347
	CALL	__istix
L_287:
	LD	BC,(IX+-128)
	LD	(IX+-10),BC
	LD	(IX+-35),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-22),HL
	LEA	IY,IX+-128
	LD	(IY+-15),HL
	LD	(IY+-12),HL
	LD	(IY+-9),HL
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-119),BC
	LD	BC,(IX+-10)
	LD	(IX+-57),BC
	LD	HL,(IX+-10)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-485	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-485	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	DE,HL
	LD	BC,_lastmove
	LD	HL,-335
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-488	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,IX
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-491	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-488	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-488	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-491	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-488	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-494	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,5
	LD	HL,(IX+-22)
	CALL	__idivs
	LD	BC,HL
	INC	BC
	INC	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-494	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	ADD	HL,HL
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	DE,HL
	LD	BC,7
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-497	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-347
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-497	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-500	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,12
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-503	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-338
	CALL	__ildix
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-503	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-473	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-500	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  764			}
L_293:
.LINE 764

;  765			damage *= ((rand() % 16) + 85);//  /100
.LINE 765

	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+85
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  766			damage *= elements[data_moves[move].element][nonuserelement1];// /2
.LINE 766

	LD	BC,(IX+-74)
	LD	(IX+-19),BC
	LD	BC,_data_moves
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	BC,-426
	CALL	__istix
	LD	BC,-426
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-64)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  767			damage *= elements[data_moves[move].element][nonuserelement2];// /2
.LINE 767

	LD	BC,-426
	CALL	__ildix
	LD	IY,HL
	LD	H,(IY+14)
	PUSH	IY
	PUSH	BC
	LD	IY,-470	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-470	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,18
	CALL	__imulu
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-65)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  768			damage /= 400;
.LINE 768

	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,400
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  769			if (data_moves[move].element == userelement1 || data_moves[move].element == userelement2) {
.LINE 769

	LD	A,(IX+-109)
	PUSH	IY
	PUSH	BC
	LD	IY,-470	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CP	A,H
	JR	Z,L_295
	LEA	IY,IX+-128
	LD	BC,(IY+-3)
	LD	(IX+-77),BC
	LD	IY,(IX+-77)
	LD	A,(IY+14)
	CP	A,(IX+-110)
	JR	NZ,L_308
L_295:
;  770				damage *= 1.5;
.LINE 770

	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__ultof
	LD	HL,12582912
	LD	E,63
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  771			}
L_308:
.LINE 771

;  772	
;  773			/* Critical Hit */
;  774			if (data_moves[move].statustype == 24 || highcritratio[player] || data_moves[move].statustype == 36) {
.LINE 774

	LD	BC,(IX+-77)
	LD	(IX+-104),BC
	LEA	IY,IX+-128
	LD	(IY+-78),BC
	LD	IY,(IX+-104)
	LD	A,(IY+19)
	CP	A,24
	JR	Z,L_306
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_306
	LD	BC,(IX+-104)
	LEA	IY,IX+-128
	LD	(IY+-78),BC
	LD	IY,(IX+-104)
	LD	A,(IY+19)
	CP	A,36
	JR	NZ,L_307
L_306:
;  775				if (player) {
.LINE 775

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_301
;  776					if (data_pokemon[party[currentplayer].id].basespeed * 4 < (rand() % 256)) {
.LINE 776

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_313
;  777						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 777

	LD	IY,(IX+-22)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  778					}
;  779				}
;  780				else {
.LINE 780

	JR	L_313
L_301:
;  781					if (data_pokemon[enemyparty[currentenemy].id].basespeed * 4 < (rand() % 256)) {
.LINE 781

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_313
;  782						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 782

	LD	HL,-143
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(HL)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  783					}
;  784				}
;  785			}
;  786			else {
.LINE 786

	JR	L_313
L_307:
;  787				if (player) {
.LINE 787

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_305
;  788					if (data_pokemon[party[currentplayer].id].basespeed / 2 < (rand() % 256)) {
.LINE 788

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_313
;  789						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 789

	LD	HL,-140
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(HL)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  790					}
;  791				}
;  792				else {
.LINE 792

	JR	L_313
L_305:
;  793					if (data_pokemon[enemyparty[currentenemy].id].basespeed / 2 < (rand() % 256)) {
.LINE 793

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_313
;  794						damage *= (2 * userlevel + 5) / (userlevel + 5);
.LINE 794

	LD	HL,-137
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(HL)
	LEA	DE,IY+5
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  795					}
;  796				}
;  797			}
L_313:
.LINE 797

;  798	
;  799			takedamage(!player, damage);
.LINE 799

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_310
	LD	HL,1
	LD	BC,-350
	CALL	__istix
	JR	L_311
L_310:
	OR	A,A
	SBC	HL,HL
	LD	BC,-350
	CALL	__istix
L_311:
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,-350
	CALL	__bldix
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  800	
;  801			if (data_moves[move].statustype == 21 || data_moves[move].statustype == 26) {
.LINE 801

	LEA	IY,IX+-128
	LD	BC,(IY+-78)
	LD	(IY+-84),BC
	LD	IY,(IY+-84)
	LD	A,(IY+19)
	CP	A,21
	JR	Z,L_315
	LEA	IY,IX+-128
	LD	IY,(IY+-84)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_317
L_315:
;  802				heal(player, damage / 2);
.LINE 802

	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	LD	L,1
	CALL	__lshru
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  803			}
L_317:
.LINE 803

;  804			if (data_moves[move].statustype == 19) {
.LINE 804

	LD	BC,(IX+-19)
	LD	(IX+-74),BC
	LD	HL,(IX+-19)
	LD	BC,-305
	CALL	__istix
	LD	HL,(IX+-19)
	LD	BC,-302
	CALL	__istix
	LD	BC,_data_moves
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	(IX+-125),HL
	LD	IY,(IX+-125)
	LD	A,(IY+19)
	CP	A,19
	JR	NZ,L_320
;  805				takedamage(player, damage / 3);
.LINE 805

	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,3
	XOR	A,A
	CALL	__ldivu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  806			}
L_320:
.LINE 806

;  807			if (hitcount > 0) {
.LINE 807

	XOR	A,A
	CP	A,(IX+-36)
	JR	NC,L_322
;  808				hitcount--;
.LINE 808

	DEC	(IX+-36)
;  809				redrawcharacters();
.LINE 809

	CALL	_redrawcharacters
;  810				Wait(15);
.LINE 810

	LD	BC,15
	PUSH	BC
	CALL	_Wait
	POP	BC
;  811				goto startattack;
.LINE 811

	JR	L_259
;  812			}
L_322:
.LINE 812

;  813	
;  814			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] < 4) {
.LINE 814

	LD	BC,_data_moves
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	BC,-429
	CALL	__istix
	LD	BC,-429
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-64)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-429
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-65)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JP	P,L_324
;  815				text_Display("Not Very Effective", true);
.LINE 815

	LD	BC,1
	PUSH	BC
	LD	BC,L__199
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  816			}
L_324:
.LINE 816

;  817			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] > 4) {
.LINE 817

	LD	BC,_data_moves
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	BC,-432
	CALL	__istix
	LD	BC,-432
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-64)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-432
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-65)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_335
;  818				text_Display("Super Effective", true);
.LINE 818

	LD	BC,1
	PUSH	BC
	LD	BC,L__201
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  819			}
L_335:
.LINE 819

;  820			if (rage[!player]) {
.LINE 820

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_326
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-18),BC
	JR	L_327
L_326:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-18),BC
L_327:
	LD	BC,_rage
	LD	HL,-146
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_336
;  821				statmods[!player][0]++;
.LINE 821

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_330
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-21),BC
	JR	L_331
L_330:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-21),BC
L_331:
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-21)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-435
	CALL	__istix
	LD	BC,-435
	CALL	__ildix
	LD	IY,HL
	LD	BC,-435
	CALL	__ildix
	LD	A,(IY)
	INC	A
	LD	(HL),A
;  822			}
L_336:
.LINE 822

;  823			redrawcharacters();
.LINE 823

	CALL	_redrawcharacters
;  824		}
;  825		/* Raise user stat */
;  826		else if (data_moves[move].type == 2) {
.LINE 826

	JR	L_583
L_448:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-87),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	NZ,L_446
;  827			if (statmods[player][data_moves[move].statustype] + data_moves[move].power > 12) {
.LINE 827

	LD	BC,-305
	CALL	__ildix
	LD	(IX+-45),HL
	LD	BC,_data_moves
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	BC,-438
	CALL	__istix
	LD	BC,(IX+-98)
	LEA	IY,IX+-128
	LD	(IY+-93),BC
	LD	BC,-438
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-221
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-438
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	JP	P,L_338
;  828				statmods[player][data_moves[move].statustype] = 12;
.LINE 828

	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-87),BC
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-221
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	LD	(HL),12
;  829			}
;  830			else {
.LINE 830

	JR	L_339
L_338:
;  831				statmods[player][data_moves[move].statustype] += data_moves[move].power;
.LINE 831

	LD	BC,_data_moves
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	BC,-444
	CALL	__istix
	LD	HL,(IX+-60)
	LD	BC,-356
	CALL	__istix
	LD	BC,_statmods
	LD	HL,(IX+-60)
	ADD	HL,BC
	LD	BC,-441
	CALL	__istix
	LD	BC,-444
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-441
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-590	; spill
	CALL	__istix
	POP	BC
	LD	BC,-444
	CALL	__ildix
	LD	DE,HL
	LD	BC,-444
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-441
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-536	; spill
	CALL	__istix
	LD	BC,-590	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-536	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	ADD	A,(IY+16)
	LD	(HL),A
;  832			}
L_339:
.LINE 832

;  833			sprintf(str, "%s's %s rose", username, text_status2[data_moves[move].statustype]);
.LINE 833

	LEA	IY,IX+-128
	LD	IY,(IY+-87)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__207
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  834			text_Display(str, true);
.LINE 834

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  835		}
;  836		/* Lower non-user stat */
;  837		else if (data_moves[move].type == 3) {
.LINE 837

	JR	L_583
L_446:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-96),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,3
	JR	NZ,L_444
;  838			if (statmods[!player][data_moves[move].statustype] < data_moves[move].power) {
.LINE 838

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_341
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-24),BC
	JR	L_342
L_341:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-24),BC
L_342:
	LD	BC,-302
	CALL	__ildix
	LD	(IX+-48),HL
	LD	BC,_data_moves
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	BC,-447
	CALL	__istix
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-24)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,-447
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	IY,HL
	LD	BC,-447
	CALL	__ildix
	LD	A,(IY)
	LD	IY,HL
	CP	A,(IY+16)
	JR	NC,L_353
;  839				statmods[!player][data_moves[move].statustype] = 0;
.LINE 839

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_345
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-27),BC
	JR	L_346
L_345:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-27),BC
L_346:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-96),BC
	LD	HL,7
	LD	BC,(IY+-27)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),0
;  840			}
;  841			else {
.LINE 841

	JR	L_354
L_353:
;  842				statmods[!player][data_moves[move].statustype] -= data_moves[move].power;
.LINE 842

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_349
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-30),BC
	JR	L_350
L_349:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-30),BC
L_350:
	LD	BC,_data_moves
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	BC,-453
	CALL	__istix
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-30)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-450
	CALL	__istix
	LD	BC,-453
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-450
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-587	; spill
	CALL	__istix
	POP	BC
	LD	BC,-453
	CALL	__ildix
	LD	DE,HL
	LD	BC,-453
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	IY,-450
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	ADD	HL,BC
	PUSH	BC
	LD	BC,-536	; spill
	CALL	__istix
	LD	BC,-587	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-536	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	SUB	A,(IY+16)
	LD	(HL),A
;  843			}
L_354:
.LINE 843

;  844			sprintf(str, "%s's %s fell", nonusername, text_status2[data_moves[move].statustype]);
.LINE 844

	LEA	IY,IX+-128
	LD	IY,(IY+-96)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__213
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  845			text_Display(str, true);
.LINE 845

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  846		}
;  847		else if (data_moves[move].type == 5) {
.LINE 847

	JR	L_583
L_444:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,5
	JR	NZ,L_442
;  848			takedamage(!player, data_moves[move].power);
.LINE 848

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_356
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-33),BC
	JR	L_357
L_356:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-33),BC
L_357:
	LD	IY,(IX+-3)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-33)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  849		}
;  850		else if (data_moves[move].type == 6 || data_moves[move].type == 7) {
.LINE 850

	JR	L_583
L_442:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,6
	JR	Z,L_439
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,7
	JR	NZ,L_440
L_439:
;  851			if (wild) {
.LINE 851

	LD	A,(_wild)
	OR	A,A
	JR	Z,L_361
;  852				run = true;
.LINE 852

	LD	A,1
	LD	(_run),A
;  853			}
;  854			else {
.LINE 854

	JR	L_583
L_361:
;  855				text_Display("It Failed", true);
.LINE 855

	LD	BC,1
	PUSH	BC
	LD	BC,L__219
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  856			}
;  857		}
;  858		else if (data_moves[move].type == 8) {
.LINE 858

	JR	L_583
L_440:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,8
	JR	NZ,L_438
;  859			heal(player, stats[player].health / 2);
.LINE 859

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  860		}
;  861		else if (data_moves[move].type == 9) {
.LINE 861

	JR	L_583
L_438:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,9
	JR	NZ,L_436
;  862			takedamage(!player, userlevel);
.LINE 862

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_363
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-36),BC
	JR	L_364
L_363:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-36),BC
L_364:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-36)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  863		}
;  864		else if (data_moves[move].type == 10) {
.LINE 864

	JR	L_583
L_436:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,10
	JR	NZ,L_434
;  865			takedamage(!player, userlevel * 20 / (10 + (rand() % 20)));
.LINE 865

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_367
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-42),BC
	JR	L_368
L_367:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-42),BC
L_368:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,20
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+10
	LD	HL,DE
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-42)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  866		}
;  867		else if (data_moves[move].type == 11) {
.LINE 867

	JR	L_583
L_434:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,11
	JR	NZ,L_432
;  868			takedamage(!player, stats[!player].health / 2);
.LINE 868

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_371
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-45),BC
	JR	L_372
L_371:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-45),BC
L_372:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_375
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-51),BC
	JR	L_376
L_375:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-51),BC
L_376:
	LD	HL,12
	LEA	IY,IX+-128
	LD	BC,(IY+-51)
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-45)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  869		}
;  870		else if (data_moves[move].type == 12) {
.LINE 870

	JR	L_583
L_432:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,12
	JR	NZ,L_430
;  871			i = 0;
.LINE 871

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  872			while (i < sizeof(statmods[player])) {
.LINE 872

	JR	L_379
L_380:
;  873				statmods[player][i] = 6;
.LINE 873

	LD	BC,(IX+-119)
	LD	(IX+-57),BC
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-57)
	ADD	HL,BC
	LD	(HL),6
;  874				i++;
.LINE 874

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  875			}
L_379:
.LINE 875

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,7
	OR	A,A
	SBC	HL,BC
	JR	C,L_380
;  876			while (i < sizeof(statmods[!player])) {
.LINE 876

	JR	L_386
L_387:
;  877				statmods[player][i] = 6;
.LINE 877

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-57)
	ADD	HL,BC
	LD	(HL),6
;  878				i++;
.LINE 878

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  879			}
L_386:
.LINE 879

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,7
	OR	A,A
	SBC	HL,BC
	JR	C,L_387
	JR	L_583
;  880		}
;  881		else if (data_moves[move].type == 13) {
L_430:
.LINE 881

	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,13
	JR	NZ,L_428
;  882			*currentStatusPointer[player] = 4;
.LINE 882

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),4
;  883			heal(player, 1000);
.LINE 883

	LD	BC,1000
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  884		}
;  885		else if (data_moves[move].type == 14) {
.LINE 885

	JR	L_583
L_428:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,14
	JR	NZ,L_426
;  886			disabledturns[!player] = (rand() % 7) + 2;
.LINE 886

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_390
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-54),BC
	JR	L_391
L_390:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-54),BC
L_391:
	CALL	_rand
	LD	BC,7
	CALL	__irems
	INC	HL
	INC	HL
	LD	A,L
	LD	BC,_disabledturns
	LD	HL,-182
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),A
;  887			disabledmove[!player] = lastmove[!player];
.LINE 887

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_398
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-57),BC
	JR	L_399
L_398:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-57),BC
L_399:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_394
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-60),BC
	JR	L_395
L_394:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-60),BC
L_395:
	LD	BC,_lastmove
	LD	HL,-185
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,_disabledmove
	LD	HL,-188
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
;  888		}
;  889		else if (data_moves[move].type == 15) {
.LINE 889

	JR	L_583
L_426:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,15
	JR	NZ,L_424
;  890			if ((int)userlevel - (int)nonuserlevel + 30 > (rand() % 100)) {
.LINE 890

	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-108)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	DE,IY+30
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_406
;  891				takedamage(!player, 800);
.LINE 891

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_402
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-63),BC
	JR	L_403
L_402:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-63),BC
L_403:
	LD	BC,800
	PUSH	BC
	LEA	IY,IX+-128
	LD	A,(IY+-63)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  892			}
;  893			else {
.LINE 893

	JR	L_583
L_406:
;  894				text_Display("It Missed", true);
.LINE 894

	LD	BC,1
	PUSH	BC
	LD	BC,L__239
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  895			}
;  896		}
;  897		else if (data_moves[move].type == 18) {
.LINE 897

	JR	L_583
L_424:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,18
	JR	NZ,L_422
;  898			if (player) {
.LINE 898

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_408
;  899				originalpokemon[player] = party[currentplayer];
.LINE 899

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-479	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_party
	LD	BC,-479	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	BC,-569	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-572	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_originalpokemon
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-575	; spill
	CALL	__istix
	POP	HL
	LD	BC,-572	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-575	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-548	; spill
	CALL	__istix
	POP	HL
	LD	BC,-569	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	HL,DE
	PUSH	BC
	LD	BC,-548	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	BC,34
	LDIR	
;  900				party[currentplayer] = enemyparty[currentenemy];
.LINE 900

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	PUSH	BC
	PUSH	HL
	LD	BC,-578	; spill
	CALL	__istix
	LD	BC,-581	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_party
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-584	; spill
	CALL	__istix
	POP	HL
	LD	BC,-581	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	POP	BC
	LD	BC,-479	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	PUSH	BC
	LD	BC,-584	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-548	; spill
	CALL	__istix
	POP	HL
	LD	BC,-578	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	HL,DE
	PUSH	BC
	LD	BC,-548	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	BC,34
	LDIR	
;  901			}
;  902			else {
.LINE 902

	JR	L_583
L_408:
;  903				originalpokemon[player] = enemyparty[currentenemy];
.LINE 903

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-476	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_enemyparty
	LD	BC,-476	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	BC,-551	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-554	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_originalpokemon
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-557	; spill
	CALL	__istix
	POP	HL
	LD	BC,-554	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-557	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-548	; spill
	CALL	__istix
	POP	HL
	LD	BC,-551	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	HL,DE
	PUSH	BC
	LD	BC,-548	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	BC,34
	LDIR	
;  904				enemyparty[currentenemy] = party[currentplayer];
.LINE 904

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	DE,_party
	ADD	HL,DE
	PUSH	BC
	PUSH	HL
	LD	BC,-560	; spill
	CALL	__istix
	LD	BC,-563	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_enemyparty
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-566	; spill
	CALL	__istix
	POP	HL
	LD	BC,-563	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	POP	BC
	LD	BC,-476	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	PUSH	BC
	LD	BC,-566	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-548	; spill
	CALL	__istix
	POP	HL
	LD	BC,-560	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	HL,DE
	PUSH	BC
	LD	BC,-548	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	BC,34
	LDIR	
;  905			}
;  906		}
;  907		else if (data_moves[move].type == 20) {
.LINE 907

	JR	L_583
L_422:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,20
	JR	NZ,L_420
;  908			takedamage(!player, bidedamage[player] * 2);
.LINE 908

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_410
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-66),BC
	JR	L_411
L_410:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-66),BC
L_411:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_bidedamage
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	ADD	HL,HL
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-66)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  909			attackturns[player] = 0;
.LINE 909

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(HL),0
;  910		}
;  911		else if (data_moves[move].type == 21) {
.LINE 911

	JR	L_583
L_420:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,21
	JR	NZ,L_418
;  912			if (player) {
.LINE 912

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_414
;  913				data_pokemon[party[currentplayer].id].element1 = data_pokemon[enemyparty[currentenemy].id].element1;
.LINE 913

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	DE,_party
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	DE,_data_pokemon
	ADD	HL,DE
	LD	IY,BC
	LD	A,(IY+16)
	LD	IY,HL
	LD	(IY+16),A
;  914			}
;  915			else {
.LINE 915

	JR	L_415
L_414:
;  916				data_pokemon[enemyparty[currentenemy].id].element1 = data_pokemon[party[currentplayer].id].element1;
.LINE 916

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	DE,_data_pokemon
	ADD	HL,DE
	LD	IY,BC
	LD	A,(IY+16)
	LD	IY,HL
	LD	(IY+16),A
;  917			}
L_415:
.LINE 917

;  918			converted[player] = true;
.LINE 918

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_converted
	ADD	HL,BC
	LD	(HL),1
;  919		}
;  920		else if (data_moves[move].type == 22) {
.LINE 920

	JR	L_583
L_418:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,22
	JR	NZ,L_583
;  921			takedamage(player, stats[player].health / 4);
.LINE 921

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-102),HL
	LD	IY,(IY+-102)
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,4
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  922			substitutehealth[player] += stats[player].health / 4;
.LINE 922

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_substitutehealth
	ADD	HL,BC
	LD	BC,-456
	CALL	__istix
	LEA	IY,IX+-128
	LD	IY,(IY+-102)
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,4
	CALL	__idivs
	LD	DE,HL
	LD	BC,-456
	CALL	__ildix
	LD	IY,HL
	LD	BC,-456
	CALL	__ildix
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-542	; spill
	CALL	__istix
	POP	HL
	PUSH	HL
	LD	BC,-545	; spill
	CALL	__istix
	POP	HL
	LD	BC,-542	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	BC,(IY)
	LD	HL,DE
	ADD.SIS	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-545	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,IY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  923			sprintf(str, "%s created a substitute to take damage", username);
.LINE 923

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__247
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  924			text_Display(str, true);
.LINE 924

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  925		}
L_583:
.LINE 925

;  926		/* Apply Stat or Status Effects */
;  927		if (data_moves[move].type == 4 || (rand() % 100) < data_moves[move].statuschance) {
.LINE 927

	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-116),HL
	LD	BC,_data_moves
	LD	HL,(IX+-116)
	ADD	HL,BC
	LD	(IX+-68),HL
	LEA	IY,IX+-128
	LD	(IY+-108),HL
	LD	IY,(IX+-68)
	LD	A,(IY+15)
	CP	A,4
	JR	Z,L_582
	LD	BC,(IX+-68)
	LEA	IY,IX+-128
	LD	(IY+-108),BC
	LD	BC,(IX+-68)
	LD	(IY+-114),BC
	LD	IY,(IX+-68)
	LD	A,(IY+20)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-599
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-599
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-600
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_586
L_582:
;  928			if (data_moves[move].statustype == 30) {
.LINE 928

	LEA	IY,IX+-128
	LD	BC,(IY+-108)
	LD	(IX+-39),BC
	LD	IY,(IX+-39)
	LD	A,(IY+19)
	CP	A,30
	JR	NZ,L_452
;  929				e = rand() % 3;
.LINE 929

	CALL	_rand
	LD	BC,3
	CALL	__irems
	LD	BC,HL
	LD	HL,_e
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  930			}
;  931			else {
.LINE 931

	JR	L_471
L_452:
;  932				e = 3;
.LINE 932

	LD	HL,_e
	LD	(HL),3
	INC	HL
	LD	(HL),0
;  933			}
L_471:
.LINE 933

;  934			if (data_moves[move].statustype < 7) {
.LINE 934

	LD	BC,(IX+-39)
	LEA	IY,IX+-128
	LD	(IY+-123),BC
	LD	BC,(IX+-39)
	LD	(IX+-80),BC
	LD	IY,(IX+-39)
	LD	A,(IY+19)
	CP	A,7
	JR	NC,L_484
;  935				if (mistturns[!player] || statmods[!player][data_moves[move].statustype] == 0) {
.LINE 935

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_454
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-69),BC
	JR	L_455
L_454:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-69),BC
L_455:
	LD	BC,_mistturns
	LD	HL,-197
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_468
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_458
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-72),BC
	JR	L_459
L_458:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-72),BC
L_459:
	LD	BC,(IX+-39)
	LEA	IY,IX+-128
	LD	(IY+-123),BC
	LD	BC,(IX+-39)
	LD	(IX+-80),BC
	LD	HL,7
	LD	BC,(IY+-72)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-39)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_469
L_468:
;  936					if (data_moves[move].type == 4) {
.LINE 936

	LEA	IY,IX+-128
	LD	BC,(IY+-123)
	LD	(IX+-80),BC
	LD	IY,(IX+-80)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_484
;  937						text_Display("It Failed", true);
.LINE 937

	LD	BC,1
	PUSH	BC
	LD	BC,L__257
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  938					}
;  939				}
;  940				else {
.LINE 940

	JR	L_484
L_469:
;  941					statmods[!player][data_moves[move].statustype] --;
.LINE 941

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_464
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-75),BC
	JR	L_465
L_464:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-75),BC
L_465:
	LD	HL,7
	LEA	IY,IX+-128
	LD	BC,(IY+-75)
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-462
	CALL	__istix
	LD	BC,_data_moves
	LD	HL,(IX+-116)
	ADD	HL,BC
	LD	BC,-459
	CALL	__istix
	LD	BC,-459
	CALL	__ildix
	LD	IY,HL
	LD	B,(IY+19)
	LD	A,B
	UEXT	HL
	LD	L,A
	LD	IY,-462
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	ADD	HL,DE
	PUSH	BC
	LD	BC,-539	; spill
	CALL	__istix
	POP	BC
	LD	A,B
	UEXT	HL
	LD	L,A
	LD	IY,-462
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	ADD	HL,DE
	PUSH	BC
	LD	BC,-536	; spill
	CALL	__istix
	LD	BC,-539	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-536	; unspill
	CALL	__ildix
	POP	BC
	DEC	A
	LD	(HL),A
;  942					sprintf(str, "%s's %s fell", nonusername, text_status2[data_moves[move].statustype]);
.LINE 942

	LD	A,B
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__259
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  943					text_Display(str, true);
.LINE 943

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  944				}
;  945			}
L_484:
.LINE 945

;  946			if (data_moves[move].statustype == 7) {
.LINE 946

	LD	BC,(IX+-80)
	LD	(IX+-83),BC
	LEA	IY,IX+-128
	LD	(IY+-126),BC
	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,7
	JR	NZ,L_498
;  947				if (*currentStatusPointer[!player] == 0) {
.LINE 947

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_473
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-81),BC
	JR	L_474
L_473:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-81),BC
L_474:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-81)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_482
;  948					*currentStatusPointer[!player] = 1;
.LINE 948

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_477
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-90),BC
	JR	L_478
L_477:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-90),BC
L_478:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-90)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),1
;  949					sprintf(str, "%s was poisoned", nonusername);
.LINE 949

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__264
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  950					text_Display(str, true);
.LINE 950

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  951				}
;  952				else if (data_moves[move].type == 4) {
.LINE 952

	JR	L_498
L_482:
	LD	BC,(IX+-83)
	LEA	IY,IX+-128
	LD	(IY+-126),BC
	LD	IY,(IX+-83)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_498
;  953					text_Display("It failed", true);
.LINE 953

	LD	BC,1
	PUSH	BC
	LD	BC,L__266
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  954				}
;  955			}
L_498:
.LINE 955

;  956			if (data_moves[move].statustype == 8 || e == 0) {
.LINE 956

	LEA	IY,IX+-128
	LD	BC,(IY+-126)
	LD	(IX+-86),BC
	LD	HL,BC
	LD	BC,-260
	CALL	__istix
	LD	IY,(IX+-86)
	LD	A,(IY+19)
	CP	A,8
	JR	Z,L_497
	LD	HL,(_e)
	CALL	__scmpzero
	JR	NZ,L_512
L_497:
;  957				if (*currentStatusPointer[!player] == 0) {
.LINE 957

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_487
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-99),BC
	JR	L_488
L_487:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-99),BC
L_488:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-99)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_496
;  958					*currentStatusPointer[!player] = 2;
.LINE 958

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_491
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-105),BC
	JR	L_492
L_491:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-105),BC
L_492:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-105)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),2
;  959					sprintf(str, "%s was burned", nonusername);
.LINE 959

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__272
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  960					text_Display(str, true);
.LINE 960

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  961				}
;  962				else if (data_moves[move].type == 4) {
.LINE 962

	JR	L_512
L_496:
	LD	HL,(IX+-86)
	LD	BC,-260
	CALL	__istix
	LD	IY,(IX+-86)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_512
;  963					text_Display("It failed", true);
.LINE 963

	LD	BC,1
	PUSH	BC
	LD	BC,L__274
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  964				}
;  965			}
L_512:
.LINE 965

;  966			if (data_moves[move].statustype == 9 || e == 1) {
.LINE 966

	LD	BC,-260
	CALL	__ildix
	LD	(IX+-89),HL
	LD	BC,-266
	CALL	__istix
	LD	IY,(IX+-89)
	LD	A,(IY+19)
	CP	A,9
	JR	Z,L_511
	LD.LIS	BC,1
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_525
L_511:
;  967				if (*currentStatusPointer[!player] == 0) {
.LINE 967

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_501
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-111),BC
	JR	L_502
L_501:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-111),BC
L_502:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-111)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_510
;  968					*currentStatusPointer[!player] = 3;
.LINE 968

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_505
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-117),BC
	JR	L_506
L_505:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-117),BC
L_506:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-117)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),3
;  969					sprintf(str, "%s was paralysed", nonusername);
.LINE 969

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__280
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  970					text_Display(str, true);
.LINE 970

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  971				}
;  972				else if (data_moves[move].type == 4) {
.LINE 972

	JR	L_525
L_510:
	LD	HL,(IX+-89)
	LD	BC,-266
	CALL	__istix
	LD	IY,(IX+-89)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_525
;  973					text_Display("It failed", true);
.LINE 973

	LD	BC,1
	PUSH	BC
	LD	BC,L__282
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  974				}
;  975			}
L_525:
.LINE 975

;  976			if (data_moves[move].statustype == 10) {
.LINE 976

	LD	BC,-266
	CALL	__ildix
	LD	(IX+-92),HL
	LD	BC,-272
	CALL	__istix
	LD	IY,(IX+-92)
	LD	A,(IY+19)
	CP	A,10
	JR	NZ,L_539
;  977				if (*currentStatusPointer[!player] == 0) {
.LINE 977

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_514
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-120),BC
	JR	L_515
L_514:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-120),BC
L_515:
	LD	HL,3
	LEA	IY,IX+-128
	LD	BC,(IY+-120)
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_523
;  978					*currentStatusPointer[!player] = 4;
.LINE 978

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_518
	LD	HL,1
	LD	BC,-257
	CALL	__istix
	JR	L_519
L_518:
	OR	A,A
	SBC	HL,HL
	LD	BC,-257
	CALL	__istix
L_519:
	LD	DE,3
	CALL	__ildix
	LD	BC,HL
	LD	HL,DE
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),4
;  979					sprintf(str, "%s fell asleep", nonusername);
.LINE 979

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__287
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  980					text_Display(str, true);
.LINE 980

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  981				}
;  982				else if (data_moves[move].type == 4) {
.LINE 982

	JR	L_539
L_523:
	LD	HL,(IX+-92)
	LD	BC,-272
	CALL	__istix
	LD	IY,(IX+-92)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_539
;  983					text_Display("It failed", true);
.LINE 983

	LD	BC,1
	PUSH	BC
	LD	BC,L__289
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  984				}
;  985			}
L_539:
.LINE 985

;  986			if (data_moves[move].statustype == 11 || e == 2) {
.LINE 986

	LD	BC,-272
	CALL	__ildix
	LD	(IX+-95),HL
	LD	BC,-278
	CALL	__istix
	LD	IY,(IX+-95)
	LD	A,(IY+19)
	CP	A,11
	JR	Z,L_538
	LD.LIS	BC,2
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_545
L_538:
;  987				if (*currentStatusPointer[!player] == 0) {
.LINE 987

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_528
	LD	HL,1
	LD	BC,-263
	CALL	__istix
	JR	L_529
L_528:
	OR	A,A
	SBC	HL,HL
	LD	BC,-263
	CALL	__istix
L_529:
	LD	DE,3
	CALL	__ildix
	LD	BC,HL
	LD	HL,DE
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_537
;  988					*currentStatusPointer[!player] = 5;
.LINE 988

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_532
	LD	HL,1
	LD	BC,-269
	CALL	__istix
	JR	L_533
L_532:
	OR	A,A
	SBC	HL,HL
	LD	BC,-269
	CALL	__istix
L_533:
	CALL	__ildix
	LD	BC,HL
	LD	HL,DE
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),5
;  989					sprintf(str, "%s was frozen", nonusername);
.LINE 989

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__295
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  990					text_Display(str, true);
.LINE 990

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  991				}
;  992				else if (data_moves[move].type == 4) {
.LINE 992

	JR	L_545
L_537:
	LD	HL,(IX+-95)
	LD	BC,-278
	CALL	__istix
	LD	IY,(IX+-95)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_545
;  993					text_Display("It failed", true);
.LINE 993

	LD	BC,1
	PUSH	BC
	LD	BC,L__297
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  994				}
;  995			}
L_545:
.LINE 995

;  996	
;  997			if (data_moves[move].statustype == 12) {
.LINE 997

	LD	BC,-278
	CALL	__ildix
	LD	(IX+-16),HL
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,12
	JR	NZ,L_551
;  998				confusedturns[!player] = (rand() % 4) + 1;
.LINE 998

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_541
	LD	HL,1
	LD	BC,-275
	CALL	__istix
	JR	L_542
L_541:
	OR	A,A
	SBC	HL,HL
	LD	BC,-275
	CALL	__istix
L_542:
	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	A,L
	LD	BC,_confusedturns
	LD	HL,-275
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),A
;  999				sprintf(str, "%s was confused", nonusername);
.LINE 999

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__300
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1000				text_Display(str, true);
.LINE 1000

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1001			}
L_551:
.LINE 1001

; 1002			if (data_moves[move].statustype == 13) {
.LINE 1002

	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,13
	JR	NZ,L_557
; 1003				leech[!player] = true;
.LINE 1003

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_547
	LD	HL,1
	LD	BC,-281
	CALL	__istix
	JR	L_548
L_547:
	OR	A,A
	SBC	HL,HL
	LD	BC,-281
	CALL	__istix
L_548:
	LD	BC,_leech
	LD	HL,-281
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),1
; 1004				sprintf(str, "%s was leeched", nonusername);
.LINE 1004

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__303
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1005				text_Display(str, true);
.LINE 1005

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1006			}
L_557:
.LINE 1006

; 1007			if (data_moves[move].statustype == 14) {
.LINE 1007

	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,14
	JR	NZ,L_559
; 1008				trapturns[!player] = (rand() % 2) + 4;
.LINE 1008

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_553
	LD	HL,1
	LD	BC,-284
	CALL	__istix
	JR	L_554
L_553:
	OR	A,A
	SBC	HL,HL
	LD	BC,-284
	CALL	__istix
L_554:
	CALL	_rand
	LD	BC,2
	CALL	__irems
	LD	IY,HL
	LEA	HL,IY+4
	LD	A,L
	LD	BC,_trapturns
	LD	HL,-284
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),A
; 1009				sprintf(str, "%s was trapped", nonusername);
.LINE 1009

	LD	HL,IX
	LD	BC,-396
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__306
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1010				text_Display(str, true);
.LINE 1010

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1011			}
L_559:
.LINE 1011

; 1012			if (data_moves[move].statustype == 15) {
.LINE 1012

	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,15
	JR	NZ,L_561
; 1013				reflectturns[player] = 5;
.LINE 1013

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(HL),5
; 1014			}
L_561:
.LINE 1014

; 1015			if (data_moves[move].statustype == 16) {
.LINE 1015

	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,16
	JR	NZ,L_563
; 1016				lightscreenturns[player] = 5;
.LINE 1016

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(HL),5
; 1017			}
L_563:
.LINE 1017

; 1018			if (data_moves[move].statustype == 17) {
.LINE 1018

	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,17
	JR	NZ,L_570
; 1019				mistturns[player] = 5;
.LINE 1019

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),5
; 1020			}
L_570:
.LINE 1020

; 1021			if (data_moves[move].statustype == 18 || data_moves[move].statustype == 38) {
.LINE 1021

	LD	HL,(IX+-16)
	LD	BC,-287
	CALL	__istix
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,18
	JR	Z,L_569
	LD	HL,(IX+-16)
	CALL	__istix
	LD	IY,(IX+-16)
	LD	A,(IY+19)
	CP	A,38
	JR	NZ,L_572
L_569:
; 1022				flinch[!player] = true;
.LINE 1022

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_566
	LD	HL,1
	LD	BC,-290
	CALL	__istix
	JR	L_567
L_566:
	OR	A,A
	SBC	HL,HL
	LD	BC,-290
	CALL	__istix
L_567:
	LD	BC,_flinch
	LD	HL,-290
	LD	DE,IX
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	LD	(HL),1
; 1023			}
L_572:
.LINE 1023

; 1024			if (data_moves[move].statustype == 27) {
.LINE 1024

	LD	BC,-287
	CALL	__ildix
	LD	(IX+-42),HL
	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,27
	JR	NZ,L_576
; 1025				highcritratio[player] = true;
.LINE 1025

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),1
; 1026			}
L_576:
.LINE 1026

; 1027			if (data_moves[move].statustype == 28) {
.LINE 1027

	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,28
	JR	NZ,L_578
; 1028				statmods[player][0]++;
.LINE 1028

	LD	BC,-356
	CALL	__ildix
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-468
	CALL	__istix
	LD	BC,-468
	CALL	__ildix
	LD	IY,HL
	LD	BC,-468
	CALL	__ildix
	LD	A,(IY)
	INC	A
	LD	(HL),A
; 1029				statmods[player][1]++;
.LINE 1029

	LD	HL,-468
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	INC	HL
	LD	BC,-465
	CALL	__istix
	LD	BC,-465
	CALL	__ildix
	LD	IY,-468
	LD	BC,IX
	ADD	IY,BC
	LD	IY,(IY)
	LD	A,(HL)
	INC	A
	LD	(IY+1),A
; 1030			}
L_578:
.LINE 1030

; 1031			if (data_moves[move].statustype == 29) {
.LINE 1031

	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,29
	JR	NZ,L_581
; 1032				rage[player] = true;
.LINE 1032

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),1
; 1033			}
L_581:
.LINE 1033

; 1034			if (data_moves[move].statustype == 35 && player) {
.LINE 1034

	LD	BC,(IX+-42)
	LEA	IY,IX+-128
	LD	(IY+-114),BC
	LD	IY,(IX+-42)
	LD	A,(IY+19)
	CP	A,35
	JR	NZ,L_586
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_586
; 1035				payday += party[currentplayer].level*2;
.LINE 1035

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	C,(IY+9)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	LD	BC,(_payday)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_payday
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1036			}
; 1037		}
L_586:
.LINE 1037

; 1038	
; 1039		
; 1040	
; 1041		if (attackturns[player] == 1 && data_moves[move].statustype == 32) {
.LINE 1041

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	BC,-293
	CALL	__istix
	LD	BC,-293
	CALL	__ildix
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_587
	LEA	IY,IX+-128
	LD	IY,(IY+-114)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_587
; 1042			attackturns[player] = 0;
.LINE 1042

	LD	BC,-293
	CALL	__ildix
	LD	(HL),0
; 1043			confusedturns[player] = (rand() % 4) + 1;
.LINE 1043

	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	B,L
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_confusedturns
	ADD	HL,DE
	LD	(HL),B
; 1044			sprintf(str, "%s became confused", username);
.LINE 1044

	LD	HL,IX
	LD	BC,-376
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__320
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1045			text_Display(str, true);
.LINE 1045

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1046		}
; 1047	}
L_587:
.LINE 1047

	LD	SP,IX
	POP	IX
	RET	


;**************************** _attack ***************************
;Name                         Addr/Register   Size   Type
;_payday                             STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_e                                  IMPORT      2   variable
;_substitutehealth                   STATIC      4   variable
;_converted                          STATIC      2   variable
;_originalpokemon                    STATIC     68   variable
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_i                                  IMPORT      2   variable
;_run                                STATIC      1   variable
;_wild                               STATIC      1   variable
;_text_status2                       IMPORT    112   variable
;_Wait                               IMPORT  -----   function
;_redrawcharacters                   IMPORT  -----   function
;_heal                               IMPORT  -----   function
;_highcritratio                      STATIC      2   variable
;_elements                           IMPORT    324   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_statmodvalues                      STATIC     39   variable
;_statmods                           STATIC     14   variable
;_confusedturns                      STATIC      2   variable
;_currentStatusPointer               STATIC      6   variable
;_bidedamage                         STATIC      4   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_rand                               IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_flinch                             STATIC      2   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;_rage                               STATIC      2   variable
;nonusername                         IX-396     20   variable
;username                            IX-376     20   variable
;G_146                               IX-356      3   variable
;G_61                                IX-353      3   variable
;temp312                             IX-350      3   variable
;temp288                             IX-347      3   variable
;G_62                                IX-344      3   variable
;G_56                                IX-341      3   variable
;temp284                             IX-338      3   variable
;temp280                             IX-335      3   variable
;temp276                             IX-332      3   variable
;temp272                             IX-329      3   variable
;temp268                             IX-326      3   variable
;temp264                             IX-323      3   variable
;temp247                             IX-320      3   variable
;temp243                             IX-317      3   variable
;G_37                                IX-314      3   variable
;temp196                             IX-311      3   variable
;temp189                             IX-308      3   variable
;G_89                                IX-305      3   variable
;G_97                                IX-302      3   variable
;G_34                                IX-299      3   variable
;G_33                                IX-296      3   variable
;G_150                               IX-293      3   variable
;temp568                             IX-290      3   variable
;G_144                               IX-287      3   variable
;temp555                             IX-284      3   variable
;temp549                             IX-281      3   variable
;G_136                               IX-278      3   variable
;temp543                             IX-275      3   variable
;G_134                               IX-272      3   variable
;temp534                             IX-269      3   variable
;G_132                               IX-266      3   variable
;temp530                             IX-263      3   variable
;G_130                               IX-260      3   variable
;temp520                             IX-257      3   variable
;G_128                               IX-254      3   variable
;G_124                               IX-251      3   variable
;temp516                             IX-248      3   variable
;temp507                             IX-245      3   variable
;G_149                               IX-242      3   variable
;temp503                             IX-239      3   variable
;G_121                               IX-236      3   variable
;temp493                             IX-233      3   variable
;G_119                               IX-230      3   variable
;temp489                             IX-227      3   variable
;G_100                               IX-224      3   variable
;G_91                                IX-221      3   variable
;temp479                             IX-218      3   variable
;G_95                                IX-215      3   variable
;G_84                                IX-212      3   variable
;temp475                             IX-209      3   variable
;G_83                                IX-206      3   variable
;temp466                             IX-203      3   variable
;temp460                             IX-200      3   variable
;temp456                             IX-197      3   variable
;temp412                             IX-194      3   variable
;temp404                             IX-191      3   variable
;temp396                             IX-188      3   variable
;temp400                             IX-185      3   variable
;temp392                             IX-182      3   variable
;temp377                             IX-179      3   variable
;G_68                                IX-176      3   variable
;temp373                             IX-173      3   variable
;temp369                             IX-170      3   variable
;G_64                                IX-167      3   variable
;temp365                             IX-164      3   variable
;temp358                             IX-161      3   variable
;temp351                             IX-158      3   variable
;temp347                             IX-155      3   variable
;temp343                             IX-152      3   variable
;temp332                             IX-149      3   variable
;temp328                             IX-146      3   variable
;G_80                                IX-143      3   variable
;G_81                                IX-140      3   variable
;G_82                                IX-137      3   variable
;G_65                                IX-134      3   variable
;G_76                                IX-131      3   variable
;G_74                                IX-128      3   variable
;G_66                                IX-125      3   variable
;G_46                                IX-122      3   variable
;G_110                               IX-119      3   variable
;G_125                               IX-116      3   variable
;G_36                                IX-113      3   variable
;userelement2                        IX-110      1   variable
;userelement1                        IX-109      1   variable
;nonuserlevel                        IX-108      1   variable
;G_43                                IX-107      3   variable
;G_78                                IX-104      3   variable
;G_57                                IX-101      3   variable
;G_90                                 IX-98      3   variable
;G_135                                IX-95      3   variable
;G_133                                IX-92      3   variable
;G_131                                IX-89      3   variable
;G_129                                IX-86      3   variable
;G_127                                IX-83      3   variable
;G_126                                IX-80      3   variable
;G_77                                 IX-77      3   variable
;G_75                                 IX-74      3   variable
;G_58                                 IX-71      3   variable
;G_120                                IX-68      3   variable
;nonuserelement2                      IX-65      1   variable
;nonuserelement1                      IX-64      1   variable
;G_47                                 IX-63      3   variable
;G_94                                 IX-60      3   variable
;G_111                                IX-57      3   variable
;G_54                                 IX-54      3   variable
;G_42                                 IX-51      3   variable
;G_99                                 IX-48      3   variable
;G_93                                 IX-45      3   variable
;G_145                                IX-42      3   variable
;G_122                                IX-39      3   variable
;hitcount                             IX-36      1   variable
;G_72                                 IX-35      3   variable
;G_51                                 IX-32      3   variable
;G_70                                 IX-29      3   variable
;G_50                                 IX-26      3   variable
;userlevel                            IX-23      1   variable
;G_79                                 IX-22      3   variable
;G_85                                 IX-19      3   variable
;G_137                                IX-16      3   variable
;G_35                                 IX-13      3   variable
;G_69                                 IX-10      3   variable
;damage                                IX-7      4   variable
;G_67                                  IX-3      3   variable
;move                                  IX+9      1   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 612 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "attack",1047,"_attack"
	SEGMENT STRSECT
L__118:
	DB	"%s flinched"
	DB	0
L__120:
	DB	"%s used %s"
	DB	0
L__122:
	DB	"%s used %s"
	DB	0
L__127:
	DB	"It Failed"
	DB	0
L__135:
	DB	"%s is building up power"
	DB	0
L__143:
	DB	"%s used Bide"
	DB	0
L__144:
	DB	"%s is storing energy"
	DB	0
L__147:
	DB	"%s is paralysed"
	DB	0
L__150:
	DB	"%s woke up"
	DB	0
L__151:
	DB	"%s is asleep"
	DB	0
L__154:
	DB	"%s thawed out"
	DB	0
L__155:
	DB	"%s is frozen"
	DB	0
L__158:
	DB	"%s hurt itself in its confusion"
	DB	0
L__159:
	DB	"%s used %s"
	DB	0
L__164:
	DB	"It Missed"
	DB	0
L__168:
	DB	"It Failed"
	DB	0
L__199:
	DB	"Not Very Effective"
	DB	0
L__201:
	DB	"Super Effective"
	DB	0
L__207:
	DB	"%s's %s rose"
	DB	0
L__213:
	DB	"%s's %s fell"
	DB	0
L__219:
	DB	"It Failed"
	DB	0
L__239:
	DB	"It Missed"
	DB	0
L__247:
	DB	"%s created a substitute to take damage"
	DB	0
L__257:
	DB	"It Failed"
	DB	0
L__259:
	DB	"%s's %s fell"
	DB	0
L__264:
	DB	"%s was poisoned"
	DB	0
L__266:
	DB	"It failed"
	DB	0
L__272:
	DB	"%s was burned"
	DB	0
L__274:
	DB	"It failed"
	DB	0
L__280:
	DB	"%s was paralysed"
	DB	0
L__282:
	DB	"It failed"
	DB	0
L__287:
	DB	"%s fell asleep"
	DB	0
L__289:
	DB	"It failed"
	DB	0
L__295:
	DB	"%s was frozen"
	DB	0
L__297:
	DB	"It failed"
	DB	0
L__300:
	DB	"%s was confused"
	DB	0
L__303:
	DB	"%s was leeched"
	DB	0
L__306:
	DB	"%s was trapped"
	DB	0
L__320:
	DB	"%s became confused"
	DB	0
	SEGMENT CODE
; 1048	
; 1049	void applystatus(bool player) {
_applystatus:
.DEFINE "_applystatus"

.VALUE _applystatus

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "applystatus",1049,"_applystatus"

.LINE 1049

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "name"

.CLASS 65

.VALUE -32

.DIM 20

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-41
	LD	SP,HL
; 1050		char name[20];
; 1051		if (player) {
.LINE 1051

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_589
; 1052			strcpy(name, playername);
.LINE 1052

	LD	BC,_playername
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
; 1053		}
; 1054		else {
.LINE 1054

	JR	L_591
L_589:
; 1055			strcpy(name, enemyname);
.LINE 1055

	LD	BC,_enemyname
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
; 1056		}
L_591:
.LINE 1056

; 1057		/* Poison */
; 1058		if (*currentStatusPointer[player] == 1) {
.LINE 1058

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_593
; 1059			sprintf(str, "%s was hurt by its poison", name);
.LINE 1059

	PEA	IX+-32
	LD	BC,L__324
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1060			text_Display(str, true);
.LINE 1060

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1061			takedamage(player, stats[player].health / 12);
.LINE 1061

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1062		}
L_593:
.LINE 1062

; 1063		/* Burn */
; 1064		if (*currentStatusPointer[player] == 2) {
.LINE 1064

	LD	HL,(IX+-9)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_599
; 1065			sprintf(str, "%s was hurt by its burn", name);
.LINE 1065

	PEA	IX+-32
	LD	BC,L__326
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1066			text_Display(str, true);
.LINE 1066

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1067			takedamage(player, stats[player].health / 12);
.LINE 1067

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1068		}
L_599:
.LINE 1068

; 1069		/* Leech */
; 1070		if (leech[player]) {
.LINE 1070

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_602
; 1071			sprintf(str, "%s's health was stolen by leech seed", name);
.LINE 1071

	PEA	IX+-32
	LD	BC,L__328
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1072			text_Display(str, true);
.LINE 1072

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1073			takedamage(player, stats[player].health / 8);
.LINE 1073

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1074			heal(!player, stats[player].health / 8);
.LINE 1074

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_595
	LD	BC,1
	LD	(IX+-12),BC
	JR	L_596
L_595:
	LD	BC,0
	LD	(IX+-12),BC
L_596:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
; 1075		}
L_602:
.LINE 1075

; 1076		/* Trap */
; 1077		if (trapturns[player] > 0) {
.LINE 1077

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_604
; 1078			sprintf(str, "%s's was hurt by the trap", name);
.LINE 1078

	PEA	IX+-32
	LD	BC,L__331
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1079			text_Display(str, true);
.LINE 1079

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1080			takedamage(player, stats[player].health / 16);
.LINE 1080

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1081			trapturns[player]--;
.LINE 1081

	LD	HL,(IX+-3)
	LD	IY,(IX+-3)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1082		}
L_604:
.LINE 1082

; 1083	
; 1084		reflectturns[player]--;
.LINE 1084

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	IY,(IX+-41)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1085		lightscreenturns[player]--;
.LINE 1085

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	IY,(IX+-38)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1086		mistturns[player]--;
.LINE 1086

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(IX+-35),HL
	LD	IY,(IX+-35)
	LD	A,(HL)
	DEC	A
	LD	(IY),A
; 1087		if (disabledturns[player] == 1) {
.LINE 1087

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_609
; 1088			disabledmove[player] = 0;
.LINE 1088

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1089		}
L_609:
.LINE 1089

; 1090		disabledturns[player]--;
.LINE 1090

	LD	IY,(IX+-6)
	LD	HL,(IX+-6)
	LD	A,(IY)
	DEC	A
	LD	(HL),A
; 1091	}
.LINE 1091

	LD	SP,IX
	POP	IX
	RET	


;**************************** _applystatus ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_heal                               IMPORT  -----   function
;_leech                              STATIC      2   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentStatusPointer               STATIC      6   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;name                                 IX-32     20   variable
;temp597                              IX-12      3   variable
;G_151                                 IX-9      3   variable
;G_153                                 IX-6      3   variable
;G_152                                 IX-3      3   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 50 (bytes)
;       Spill Code: -2 (instruction)


.ENDFUNC "applystatus",1091,"_applystatus"
	SEGMENT STRSECT
L__324:
	DB	"%s was hurt by its poison"
	DB	0
L__326:
	DB	"%s was hurt by its burn"
	DB	0
L__328:
	DB	"%s's health was stolen by leech seed"
	DB	0
L__331:
	DB	"%s's was hurt by the trap"
	DB	0
	SEGMENT CODE
; 1092	/* When a new pokemon is sent out, reset everything 
; 1093	   This also decompresses the new pokemon's sprite
; 1094	 */
; 1095	void resetstatus(bool player) {
_resetstatus:
.DEFINE "_resetstatus"

.VALUE _resetstatus

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "resetstatus",1095,"_resetstatus"

.LINE 1095

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "pokemonID"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "pokemonID"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-44
	LD	SP,HL
; 1096		i = 0;
.LINE 1096

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1097		while (i < sizeof(statmods[player])) {
.LINE 1097

	JR	L_612
L_613:
; 1098			statmods[player][i] = 6;
.LINE 1098

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_i)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),6
; 1099			i++;
.LINE 1099

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1100		}
L_612:
.LINE 1100

	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,7
	OR	A,A
	SBC	HL,BC
	JR	C,L_613
; 1101		confusedturns[player] = 0;
.LINE 1101

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(HL),0
; 1102		leech[player] = false;
.LINE 1102

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	(HL),0
; 1103		leech[!player] = false;
.LINE 1103

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_616
	LD	BC,1
	LD	(IX+-11),BC
	JR	L_617
L_616:
	LD	BC,0
	LD	(IX+-11),BC
L_617:
	LD	BC,_leech
	LD	HL,(IX+-11)
	ADD	HL,BC
	LD	(HL),0
; 1104		trapturns[player] = 0;
.LINE 1104

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(HL),0
; 1105		reflectturns[!player] = 0;
.LINE 1105

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_620
	LD	BC,1
	LD	(IX+-14),BC
	JR	L_621
L_620:
	LD	BC,0
	LD	(IX+-14),BC
L_621:
	LD	BC,_reflectturns
	LD	HL,(IX+-14)
	ADD	HL,BC
	LD	(HL),0
; 1106		lightscreenturns[!player] = 0;
.LINE 1106

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_624
	LD	BC,1
	LD	(IX+-5),BC
	JR	L_625
L_624:
	LD	BC,0
	LD	(IX+-5),BC
L_625:
	LD	BC,_lightscreenturns
	LD	HL,(IX+-5)
	ADD	HL,BC
	LD	(HL),0
; 1107		mistturns[player] = 0;
.LINE 1107

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),0
; 1108		flinch[player] = false;
.LINE 1108

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	(HL),0
; 1109		flinch[!player] = false;
.LINE 1109

	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_628
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_629
L_628:
	LD	BC,0
	LD	(IX+-8),BC
L_629:
	LD	BC,_flinch
	LD	HL,(IX+-8)
	ADD	HL,BC
	LD	(HL),0
; 1110		highcritratio[player] = false;
.LINE 1110

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),0
; 1111		rage[player] = false;
.LINE 1111

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
; 1112		disabledmove[player] = 0;
.LINE 1112

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1113		disabledturns[player] = 0;
.LINE 1113

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(HL),0
; 1114		lastmove[player] = 0;
.LINE 1114

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	(HL),0
; 1115		attackturns[player] = 0;
.LINE 1115

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(HL),0
; 1116		air[player] = false;
.LINE 1116

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),0
; 1117		chosenmove[player] = 0;
.LINE 1117

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_chosenmove
	ADD	HL,BC
	LD	(HL),0
; 1118		transformed[player] = false;
.LINE 1118

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_transformed
	ADD	HL,BC
	LD	(HL),0
; 1119		converted[player] = false;
.LINE 1119

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_converted
	ADD	HL,BC
	LD	(HL),0
; 1120		substitutehealth[player] = 0;
.LINE 1120

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_substitutehealth
	ADD	HL,BC
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1121	
; 1122		if (player) {
.LINE 1122

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_638
; 1123			uint8_t pokemonID;
; 1124			sprintf(playername, "%s", data_pokemon[party[currentplayer].id].name);
.LINE 1124

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__340
	PUSH	BC
	LD	BC,_playername
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1125			stats[1] = stats_CalculateStats(party[currentplayer]);
.LINE 1125

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,34
	LDIR	
	PEA	IX+-26
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
; 1126	
; 1127			pokemonID = party[currentplayer].id;
.LINE 1127

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-1),A
; 1128			if (pokemonID < 80) {
.LINE 1128

	CP	A,80
	JR	NC,L_632
; 1129				zx7_Decompress(playerSprite, PKMNSD2[pokemonID]);
.LINE 1129

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD2
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1130			}
; 1131			else {
.LINE 1131

	JR	L_633
L_632:
; 1132				zx7_Decompress(playerSprite, PKMNSD3[pokemonID - 80]);
.LINE 1132

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD3
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1133			}
L_633:
.LINE 1133

; 1134			currentStatusPointer[1] = &party[currentplayer].currentstatus;
.LINE 1134

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-41),HL	; spill
	LD	HL,_currentStatusPointer+3
	LD	(IX+-44),HL	; spill
	LD	IY,(IX+-41)
	LEA	BC,IY+15
	LD	HL,(IX+-44)	; unspill
	LD	(HL),BC
; 1135		}
; 1136		else {
.LINE 1136

	JR	L_639
L_638:
; 1137			uint8_t pokemonID;
; 1138			sprintf(enemyname, "Enemy %s", data_pokemon[enemyparty[currentenemy].id].name);
.LINE 1138

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__342
	PUSH	BC
	LD	BC,_enemyname
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1139			stats[0] = stats_CalculateStats(enemyparty[currentenemy]);
.LINE 1139

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,34
	LDIR	
	PEA	IX+-38
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats
	LD	BC,12
	LDIR	
; 1140	
; 1141			pokemonID = enemyparty[currentenemy].id;
.LINE 1141

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-2),A
; 1142			
; 1143			if (pokemonID < 80) {
.LINE 1143

	CP	A,80
	JR	NC,L_635
; 1144				zx7_Decompress(enemySprite, PKMNSD0[pokemonID]);
.LINE 1144

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1145			}
; 1146			else {
.LINE 1146

	JR	L_636
L_635:
; 1147				zx7_Decompress(enemySprite, PKMNSD1[pokemonID - 80]);
.LINE 1147

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1148			}
L_636:
.LINE 1148

; 1149			currentStatusPointer[0] = &enemyparty[currentenemy].currentstatus;
.LINE 1149

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+15
	LD	(_currentStatusPointer),BC
; 1150		}
; 1151	}
L_639:
.LINE 1151

	LD	SP,IX
	POP	IX
	RET	


;**************************** _resetstatus ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD1                            IMPORT    216   variable
;_enemySprite                        STATIC      3   variable
;_PKMNSD0                            IMPORT    240   variable
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_PKMNSD3                            IMPORT    216   variable
;_playerSprite                       STATIC      3   variable
;_PKMNSD2                            IMPORT    240   variable
;_zx7_Decompress                     IMPORT  -----   function
;_stats                              STATIC     24   variable
;_stats_CalculateStats               IMPORT  -----   function
;_playername                         STATIC     20   variable
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_substitutehealth                   STATIC      4   variable
;_converted                          STATIC      2   variable
;_transformed                        STATIC      2   variable
;_chosenmove                         STATIC      2   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_disabledmove                       STATIC      2   variable
;_rage                               STATIC      2   variable
;_highcritratio                      STATIC      2   variable
;_flinch                             STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_confusedturns                      STATIC      2   variable
;_statmods                           STATIC     14   variable
;_i                                  IMPORT      2   variable
;temp622                              IX-14      3   variable
;temp618                              IX-11      3   variable
;temp630                               IX-8      3   variable
;temp626                               IX-5      3   variable
;pokemonID                             IX-2      1   variable
;pokemonID                             IX-1      1   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 53 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "resetstatus",1151,"_resetstatus"
	SEGMENT STRSECT
L__340:
	DB	"%s"
	DB	0
L__342:
	DB	"Enemy %s"
	DB	0
	SEGMENT CODE
; 1152	
; 1153	void takedamage(bool player, int amount) {
_takedamage:
.DEFINE "_takedamage"

.VALUE _takedamage

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "takedamage",1153,"_takedamage"

.LINE 1153

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "amount"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-30
	LD	SP,HL
; 1154		bidedamage[player] += amount;
.LINE 1154

	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-6),HL
	LD	BC,_bidedamage
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,(IX+9)
	LD	HL,(HL)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1155		if (substitutehealth[player] > 0) {
.LINE 1155

	LD	BC,_substitutehealth
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_649
; 1156			text_Display("The substitute blocked the damage", true);
.LINE 1156

	LD	BC,1
	PUSH	BC
	LD	BC,L__346
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1157			if (substitutehealth[player] <= amount) {
.LINE 1157

	LD	BC,(IX+-6)
	LD	HL,_substitutehealth
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_641
; 1158				substitutehealth[player] = 0;
.LINE 1158

	LD	HL,(IX+-18)
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1159				text_Display("The substitute was destroyed", true);
.LINE 1159

	LD	BC,1
	PUSH	BC
	LD	BC,L__348
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1160			}
; 1161			else {
.LINE 1161

	JR	L_650
L_641:
; 1162				substitutehealth[player] -= amount;
.LINE 1162

	LD	BC,(IX+-6)
	LD	HL,_substitutehealth
	ADD	HL,BC
	LD	(IX+-24),HL
	LD	BC,(IX+9)
	LD	HL,(HL)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,(IX+-24)
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1163			}
; 1164		}
; 1165		else {
.LINE 1165

	JR	L_650
L_649:
; 1166			if (player) {
.LINE 1166

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_647
; 1167				if (party[currentplayer].currenthealth <= amount) {
.LINE 1167

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_643
; 1168					party[currentplayer].currenthealth = 0;
.LINE 1168

	LD	IY,(IX+-15)
	LD	(IY+13),0
	LD	(IY+14),0
; 1169				}
; 1170				else {
.LINE 1170

	JR	L_650
L_643:
; 1171					party[currentplayer].currenthealth -= amount;
.LINE 1171

	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-27)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1172				}
; 1173			}
; 1174			else {
.LINE 1174

	JR	L_650
L_647:
; 1175				if (enemyparty[currentenemy].currenthealth <= amount) {
.LINE 1175

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,_enemyparty
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	IY,(IX+-21)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_645
; 1176					enemyparty[currentenemy].currenthealth = 0;
.LINE 1176

	LD	IY,(IX+-21)
	LD	(IY+13),0
	LD	(IY+14),0
; 1177				}
; 1178				else {
.LINE 1178

	JR	L_650
L_645:
; 1179					enemyparty[currentenemy].currenthealth -= amount;
.LINE 1179

	LD	BC,_enemyparty
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-30),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-30)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1180				}
; 1181			}
; 1182		}
L_650:
.LINE 1182

; 1183		redrawcharacters();
.LINE 1183

	CALL	_redrawcharacters
; 1184	}
.LINE 1184

	LD	SP,IX
	POP	IX
	RET	


;**************************** _takedamage ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_substitutehealth                   STATIC      4   variable
;_bidedamage                         STATIC      4   variable
;G_161                                IX-21      3   variable
;G_155                                IX-18      3   variable
;G_158                                IX-15      3   variable
;G_162                                IX-12      3   variable
;G_159                                 IX-9      3   variable
;G_154                                 IX-6      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 42 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "takedamage",1184,"_takedamage"
	SEGMENT STRSECT
L__346:
	DB	"The substitute blocked the damage"
	DB	0
L__348:
	DB	"The substitute was destroyed"
	DB	0
	SEGMENT CODE
; 1185	void heal(bool player, int amount) {
_heal:
.DEFINE "_heal"

.VALUE _heal

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "heal",1185,"_heal"

.LINE 1185

.DEFINE "player"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "amount"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-12
	LD	SP,HL
; 1186		if (player) {
.LINE 1186

	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_655
; 1187			party[currentplayer].currenthealth += amount;
.LINE 1187

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1188			if (party[currentplayer].currenthealth >= stats[1].health) {
.LINE 1188

	LD	IY,_stats
	LD	BC,(IY+12)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_656
; 1189				party[currentplayer].currenthealth = stats[1].health;
.LINE 1189

	LD	IY,_stats
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(IY+12)
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1190			}
; 1191		}
; 1192		else {
.LINE 1192

	JR	L_656
L_655:
; 1193			enemyparty[currentenemy].currenthealth += amount;
.LINE 1193

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_enemyparty
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-12)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1194			if (enemyparty[currentenemy].currenthealth >= stats[0].health) {
.LINE 1194

	LD	BC,(_stats)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_656
; 1195				enemyparty[currentenemy].currenthealth = stats[0].health;
.LINE 1195

	LD	BC,_enemyparty
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(_stats)
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1196			}
; 1197		}
L_656:
.LINE 1197

; 1198		redrawcharacters();
.LINE 1198

	CALL	_redrawcharacters
; 1199	}
.LINE 1199

	LD	SP,IX
	POP	IX
	RET	


;**************************** _heal ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;G_166                                 IX-6      3   variable
;G_164                                 IX-3      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "heal",1199,"_heal"
; 1200	
; 1201	
; 1202	
; 1203	void addxp(void) {
_addxp:
.DEFINE "_addxp"

.VALUE _addxp

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "addxp",1203,"_addxp"

.LINE 1203

.DEFINE "xpgain"

.CLASS 65

.VALUE -14

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-68
	LD	SP,HL
; 1204		uint16_t xpgain = (enemyparty[currentenemy].level * data_pokemon[enemyparty[currentenemy].id].xpdrop) / 7;
.LINE 1204

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	IY,(IX+-23)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+47)
	CALL	__stoiu
	LD	DE,HL
	LD	IY,(IX+-23)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,7
	CALL	__idivs
	LD	(IX+-14),L
	LD	(IX+-13),H
; 1205		party[currentplayer].xp += xpgain;
.LINE 1205

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-20),HL
	LD	BC,(IX+-14)
	CALL	__stoiu
	LD	IY,(IX+-20)
	LD	BC,(IY+10)
	ADD	HL,BC
	LD	(IY+10),HL
; 1206		while ((party[currentplayer].level < 100) && (party[currentplayer].xp >= xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level + 1])) {
.LINE 1206

	JR	L_674
L_675:
; 1207			party[currentplayer].level++;
.LINE 1207

	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	IY,(IX+-26)
	LD	A,(IY+9)
	INC	A
	LD	(IY+9),A
; 1208			sprintf(str, "%s leveled up", data_pokemon[party[currentplayer].id].name);
.LINE 1208

	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__357
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1209			text_Display(str, false);
.LINE 1209

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1210			for (i = 0; i < 10; i++)
.LINE 1210

	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_670
L_668:
; 1211			{
; 1212				if (data_pokemon[party[currentplayer].id].movelevels[i] == party[currentplayer].level) {
.LINE 1212

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-29),HL
	LD	IY,(IX+-29)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+24
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-29)
	CP	A,(IY+9)
	JR	NZ,L_667
; 1213					sprintf(str, "%s wants to learn %s", data_pokemon[party[currentplayer].id].name, data_moves[data_pokemon[party[currentplayer].id].moveids[i]].name);
.LINE 1213

	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	IY,(IX+-32)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-32)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__359
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1214					text_Display(str, false);
.LINE 1214

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1215					sprintf(str, "Choose a move to replace with %s", data_moves[data_pokemon[party[currentplayer].id].moveids[i]].name);
.LINE 1215

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__360
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1216					text_Display(str, false);
.LINE 1216

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1217					switch (text_AskQuestion4(data_moves[party[currentplayer].moves[0]].name, data_moves[party[currentplayer].moves[1]].name, data_moves[party[currentplayer].moves[2]].name, data_moves[party[currentplayer].moves[3]].name, false))
.LINE 1217

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	IY,(IX+-38)
	LEA	BC,IY+1
	LD	(IX+-35),BC
	LD	BC,0
	PUSH	BC
	LD	IY,(IX+-35)
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-35)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-35)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcaseD
	JP	(HL)
L__361:
	DW	4
	DW	1
	DB	0
	DW24	L_661	

	DW24	L_662	

	DW24	L_663	

	DW24	L_664	

	DW24	L_667	

; 1218					{
; 1219					case 1:
L_661:
.LINE 1219

; 1220						party[currentplayer].moves[0] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1220

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	IY,(IX+-41)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-41)
	LD	(IY+1),A
; 1221						break;
.LINE 1221

	JR	L_667
; 1222					case 2:
L_662:
.LINE 1222

; 1223						party[currentplayer].moves[1] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1223

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-44),HL
	LD	IY,(IX+-44)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	IY,(IX+-44)
	LD	A,(HL)
	LD	(IY+2),A
; 1224						break;
.LINE 1224

	JR	L_667
; 1225					case 3:
L_663:
.LINE 1225

; 1226						party[currentplayer].moves[2] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1226

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-47),HL
	LD	IY,(IX+-47)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	IY,(IX+-47)
	LD	A,(HL)
	LD	(IY+3),A
; 1227						break;
.LINE 1227

	JR	L_667
; 1228					case 4:
L_664:
.LINE 1228

; 1229						party[currentplayer].moves[3] = data_pokemon[party[currentplayer].id].moveids[i];
.LINE 1229

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-50),HL
	LD	IY,(IX+-50)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	IY,(IX+-50)
	LD	A,(HL)
	LD	(IY+4),A
; 1230						break;
; 1231					}
; 1232				}
L_667:
.LINE 1232

; 1233				i++;
.LINE 1233

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1234			}
L_670:
.LINE 1234

	LD.LIS	BC,10
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_668
; 1235			if (party[currentplayer].level == data_pokemon[party[currentplayer].id].evolvelevel) {
.LINE 1235

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-53),HL
	LD	IY,(IX+-53)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+44)
	LD	IY,(IX+-53)
	CP	A,(IY+9)
	JR	NZ,L_674
; 1236				sprintf(str, "%s is evolving", data_pokemon[party[currentplayer].id].name);
.LINE 1236

	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__364
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1237				text_Display(str, false);
.LINE 1237

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1238				if (text_AskQuestion2("Continue", "Stop", false) == 1) {
.LINE 1238

	LD	BC,0
	PUSH	BC
	LD	BC,L__365
	PUSH	BC
	LD	BC,L__366
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_674
; 1239					party[currentplayer].id = data_pokemon[party[currentplayer].id].evolveid;
.LINE 1239

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-56),HL
	LD	IY,(IX+-56)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+45)
	LD	IY,(IX+-56)
	LD	(IY+0),A
; 1240				}
; 1241			}
; 1242		}
L_674:
.LINE 1242

	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	(IX+-12),HL
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_676
	LD	BC,(IX+-3)
	LD	(IX+-17),BC
	LD	BC,(IX+-3)
	LD	(IX+-12),BC
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-59),HL
	LD	IY,(IX+-59)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	DE,HL
	LD	IY,(IX+-59)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	LD	HL,(IY+10)
	OR	A,A
	SBC	HL,BC
	JP	P,L_675
L_676:
; 1243		party[currentplayer].healthEV += data_pokemon[enemyparty[currentenemy].id].basehealth;
.LINE 1243

	LD	BC,_party
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-68),HL
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-65),HL
	LD	IY,(IX+-65)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	C,(IY+18)
	LD	B,0
	LD	IY,(IX+-68)
	LD	DE,(IY+22)
	LD	HL,BC
	ADD.SIS	HL,DE
	LD	BC,HL
	LD	(IY+22),C
	LD	(IY+23),B
; 1244		party[currentplayer].attackEV += data_pokemon[enemyparty[currentenemy].id].baseattack;
.LINE 1244

	LD	IY,(IX+-65)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-62),HL
	LD	IY,(IX+-62)
	LD	C,(IY+19)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+24)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+24),C
	LD	(IY+25),B
; 1245		party[currentplayer].defenceEV += data_pokemon[enemyparty[currentenemy].id].basedefence;
.LINE 1245

	LD	IY,(IX+-62)
	LD	C,(IY+20)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+26)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+26),C
	LD	(IY+27),B
; 1246		party[currentplayer].specialattackEV += data_pokemon[enemyparty[currentenemy].id].basespecialattack;
.LINE 1246

	LD	IY,(IX+-62)
	LD	C,(IY+21)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+28)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+28),C
	LD	(IY+29),B
; 1247		party[currentplayer].specialdefenceEV += data_pokemon[enemyparty[currentenemy].id].basespecialdefence;
.LINE 1247

	LD	IY,(IX+-62)
	LD	C,(IY+22)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+30)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+30),C
	LD	(IY+31),B
; 1248		party[currentplayer].speedEV += data_pokemon[enemyparty[currentenemy].id].basespeed;
.LINE 1248

	LD	IY,(IX+-62)
	LD	C,(IY+23)
	LD	B,0
	LD	IY,(IX+-68)
	LD	HL,(IY+32)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+32),C
	LD	(IY+33),B
; 1249	}
.LINE 1249

	LD	SP,IX
	POP	IX
	RET	


;**************************** _addxp ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_text_AskQuestion2                  IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_i                                  IMPORT      2   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;G_167                                IX-17      3   variable
;xpgain                               IX-14      2   variable
;G_171                                IX-12      3   variable
;G_169                                 IX-9      3   variable
;G_168                                 IX-6      3   variable
;G_170                                 IX-3      3   variable


; Stack Frame Size: 74 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "addxp",1249,"_addxp"
	SEGMENT STRSECT
L__357:
	DB	"%s leveled up"
	DB	0
L__359:
	DB	"%s wants to learn %s"
	DB	0
L__360:
	DB	"Choose a move to replace with %s"
	DB	0
L__364:
	DB	"%s is evolving"
	DB	0
L__365:
	DB	"Stop"
	DB	0
L__366:
	DB	"Continue"
	DB	0
	SEGMENT CODE
; 1250	/* ball is 1-4 */
; 1251	bool capture(uint8_t ball) {
_capture:
.DEFINE "_capture"

.VALUE _capture

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "capture",1251,"_capture"

.LINE 1251

.DEFINE "ball"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "slot"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "f"

.CLASS 65

.VALUE -5

.TYPE 15

.ENDEF

.DEFINE "captured"

.CLASS 65

.VALUE -6

.TYPE 12

.ENDEF

.DEFINE "n1"

.CLASS 65

.VALUE -7

.TYPE 12

.ENDEF

.DEFINE "n2"

.CLASS 65

.VALUE -8

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-14
	LD	SP,HL
; 1252		uint8_t n1;
; 1253		uint8_t n2;
; 1254		uint32_t f;
; 1255		bool captured = false;
.LINE 1255

	LD	(IX+-6),0
; 1256		uint8_t slot = 0;
; 1257		/* Check if pokemon is captured*/
; 1258		if (!wild) {
.LINE 1258

	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_703
; 1259			text_Display("You cannot catch trainer pokemon", true);
.LINE 1259

	LD	BC,1
	PUSH	BC
	LD	BC,L__372
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1260			return false;
.LINE 1260

	XOR	A,A
	JR	L_717
; 1261		}
L_703:
.LINE 1261

; 1262		if (ball == 4) {
.LINE 1262

	LD	A,(IX+6)
	CP	A,4
	JR	NZ,L_702
; 1263			captured = true;
.LINE 1263

	LD	(IX+-6),1
; 1264		}
; 1265		else {
.LINE 1265

	JR	L_715
L_702:
; 1266			if (ball = 1) {
.LINE 1266

	LD	(IX+6),1
; 1267				n1 = rand() % 255;
.LINE 1267

	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	(IX+-7),L
; 1268			}
.LINE 1268

; 1269			if (ball = 2) {
; 1270				n1 = rand() % 200;
.LINE 1270

	CALL	_rand
	LD	BC,200
	CALL	__irems
	LD	(IX+-7),L
; 1271			}
.LINE 1271

; 1272			if (ball = 3) {
; 1273				n1 = rand() % 150;
.LINE 1273

	CALL	_rand
	LD	BC,150
	CALL	__irems
	LD	(IX+-7),L
; 1274			}
.LINE 1274

; 1275			n2 = n1;
.LINE 1275

	LD	A,(IX+-7)
	LD	(IX+-8),A
; 1276			if (*currentStatusPointer[false] == 4 || *currentStatusPointer[false] == 5) {
.LINE 1276

	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	Z,L_688
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,5
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_694
L_688:
; 1277				if (n1 < 25) {
.LINE 1277

	LD	A,(IX+-7)
	CP	A,25
	JR	NC,L_687
; 1278					captured = true;
.LINE 1278

	LD	(IX+-6),1
; 1279				}
; 1280				else {
.LINE 1280

	JR	L_694
L_687:
; 1281					n2 -= 25;
.LINE 1281

	LD	A,(IX+-7)
	SUB	A,25
	LD	(IX+-8),A
; 1282				}
; 1283			}
L_694:
.LINE 1283

; 1284			if (*currentStatusPointer[false] == 1 || *currentStatusPointer[false] == 2 || *currentStatusPointer[false] == 3) {
.LINE 1284

	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	Z,L_693
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_693
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_700
L_693:
; 1285				if (n1 < 12) {
.LINE 1285

	LD	A,(IX+-7)
	CP	A,12
	JR	NC,L_692
; 1286					captured = true;
.LINE 1286

	LD	(IX+-6),1
; 1287				}
; 1288				else {
.LINE 1288

	JR	L_700
L_692:
; 1289					n2 -= 12;
.LINE 1289

	LD	A,(IX+-8)
	SUB	A,12
	LD	(IX+-8),A
; 1290				}
; 1291			}
L_700:
.LINE 1291

; 1292			if (n2 <= data_pokemon[enemyparty[currentenemy].id].catchrate) {
.LINE 1292

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	IY,(IX+-11)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+50)
	CP	A,(IX+-8)
	JR	C,L_715
; 1293				f = stats[false].health;
.LINE 1293

	LD	BC,(_stats)
	CALL	__stoiu
	XOR	A,A
	LD	(IX+-5),HL
	LD	(IX+-2),A
; 1294				f *= 255;
.LINE 1294

	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,255
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1295				f *= 4;
.LINE 1295

	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1296				f /= enemyparty[currentenemy].currenthealth;
.LINE 1296

	LD	IY,(IX+-11)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1297				if (ball == 2) {
; 1298					f /= 8;
; 1299				}
; 1300				else {
.LINE 1300

; 1301					f /= 12;
.LINE 1301

	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,12
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1302				}
.LINE 1302

; 1303				if (f >= (rand() % 255)) {
.LINE 1303

	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	BC,HL
	CALL	__itol
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	CALL	__lcmpu
	JR	C,L_715
; 1304					captured = true;
.LINE 1304

	LD	(IX+-6),1
; 1305				}
; 1306			}
; 1307		}
L_715:
.LINE 1307

; 1308		/* Find open slot if pokemon is captured */
; 1309		if (captured) {
.LINE 1309

	LD	A,(IX+-6)
	OR	A,A
	JR	Z,L_714
; 1310			sprintf(str, "%s was caught", data_pokemon[enemyparty[currentenemy].id].name);
.LINE 1310

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__384
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1311			text_Display(str, false);
.LINE 1311

	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1312			for (slot = 0; slot < 36; slot++) {
.LINE 1312

	LD	(IX+-1),0
	JR	L_710
L_708:
; 1313				if (party[slot].id == 0) {
.LINE 1313

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-14),HL
	LD	IY,(IX+-14)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_707
; 1314					party[slot] = enemyparty[currentenemy];
.LINE 1314

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,(IX+-14)
	LD	BC,34
	LDIR	
; 1315					slot = 40;
.LINE 1315

	LD	(IX+-1),40
; 1316				}
L_707:
.LINE 1316

; 1317				i++;
.LINE 1317

	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	(IX+-1)
; 1318			}
L_710:
.LINE 1318

	LD	A,(IX+-1)
	CP	A,36
	JR	C,L_708
; 1319			if (slot == 36) {
.LINE 1319

	LD	A,(IX+-1)
	CP	A,36
	JR	NZ,L_716
; 1320				text_Display("No open slots for pokemon", false);
.LINE 1320

	LD	BC,0
	PUSH	BC
	LD	BC,L__388
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1321			}
; 1322		}
; 1323		else {
.LINE 1323

	JR	L_716
L_714:
; 1324			sprintf(str, "%s broke free", data_pokemon[enemyparty[currentenemy].id].name);
.LINE 1324

	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__389
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1325			text_Display(str, true);
.LINE 1325

	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1326		}
L_716:
.LINE 1326

; 1327		return captured;
.LINE 1327

	LD	A,(IX+-6)
; 1328	}
L_717:
.LINE 1328

	LD	SP,IX
	POP	IX
	RET	


;**************************** _capture ***************************
;Name                         Addr/Register   Size   Type
;_i                                  IMPORT      2   variable
;_party                              IMPORT   1224   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_stats                              STATIC     24   variable
;_data_pokemon                       IMPORT  unknown variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_rand                               IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;G_174                                IX-14      3   variable
;G_173                                IX-11      3   variable
;n2                                    IX-8      1   variable
;n1                                    IX-7      1   variable
;captured                              IX-6      1   variable
;f                                     IX-5      4   variable
;slot                                  IX-1      1   variable
;ball                                  IX+6      1   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: -3 (instruction)


.ENDFUNC "capture",1328,"_capture"
	SEGMENT STRSECT
L__372:
	DB	"You cannot catch trainer pokemon"
	DB	0
L__384:
	DB	"%s was caught"
	DB	0
L__388:
	DB	"No open slots for pokemon"
	DB	0
L__389:
	DB	"%s broke free"
	DB	0
	XREF _PKMNSD6_init:ROM
	XREF _PKMNSD5_init:ROM
	XREF _PKMNSD5:ROM
	XREF _PKMNSD3_init:ROM
	XREF _PKMNSD3:ROM
	XREF _PKMNSD2_init:ROM
	XREF _PKMNSD2:ROM
	XREF _PKMNSD1_init:ROM
	XREF _PKMNSD1:ROM
	XREF _PKMNSD0_init:ROM
	XREF _PKMNSD0:ROM
	XREF _itemNames:ROM
	XREF _items_UseItem:ROM
	XREF _stats_NewCharacter:ROM
	XREF _stats_CalculateStats:ROM
	XREF _playerItems:ROM
	XREF _playerMoney:ROM
	XREF _party:ROM
	XREF _text_status2:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_DrawTextBox:ROM
	XREF _text_AskQuestion4:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _statusIcons:ROM
	XREF _colors:ROM
	XREF _e:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _FreeIcons:ROM
	XREF _MallocIcons:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _typeIcons:ROM
	XREF _menu_Items:ROM
	XREF _menu_PokemonMenu:ROM
	XREF _map_WinFight:ROM
	XREF _map_LoseFight:ROM
	XREF _xpPerLevel:ROM
	XREF _elements:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _strcpy:ROM
	XREF _sprintf:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __imulu:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __smulu:ROM
	XREF __irems:ROM
	XREF __lshru:ROM
	XREF __fmul:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __bldix:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __icmpzero:ROM
	XREF __seqcaseD:ROM
	XREF __imul_b:ROM
	XDEF _capture
	XDEF _addxp
	XDEF _heal
	XDEF _takedamage
	XDEF _resetstatus
	XDEF _applystatus
	XDEF _attack
	XDEF _battle_End
	XDEF _CalculateXpPercent
	XDEF _redrawcharacters
	XDEF _enemyturn
	XDEF _selectMove
	XDEF _playerturn
	XDEF _battle_SpawnTrainer
	XDEF _battle_SpawnWild
	XDEF _battle_Loop
	XDEF _SetupBattleGfx
	XDEF _battle_Setup
	XDEF _battle_Initialize
	XDEF _statuscolors
	XDEF _battleMenuCurrent
	XDEF _battleMenuState2
	XDEF _battleMenuState1
	XDEF _run
	XDEF _payday
	XDEF _air
	XDEF _attackturns
	XDEF _lastmove
	XDEF _disabledturns
	XDEF _disabledmove
	XDEF _substitutehealth
	XDEF _bidedamage
	XDEF _originalpokemon
	XDEF _converted
	XDEF _transformed
	XDEF _rage
	XDEF _highcritratio
	XDEF _flinch
	XDEF _mistturns
	XDEF _lightscreenturns
	XDEF _reflectturns
	XDEF _trapturns
	XDEF _leech
	XDEF _confusedturns
	XDEF _statmods
	XDEF _currentStatusPointer
	XDEF _stats
	XDEF _wild
	XDEF _chosenmove
	XDEF _attackturn
	XDEF _enemyparty
	XDEF _statusSprites
	XDEF _hpBarSprite
	XDEF _backgroundSprite
	XDEF _enemySprite
	XDEF _playerSprite
	XDEF _enemyname
	XDEF _playername
	XDEF _currentenemy
	XDEF _currentplayer
	XDEF _clearcharacter
	XDEF _statmodvalues
	END
