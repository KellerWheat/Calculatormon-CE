; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\BATTLE.C"
	.assume ADL=1
	SEGMENT TEXT
_statmodvalues:
	DW	25
	DB	0
	DW	29
	DB	0
	DW	33
	DB	0
	DW	40
	DB	0
	DW	50
	DB	0
	DW	67
	DB	0
	DW	100
	DB	0
	DW	150
	DB	0
	DW	200
	DB	0
	DW	250
	DB	0
	DW	300
	DB	0
	DW	350
	DB	0
	DW	400
	DB	0
_clearcharacter:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_currentplayer:
	DS	1
_currentenemy:
	DS	1
_playername:
	DS	20
_enemyname:
	DS	20
_playerSprite:
	DS	3
_enemySprite:
	DS	3
_backgroundSprite:
	DS	3
_hpBarSprite:
	DS	3
_statusSprites:
	DS	15
_enemyparty:
	DS	204
	SEGMENT DATA
_attackturn:
	DB	0
	SEGMENT BSS
_chosenmove:
	DS	2
_wild:
	DS	1
_stats:
	DS	24
_currentStatusPointer:
	DS	6
_statmods:
	DS	14
_confusedturns:
	DS	2
_leech:
	DS	2
_trapturns:
	DS	2
_reflectturns:
	DS	2
_lightscreenturns:
	DS	2
_mistturns:
	DS	2
_flinch:
	DS	2
_highcritratio:
	DS	2
_rage:
	DS	2
_disabledmove:
	DS	2
_disabledturns:
	DS	2
_lastmove:
	DS	2
_attackturns:
	DS	2
_air:
	DS	2
_run:
	DS	1
	SEGMENT DATA
_battleMenuState1:
	DB	0
_battleMenuState2:
	DB	0
_battleMenuCurrent:
	DB	1
	SEGMENT TEXT
_statuscolors:
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <fileioc.h>
;   12	#include <debug.h>
;   13	#include <compression.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "text.h"
;   21	#include "savegame.h"
;   22	#include "stats.h"
;   23	#include "gfx/battle_gfx.h"
;   24	#include "items.h"
;   25	
;   26	#include "gfx/PKMNSD0.h"
;   27	#include "gfx/PKMNSD1.h"
;   28	#include "gfx/PKMNSD2.h"
;   29	#include "gfx/PKMNSD3.h"
;   30	#include "gfx/PKMNSD5.h"
;   31	
;   32	void SetupBattleGfx(void);
;   33	
;   34	bool playerturn(void);
;   35	bool enemyturn(void);
;   36	int selectMove(void);
;   37	void redrawcharacters(void);
;   38	void attack(bool player, uint8_t move);
;   39	
;   40	uint8_t CalculateXpPercent(void);
;   41	void applystatus(bool player);
;   42	void resetstatus(bool player);
;   43	void takedamage(bool player, int amount);
;   44	void heal(bool player, int amount);
;   45	bool capture(uint8_t ball);
;   46	void addxp(void);
;   47	
;   48	
;   49	const int statmodvalues[] = { 25,29,33,40,50,67,100,150,200,250,300,350,400 };
;   50	const struct pokemonData clearcharacter = { 0 };
;   51	
;   52	uint8_t currentplayer;
;   53	uint8_t currentenemy;
;   54	
;   55	char playername[20];
;   56	char enemyname[20];
;   57	
;   58	gfx_sprite_t *playerSprite;
;   59	gfx_sprite_t *enemySprite;
;   60	
;   61	gfx_sprite_t *backgroundSprite;
;   62	gfx_sprite_t *hpBarSprite;
;   63	gfx_sprite_t *statusSprites[5];
;   64	
;   65	struct pokemonData enemyparty[6];
;   66	uint8_t attackturn = 0;
;   67	uint8_t chosenmove[2];
;   68	bool wild;
;   69	
;   70	struct pokemonStats stats[2];
;   71	uint8_t *currentStatusPointer[2];
;   72	uint8_t statmods[2][7];
;   73	
;   74	uint8_t confusedturns[2];
;   75	bool leech[2];
;   76	uint8_t trapturns[2];
;   77	uint8_t reflectturns[2];
;   78	uint8_t lightscreenturns[2];
;   79	uint8_t mistturns[2];
;   80	bool flinch[2];
;   81	bool highcritratio[2];
;   82	bool rage[2];
;   83	
;   84	uint8_t disabledmove[2];
;   85	uint8_t disabledturns[2];
;   86	uint8_t lastmove[2];
;   87	uint8_t attackturns[2];
;   88	bool air[2];
;   89	bool run;
;   90	
;   91	uint8_t battleMenuState1 = 0;
;   92	uint8_t battleMenuState2 = 0;
;   93	uint8_t battleMenuCurrent = 1;
;   94	
;   95	const uint8_t statuscolors[5] = { 2,3,4,5,6 };
	SEGMENT CODE
;   96	
;   97	void battle_Initialize(void) {
_battle_Initialize:
;   98		PKMNSD0_init();
	CALL	_PKMNSD0_init
;   99		PKMNSD1_init();
	CALL	_PKMNSD1_init
;  100		PKMNSD2_init();
	CALL	_PKMNSD2_init
;  101		PKMNSD3_init();
	CALL	_PKMNSD3_init
;  102		PKMNSD5_init();
	CALL	_PKMNSD5_init
;  103	}
	RET	


;**************************** _battle_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD5_init                       IMPORT  -----   function
;_PKMNSD3_init                       IMPORT  -----   function
;_PKMNSD2_init                       IMPORT  -----   function
;_PKMNSD1_init                       IMPORT  -----   function
;_PKMNSD0_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  104	void battle_Setup(void) {
_battle_Setup:
	LD	HL,-30
	CALL	__frameset
;  105		int pokemonIndex;
;  106		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {//This makes sure the pokemon sent out has not fainted
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
;  107			if (party[pokemonIndex].currenthealth != 0 && party[pokemonIndex].id != 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_5
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_5
;  108				currentplayer = pokemonIndex;
	LD	A,(IX+-3)
	LD	(_currentplayer),A
;  109				pokemonIndex = 6;
	LD	BC,6
	LD	(IX+-3),BC
;  110			}
;  111		}
L_5:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_4
;  112		SetupBattleGfx();
	CALL	_SetupBattleGfx
;  113	
;  114		battleMenuState1 = 0;
;  115		battleMenuState2 = 0;
;  116		battleMenuCurrent = 1;
;  117	
;  118		stats[0] = stats_CalculateStats(enemyparty[0]);
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	PEA	IX+-18
	LD	DE,HL
	XOR	A,A
	LD	(_battleMenuState1),A
	XOR	A,A
	LD	(_battleMenuState2),A
	LD	A,1
	LD	(_battleMenuCurrent),A
	LD	HL,_enemyparty
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats
	LD	BC,12
	LDIR	
;  119		stats[1] = stats_CalculateStats(party[0]);
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	PEA	IX+-30
	LD	DE,HL
	LD	HL,_party
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
;  120		currentenemy = 0;
	XOR	A,A
;  121		attackturn = 0;
;  122	
;  123		resetstatus(true);
	LD	BC,1
	PUSH	BC
	LD	(_currentenemy),A
	XOR	A,A
	LD	(_attackturn),A
	CALL	_resetstatus
	POP	BC
;  124		resetstatus(false);
	LD	BC,0
	PUSH	BC
	CALL	_resetstatus
	POP	BC
;  125	
;  126		run = false;
	XOR	A,A
	LD	(_run),A
;  127	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Setup ***************************
;Name                         Addr/Register   Size   Type
;_run                                STATIC      1   variable
;_resetstatus                        IMPORT  -----   function
;_attackturn                         STATIC      1   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_enemyparty                         STATIC    204   variable
;_stats_CalculateStats               IMPORT  -----   function
;_battleMenuCurrent                  STATIC      1   variable
;_battleMenuState2                   STATIC      1   variable
;_battleMenuState1                   STATIC      1   variable
;_SetupBattleGfx                     IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;G_0                                   IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


;  128	void SetupBattleGfx(void) {
_SetupBattleGfx:
	LD	HL,-6
	CALL	__frameset
;  129		zx7_Decompress(textBoxSprite1, battletextbox1_compressed);
	LD	HL,_PKMNSD5+6
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  130		zx7_Decompress(textBoxSprite2, battletextbox2_compressed);
	LD	HL,_PKMNSD5+9
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  131		backgroundSprite = gfx_MallocSprite(160, 88);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  132		zx7_Decompress(backgroundSprite, background_compressed);
	LD	IY,_PKMNSD5
	LD	(_backgroundSprite),HL
	LD	BC,(IY+105)
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  133		hpBarSprite = gfx_MallocSprite(98, 10);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,98
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  134		zx7_Decompress(hpBarSprite, hpbar_compressed);
	LD	IY,_PKMNSD5
	LD	(_hpBarSprite),HL
	LD	BC,(IY+108)
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  135		playerSprite = gfx_MallocSprite(56, 56);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  136		enemySprite = gfx_MallocSprite(56, 56);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	LD	(_playerSprite),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_enemySprite),HL
;  137	
;  138		if (party[currentplayer].id < 80) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	CP	A,80
	JR	NC,L_10
;  139			zx7_Decompress(playerSprite, PKMNSD2[party[currentplayer].id]);
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD2
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  140		}
;  141		else {
	JR	L_13
L_10:
;  142			zx7_Decompress(playerSprite, PKMNSD3[party[currentplayer].id - 80]);
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD3
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  143		}
L_13:
;  144		if (enemyparty[currentenemy].id < 80) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	CP	A,80
	JR	NC,L_12
;  145			zx7_Decompress(enemySprite, PKMNSD0[enemyparty[currentenemy].id]);
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  146		}
;  147		else {
	JR	L_14
L_12:
;  148			zx7_Decompress(enemySprite, PKMNSD1[enemyparty[currentenemy].id - 80]);
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  149		}
L_14:
;  150	
;  151	
;  152		MallocIcons();
	CALL	_MallocIcons
;  153	
;  154		SetColors(1);
	LD	BC,1
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  155		gfx_FillScreen(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  156		gfx_SetPalette(battle_gfx_pal, sizeof_battle_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD5+111
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  157		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  158		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  159		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  160		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  161	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetupBattleGfx ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_MallocIcons                        IMPORT  -----   function
;_PKMNSD1                            IMPORT    219   variable
;_PKMNSD0                            IMPORT    240   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_PKMNSD3                            IMPORT    219   variable
;_PKMNSD2                            IMPORT    240   variable
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_hpBarSprite                        STATIC      3   variable
;_backgroundSprite                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;G_6                                   IX-6      3   variable
;G_2                                   IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  162	int battle_Loop(void) {
_battle_Loop:
	LD	HL,-9
	CALL	__frameset
;  163		/* Battle */
;  164		redrawcharacters();
	CALL	_redrawcharacters
;  165		/* Switch to a new poketmon or lose battle if health is 0 */
;  166		if (party[currentplayer].currenthealth == 0) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_32
;  167			sprintf(str, "%s fainted", playername);
	LD	BC,_playername
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  168			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  169			attackturn = 0;
	XOR	A,A
	LD	(_attackturn),A
;  170	
;  171			i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  172			while (i < 6) {
	JR	L_20
L_21:
;  173				if (party[i].currenthealth != 0 && party[i].id != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_19
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_19
;  174					currentplayer = i;
;  175					resetstatus(true);
	LD	BC,1
	PUSH	BC
	LD	A,(_i)
	LD	(_currentplayer),A
	CALL	_resetstatus
	POP	BC
;  176					return 1;
	LD	HL,1
	JR	L_52
;  177				}
L_19:
;  178				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  179			}
L_20:
	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_21
;  180	
;  181			map_LoseFight();
	CALL	_map_LoseFight
	OR	A,A
;  182			return 0;
	SBC	HL,HL
	JR	L_52
;  183		}
L_32:
;  184		if (enemyparty[currentenemy].currenthealth == 0) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	NZ,L_50
;  185			sprintf(str, "%s fainted", enemyname);
	LD	BC,_enemyname
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  186			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  187			addxp();
	CALL	_addxp
;  188			attackturn = 0;
	XOR	A,A
	LD	(_attackturn),A
;  189	
;  190			i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  191			while (i < 6) {
	JR	L_28
L_29:
;  192				if (enemyparty[i].currenthealth != 0 && enemyparty[i].id != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	HL,(IY+13)
	CALL	__scmpzero
	JR	Z,L_27
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_27
;  193					currentenemy = i;
;  194					resetstatus(false);
	LD	BC,0
	PUSH	BC
	LD	A,(_i)
	LD	(_currentenemy),A
	CALL	_resetstatus
	POP	BC
;  195					return 1;
	LD	HL,1
	JR	L_52
;  196				}
L_27:
;  197				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  198			}
L_28:
	LD.LIS	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_29
;  199	
;  200			
;  201			map_WinFight(wild, enemyparty[0].level * 40);
	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
	OR	A,A
;  202			return 0;
	SBC	HL,HL
	JR	L_52
;  203		}
L_50:
;  204		/* If 0 determine who attacks first, if 1 or 2 let other character attack, if 3 do end of turn stuff */
;  205		if (attackturn == 0) {
	LD	A,(_attackturn)
	OR	A,A
	JR	NZ,L_49
;  206			while (!playerturn()) {};
L_33:
	CALL	_playerturn
	OR	A,A
	JR	Z,L_33
;  207			while (!enemyturn()) {};
L_36:
	CALL	_enemyturn
	OR	A,A
	JR	Z,L_36
;  208			if (run) {
	LD	A,(_run)
	OR	A,A
	JR	Z,L_42
	OR	A,A
;  209				return 0;
	SBC	HL,HL
	JR	L_52
;  210			}
L_42:
;  211			/* Paralysis gets a speed reduction */
;  212			if ((stats[0].speed / (1+(((*currentStatusPointer[0]) == 4) * 3))) > (stats[1].speed / (1 + (((*currentStatusPointer[1]) == 4) * 3)))) {
	LD	IY,_stats
	LD	BC,(IY+22)
	CALL	__stoiu
	LD	DE,HL
	LD	HL,_currentStatusPointer+3
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__23
	LD	B,1
	JR	L__24
L__23:
	LD	B,0
L__24:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	LD	BC,(_stats+10)
	CALL	__stoiu
	LD	IY,(_currentStatusPointer)
	LD	A,(IY)
	LD	(IX+-9),HL
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__26
	LD	B,1
	JR	L__27
L__26:
	LD	B,0
L__27:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-9)
	INC	BC
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_41
;  213				attack(false, chosenmove[false]);
	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  214				attackturn = 1;
	LD	A,1
	LD	(_attackturn),A
;  215			}
;  216			else {
	JR	L_51
L_41:
;  217				attack(true, chosenmove[true]);
	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  218				
;  219				attackturn = 2;
	LD	A,2
	LD	(_attackturn),A
;  220			}
;  221		}
;  222		else if(attackturn < 3) {
	JR	L_51
L_49:
	LD	A,(_attackturn)
	CP	A,3
	JR	NC,L_47
;  223			if (attackturn == 1) {
	LD	A,(_attackturn)
	CP	A,1
	JR	NZ,L_45
;  224				attack(true, chosenmove[true]);
	LD	HL,_chosenmove
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  225				attackturn = 3;
	LD	A,3
	LD	(_attackturn),A
;  226			}
L_45:
;  227			if (attackturn == 2) {
	LD	A,(_attackturn)
	CP	A,2
	JR	NZ,L_51
;  228				attack(false, chosenmove[false]);
	LD	A,(_chosenmove)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_attack
	POP	BC
	POP	BC
;  229				attackturn = 3;
	LD	A,3
	LD	(_attackturn),A
;  230			}
;  231		}
;  232		else {
	JR	L_51
L_47:
;  233			/* After both turns */
;  234			applystatus(true);
	LD	BC,1
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  235			applystatus(false);
	LD	BC,0
	PUSH	BC
	CALL	_applystatus
	POP	BC
;  236			flinch[true] = false;
	LD	HL,_flinch
	INC	HL
	LD	(HL),0
;  237			flinch[false] = false;
	XOR	A,A
	LD	(_flinch),A
;  238			attackturn = 0;
	XOR	A,A
	LD	(_attackturn),A
;  239			return 1;
	LD	HL,1
	JR	L_52
;  240		}
L_51:
;  241		
;  242	
;  243		return 1;
	LD	HL,1
;  244	}
L_52:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_Loop ***************************
;Name                         Addr/Register   Size   Type
;_flinch                             STATIC      2   variable
;_applystatus                        IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_attack                             IMPORT  -----   function
;_currentStatusPointer               STATIC      6   variable
;_stats                              STATIC     24   variable
;_run                                STATIC      1   variable
;_enemyturn                          IMPORT  -----   function
;_playerturn                         IMPORT  -----   function
;_wild                               STATIC      1   variable
;_map_WinFight                       IMPORT  -----   function
;_addxp                              IMPORT  -----   function
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_map_LoseFight                      IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_i                                  IMPORT      2   variable
;_attackturn                         STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playername                         STATIC     20   variable
;_sprintf                            IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_redrawcharacters                   IMPORT  -----   function
;G_12                                  IX-6      3   variable
;G_10                                  IX-3      3   variable


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__9:
	DB	"%s fainted"
	DB	0
L__14:
	DB	"%s fainted"
	DB	0
	SEGMENT CODE
;  245	
;  246	
;  247	void battle_SpawnWild(uint8_t id, uint8_t minlevel, uint8_t maxlevel) {
_battle_SpawnWild:
	LD	HL,-43
	CALL	__frameset
;  248		int partyIndex;
;  249		for(partyIndex = 0; partyIndex < 6; partyIndex++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_56
L_54:
;  250			enemyparty[partyIndex] = clearcharacter;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_clearcharacter
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  251		}
L_56:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_54
;  252		enemyparty[0] = stats_NewCharacter(id,(rand() % (maxlevel-minlevel+1))+minlevel);
	CALL	_rand
	LD	DE,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	(IX+-40),BC	; spill
	LD	(IX+-43),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-43)	; unspill
	SBC	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__irems
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_enemyparty
	LD	BC,34
	LDIR	
;  253		wild = true;
	LD	A,1
	LD	(_wild),A
;  254	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnWild ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats_NewCharacter                 IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_clearcharacter                     STATIC     34   variable
;partyIndex                            IX-3      3   variable
;maxlevel                             IX+12      1   parameter
;minlevel                              IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 58 (bytes)
;       Spill Code: -1 (instruction)


;  255	void battle_SpawnTrainer(uint8_t ids[6][16], uint8_t levels[6][16], uint8_t trainernum) {
_battle_SpawnTrainer:
	LD	HL,-37
	CALL	__frameset
;  256		int partyIndex;
;  257		for(partyIndex = 0; partyIndex < 6; partyIndex++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_62
L_60:
;  258			enemyparty[partyIndex] = stats_NewCharacter(ids[partyIndex][trainernum],levels[partyIndex][trainernum]);
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	BC,DE
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	HL,(IX+6)
	ADD	HL,DE
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	PEA	IX+-37
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,34
	LDIR	
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  259		}
L_62:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_60
;  260		wild = false;
	XOR	A,A
	LD	(_wild),A
;  261	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _battle_SpawnTrainer ***************************
;Name                         Addr/Register   Size   Type
;_wild                               STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_stats_NewCharacter                 IMPORT  -----   function
;partyIndex                            IX-3      3   variable
;trainernum                           IX+12      1   parameter
;levels                                IX+9      3   parameter
;ids                                   IX+6      3   parameter


; Stack Frame Size: 52 (bytes)
;       Spill Code: -1 (instruction)


;  262	
;  263	bool playerturn() {
_playerturn:
	LD	HL,-27
	CALL	__frameset
;  264		if (attackturns[true] > 0 && party[currentplayer].pp[lastmove[true]] > 0) {
	LD	HL,_attackturns
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_67
	LD	BC,_lastmove
	INC	BC
	LD	(IX+-15),BC
	LD	A,(_currentplayer)
	LD	IY,(IX+-15)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	A,(IY)
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_67
;  265			chosenmove[true] = lastmove[true];
	LD	IY,(IX+-15)
	LD	HL,_chosenmove
	INC	HL
	LD	A,(IY)
	LD	(HL),A
;  266			return true;
	LD	A,1
	JR	L_102
;  267		}
L_67:
;  268		i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  269		/* Select Whether to fight, run, ect */
;  270		if (battleMenuState1 == 0) {
	LD	A,(_battleMenuState1)
	OR	A,A
	JR	NZ,L_100
;  271			switch (text_AskQuestion4("Fight","Item","Switch","Run", true))
	LD	BC,1
	PUSH	BC
	LD	BC,L__40
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	LD	BC,L__42
	PUSH	BC
	LD	BC,L__43
	PUSH	BC
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcase
L__44:
	DW	5
	DW	0
	DB	0
	DW24	L_68	

	DW24	L_69	

	DW24	L_70	

	DW24	L_71	

	DW24	L_76	

	DW24	L_100	

;  272			{
;  273			case 0:
L_68:
;  274				return false;
	XOR	A,A
	JR	L_102
;  275			case 1:
L_69:
;  276				battleMenuState1 = 1;
	LD	A,1
	LD	(_battleMenuState1),A
;  277				return false;
	XOR	A,A
	JR	L_102
;  278			case 2:
L_70:
;  279				battleMenuState1 = 2;
	LD	A,2
	LD	(_battleMenuState1),A
;  280				return false;
	XOR	A,A
	JR	L_102
;  281			case 3:
L_71:
;  282				battle_End();
	CALL	_battle_End
;  283				i = menu_PokemonMenu(false);
	LD	BC,0
	PUSH	BC
	CALL	_menu_PokemonMenu
	POP	BC
	LD	BC,HL
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  284				SetupBattleGfx();
	CALL	_SetupBattleGfx
;  285				if (i != 0 && (i - 1) != currentplayer && party[i - 1].id != 0) {
	LD	HL,(_i)
	CALL	__scmpzero
	JR	Z,L_75
	LD	BC,(_i)
	CALL	__stoiu
	DEC	HL
	LD	(IX+-18),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-18)
	SBC	HL,BC
	JR	Z,L_75
	LD	HL,34
	LD	BC,(IX+-18)
	CALL	__imulu
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_75
;  286					currentplayer = i - 1;
;  287					resetstatus(true);
	LD	BC,1
	PUSH	BC
	LD	A,(_i)
	DEC	A
	LD	(_currentplayer),A
	CALL	_resetstatus
	POP	BC
;  288					redrawcharacters();
	CALL	_redrawcharacters
;  289					return true;
	LD	A,1
	JR	L_102
;  290				}
L_75:
;  291				redrawcharacters();
	CALL	_redrawcharacters
;  292				return false;
	XOR	A,A
	JR	L_102
;  293			case 4:
L_76:
;  294				if (!wild) {
	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_81
;  295					text_Display("Can't run from trainers!", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__49
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  296					return false;
	XOR	A,A
	JR	L_102
;  297				}
L_81:
;  298				//NOT REAL RUN FUNCTION
;  299				if (stats[1].speed > stats[0].speed || (rand() % 3) == 0) {
	LD	IY,_stats
	LD	BC,(IY+22)
	LD	HL,(_stats+10)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_79
	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_80
L_79:
;  300					run = true;
	LD	A,1
	LD	(_run),A
;  301					return true;
	JR	L_102
;  302				}
;  303				else {
L_80:
;  304					text_Display("Failed to run away!", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__52
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  305					return true;
	LD	A,1
	JR	L_102
;  306				}
;  307				return false;
;  308			}
;  309		}
L_100:
;  310		/* Select which move to use */
;  311		if (battleMenuState1 == 1) {
	LD	A,(_battleMenuState1)
	CP	A,1
	JR	NZ,L_99
;  312			int selectedMove;
;  313			selectedMove = selectMove();
	CALL	_selectMove
	LD	(IX+-12),HL
;  314			battleMenuState1 = 0;
	XOR	A,A
	LD	(_battleMenuState1),A
;  315			/* Checks if the move can be used */
;  316			if (selectedMove == 0 || party[currentplayer].pp[selectedMove - 1] == 0 || disabledmove[true] == selectedMove) {
	LD	HL,(IX+-12)
	CALL	__icmpzero
	JR	Z,L_86
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,(IX+-12)
	DEC	BC
	LD	(IX+-6),BC
	LD	HL,(IX+-9)
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+5
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_86
	LD	HL,_disabledmove
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-12)
	SBC	HL,BC
	JR	NZ,L_87
L_86:
;  317				return false;
	XOR	A,A
	JR	L_102
;  318			}
L_87:
;  319			chosenmove[true] = party[currentplayer].moves[selectedMove - 1];
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-24),HL
	LD	IY,(IX+-24)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,_chosenmove
	LD	A,(HL)
	LD	(IY+1),A
;  320			party[currentplayer].pp[selectedMove - 1]--;
	LD	IY,(IX+-24)
	LEA	HL,IY+5
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	A,(HL)
	LD	BC,(IX+-6)
	LEA	HL,IY+5
	ADD	HL,BC
	DEC	A
	LD	(HL),A
;  321		}
;  322		/* Items */
;  323		else if (battleMenuState1 == 2) {
	JR	L_101
L_99:
	LD	A,(_battleMenuState1)
	CP	A,2
	JR	NZ,L_101
;  324			int chosenItem;
;  325			battleMenuState1 = 0;
	XOR	A,A
	LD	(_battleMenuState1),A
;  326			battle_End();
	CALL	_battle_End
;  327			chosenItem = menu_Items(true);
	LD	BC,1
	PUSH	BC
	CALL	_menu_Items
	POP	BC
	LD	(IX+-3),HL
;  328			SetupBattleGfx();
	CALL	_SetupBattleGfx
;  329			if (chosenItem == -1) {
	LD	BC,16777215
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_96
;  330				return false;
	XOR	A,A
	JR	L_102
;  331			}
L_96:
;  332			if (chosenItem < 4) {
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_95
;  333				redrawcharacters();
	CALL	_redrawcharacters
;  334				sprintf(str, "Used a %s", itemNames[chosenItem]);
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__60
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  335				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  336				playerItems[chosenItem]--;
	LD	BC,(IX+-3)
	LD	HL,_playerItems
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	A,(HL)
	DEC	A
	LD	IY,(IX+-27)
;  337				chosenmove[true] = 0;
	LD	HL,_chosenmove
	INC	HL
	LD	(IY),A
	LD	(HL),0
;  338				if (capture(chosenItem + 1)) {
	LD	C,(IX+-3)
	INC	C
	LD	B,0
	PUSH	BC
	CALL	_capture
	POP	BC
	OR	A,A
	JR	Z,L_101
;  339					map_WinFight(wild, enemyparty[0].level * 40);
	LD	A,(_enemyparty+9)
	LD	C,A
	LD	B,0
	LD.LIS	HL,40
	CALL	__smulu
	PUSH	HL
	LD	A,(_wild)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_map_WinFight
	POP	BC
	POP	BC
;  340					run = true;
	LD	A,1
	LD	(_run),A
;  341					return true;
	JR	L_102
;  342				}
;  343			}
;  344			else {
L_95:
;  345				battle_End();
	CALL	_battle_End
;  346				if (items_UseItem(chosenItem)) {
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	CALL	_items_UseItem
	POP	BC
	OR	A,A
	JR	Z,L_93
;  347					chosenmove[true] = 0;
	LD	HL,_chosenmove
	INC	HL
	LD	(HL),0
;  348					SetupBattleGfx();
	CALL	_SetupBattleGfx
;  349					redrawcharacters();
	CALL	_redrawcharacters
;  350				}
;  351				else {
	JR	L_101
L_93:
;  352					SetupBattleGfx();
	CALL	_SetupBattleGfx
;  353					redrawcharacters();
	CALL	_redrawcharacters
;  354					return false;
	XOR	A,A
	JR	L_102
;  355				}
;  356			}
;  357		}
L_101:
;  358		return true;
	LD	A,1
;  359	}
L_102:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _playerturn ***************************
;Name                         Addr/Register   Size   Type
;_items_UseItem                      IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_map_WinFight                       IMPORT  -----   function
;_capture                            IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_str                                IMPORT    100   variable
;_itemNames                          IMPORT    320   variable
;_sprintf                            IMPORT  -----   function
;_menu_Items                         IMPORT  -----   function
;_disabledmove                       STATIC      2   variable
;_selectMove                         IMPORT  -----   function
;_run                                STATIC      1   variable
;_rand                               IMPORT  -----   function
;_stats                              STATIC     24   variable
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;_redrawcharacters                   IMPORT  -----   function
;_resetstatus                        IMPORT  -----   function
;_SetupBattleGfx                     IMPORT  -----   function
;_menu_PokemonMenu                   IMPORT  -----   function
;_battle_End                         IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_battleMenuState1                   STATIC      1   variable
;_i                                  IMPORT      2   variable
;_chosenmove                         STATIC      2   variable
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_15                                 IX-18      3   variable
;G_14                                 IX-15      3   variable
;selectedMove                         IX-12      3   variable
;G_16                                  IX-9      3   variable
;G_17                                  IX-6      3   variable
;chosenItem                            IX-3      3   variable


; Stack Frame Size: 33 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__40:
	DB	"Run"
	DB	0
L__41:
	DB	"Switch"
	DB	0
L__42:
	DB	"Item"
	DB	0
L__43:
	DB	"Fight"
	DB	0
L__49:
	DB	"Can't run from trainers!"
	DB	0
L__52:
	DB	"Failed to run away!"
	DB	0
L__60:
	DB	"Used a %s"
	DB	0
	SEGMENT CODE
;  360	
;  361	int selectMove(void) {
_selectMove:
	LD	HL,-26
	CALL	__frameset
;  362		int8_t tv1, tv2, iconIndex;
;  363		tv1 = 0;
	LD	(IX+-1),0
;  364		tv2 = 0;
;  365	
;  366		zx7_Decompress(textBoxSprite2, battletextbox3_compressed);
	LD	HL,_PKMNSD5+12
	LD	(IX+-2),0
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  367		gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  368		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  369	
;  370	
;  371	
;  372		gfx_PrintStringXY(">", 15, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__64
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  373		gfx_PrintStringXY(data_moves[party[currentplayer].moves[0]].name, 25, 190);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,190
	PUSH	BC
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,25
	PUSH	BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  374		gfx_PrintStringXY(data_moves[party[currentplayer].moves[1]].name, 25, 205);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+1
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,205
	PUSH	BC
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,25
	PUSH	BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  375		gfx_PrintStringXY(data_moves[party[currentplayer].moves[2]].name, 145, 190);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,190
	PUSH	BC
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,145
	PUSH	BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  376		gfx_PrintStringXY(data_moves[party[currentplayer].moves[3]].name, 145, 205);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+4
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,205
	PUSH	BC
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,145
	PUSH	BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  377	
;  378		if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	LD	(IX+-14),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_104
;  379			gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
	LD	BC,_data_moves
	LD	DE,193
	PUSH	DE
	LD	DE,271
	PUSH	DE
	LD	HL,(IX+-14)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  380			sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-20),HL
	LD	IY,(IX+-20)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-20)
	LD	A,(IY+5)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  381			gfx_PrintStringXY(str, 271, 209);
	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  382		}
L_104:
;  383		
;  384	
;  385		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  386		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  387	
;  388		kb_Scan();
	CALL	_kb_Scan
;  389		if ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) {
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_106
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_107
L_106:
;  390			Wait(50);
	LD	BC,50
	PUSH	BC
	CALL	_Wait
	POP	BC
;  391		}
L_107:
;  392		kb_Scan();
	CALL	_kb_Scan
;  393		while (!((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear))) {
	JR	L_124
L_125:
;  394			kb_Scan();
	CALL	_kb_Scan
;  395			if ((kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_115
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_123
L_115:
;  396				if (tv1 == 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_111
;  397					tv1 = 0;
	LD	(IX+-1),0
;  398				}
;  399				else {
	JR	L_112
L_111:
;  400					tv1 = 1;
	LD	(IX+-1),1
;  401				}
L_112:
;  402				gfx_FillRectangle(14, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  403				gfx_FillRectangle(134, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  404				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  405	
;  406				gfx_FillRectangle(263, 185, 48, 46);
	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  407				if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	(IX+-5),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_114
;  408					gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
	LD	BC,_data_moves
	LD	DE,193
	PUSH	DE
	LD	DE,271
	PUSH	DE
	LD	HL,(IX+-11)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  409					sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-5)
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-23)
	LEA	HL,IY+1
	LD	DE,BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-23)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__74
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  410					gfx_PrintStringXY(str, 271, 209);
	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  411				}
L_114:
;  412	
;  413				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  414			}
L_123:
;  415			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_122
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_124
L_122:
;  416				if (tv2 == 1) {
	LD	A,(IX+-2)
	CP	A,1
	JR	NZ,L_118
;  417					tv2 = 0;
	LD	(IX+-2),0
;  418				}
;  419				else {
	JR	L_119
L_118:
;  420					tv2 = 1;
	LD	(IX+-2),1
;  421				}
L_119:
;  422				gfx_FillRectangle(14, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  423				gfx_FillRectangle(134, 185, 10, 45);
	LD	BC,45
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  424				gfx_PrintStringXY(">", 15 + tv2 * 120, 190 + 15 * tv1);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	BC,190
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,120
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+15
	PUSH	BC
	LD	BC,L__78
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  425	
;  426				gfx_FillRectangle(263, 185, 48, 46);
	LD	BC,46
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,263
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  427				if (party[currentplayer].moves[tv1 + 2 * tv2] != 0) {
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	(IX+-8),HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-8)
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IY+1
	ADD	HL,BC
	LD	(IX+-17),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_121
;  428					gfx_Sprite(typeIcons[data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].element - 1], 271, 193);
	LD	BC,_data_moves
	LD	DE,193
	PUSH	DE
	LD	DE,271
	PUSH	DE
	LD	HL,(IX+-17)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  429					sprintf(str, "%u/%u", party[currentplayer].pp[tv1 + 2 * tv2], data_moves[party[currentplayer].moves[tv1 + 2 * tv2]].uses);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,(IX+-8)
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-26)
	LEA	HL,IY+1
	LD	DE,BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	IY,(IX+-26)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__80
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  430					gfx_PrintStringXY(str, 271, 209);
	LD	BC,209
	PUSH	BC
	LD	BC,271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  431				}
L_121:
;  432	
;  433				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  434			}
;  435		}
L_124:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_126
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_125
L_126:
;  436		zx7_Decompress(textBoxSprite2, battletextbox2_compressed);
	LD	HL,_PKMNSD5+9
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  437		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_128
	OR	A,A
;  438			return(0);
	SBC	HL,HL
	JR	L_129
;  439		}
L_128:
;  440		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  441		return (tv1 + 1 + 2 * (tv2));
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	ADD	HL,HL
	LD	DE,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	INC	BC
	LD	HL,DE
	ADD	HL,BC
;  442	}
L_129:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _selectMove ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_typeIcons                          IMPORT     51   variable
;_gfx_Sprite                         IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_data_moves                         IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;G_22                                 IX-17      3   variable
;G_19                                 IX-14      3   variable
;G_20                                 IX-11      3   variable
;G_23                                  IX-8      3   variable
;G_21                                  IX-5      3   variable
;tv2                                   IX-2      1   variable
;tv1                                   IX-1      1   variable


; Stack Frame Size: 32 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__64:
	DB	">"
	DB	0
L__66:
	DB	"%u/%u"
	DB	0
L__72:
	DB	">"
	DB	0
L__74:
	DB	"%u/%u"
	DB	0
L__78:
	DB	">"
	DB	0
L__80:
	DB	"%u/%u"
	DB	0
	SEGMENT CODE
;  443	
;  444	bool enemyturn() {
_enemyturn:
	LD	HL,-12
	CALL	__frameset
;  445		if (attackturns[false] > 0) {
	LD	A,(_attackturns)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_147
;  446			chosenmove[false] = lastmove[false];
	LD	A,(_lastmove)
	LD	(_chosenmove),A
;  447			return true;
	LD	A,1
	JR	L_149
;  448		}
L_147:
;  449		switch (rand() % 4)
	CALL	_rand
	LD	BC,4
	CALL	__irems
	CALL	__seqcase
L__86:
	DW	4
	DW	0
	DB	0
	DW24	L_131	

	DW24	L_135	

	DW24	L_139	

	DW24	L_143	

	DW24	L_148	

;  450		{
;  451		case 0:
L_131:
;  452			if (enemyparty[currentenemy].moves[0] == 0 || disabledmove[false] == 1) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	LD	(IX+-3),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_133
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_134
L_133:
;  453				return false;
	XOR	A,A
	JR	L_149
;  454			}
L_134:
;  455			chosenmove[false] = enemyparty[currentenemy].moves[0];
	LD	HL,(IX+-3)
	LD	A,(HL)
	LD	(_chosenmove),A
;  456			break;
	JR	L_148
;  457		case 1:
L_135:
;  458			if (enemyparty[currentenemy].moves[1] == 0 || disabledmove[false] == 2) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+1
	INC	BC
	LD	(IX+-6),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_137
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_138
L_137:
;  459				return false;
	XOR	A,A
	JR	L_149
;  460			}
L_138:
;  461			chosenmove[false] = enemyparty[currentenemy].moves[1];
	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	(_chosenmove),A
;  462			break;
	JR	L_148
;  463		case 2:
L_139:
;  464			if (enemyparty[currentenemy].moves[2] == 0 || disabledmove[false] == 3) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+3
	LD	(IX+-9),IY
	LD	HL,(IX+-9)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_141
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_142
L_141:
;  465				return false;
	XOR	A,A
	JR	L_149
;  466			}
L_142:
;  467			chosenmove[false] = enemyparty[currentenemy].moves[2];
	LD	HL,(IX+-9)
	LD	A,(HL)
	LD	(_chosenmove),A
;  468			break;
	JR	L_148
;  469		case 3:
L_143:
;  470			if (enemyparty[currentenemy].moves[3] == 0 || disabledmove[false] == 4) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+4
	LD	(IX+-12),IY
	LD	HL,(IX+-12)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_145
	LD	A,(_disabledmove)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_146
L_145:
;  471				return false;
	XOR	A,A
	JR	L_149
;  472			}
L_146:
;  473			chosenmove[false] = enemyparty[currentenemy].moves[3];
	LD	HL,(IX+-12)
	LD	A,(HL)
	LD	(_chosenmove),A
;  474			break;
;  475		}
L_148:
;  476		return true;
	LD	A,1
;  477	}
L_149:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _enemyturn ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_rand                               IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_attackturns                        STATIC      2   variable
;G_28                                 IX-12      3   variable
;G_27                                  IX-9      3   variable
;G_26                                  IX-6      3   variable
;G_25                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  478	void redrawcharacters(void) {
_redrawcharacters:
	LD	HL,-9
	CALL	__frameset
;  479		int statusIndex, healthRatio;
;  480		gfx_SetColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  481		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  482	
;  483		gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  484		gfx_ScaledTransparentSprite_NoClip(playerSprite, 20, 64, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  485		gfx_ScaledTransparentSprite_NoClip(enemySprite, 190, 8, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,190
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  486	
;  487		/* Display Information about player and enemy */
;  488		
;  489		gfx_PrintStringXY(data_pokemon[enemyparty[currentenemy].id].name, 17, 29);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,29
	PUSH	BC
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,17
	PUSH	BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  490		sprintf(str, "Lv%u", enemyparty[currentenemy].level);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__96
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  491		gfx_PrintStringXY(str, 98, 29);
	LD	BC,29
	PUSH	BC
	LD	BC,98
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  492		gfx_Sprite(hpBarSprite, 40, 40);
	LD	BC,40
	PUSH	BC
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
;  493		healthRatio = (enemyparty[currentenemy].currenthealth * 78) / stats[0].health;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	DE,HL
	LD	BC,(_stats)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
;  494		if (healthRatio > 34) {
	OR	A,A
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-3),HL
	LD	BC,HL
	LD	HL,34
	SBC	HL,BC
	JP	P,L_153
;  495			gfx_SetColor(colors[8]);
	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  496		}else if (healthRatio > 14) {
	JR	L_154
L_153:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_151
;  497			gfx_SetColor(colors[9]);
	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  498		}else {
	JR	L_154
L_151:
;  499			gfx_SetColor(colors[10]);
	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  500		}
L_154:
;  501		gfx_FillRectangle(58, 42, healthRatio, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,58
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  502		if (enemyparty[currentenemy].currentstatus > 0) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	XOR	A,A
	CP	A,(IY+15)
	JR	NC,L_156
;  503			
;  504			gfx_TransparentSprite_NoClip(statusIcons[enemyparty[currentenemy].currentstatus-1], 18, 41);
	LD	BC,41
	PUSH	BC
	LD	BC,18
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  505		}
L_156:
;  506	
;  507		gfx_PrintStringXY(data_pokemon[party[currentplayer].id].name, 181, 129);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,129
	PUSH	BC
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,181
	PUSH	BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  508		sprintf(str, "Lv%u", party[currentplayer].level);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  509		gfx_PrintStringXY(str, 264, 129);
	LD	BC,129
	PUSH	BC
	LD	BC,264
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  510		gfx_Sprite(hpBarSprite, 204, 140);
	LD	BC,140
	PUSH	BC
	LD	BC,204
	PUSH	BC
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  511		healthRatio = (party[currentplayer].currenthealth * 78) / stats[1].health;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	IY,_stats
	LD	BC,(IY+12)
	LD	DE,HL
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	(IX+-3),HL
;  512		if (healthRatio > 34) {
	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_160
;  513			gfx_SetColor(colors[8]);
	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  514		}
;  515		else if (healthRatio > 14) {
	JR	L_161
L_160:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_158
;  516			gfx_SetColor(colors[9]);
	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  517		}
;  518		else {
	JR	L_161
L_158:
;  519			gfx_SetColor(colors[10]);
	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  520		}
L_161:
;  521		gfx_FillRectangle(222, 142, healthRatio, 6);
	LD	BC,6
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,142
	PUSH	BC
	LD	BC,222
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  522		
;  523		sprintf(str, "%u/%u", party[currentplayer].currenthealth, stats[1].health);
	LD	IY,_stats
	LD	BC,(IY+12)
	CALL	__stoiu
	PUSH	HL
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__103
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  524		gfx_PrintStringXY(str, 247, 153);
	LD	BC,153
	PUSH	BC
	LD	BC,247
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  525	
;  526		gfx_SetTextFGColor(colors[11]);
	LD	HL,_colors+11
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  527		gfx_PrintStringXY("XP", 193, 166);
	LD	BC,166
	PUSH	BC
	LD	BC,193
	PUSH	BC
	LD	BC,L__104
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  528		gfx_SetColor(colors[7]);
	LD	HL,_colors+7
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  529		if (party[currentplayer].level < 100) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_164
;  530			gfx_FillRectangle(210, 168, CalculateXpPercent(), 4);
	LD	BC,4
	PUSH	BC
	CALL	_CalculateXpPercent
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,168
	PUSH	BC
	LD	BC,210
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  531		}
L_164:
;  532		if (party[currentplayer].currentstatus > 0) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	XOR	A,A
	CP	A,(IY+15)
	JR	NC,L_165
;  533			gfx_TransparentSprite_NoClip(statusIcons[party[currentplayer].currentstatus - 1], 182, 141);
	LD	BC,141
	PUSH	BC
	LD	BC,182
	PUSH	BC
	LD	IY,(IX+-6)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  534		}
L_165:
;  535	
;  536		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  537		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  538		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  539	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _redrawcharacters ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_CalculateXpPercent                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_statusIcons                        IMPORT     15   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_stats                              STATIC     24   variable
;_hpBarSprite                        STATIC      3   variable
;_gfx_Sprite                         IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_backgroundSprite                   STATIC      3   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;G_30                                  IX-9      3   variable
;G_32                                  IX-6      3   variable
;healthRatio                           IX-3      3   variable


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__96:
	DB	"Lv%u"
	DB	0
L__100:
	DB	"Lv%u"
	DB	0
L__103:
	DB	"%u/%u"
	DB	0
L__104:
	DB	"XP"
	DB	0
	SEGMENT CODE
;  540	
;  541	uint8_t CalculateXpPercent(void) {
_CalculateXpPercent:
	LD	HL,-21
	CALL	__frameset
;  542		int cXp, sXp, mXp;
;  543		cXp = party[currentplayer].xp;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	BC,(IY+10)
	LD	(IX+-6),BC
;  544		sXp = xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level];
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	D,(IY+9)
	LD	IY,(IX+-12)
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	(IX+-21),HL	; spill
	LD	A,D
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,(IX+-21)	; unspill
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-3),BC
;  545		mXp = xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level + 1];
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	BC,HL
	LD	A,D
	UEXT	HL
	LD	L,A
	INC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-9),BC
;  546		return((uint8_t)((92 * (cXp - sXp)) / (mXp - sXp)));
	LD	BC,(IX+-3)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	A,92
	CALL	__imul_b
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	A,L
;  547	
;  548	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _CalculateXpPercent ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_data_pokemon                       IMPORT  unknown variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;mXp                                   IX-9      3   variable
;cXp                                   IX-6      3   variable
;sXp                                   IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: -1 (instruction)


;  549	
;  550	void battle_End(void) {
_battle_End:
;  551		free(playerSprite);
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  552		free(enemySprite);
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  553		free(backgroundSprite);
	LD	BC,(_backgroundSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  554		free(hpBarSprite);
	LD	BC,(_hpBarSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  555		FreeIcons();
	CALL	_FreeIcons
;  556	}
	RET	


;**************************** _battle_End ***************************
;Name                         Addr/Register   Size   Type
;_FreeIcons                          IMPORT  -----   function
;_hpBarSprite                        STATIC      3   variable
;_backgroundSprite                   STATIC      3   variable
;_enemySprite                        STATIC      3   variable
;_playerSprite                       STATIC      3   variable
;_free                               IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -1 (instruction)


;  557	
;  558	void attack(bool player, uint8_t move) {
_attack:
	LD	HL,-489
	CALL	__frameset
;  559		
;  560		char username[20];
;  561		char nonusername[20];
;  562		uint32_t damage;
;  563		uint8_t hitcount = 0;
	LD	(IX+-27),0
;  564		uint8_t userlevel;
;  565		uint8_t nonuserlevel;
;  566	
;  567		uint8_t userelement1;
;  568		uint8_t userelement2;
;  569		uint8_t nonuserelement1;
;  570		uint8_t nonuserelement2;
;  571	
;  572		if (move == 0) {
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_545
;  573			return;
;  574		}
;  575		
;  576		
;  577		rage[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
;  578	
;  579		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_172
;  580			strcpy(username, playername);
	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  581			strcpy(nonusername, enemyname);
	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  582			userlevel = party[currentplayer].level;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	BC,-375
	CALL	__istix
	LD	BC,-375
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  583			nonuserlevel = enemyparty[currentenemy].level;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-369
	CALL	__istix
	LD	BC,-369
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-90),A
;  584			userelement1 = data_pokemon[party[currentplayer].id].element1;
	LD	BC,-375
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-372
	CALL	__istix
	LD	BC,-372
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-91),A
;  585			userelement2 = data_pokemon[party[currentplayer].id].element2;
	LD	BC,-372
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-92),A
;  586			nonuserelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
	LD	BC,-369
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-366
	CALL	__istix
	LD	BC,-366
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-55),A
;  587			nonuserelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
	LD	BC,-366
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-56),A
;  588	
;  589		}
;  590		else {
	JR	L_174
L_172:
;  591			strcpy(username, enemyname);
	LD	BC,_enemyname
	PUSH	BC
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  592			strcpy(nonusername, playername);
	LD	BC,_playername
	PUSH	BC
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  593			userlevel = enemyparty[currentenemy].level;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	BC,-387
	CALL	__istix
	LD	BC,-387
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-23),A
;  594			nonuserlevel = party[currentplayer].level;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	BC,-381
	CALL	__istix
	LD	BC,-381
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+9)
	LD	(IX+-90),A
;  595			userelement1 = data_pokemon[enemyparty[currentenemy].id].element1;
	LD	BC,-387
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-384
	CALL	__istix
	LD	BC,-384
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-91),A
;  596			userelement2 = data_pokemon[enemyparty[currentenemy].id].element2;
	LD	BC,-384
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-92),A
;  597			nonuserelement1 = data_pokemon[party[currentplayer].id].element1;
	LD	BC,-381
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,-378
	CALL	__istix
	LD	BC,-378
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	LD	(IX+-55),A
;  598			nonuserelement2 = data_pokemon[party[currentplayer].id].element2;
	LD	BC,-378
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+17)
	LD	(IX+-56),A
;  599		}
L_174:
;  600	
;  601		if (flinch[player]) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_176
;  602			sprintf(str, "%s flinched", username);
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__113
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  603			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  604		}
L_176:
;  605		if (data_moves[move].type == 16) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-284
	CALL	__istix
	LD	BC,-284
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,16
	JR	NZ,L_177
;  606			sprintf(str, "%s used %s", username, data_moves[move].name);
	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__115
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  607			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  608			move = 1 + (rand() % 165);
	CALL	_rand
	LD	BC,165
	CALL	__irems
	INC	L
	LD	(IX+9),L
;  609		}
L_177:
;  610		sprintf(str, "%s used %s", username, data_moves[move].name);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-287
	CALL	__istix
	LD	BC,-287
	CALL	__ildix
	LD	IY,HL
	PEA	IY+0
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__116
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  611		text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  612	
;  613		
;  614		if (data_moves[move].type == 17) {
	LD	BC,-287
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,17
	JR	NZ,L_183
;  615			move = lastmove[!player];
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_179
	LD	HL,1
	LD	BC,-296
	CALL	__istix
	JR	L_180
L_179:
	OR	A,A
	SBC	HL,HL
	LD	BC,-296
	CALL	__istix
L_180:
	LD	HL,-296
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+9),A
;  616		}
L_183:
;  617		lastmove[player] = move;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(IX+9)
	LD	(HL),A
;  618	
;  619		if (data_moves[move].type == 19 && data_moves[lastmove[!player]].type != 0) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-68),HL
	LD	BC,-293
	CALL	__istix
	LD	HL,(IX+-68)
	LD	BC,-290
	CALL	__istix
	LD	HL,(IX+-68)
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-22),HL
	LD	IY,(IX+-22)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_194
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_185
	LD	HL,1
	LD	BC,-299
	CALL	__istix
	JR	L_186
L_185:
	OR	A,A
	SBC	HL,HL
	LD	BC,-299
	CALL	__istix
L_186:
	LD	BC,IX
	LD	DE,_lastmove
	LD	HL,-299
	ADD	HL,BC
	LD	HL,(HL)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_194
;  620			text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__122
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  621			return;
	JR	L_545
;  622		}
L_194:
;  623	
;  624		if (data_moves[move].statustype == 32) {
	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_199
;  625			if (attackturns[player] == 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-101),HL
	LD	BC,-302
	CALL	__istix
	LD	HL,(IX+-101)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_192
;  626				attackturns[player] = (rand() % 2) + 2;
	LD	HL,(IX+-101)
	CALL	__istix
	CALL	_rand
	LD	BC,2
	CALL	__irems
	INC	HL
	INC	HL
	LD	IY,(IX+-101)
	LD	(IY),L
;  627			}
L_192:
;  628			attackturns[player]--;
	LD	BC,-302
	CALL	__ildix
	LD	BC,-390
	CALL	__istix
	LD	BC,-390
	CALL	__ildix
	LD	IY,HL
	LD	BC,-390
	CALL	__ildix
	LD	A,(IY)
	DEC	A
	LD	(HL),A
;  629		}
L_199:
;  630		if (data_moves[move].statustype == 33) {
	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,33
	JR	NZ,L_204
;  631			if (attackturns[player] == 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-36),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_197
;  632				attackturns[player] = 1;
	LD	HL,(IX+-36)
	LD	(HL),1
;  633				return;
	JR	L_545
;  634			}
;  635			else if (attackturns[player] == 1) {
L_197:
	LD	HL,(IX+-36)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_204
;  636				attackturns[player] = 0;
	LD	HL,(IX+-36)
	LD	(HL),0
;  637			}
;  638		}
L_204:
;  639		if (data_moves[move].statustype == 34) {
	LD	HL,(IX+-22)
	LD	BC,-311
	CALL	__istix
	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,34
	JR	NZ,L_207
;  640			if (attackturns[player] == 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(IX+-48),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_202
;  641				attackturns[player] = 1;
	LD	HL,(IX+-48)
	LD	(HL),1
;  642				air[player] = true;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_air
	ADD	HL,DE
	LD	(HL),1
;  643				return;
	JR	L_545
;  644			}
;  645			else if (attackturns[player] == 1) {
L_202:
	LD	HL,(IX+-48)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_207
;  646				attackturns[player] = 0;
	LD	HL,(IX+-48)
	LD	(HL),0
;  647				air[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_air
	ADD	HL,DE
	LD	(HL),0
;  648			}
;  649		}
L_207:
;  650		
;  651	
;  652		/* Exit if character's status prevents movement */
;  653		if ((*currentStatusPointer[player] == 3) && (rand() % 4 == 1)) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-51),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_211
	CALL	_rand
	LD	BC,4
	CALL	__irems
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_211
;  654			sprintf(str, "%s is paralysed", username);
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__133
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  655			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  656			return;
	JR	L_545
;  657		}
L_211:
;  658		if (*currentStatusPointer[player] == 4) {
	LD	HL,(IX+-51)
	LD	BC,-320
	CALL	__istix
	LD	HL,(IX+-51)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_215
;  659			if (rand() % 3 == 0) {
	CALL	_rand
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_209
;  660				*currentStatusPointer[player] = 1;
	LD	HL,(IX+-51)
	LD	BC,-320
;  661				sprintf(str, "%s woke up", username);
	LD	IY,IX
	LD	DE,-343
	ADD	IY,DE
	CALL	__istix
	LD	HL,(IX+-51)
	LD	BC,IY
	PUSH	BC
	LD	BC,L__136
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),1
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  662				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  663			}
;  664			else {
	JR	L_215
L_209:
;  665				sprintf(str, "%s is asleep", username);
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__137
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  666				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  667				return;
	JR	L_545
;  668			}
;  669		}
L_215:
;  670		if (*currentStatusPointer[player] == 5) {
	LD	BC,-320
	CALL	__ildix
	LD	(IX+-89),HL
	LD	BC,-323
	CALL	__istix
	LD	HL,(IX+-89)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_219
;  671			if (rand() % 5 == 0) {
	CALL	_rand
	LD	BC,5
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_213
;  672				*currentStatusPointer[player] = 0;
	LD	HL,(IX+-89)
	LD	BC,-323
;  673				sprintf(str, "%s thawed out", username);
	LD	IY,IX
	LD	DE,-343
	ADD	IY,DE
	CALL	__istix
	LD	HL,(IX+-89)
	LD	BC,IY
	PUSH	BC
	LD	BC,L__140
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),0
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  674				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  675			}
;  676			else {
	JR	L_219
L_213:
;  677				sprintf(str, "%s is frozen", username);
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__141
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  678				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  679				return;
	JR	L_545
;  680			}
;  681		}
L_219:
;  682		if (confusedturns[player] > 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(IX+-65),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_232
;  683			confusedturns[player] --;
	LD	HL,(IX+-65)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-65)
	LD	(HL),A
;  684			if (rand() % 2 == 0) {
	CALL	_rand
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_232
;  685				sprintf(str, "%s hurt itself in its confusion", username);
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__144
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  686				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  687				return;
	JR	L_545
;  688			}
;  689		}
L_232:
;  690	
;  691		if (air[!player] || (data_moves[move].accuracy * statmodvalues[statmods[player][5]] / statmodvalues[statmods[!player][6]]) < (rand() % 100)) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_221
	LD	HL,1
	LD	BC,-305
	CALL	__istix
	JR	L_222
L_221:
	OR	A,A
	SBC	HL,HL
	LD	BC,-305
	CALL	__istix
L_222:
	LD	HL,-305
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_air
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_231
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_225
	LD	HL,1
	LD	BC,-308
	CALL	__istix
	JR	L_226
L_225:
	OR	A,A
	SBC	HL,HL
	LD	BC,-308
	CALL	__istix
L_226:
	LD	HL,(IX+-22)
	LD	BC,-311
	CALL	__istix
	LD	BC,(IX+-22)
	LEA	IY,IX+-128
	LD	(IY+-30),BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	(IX+-33),HL
	LD	(IY+-6),HL
	LD	HL,(IX+-33)
	LD	BC,_statmods
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	(IX+-30),HL
	LD	(IX+-116),HL
	LD	(IX+-86),HL
	LD	(IX+-98),HL
	LD	(IX+-54),HL
	LD	IY,(IX+-10)
	LEA	HL,IY+5
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,(IX+-22)
	LD	A,(IY+17)
	LD	BC,_statmodvalues
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IY)
	CALL	__imuls
	LD	DE,HL
	LD	BC,-308
	CALL	__ildix
	LD	BC,HL
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+6
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	LD	BC,(HL)
	LD	HL,DE
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_235
L_231:
;  692			text_Display("It Missed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__149
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  693			if (data_moves[move].statustype == 25) {
	LD	BC,-311
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	CP	A,25
	JR	NZ,L_545
;  694				takedamage(player, stats[player].health);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  695			}
;  696			return;
	JR	L_545
;  697		}
L_235:
;  698		if (!(*currentStatusPointer[player] == 4) && data_moves[move].statustype == 26) {
	LD	BC,-323
	CALL	__ildix
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_237
	LD	BC,(IX+-22)
	LEA	IY,IX+-128
	LD	(IY+-30),BC
	LD	IY,(IX+-22)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_237
;  699			text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__153
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  700		}
L_237:
;  701		if (data_moves[move].statustype == 22) {
	LEA	IY,IX+-128
	LD	BC,(IY+-30)
	LD	(IX+-122),BC
	LD	IY,(IX+-122)
	LD	A,(IY+19)
	CP	A,22
	JR	NZ,L_239
;  702			hitcount = (rand() % 3) + 1;
	CALL	_rand
	LD	BC,3
	CALL	__irems
	INC	HL
	LD	(IX+-27),L
;  703		}
L_239:
;  704		if (data_moves[move].statustype == 23) {
	LD	BC,(IX+-122)
	LD	(IX+-113),BC
	LD	IY,(IX+-122)
	LD	A,(IY+19)
	CP	A,23
	JR	NZ,L_240
;  705			hitcount = 1;
	LD	(IX+-27),1
;  706		}
;  707	
;  708	startattack:
L_240:
;  709		if (data_moves[move].type < 2 || data_moves[move].type == 19) {
	LD	BC,(IX+-113)
	LD	(IX+-3),BC
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	C,L_410
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,19
	JR	NZ,L_411
L_410:
;  710			if (data_moves[move].type == 0) {
	LEA	IY,IX+-128
	LD	BC,(IY+-39)
	LD	(IX+-26),BC
	LD	IY,(IX+-26)
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_273
;  711				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_243
	LD	HL,1
	LD	BC,-314
	CALL	__istix
	JR	L_244
L_243:
	OR	A,A
	SBC	HL,HL
	LD	BC,-314
	CALL	__istix
L_244:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_247
	LD	HL,1
	LD	BC,-317
	CALL	__istix
	JR	L_248
L_247:
	OR	A,A
	SBC	HL,HL
	LD	BC,-317
	CALL	__istix
L_248:
	LD	BC,(IX+-10)
	LD	(IX+-30),BC
	LD	(IX+-116),BC
	LD	BC,(IX+-26)
	LD	(IX+-119),BC
	LD	BC,(IX+-26)
	LD	(IX+-59),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-19),HL
	LD	(IX+-110),HL
	LD	(IX+-107),HL
	LD	(IX+-125),HL
	LD	BC,(IX+-30)
	LD	(IX+-86),BC
	LD	BC,(IX+-30)
	LD	(IX+-98),BC
	LD	BC,(IX+-30)
	LD	(IX+-54),BC
	LD	HL,(IX+-30)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-461	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-461	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-464	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-19)
	LD	BC,5
	CALL	__idivs
	LD	DE,HL
	INC	DE
	LD	IY,(IX+-26)
	LD	A,(IY+16)
	INC	DE
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-443	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-464	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-443	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LD	BC,-317
	CALL	__ildix
	LD	BC,HL
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-467	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-314
	CALL	__ildix
	LD	BC,HL
	LD	HL,12
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-467	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  712			}
;  713			else if (data_moves[move].type == 1) {
	JR	L_274
L_273:
	LD	BC,(IX+-26)
	LD	(IX+-119),BC
	LD	BC,(IX+-26)
	LD	(IX+-59),BC
	LD	IY,(IX+-26)
	LD	A,(IY+15)
	CP	A,1
	JR	NZ,L_271
;  714				damage = ((((2 * userlevel / 5) + 2)*data_moves[move].power*(stats[player].specialattack*statmodvalues[statmods[player][2]] / 100) / (stats[!player].specialdefence * statmodvalues[statmods[!player][3]] / 100)) / 50) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_251
	LD	BC,1
	LD	(IX+-128),BC
	JR	L_252
L_251:
	LD	BC,0
	LD	(IX+-128),BC
L_252:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_255
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	JR	L_256
L_255:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-3),BC
L_256:
	LD	BC,(IX+-30)
	LD	(IX+-10),BC
	LD	(IX+-116),BC
	LD	BC,(IX+-26)
	LD	(IX+-119),BC
	LD	BC,(IX+-26)
	LD	(IX+-59),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-19),HL
	LD	(IX+-110),HL
	LD	(IX+-107),HL
	LD	(IX+-125),HL
	LD	BC,(IX+-10)
	LD	(IX+-86),BC
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-54),BC
	LD	IY,(IX+-10)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-452	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+6)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-452	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-455	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-19)
	LD	BC,5
	CALL	__idivs
	LD	DE,HL
	INC	DE
	LD	IY,(IX+-26)
	LD	A,(IY+16)
	INC	DE
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-443	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-455	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-443	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	LD	DE,HL
	LEA	IY,IX+-128
	LD	BC,(IY+-3)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-458	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,12
	LD	BC,(IX+-128)
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+8)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-458	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  715			}
;  716			else {
	JR	L_274
L_271:
;  717				damage = ((((2 * userlevel / 5) + 2) * data_moves[lastmove[!player]].power * 2 * (stats[player].attack*statmodvalues[statmods[player][0]] / 100) / (stats[!player].defence * statmodvalues[statmods[!player][1]] / 100)) / 50) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_259
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-9),BC
	JR	L_260
L_259:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-9),BC
L_260:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_263
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-12),BC
	JR	L_264
L_263:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-12),BC
L_264:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_267
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-15),BC
	JR	L_268
L_267:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-15),BC
L_268:
	LD	BC,(IX+-116)
	LD	(IX+-10),BC
	LD	(IX+-30),BC
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	(IX+-19),HL
	LD	(IX+-110),HL
	LD	(IX+-107),HL
	LD	(IX+-125),HL
	LD	BC,(IX+-10)
	LD	(IX+-86),BC
	LD	BC,(IX+-10)
	LD	(IX+-98),BC
	LD	BC,(IX+-10)
	LD	(IX+-54),BC
	LD	HL,(IX+-10)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-440	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-440	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,IX
	LD	IY,-137
	ADD	IY,BC
	LD	DE,HL
	LD	HL,(IY)
	LD	BC,_lastmove
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-446	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-19)
	LD	BC,5
	CALL	__idivs
	LD	BC,HL
	INC	BC
	INC	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-443	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-446	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-443	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__imuls
	ADD	HL,HL
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	DE,HL
	LEA	IY,IX+-128
	LD	BC,(IY+-15)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statmodvalues
	ADD	HL,BC
	PUSH	BC
	PUSH	HL
	LD	BC,-449	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,(IY+-12)
	LD	HL,12
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+4)
	CALL	__stoiu
	LD	BC,HL
	PUSH	BC
	LD	BC,-449	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	HL,(IY)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	CALL	__idivs
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  718			}
L_274:
;  719			damage *= ((rand() % 16) + 85);//  /100
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+85
	CALL	__itol
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  720			damage *= elements[data_moves[move].element][nonuserelement1];// /2
	LD	BC,(IX+-68)
	LD	(IX+-16),BC
	LD	HL,BC
	LD	BC,-393
	LD	DE,_data_moves
	ADD	HL,DE
	CALL	__istix
	LD	BC,-393
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	A,(IX+-55)
	LD	BC,(IX+-7)
	LD	DE,_elements
	ADD	HL,DE
	LD	DE,HL
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  721			damage *= elements[data_moves[move].element][nonuserelement2];// /2
	LD	BC,-393
	CALL	__ildix
	LD	IY,HL
	LD	H,(IY+14)
	PUSH	IY
	PUSH	BC
	LD	IY,-434	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-434	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,18
	LD	A,(IX+-56)
	CALL	__imulu
	LD	BC,(IX+-7)
	LD	DE,_elements
	ADD	HL,DE
	LD	DE,HL
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	IY,HL
	UEXT	HL
	LD	L,(IY)
	LD	E,H
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  722			damage /= 400;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,400
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  723			if (data_moves[move].element == userelement1 || data_moves[move].element == userelement2) {
	LD	A,(IX+-91)
	PUSH	IY
	PUSH	BC
	LD	IY,-434	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CP	A,H
	JR	Z,L_276
	LD	BC,(IX+-119)
	LD	(IX+-59),BC
	LD	IY,(IX+-59)
	LD	A,(IY+14)
	CP	A,(IX+-92)
	JR	NZ,L_288
L_276:
;  724				damage *= 1.5;
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__ultof
	LD	HL,12582912
	LD	E,63
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  725			}
L_288:
;  726	
;  727			/* Critical Hit */
;  728			if (data_moves[move].statustype == 24 || highcritratio[player]) {
	LD	BC,(IX+-59)
	LD	(IX+-83),BC
	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,24
	JR	Z,L_286
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_287
L_286:
;  729				if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_281
;  730					if (data_pokemon[party[currentplayer].id].basespeed * 4 < (rand() % 256)) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_293
;  731						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IX+-19)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  732					}
;  733				}
;  734				else {
	JR	L_293
L_281:
;  735					if (data_pokemon[enemyparty[currentenemy].id].basespeed * 4 < (rand() % 256)) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_293
;  736						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IX+-110)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  737					}
;  738				}
;  739			}
;  740			else {
	JR	L_293
L_287:
;  741				if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_285
;  742					if (data_pokemon[party[currentplayer].id].basespeed / 2 < (rand() % 256)) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JP	P,L_293
;  743						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IX+-107)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  744					}
;  745				}
;  746				else {
	JR	L_293
L_285:
;  747					if (data_pokemon[enemyparty[currentenemy].id].basespeed / 2 < (rand() % 256)) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,256
	CALL	__irems
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_293
;  748						damage *= (2 * userlevel + 5) / (userlevel + 5);
	LD	A,(IX+-23)
	UEXT	HL
	LD	IY,(IX+-125)
	LEA	DE,IY+5
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,DE
	CALL	__idivs
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	CALL	__lmulu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  749					}
;  750				}
;  751			}
L_293:
;  752	
;  753			takedamage(!player, damage);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_290
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-18),BC
	JR	L_291
L_290:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-18),BC
L_291:
	LD	BC,(IX+-7)
	PUSH	BC
	LEA	IY,IX+-128
	LD	A,(IY+-18)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  754	
;  755			if (data_moves[move].statustype == 21 || data_moves[move].statustype == 26) {
	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,21
	JR	Z,L_295
	LD	IY,(IX+-83)
	LD	A,(IY+19)
	CP	A,26
	JR	NZ,L_297
L_295:
;  756				heal(player, damage / 2);
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	LD	L,1
	CALL	__lshru
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  757			}
L_297:
;  758			if (data_moves[move].statustype == 19) {
	LD	BC,(IX+-16)
	LD	(IX+-68),BC
	LD	HL,(IX+-16)
	LD	BC,-293
	CALL	__istix
	LD	HL,(IX+-16)
	LD	BC,-290
	CALL	__istix
	LD	HL,(IX+-16)
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-113),HL
	LD	IY,(IX+-113)
	LD	A,(IY+19)
	CP	A,19
	JR	NZ,L_300
;  759				takedamage(player, damage / 3);
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,3
	XOR	A,A
	CALL	__ldivu
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  760			}
L_300:
;  761			if (hitcount > 0) {
	XOR	A,A
	CP	A,(IX+-27)
	JR	NC,L_302
;  762				hitcount--;
	DEC	(IX+-27)
;  763				redrawcharacters();
	CALL	_redrawcharacters
;  764				Wait(15);
	LD	BC,15
	PUSH	BC
	CALL	_Wait
	POP	BC
;  765				goto startattack;
	JR	L_240
;  766			}
L_302:
;  767	
;  768			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] < 4) {
	LD	BC,_data_moves
	LD	HL,(IX+-16)
	ADD	HL,BC
	LD	BC,-396
	CALL	__istix
	LD	BC,-396
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	A,(IX+-55)
	LD	BC,-396
	LD	DE,_elements
	ADD	HL,DE
	LD	DE,HL
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	A,(IX+-56)
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JP	P,L_304
;  769				text_Display("Not Very Effective", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__183
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  770			}
L_304:
;  771			if (elements[data_moves[move].element][nonuserelement1] * elements[data_moves[move].element][nonuserelement2] > 4) {
	LD	BC,_data_moves
	LD	HL,(IX+-16)
	ADD	HL,BC
	LD	BC,-399
	CALL	__istix
	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-55)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-399
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	LD	A,18
	CALL	__imul_b
	LD	BC,_elements
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-56)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	OR	A,A
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	HL,4
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_315
;  772				text_Display("Super Effective", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__185
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  773			}
L_315:
;  774			if (rage[!player]) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_306
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-21),BC
	JR	L_307
L_306:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-21),BC
L_307:
	LD	HL,-149
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_rage
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_316
;  775				statmods[!player][0]++;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_310
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-24),BC
	JR	L_311
L_310:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-24),BC
L_311:
	LEA	IY,IX+-128
	LD	BC,(IY+-24)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-402
	CALL	__istix
	LD	BC,-402
	CALL	__ildix
	LD	A,(HL)
	LD	BC,-402
	CALL	__ildix
	INC	A
	LD	(HL),A
;  776			}
L_316:
;  777			redrawcharacters();
	CALL	_redrawcharacters
;  778		}
;  779		/* Raise user stat */
;  780		else if (data_moves[move].type == 2) {
	JR	L_541
L_411:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-72),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,2
	JR	NZ,L_409
;  781			if (statmods[player][data_moves[move].statustype] + data_moves[move].power > 12) {
	LD	BC,-293
	CALL	__ildix
	LD	(IX+-39),HL
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-405
	CALL	__istix
	LD	BC,(IX+-86)
	LEA	IY,IX+-128
	LD	(IY+-78),BC
	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	BC,IX
	LD	IY,-206
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	BC,-405
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	JP	P,L_318
;  782				statmods[player][data_moves[move].statustype] = 12;
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-72),BC
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-206
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	(HL),12
;  783			}
;  784			else {
	JR	L_319
L_318:
;  785				statmods[player][data_moves[move].statustype] += data_moves[move].power;
	LD	BC,_data_moves
	LD	HL,(IX+-39)
	ADD	HL,BC
	LD	BC,-411
	CALL	__istix
	LD	BC,(IX+-33)
	LEA	IY,IX+-128
	LD	(IY+-6),BC
	LD	HL,(IX+-33)
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-408
	CALL	__istix
	LD	BC,-411
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-408
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-485	; spill
	CALL	__istix
	POP	BC
	LD	BC,-411
	CALL	__ildix
	LD	DE,HL
	LD	BC,-411
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-408
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-470	; spill
	CALL	__istix
	LD	BC,-485	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-470	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	ADD	A,(IY+16)
	LD	(HL),A
;  786			}
L_319:
;  787			sprintf(str, "%s's %s rose", username, text_status2[data_moves[move].statustype]);
	LEA	IY,IX+-128
	LD	IY,(IY+-72)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-343
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__191
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  788			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  789		}
;  790		/* Lower non-user stat */
;  791		else if (data_moves[move].type == 3) {
	JR	L_541
L_409:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-81),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,3
	JR	NZ,L_407
;  792			if (statmods[!player][data_moves[move].statustype] < data_moves[move].power) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_321
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-27),BC
	JR	L_322
L_321:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-27),BC
L_322:
	LD	BC,-290
	CALL	__ildix
	LD	(IX+-42),HL
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-414
	CALL	__istix
	LEA	IY,IX+-128
	LD	BC,(IY+-27)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,-414
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	PUSH	BC
	LD	BC,-482	; spill
	CALL	__istix
	POP	BC
	LD	BC,-414
	CALL	__ildix
	LD	IY,HL
	PUSH	BC
	LD	BC,-482	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	CP	A,(IY+16)
	JR	NC,L_333
;  793				statmods[!player][data_moves[move].statustype] = 0;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_325
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-33),BC
	JR	L_326
L_325:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-33),BC
L_326:
	LD	BC,(IX+-3)
	LEA	IY,IX+-128
	LD	(IY+-81),BC
	LD	BC,(IY+-33)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+-3)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),0
;  794			}
;  795			else {
	JR	L_334
L_333:
;  796				statmods[!player][data_moves[move].statustype] -= data_moves[move].power;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_329
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-36),BC
	JR	L_330
L_329:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-36),BC
L_330:
	LD	BC,_data_moves
	LD	HL,(IX+-42)
	ADD	HL,BC
	LD	BC,-420
	CALL	__istix
	LEA	IY,IX+-128
	LD	BC,(IY+-36)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-417
	CALL	__istix
	LD	BC,-420
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-417
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-479	; spill
	CALL	__istix
	POP	BC
	LD	BC,-420
	CALL	__ildix
	LD	DE,HL
	LD	BC,-420
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	IY,-417
	LD	BC,IX
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	PUSH	BC
	LD	BC,-470	; spill
	CALL	__istix
	LD	BC,-479	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-470	; unspill
	CALL	__ildix
	POP	BC
	LD	IY,DE
	SUB	A,(IY+16)
	LD	(HL),A
;  797			}
L_334:
;  798			sprintf(str, "%s's %s fell", nonusername, text_status2[data_moves[move].statustype]);
	LEA	IY,IX+-128
	LD	IY,(IY+-81)
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__197
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  799			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  800		}
;  801		else if (data_moves[move].type == 5) {
	JR	L_541
L_407:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,5
	JR	NZ,L_405
;  802			takedamage(!player, data_moves[move].power);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_336
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-42),BC
	JR	L_337
L_336:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-42),BC
L_337:
	LD	IY,(IX+-3)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-42)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  803		}
;  804		else if (data_moves[move].type == 6 || data_moves[move].type == 7) {
	JR	L_541
L_405:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,6
	JR	Z,L_402
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,7
	JR	NZ,L_403
L_402:
;  805			if (wild) {
	LD	A,(_wild)
	OR	A,A
	JR	Z,L_341
;  806				run = true;
	LD	A,1
	LD	(_run),A
;  807			}
;  808			else {
	JR	L_541
L_341:
;  809				text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__203
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  810			}
;  811		}
;  812		else if (data_moves[move].type == 8) {
	JR	L_541
L_403:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,8
	JR	NZ,L_401
;  813			heal(player, stats[player].health / 2);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  814		}
;  815		else if (data_moves[move].type == 9) {
	JR	L_541
L_401:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,9
	JR	NZ,L_399
;  816			takedamage(!player, userlevel);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_343
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-45),BC
	JR	L_344
L_343:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-45),BC
L_344:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-45)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  817		}
;  818		else if (data_moves[move].type == 10) {
	JR	L_541
L_399:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,10
	JR	NZ,L_397
;  819			takedamage(!player, userlevel * 20 / (10 + (rand() % 20)));
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_347
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-48),BC
	JR	L_348
L_347:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-48),BC
L_348:
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,20
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+10
	LD	HL,DE
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-48)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  820		}
;  821		else if (data_moves[move].type == 11) {
	JR	L_541
L_397:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,11
	JR	NZ,L_395
;  822			takedamage(!player, stats[!player].health / 2);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_351
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-51),BC
	JR	L_352
L_351:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-51),BC
L_352:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_355
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-54),BC
	JR	L_356
L_355:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-54),BC
L_356:
	LEA	IY,IX+-128
	LD	BC,(IY+-54)
	LD	HL,12
	CALL	__imulu
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LEA	IY,IX+-128
	LD	A,(IY+-51)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  823		}
;  824		else if (data_moves[move].type == 12) {
	JR	L_541
L_395:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,12
	JR	NZ,L_393
;  825			i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  826			while (i < sizeof(statmods[player])) {
	JR	L_359
L_360:
;  827				statmods[player][i] = 6;
	LD	BC,(IX+-98)
	LD	(IX+-54),BC
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-54)
	ADD	HL,BC
	LD	(HL),6
;  828				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  829			}
L_359:
	LD	BC,(_i)
	CALL	__stoiu
	OR	A,A
	LD	BC,7
	SBC	HL,BC
	JR	C,L_360
;  830			while (i < sizeof(statmods[!player])) {
	JR	L_366
L_367:
;  831				statmods[player][i] = 6;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(IX+-54)
	ADD	HL,BC
	LD	(HL),6
;  832				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  833			}
L_366:
	LD	BC,(_i)
	CALL	__stoiu
	OR	A,A
	LD	BC,7
	SBC	HL,BC
	JR	C,L_367
	JR	L_541
;  834		}
;  835		else if (data_moves[move].type == 13) {
L_393:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,13
	JR	NZ,L_391
;  836			*currentStatusPointer[player] = 4;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	(HL),4
;  837			heal(player, 1000);
	LD	BC,1000
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  838		}
;  839		else if (data_moves[move].type == 14) {
	JR	L_541
L_391:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,14
	JR	NZ,L_389
;  840			disabledturns[!player] = (rand() % 7) + 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_370
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-57),BC
	JR	L_371
L_370:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-57),BC
L_371:
	CALL	_rand
	LD	BC,7
	CALL	__irems
	INC	HL
	INC	HL
	LD	IY,-185
	LD	BC,IX
	ADD	IY,BC
	LD	A,L
	LD	HL,(IY)
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(HL),A
;  841			disabledmove[!player] = lastmove[!player];
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_378
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-60),BC
	JR	L_379
L_378:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-60),BC
L_379:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_374
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-63),BC
	JR	L_375
L_374:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-63),BC
L_375:
	LD	HL,-188
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_lastmove
	ADD	HL,BC
	LD	IY,-191
	LD	BC,IX
	ADD	IY,BC
	PUSH	BC
	LD	BC,-470	; spill
	CALL	__istix
	LD	BC,-476	; spill
	CALL	__istix
	LD	BC,-470	; unspill
	CALL	__ildix
	POP	BC
	LD	HL,(IY)
	LD	BC,_disabledmove
	ADD	HL,BC
	PUSH	BC
	LD	BC,-470	; spill
	CALL	__istix
	LD	BC,-476	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-470	; unspill
	CALL	__ildix
	POP	BC
	LD	(HL),A
;  842		}
;  843		else if (data_moves[move].type == 15) {
	JR	L_541
L_389:
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	CP	A,15
	JR	NZ,L_541
;  844			if ((int)userlevel - (int)nonuserlevel + 30 > (rand() % 100)) {
	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-90)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	DE,IY+30
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_386
;  845				takedamage(!player, 800);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_382
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-66),BC
	JR	L_383
L_382:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-66),BC
L_383:
	LD	BC,800
	PUSH	BC
	LEA	IY,IX+-128
	LD	A,(IY+-66)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  846			}
;  847			else {
	JR	L_541
L_386:
;  848				text_Display("It Missed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__223
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  849			}
;  850		}
L_541:
;  851		/* Apply Stat or Status Effects */
;  852		if (data_moves[move].type == 4 || (rand() % 100) < data_moves[move].statuschance) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	(IX+-95),HL
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-62),HL
	LEA	IY,IX+-128
	LD	(IY+-90),HL
	LD	IY,(IX+-62)
	LD	A,(IY+15)
	CP	A,4
	JR	Z,L_540
	LD	BC,(IX+-62)
	LEA	IY,IX+-128
	LD	(IY+-90),BC
	LD	BC,(IX+-62)
	LD	(IY+-96),BC
	LD	IY,(IX+-62)
	LD	A,(IY+20)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-488
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),D
	POP	BC
	POP	IY
	CALL	_rand
	PUSH	BC
	LD	BC,-488
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-489
	LD	BC,IX
	ADD	IY,BC
	LD	D,(IY)
	POP	BC
	POP	IY
	LD	BC,100
	CALL	__irems
	OR	A,A
	SBC	HL,DE
	JP	P,L_544
L_540:
;  853			if (data_moves[move].statustype == 30) {
	LEA	IY,IX+-128
	LD	BC,(IY+-90)
	LD	(IX+-45),BC
	LD	IY,(IX+-45)
	LD	A,(IY+19)
	CP	A,30
	JR	NZ,L_415
;  854				e = rand() % 3;
	CALL	_rand
	LD	BC,3
	CALL	__irems
	LD	BC,HL
	LD	HL,_e
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  855			}
;  856			else {
	JR	L_433
L_415:
;  857				e = 3;
	LD	HL,_e
	LD	(HL),3
	INC	HL
	LD	(HL),0
;  858			}
L_433:
;  859			if (data_moves[move].statustype < 7) {
	LD	BC,(IX+-45)
	LEA	IY,IX+-128
	LD	(IY+-102),BC
	LD	IY,(IX+-45)
	LD	A,(IY+19)
	CP	A,7
	JR	NC,L_446
;  860				if (mistturns[!player] || statmods[!player][data_moves[move].statustype] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_417
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-69),BC
	JR	L_418
L_417:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-69),BC
L_418:
	LD	HL,-197
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_mistturns
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_430
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_421
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-75),BC
	JR	L_422
L_421:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-75),BC
L_422:
	LD	BC,(IX+-45)
	LEA	IY,IX+-128
	LD	(IY+-102),BC
	LD	BC,(IY+-75)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	IY,(IX+-45)
	LD	A,(IY+19)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_431
L_430:
;  861					text_Display("It Failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__232
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  862				}
;  863				else {
	JR	L_446
L_431:
;  864					statmods[!player][data_moves[move].statustype] --;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_426
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-84),BC
	JR	L_427
L_426:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-84),BC
L_427:
	LEA	IY,IX+-128
	LD	BC,(IY+-84)
	LD	HL,7
	CALL	__imulu
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-426
	CALL	__istix
	LD	HL,(IX+-95)
	LD	BC,_data_moves
	ADD	HL,BC
	LD	BC,-423
	CALL	__istix
	LD	BC,-423
	CALL	__ildix
	LD	IY,HL
	LD	B,(IY+19)
	LD	A,B
	UEXT	HL
	LD	IY,-426
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	LD	L,A
	ADD	HL,DE
	PUSH	BC
	LD	BC,-473	; spill
	CALL	__istix
	POP	BC
	LD	A,B
	UEXT	HL
	LD	IY,-426
	LD	DE,IX
	ADD	IY,DE
	LD	DE,(IY)
	LD	L,A
	ADD	HL,DE
	PUSH	BC
	LD	BC,-470	; spill
	CALL	__istix
	LD	BC,-473	; unspill
	CALL	__ildix
	POP	BC
	LD	A,(HL)
	PUSH	BC
	LD	BC,-470	; unspill
	CALL	__ildix
	POP	BC
	DEC	A
	LD	(HL),A
;  865					sprintf(str, "%s's %s fell", true, nonusername, text_status2[data_moves[move].statustype]);
	LD	A,B
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_text_status2
	ADD	HL,BC
	PUSH	HL
	LD	HL,IX
	LD	BC,-363
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,L__234
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  866					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  867				}
;  868			}
L_446:
;  869			if (data_moves[move].statustype == 7) {
	LEA	IY,IX+-128
	LD	BC,(IY+-102)
	LD	(IX+-104),BC
	LD	(IY+-105),BC
	LD	IY,(IX+-104)
	LD	A,(IY+19)
	CP	A,7
	JR	NZ,L_460
;  870				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_435
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-87),BC
	JR	L_436
L_435:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-87),BC
L_436:
	LEA	IY,IX+-128
	LD	BC,(IY+-87)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_444
;  871					*currentStatusPointer[!player] = 1;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_439
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-93),BC
	JR	L_440
L_439:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-93),BC
L_440:
	LEA	IY,IX+-128
	LD	BC,(IY+-93)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  872					sprintf(str, "%s was poisoned", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__239
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),1
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  873					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  874				}
;  875				else if (data_moves[move].type == 4) {
	JR	L_460
L_444:
	LD	BC,(IX+-104)
	LEA	IY,IX+-128
	LD	(IY+-105),BC
	LD	IY,(IX+-104)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_460
;  876					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__241
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  877				}
;  878			}
L_460:
;  879			if (data_moves[move].statustype == 8 || e == 0) {
	LEA	IY,IX+-128
	LD	BC,(IY+-105)
	LD	(IX+-71),BC
	LD	(IY+-111),BC
	LD	IY,(IX+-71)
	LD	A,(IY+19)
	CP	A,8
	JR	Z,L_459
	LD	HL,(_e)
	CALL	__scmpzero
	JR	NZ,L_474
L_459:
;  880				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_449
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-99),BC
	JR	L_450
L_449:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-99),BC
L_450:
	LEA	IY,IX+-128
	LD	BC,(IY+-99)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_458
;  881					*currentStatusPointer[!player] = 2;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_453
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-108),BC
	JR	L_454
L_453:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-108),BC
L_454:
	LEA	IY,IX+-128
	LD	BC,(IY+-108)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  882					sprintf(str, "%s was burned", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__247
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),2
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  883					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  884				}
;  885				else if (data_moves[move].type == 4) {
	JR	L_474
L_458:
	LD	BC,(IX+-71)
	LEA	IY,IX+-128
	LD	(IY+-111),BC
	LD	IY,(IX+-71)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_474
;  886					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__249
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  887				}
;  888			}
L_474:
;  889			if (data_moves[move].statustype == 9 || e == 1) {
	LEA	IY,IX+-128
	LD	BC,(IY+-111)
	LD	(IX+-74),BC
	LD	(IY+-117),BC
	LD	IY,(IX+-74)
	LD	A,(IY+19)
	CP	A,9
	JR	Z,L_473
	LD.LIS	BC,1
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_487
L_473:
;  890				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_463
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-114),BC
	JR	L_464
L_463:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-114),BC
L_464:
	LEA	IY,IX+-128
	LD	BC,(IY+-114)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_472
;  891					*currentStatusPointer[!player] = 3;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_467
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-120),BC
	JR	L_468
L_467:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-120),BC
L_468:
	LEA	IY,IX+-128
	LD	BC,(IY+-120)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  892					sprintf(str, "%s was paralysed", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__255
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),3
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  893					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  894				}
;  895				else if (data_moves[move].type == 4) {
	JR	L_487
L_472:
	LD	BC,(IX+-74)
	LEA	IY,IX+-128
	LD	(IY+-117),BC
	LD	IY,(IX+-74)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_487
;  896					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__257
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  897				}
;  898			}
L_487:
;  899			if (data_moves[move].statustype == 10) {
	LEA	IY,IX+-128
	LD	BC,(IY+-117)
	LD	(IX+-77),BC
	LD	(IY+-123),BC
	LD	IY,(IX+-77)
	LD	A,(IY+19)
	CP	A,10
	JR	NZ,L_501
;  900				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_476
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-126),BC
	JR	L_477
L_476:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-126),BC
L_477:
	LEA	IY,IX+-128
	LD	BC,(IY+-126)
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_485
;  901					*currentStatusPointer[!player] = 4;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_480
	LD	HL,1
	LD	BC,-260
	CALL	__istix
	JR	L_481
L_480:
	OR	A,A
	SBC	HL,HL
	LD	BC,-260
	CALL	__istix
L_481:
	CALL	__ildix
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  902					sprintf(str, "%s fell asleep", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__262
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),4
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  903					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  904				}
;  905				else if (data_moves[move].type == 4) {
	JR	L_501
L_485:
	LD	BC,(IX+-77)
	LEA	IY,IX+-128
	LD	(IY+-123),BC
	LD	IY,(IX+-77)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_501
;  906					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__264
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  907				}
;  908			}
L_501:
;  909			if (data_moves[move].statustype == 11 || e == 2) {
	LEA	IY,IX+-128
	LD	BC,(IY+-123)
	LD	(IX+-80),BC
	LD	HL,BC
	LD	BC,-257
	CALL	__istix
	LD	IY,(IX+-80)
	LD	A,(IY+19)
	CP	A,11
	JR	Z,L_500
	LD.LIS	BC,2
	LD	HL,(_e)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_507
L_500:
;  910				if (*currentStatusPointer[!player] == 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_490
	LD	HL,1
	LD	BC,-263
	CALL	__istix
	JR	L_491
L_490:
	OR	A,A
	SBC	HL,HL
	LD	BC,-263
	CALL	__istix
L_491:
	CALL	__ildix
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	HL,(HL)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_499
;  911					*currentStatusPointer[!player] = 5;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_494
	LD	HL,1
	LD	BC,-269
	CALL	__istix
	JR	L_495
L_494:
	OR	A,A
	SBC	HL,HL
	LD	BC,-269
	CALL	__istix
L_495:
	CALL	__ildix
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,_currentStatusPointer
	ADD	HL,BC
;  912					sprintf(str, "%s was frozen", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__270
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	HL,(HL)
	LD	(HL),5
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  913					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  914				}
;  915				else if (data_moves[move].type == 4) {
	JR	L_507
L_499:
	LD	HL,(IX+-80)
	LD	BC,-257
	CALL	__istix
	LD	IY,(IX+-80)
	LD	A,(IY+15)
	CP	A,4
	JR	NZ,L_507
;  916					text_Display("It failed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__272
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  917				}
;  918			}
L_507:
;  919	
;  920			if (data_moves[move].statustype == 12) {
	LD	BC,-257
	CALL	__ildix
	LD	(IX+-13),HL
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,12
	JR	NZ,L_513
;  921				confusedturns[!player] = (rand() % 4) + 1;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_503
	LD	HL,1
	LD	BC,-272
	CALL	__istix
	JR	L_504
L_503:
	OR	A,A
	SBC	HL,HL
	LD	BC,-272
	CALL	__istix
L_504:
	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	IY,-272
	LD	BC,IX
	ADD	IY,BC
	LD	A,L
	LD	HL,(IY)
	LD	BC,_confusedturns
	ADD	HL,BC
;  922				sprintf(str, "%s was confused", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__275
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	(HL),A
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  923				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  924			}
L_513:
;  925			if (data_moves[move].statustype == 13) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,13
	JR	NZ,L_519
;  926				leech[!player] = true;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_509
	LD	HL,1
	LD	BC,-275
	CALL	__istix
	JR	L_510
L_509:
	OR	A,A
	SBC	HL,HL
	LD	BC,-275
	CALL	__istix
L_510:
	LD	HL,-275
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_leech
	ADD	HL,BC
;  927				sprintf(str, "%s was leeched", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__278
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	(HL),1
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  928				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  929			}
L_519:
;  930			if (data_moves[move].statustype == 14) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,14
	JR	NZ,L_521
;  931				trapturns[!player] = (rand() % 2) + 4;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_515
	LD	HL,1
	LD	BC,-278
	CALL	__istix
	JR	L_516
L_515:
	OR	A,A
	SBC	HL,HL
	LD	BC,-278
	CALL	__istix
L_516:
	CALL	_rand
	LD	BC,2
	CALL	__irems
	LD	IY,HL
	LEA	HL,IY+4
	LD	IY,-278
	LD	BC,IX
	ADD	IY,BC
	LD	A,L
	LD	HL,(IY)
	LD	BC,_trapturns
	ADD	HL,BC
;  932				sprintf(str, "%s was trapped", nonusername);
	LD	IY,IX
	LD	BC,-363
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__281
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	(HL),A
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  933				text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  934			}
L_521:
;  935			if (data_moves[move].statustype == 15) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,15
	JR	NZ,L_523
;  936				reflectturns[player] = 5;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(HL),5
;  937			}
L_523:
;  938			if (data_moves[move].statustype == 16) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,16
	JR	NZ,L_525
;  939				lightscreenturns[player] = 5;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(HL),5
;  940			}
L_525:
;  941			if (data_moves[move].statustype == 17) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,17
	JR	NZ,L_531
;  942				mistturns[player] = 5;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),5
;  943			}
L_531:
;  944			if (data_moves[move].statustype == 18) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,18
	JR	NZ,L_533
;  945				flinch[!player] = true;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_527
	LD	HL,1
	LD	BC,-281
	CALL	__istix
	JR	L_528
L_527:
	OR	A,A
	SBC	HL,HL
	LD	BC,-281
	CALL	__istix
L_528:
	LD	HL,-281
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_flinch
	ADD	HL,BC
	LD	(HL),1
;  946			}
L_533:
;  947			if (data_moves[move].statustype == 27) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,27
	JR	NZ,L_537
;  948				highcritratio[player] = true;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),1
;  949			}
L_537:
;  950			if (data_moves[move].statustype == 28) {
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,28
	JR	NZ,L_539
;  951				statmods[player][0]++;
	LEA	IY,IX+-128
	LD	HL,(IY+-6)
	LD	BC,_statmods
	ADD	HL,BC
	LD	BC,-432
	CALL	__istix
	LD	BC,-432
	CALL	__ildix
	LD	A,(HL)
	LD	BC,-432
	CALL	__ildix
	INC	A
;  952				statmods[player][1]++;
	LD	IY,-432
	LD	BC,IX
	ADD	IY,BC
	LD	(HL),A
	LD	HL,(IY)
	INC	HL
	LD	BC,-429
	CALL	__istix
	LD	IY,-432
	LD	BC,IX
	ADD	IY,BC
	LD	BC,-429
	CALL	__ildix
	LD	IY,(IY)
	LD	A,(HL)
	INC	A
	LD	(IY+1),A
;  953			}
L_539:
;  954			if (data_moves[move].statustype == 29) {
	LD	BC,(IX+-13)
	LEA	IY,IX+-128
	LD	(IY+-96),BC
	LD	IY,(IX+-13)
	LD	A,(IY+19)
	CP	A,29
	JR	NZ,L_544
;  955				rage[player] = true;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),1
;  956			}
;  957		}
L_544:
;  958	
;  959		
;  960	
;  961		if (attackturns[player] == 1 && data_moves[move].statustype == 32) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	BC,-266
	CALL	__istix
	LD	BC,-266
	CALL	__ildix
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_545
	LEA	IY,IX+-128
	LD	IY,(IY+-96)
	LD	A,(IY+19)
	CP	A,32
	JR	NZ,L_545
;  962			attackturns[player] = 0;
	LD	BC,-266
	CALL	__ildix
	LD	(HL),0
;  963			confusedturns[player] = (rand() % 4) + 1;
	CALL	_rand
	LD	BC,4
	CALL	__irems
	INC	HL
	LD	B,L
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_confusedturns
	ADD	HL,DE
;  964			sprintf(str, "%s became confused", username);
	LD	IY,IX
	LD	DE,-343
	ADD	IY,DE
	LD	DE,IY
	PUSH	DE
	LD	DE,L__292
	PUSH	DE
	LD	DE,_str
	PUSH	DE
	LD	(HL),B
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  965			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  966		}
;  967	}
L_545:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _attack ***************************
;Name                         Addr/Register   Size   Type
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_e                                  IMPORT      2   variable
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_i                                  IMPORT      2   variable
;_run                                STATIC      1   variable
;_wild                               STATIC      1   variable
;_text_status2                       IMPORT    112   variable
;_Wait                               IMPORT  -----   function
;_redrawcharacters                   IMPORT  -----   function
;_heal                               IMPORT  -----   function
;_highcritratio                      STATIC      2   variable
;_elements                           IMPORT    324   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_statmodvalues                      STATIC     39   variable
;_statmods                           STATIC     14   variable
;_confusedturns                      STATIC      2   variable
;_currentStatusPointer               STATIC      6   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_rand                               IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_flinch                             STATIC      2   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;_rage                               STATIC      2   variable
;nonusername                         IX-363     20   variable
;username                            IX-343     20   variable
;G_54                                IX-323      3   variable
;G_49                                IX-320      3   variable
;temp249                             IX-317      3   variable
;temp245                             IX-314      3   variable
;G_53                                IX-311      3   variable
;temp227                             IX-308      3   variable
;temp223                             IX-305      3   variable
;G_38                                IX-302      3   variable
;temp187                             IX-299      3   variable
;temp181                             IX-296      3   variable
;G_80                                IX-293      3   variable
;G_88                                IX-290      3   variable
;G_35                                IX-287      3   variable
;G_34                                IX-284      3   variable
;temp529                             IX-281      3   variable
;temp517                             IX-278      3   variable
;temp511                             IX-275      3   variable
;temp505                             IX-272      3   variable
;temp496                             IX-269      3   variable
;G_133                               IX-266      3   variable
;temp492                             IX-263      3   variable
;temp482                             IX-260      3   variable
;G_121                               IX-257      3   variable
;temp478                             IX-254      3   variable
;G_119                               IX-251      3   variable
;temp469                             IX-248      3   variable
;G_117                               IX-245      3   variable
;temp465                             IX-242      3   variable
;G_115                               IX-239      3   variable
;temp455                             IX-236      3   variable
;G_113                               IX-233      3   variable
;G_111                               IX-230      3   variable
;temp451                             IX-227      3   variable
;G_132                               IX-224      3   variable
;temp441                             IX-221      3   variable
;G_107                               IX-218      3   variable
;temp437                             IX-215      3   variable
;temp428                             IX-212      3   variable
;G_91                                IX-209      3   variable
;G_82                                IX-206      3   variable
;temp423                             IX-203      3   variable
;G_86                                IX-200      3   variable
;temp419                             IX-197      3   variable
;temp384                             IX-194      3   variable
;temp376                             IX-191      3   variable
;temp380                             IX-188      3   variable
;temp372                             IX-185      3   variable
;temp357                             IX-182      3   variable
;temp353                             IX-179      3   variable
;temp349                             IX-176      3   variable
;temp345                             IX-173      3   variable
;temp338                             IX-170      3   variable
;G_60                                IX-167      3   variable
;temp331                             IX-164      3   variable
;temp327                             IX-161      3   variable
;G_56                                IX-158      3   variable
;temp323                             IX-155      3   variable
;temp312                             IX-152      3   variable
;temp308                             IX-149      3   variable
;temp292                             IX-146      3   variable
;temp269                             IX-143      3   variable
;temp265                             IX-140      3   variable
;temp261                             IX-137      3   variable
;G_130                               IX-134      3   variable
;temp257                             IX-131      3   variable
;temp253                             IX-128      3   variable
;G_73                                IX-125      3   variable
;G_57                                IX-122      3   variable
;G_68                                IX-119      3   variable
;G_66                                IX-116      3   variable
;G_58                                IX-113      3   variable
;G_71                                IX-110      3   variable
;G_72                                IX-107      3   variable
;G_112                               IX-104      3   variable
;G_37                                IX-101      3   variable
;G_101                                IX-98      3   variable
;G_110                                IX-95      3   variable
;userelement2                         IX-92      1   variable
;userelement1                         IX-91      1   variable
;nonuserlevel                         IX-90      1   variable
;G_50                                 IX-89      3   variable
;G_81                                 IX-86      3   variable
;G_74                                 IX-83      3   variable
;G_120                                IX-80      3   variable
;G_118                                IX-77      3   variable
;G_116                                IX-74      3   variable
;G_114                                IX-71      3   variable
;G_67                                 IX-68      3   variable
;G_51                                 IX-65      3   variable
;G_106                                IX-62      3   variable
;G_69                                 IX-59      3   variable
;nonuserelement2                      IX-56      1   variable
;nonuserelement1                      IX-55      1   variable
;G_102                                IX-54      3   variable
;G_47                                 IX-51      3   variable
;G_44                                 IX-48      3   variable
;G_108                                IX-45      3   variable
;G_90                                 IX-42      3   variable
;G_84                                 IX-39      3   variable
;G_40                                 IX-36      3   variable
;G_85                                 IX-33      3   variable
;G_64                                 IX-30      3   variable
;hitcount                             IX-27      1   variable
;G_62                                 IX-26      3   variable
;userlevel                            IX-23      1   variable
;G_36                                 IX-22      3   variable
;G_70                                 IX-19      3   variable
;G_76                                 IX-16      3   variable
;G_122                                IX-13      3   variable
;G_61                                 IX-10      3   variable
;damage                                IX-7      4   variable
;G_59                                  IX-3      3   variable
;move                                  IX+9      1   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 501 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__113:
	DB	"%s flinched"
	DB	0
L__115:
	DB	"%s used %s"
	DB	0
L__116:
	DB	"%s used %s"
	DB	0
L__122:
	DB	"It Failed"
	DB	0
L__133:
	DB	"%s is paralysed"
	DB	0
L__136:
	DB	"%s woke up"
	DB	0
L__137:
	DB	"%s is asleep"
	DB	0
L__140:
	DB	"%s thawed out"
	DB	0
L__141:
	DB	"%s is frozen"
	DB	0
L__144:
	DB	"%s hurt itself in its confusion"
	DB	0
L__149:
	DB	"It Missed"
	DB	0
L__153:
	DB	"It Failed"
	DB	0
L__183:
	DB	"Not Very Effective"
	DB	0
L__185:
	DB	"Super Effective"
	DB	0
L__191:
	DB	"%s's %s rose"
	DB	0
L__197:
	DB	"%s's %s fell"
	DB	0
L__203:
	DB	"It Failed"
	DB	0
L__223:
	DB	"It Missed"
	DB	0
L__232:
	DB	"It Failed"
	DB	0
L__234:
	DB	"%s's %s fell"
	DB	0
L__239:
	DB	"%s was poisoned"
	DB	0
L__241:
	DB	"It failed"
	DB	0
L__247:
	DB	"%s was burned"
	DB	0
L__249:
	DB	"It failed"
	DB	0
L__255:
	DB	"%s was paralysed"
	DB	0
L__257:
	DB	"It failed"
	DB	0
L__262:
	DB	"%s fell asleep"
	DB	0
L__264:
	DB	"It failed"
	DB	0
L__270:
	DB	"%s was frozen"
	DB	0
L__272:
	DB	"It failed"
	DB	0
L__275:
	DB	"%s was confused"
	DB	0
L__278:
	DB	"%s was leeched"
	DB	0
L__281:
	DB	"%s was trapped"
	DB	0
L__292:
	DB	"%s became confused"
	DB	0
	SEGMENT CODE
;  968	
;  969	void applystatus(bool player) {
_applystatus:
	LD	HL,-41
	CALL	__frameset
;  970		char name[20];
;  971		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_547
;  972			strcpy(name, playername);
	LD	BC,_playername
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
;  973		}
;  974		else {
	JR	L_549
L_547:
;  975			strcpy(name, enemyname);
	LD	BC,_enemyname
	PUSH	BC
	PEA	IX+-32
	CALL	_strcpy
	POP	BC
	POP	BC
;  976		}
L_549:
;  977		/* Poison */
;  978		if (*currentStatusPointer[player] == 1) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_currentStatusPointer
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_551
;  979			sprintf(str, "%s was hurt by its poison", name);
	PEA	IX+-32
	LD	BC,L__296
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  980			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  981			takedamage(player, stats[player].health / 12);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  982		}
L_551:
;  983		/* Burn */
;  984		if (*currentStatusPointer[player] == 2) {
	LD	HL,(IX+-9)
	LD	HL,(HL)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_557
;  985			sprintf(str, "%s was hurt by its burn", name);
	PEA	IX+-32
	LD	BC,L__298
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  986			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  987			takedamage(player, stats[player].health / 12);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,12
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  988		}
L_557:
;  989		/* Leech */
;  990		if (leech[player]) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_560
;  991			sprintf(str, "%s's health was stolen by leech seed", name);
	PEA	IX+-32
	LD	BC,L__300
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  992			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  993			takedamage(player, stats[player].health / 8);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
;  994			heal(!player, stats[player].health / 8);
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_553
	LD	BC,1
	LD	(IX+-12),BC
	JR	L_554
L_553:
	LD	BC,0
	LD	(IX+-12),BC
L_554:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,8
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	CALL	_heal
	POP	BC
	POP	BC
;  995		}
L_560:
;  996		/* Trap */
;  997		if (trapturns[player] > 0) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_562
;  998			sprintf(str, "%s's was hurt by the trap", name);
	PEA	IX+-32
	LD	BC,L__303
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  999			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1000			takedamage(player, stats[player].health / 16);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,_stats
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	PUSH	HL
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_takedamage
	POP	BC
	POP	BC
; 1001			trapturns[player]--;
	LD	HL,(IX+-3)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-3)
	LD	(HL),A
; 1002		}
L_562:
; 1003	
; 1004		reflectturns[player]--;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_reflectturns
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-41)
	LD	(HL),A
; 1005		lightscreenturns[player]--;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lightscreenturns
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-38)
	LD	(HL),A
; 1006		mistturns[player]--;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(IX+-35),HL
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-35)
	LD	(HL),A
; 1007		if (disabledturns[player] == 1) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_567
; 1008			disabledmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1009		}
L_567:
; 1010		disabledturns[player]--;
	LD	HL,(IX+-6)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-6)
	LD	(HL),A
; 1011	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _applystatus ***************************
;Name                         Addr/Register   Size   Type
;_disabledmove                       STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_heal                               IMPORT  -----   function
;_leech                              STATIC      2   variable
;_stats                              STATIC     24   variable
;_takedamage                         IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentStatusPointer               STATIC      6   variable
;_enemyname                          STATIC     20   variable
;_playername                         STATIC     20   variable
;_strcpy                             IMPORT  -----   function
;name                                 IX-32     20   variable
;temp555                              IX-12      3   variable
;G_134                                 IX-9      3   variable
;G_136                                 IX-6      3   variable
;G_135                                 IX-3      3   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 50 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__296:
	DB	"%s was hurt by its poison"
	DB	0
L__298:
	DB	"%s was hurt by its burn"
	DB	0
L__300:
	DB	"%s's health was stolen by leech seed"
	DB	0
L__303:
	DB	"%s's was hurt by the trap"
	DB	0
	SEGMENT CODE
; 1012	/* When a new pokemon is sent out, reset everything 
; 1013	   This also decompresses the new pokemon's sprite
; 1014	 */
; 1015	void resetstatus(bool player) {
_resetstatus:
	LD	HL,-44
	CALL	__frameset
; 1016		i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1017		while (i < sizeof(statmods[player])) {
	JR	L_570
L_571:
; 1018			statmods[player][i] = 6;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,7
	CALL	__imul_b
	LD	BC,_statmods
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_i)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),6
; 1019			i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1020		}
L_570:
	LD	BC,(_i)
	CALL	__stoiu
	OR	A,A
	LD	BC,7
	SBC	HL,BC
	JR	C,L_571
; 1021		confusedturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_confusedturns
	ADD	HL,BC
	LD	(HL),0
; 1022		leech[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_leech
	ADD	HL,BC
	LD	(HL),0
; 1023		leech[!player] = false;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_574
	LD	BC,1
	LD	(IX+-11),BC
	JR	L_575
L_574:
	LD	BC,0
	LD	(IX+-11),BC
L_575:
	LD	BC,_leech
	LD	HL,(IX+-11)
	ADD	HL,BC
	LD	(HL),0
; 1024		trapturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_trapturns
	ADD	HL,BC
	LD	(HL),0
; 1025		reflectturns[!player] = 0;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_578
	LD	BC,1
	LD	(IX+-14),BC
	JR	L_579
L_578:
	LD	BC,0
	LD	(IX+-14),BC
L_579:
	LD	BC,_reflectturns
	LD	HL,(IX+-14)
	ADD	HL,BC
	LD	(HL),0
; 1026		lightscreenturns[!player] = 0;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_582
	LD	BC,1
	LD	(IX+-5),BC
	JR	L_583
L_582:
	LD	BC,0
	LD	(IX+-5),BC
L_583:
	LD	BC,_lightscreenturns
	LD	HL,(IX+-5)
	ADD	HL,BC
	LD	(HL),0
; 1027		mistturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_mistturns
	ADD	HL,BC
	LD	(HL),0
; 1028		flinch[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_flinch
	ADD	HL,BC
	LD	(HL),0
; 1029		flinch[!player] = false;
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_586
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_587
L_586:
	LD	BC,0
	LD	(IX+-8),BC
L_587:
	LD	BC,_flinch
	LD	HL,(IX+-8)
	ADD	HL,BC
	LD	(HL),0
; 1030		highcritratio[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_highcritratio
	ADD	HL,BC
	LD	(HL),0
; 1031		rage[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_rage
	ADD	HL,BC
	LD	(HL),0
; 1032		disabledmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledmove
	ADD	HL,BC
	LD	(HL),0
; 1033		disabledturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_disabledturns
	ADD	HL,BC
	LD	(HL),0
; 1034		lastmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_lastmove
	ADD	HL,BC
	LD	(HL),0
; 1035		attackturns[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_attackturns
	ADD	HL,BC
	LD	(HL),0
; 1036		air[player] = false;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_air
	ADD	HL,BC
	LD	(HL),0
; 1037		chosenmove[player] = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_chosenmove
	ADD	HL,BC
	LD	(HL),0
; 1038	
; 1039		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_596
; 1040			uint8_t pokemonID;
; 1041			sprintf(playername, "%s", data_pokemon[party[currentplayer].id].name);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__312
	PUSH	BC
	LD	BC,_playername
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1042			stats[1] = stats_CalculateStats(party[currentplayer]);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-26
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	DE,_stats+12
	LD	BC,12
	LDIR	
; 1043	
; 1044			pokemonID = party[currentplayer].id;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-1),A
; 1045			if (pokemonID < 80) {
	CP	A,80
	JR	NC,L_590
; 1046				zx7_Decompress(playerSprite, PKMNSD2[pokemonID]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD2
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1047			}
; 1048			else {
	JR	L_591
L_590:
; 1049				zx7_Decompress(playerSprite, PKMNSD3[pokemonID - 80]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD3
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_playerSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1050			}
L_591:
; 1051			currentStatusPointer[1] = &party[currentplayer].currentstatus;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-41),HL	; spill
	LD	HL,_currentStatusPointer+3
	LD	(IX+-44),HL	; spill
	LD	IY,(IX+-41)
	LEA	BC,IY+15
	LD	HL,(IX+-44)	; unspill
	LD	(HL),BC
; 1052		}
; 1053		else {
	JR	L_597
L_596:
; 1054			uint8_t pokemonID;
; 1055			sprintf(enemyname, "Enemy %s", data_pokemon[enemyparty[currentenemy].id].name);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__314
	PUSH	BC
	LD	BC,_enemyname
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1056			stats[0] = stats_CalculateStats(enemyparty[currentenemy]);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-38
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	DE,_stats
	LD	BC,12
	LDIR	
	LD	SP,IY
; 1057	
; 1058			pokemonID = enemyparty[currentenemy].id;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	LD	(IX+-2),A
; 1059			
; 1060			if (pokemonID < 80) {
	CP	A,80
	JR	NC,L_593
; 1061				zx7_Decompress(enemySprite, PKMNSD0[pokemonID]);
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1062			}
; 1063			else {
	JR	L_594
L_593:
; 1064				zx7_Decompress(enemySprite, PKMNSD1[pokemonID - 80]);
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_enemySprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1065			}
L_594:
; 1066			currentStatusPointer[0] = &enemyparty[currentenemy].currentstatus;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+15
	LD	(_currentStatusPointer),BC
; 1067		}
; 1068	}
L_597:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _resetstatus ***************************
;Name                         Addr/Register   Size   Type
;_PKMNSD1                            IMPORT    219   variable
;_enemySprite                        STATIC      3   variable
;_PKMNSD0                            IMPORT    240   variable
;_enemyname                          STATIC     20   variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_PKMNSD3                            IMPORT    219   variable
;_playerSprite                       STATIC      3   variable
;_PKMNSD2                            IMPORT    240   variable
;_zx7_Decompress                     IMPORT  -----   function
;_stats                              STATIC     24   variable
;_stats_CalculateStats               IMPORT  -----   function
;_playername                         STATIC     20   variable
;_currentplayer                      STATIC      1   variable
;_party                              IMPORT   1224   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_chosenmove                         STATIC      2   variable
;_air                                STATIC      2   variable
;_attackturns                        STATIC      2   variable
;_lastmove                           STATIC      2   variable
;_disabledturns                      STATIC      2   variable
;_disabledmove                       STATIC      2   variable
;_rage                               STATIC      2   variable
;_highcritratio                      STATIC      2   variable
;_flinch                             STATIC      2   variable
;_mistturns                          STATIC      2   variable
;_lightscreenturns                   STATIC      2   variable
;_reflectturns                       STATIC      2   variable
;_trapturns                          STATIC      2   variable
;_leech                              STATIC      2   variable
;_confusedturns                      STATIC      2   variable
;_statmods                           STATIC     14   variable
;_i                                  IMPORT      2   variable
;temp580                              IX-14      3   variable
;temp576                              IX-11      3   variable
;temp588                               IX-8      3   variable
;temp584                               IX-5      3   variable
;pokemonID                             IX-2      1   variable
;pokemonID                             IX-1      1   variable
;player                                IX+6      1   parameter


; Stack Frame Size: 53 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__312:
	DB	"%s"
	DB	0
L__314:
	DB	"Enemy %s"
	DB	0
	SEGMENT CODE
; 1069	
; 1070	void takedamage(bool player, int amount) {
_takedamage:
	LD	HL,-18
	CALL	__frameset
; 1071		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_603
; 1072			if (party[currentplayer].currenthealth <= amount) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_599
; 1073				party[currentplayer].currenthealth = 0;
	LD	IY,(IX+-9)
	LD	(IY+13),0
	LD	(IY+14),0
; 1074			}
; 1075			else {
	JR	L_604
L_599:
; 1076				party[currentplayer].currenthealth -= amount;
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-15)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1077			}
; 1078		}
; 1079		else {
	JR	L_604
L_603:
; 1080			if (enemyparty[currentenemy].currenthealth <= amount) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(IX+-12)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_601
; 1081				enemyparty[currentenemy].currenthealth = 0;
	LD	IY,(IX+-12)
	LD	(IY+13),0
	LD	(IY+14),0
; 1082			}
; 1083			else {
	JR	L_604
L_601:
; 1084				enemyparty[currentenemy].currenthealth -= amount;
	LD	BC,_enemyparty
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-18)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1085			}
; 1086		}
L_604:
; 1087		redrawcharacters();
	CALL	_redrawcharacters
; 1088	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _takedamage ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;G_141                                IX-12      3   variable
;G_138                                 IX-9      3   variable
;G_142                                 IX-6      3   variable
;G_139                                 IX-3      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -2 (instruction)


; 1089	void heal(bool player, int amount) {
_heal:
	LD	HL,-12
	CALL	__frameset
; 1090		if (player) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_609
; 1091			party[currentplayer].currenthealth += amount;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1092			if (party[currentplayer].currenthealth >= stats[1].health) {
	LD	IY,_stats
	LD	BC,(IY+12)
	LD	IY,(IX+-9)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_610
; 1093				party[currentplayer].currenthealth = stats[1].health;
	LD	IY,_stats
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(IY+12)
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1094			}
; 1095		}
; 1096		else {
	JR	L_610
L_609:
; 1097			enemyparty[currentenemy].currenthealth += amount;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-12)
	LD	HL,(IY+13)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1098			if (enemyparty[currentenemy].currenthealth >= stats[0].health) {
	LD	BC,(_stats)
	LD	HL,(IY+13)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_610
; 1099				enemyparty[currentenemy].currenthealth = stats[0].health;
	LD	HL,(IX+-6)
	LD	BC,(_stats)
	LD	DE,_enemyparty
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+13),C
	LD	(IY+14),B
; 1100			}
; 1101		}
L_610:
; 1102		redrawcharacters();
	CALL	_redrawcharacters
; 1103	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _heal ***************************
;Name                         Addr/Register   Size   Type
;_redrawcharacters                   IMPORT  -----   function
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;_stats                              STATIC     24   variable
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;G_146                                 IX-6      3   variable
;G_144                                 IX-3      3   variable
;amount                                IX+9      3   parameter
;player                                IX+6      1   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: -2 (instruction)


; 1104	
; 1105	
; 1106	
; 1107	void addxp(void) {
_addxp:
	LD	HL,-68
	CALL	__frameset
; 1108		uint16_t xpgain = (enemyparty[currentenemy].level * data_pokemon[enemyparty[currentenemy].id].xpdrop) / 7;
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	IY,(IX+-23)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+47)
	CALL	__stoiu
	LD	DE,HL
	LD	IY,(IX+-23)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,7
	CALL	__idivs
	LD	(IX+-14),L
	LD	(IX+-13),H
; 1109		party[currentplayer].xp += xpgain;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-20),HL
	LD	BC,(IX+-14)
	CALL	__stoiu
	LD	IY,(IX+-20)
	LD	BC,(IY+10)
	ADD	HL,BC
	LD	(IY+10),HL
; 1110		while ((party[currentplayer].level < 100) && (party[currentplayer].xp >= xpPerLevel[data_pokemon[party[currentplayer].id].xptype][party[currentplayer].level + 1])) {
	JR	L_628
L_629:
; 1111			party[currentplayer].level++;
	LD	BC,_party
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-26),HL
	LD	IY,(IX+-26)
	LD	A,(IY+9)
	INC	A
	LD	(IY+9),A
; 1112			sprintf(str, "%s leveled up", data_pokemon[party[currentplayer].id].name);
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__325
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1113			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1114			for (i = 0; i < 10; i++)
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_624
L_622:
; 1115			{
; 1116				if (data_pokemon[party[currentplayer].id].movelevels[i] == party[currentplayer].level) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-29),HL
	LD	IY,(IX+-29)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+24
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-29)
	CP	A,(IY+9)
	JR	NZ,L_621
; 1117					sprintf(str, "%s wants to learn %s", data_pokemon[party[currentplayer].id].name, data_moves[data_pokemon[party[currentplayer].id].moveids[i]].name);
	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	IY,(IX+-32)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-32)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__327
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1118					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1119					sprintf(str, "Choose a move to replace with %s", data_moves[data_pokemon[party[currentplayer].id].moveids[i]].name);
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__328
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1120					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1121					switch (text_AskQuestion4(data_moves[party[currentplayer].moves[0]].name, data_moves[party[currentplayer].moves[1]].name, data_moves[party[currentplayer].moves[2]].name, data_moves[party[currentplayer].moves[3]].name, false))
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	IY,(IX+-38)
	LEA	BC,IY+1
	LD	(IX+-35),BC
	LD	BC,_data_moves
	LD	DE,_data_moves
	OR	A,A
	SBC	HL,HL
	PUSH	HL
	LD	IY,(IX+-35)
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-35)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,DE
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-35)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcase
L__329:
	DW	4
	DW	1
	DB	0
	DW24	L_615	

	DW24	L_616	

	DW24	L_617	

	DW24	L_618	

	DW24	L_621	

; 1122					{
; 1123					case 1:
L_615:
; 1124						party[currentplayer].moves[0] = data_pokemon[party[currentplayer].id].moveids[i];
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	IY,(IX+-41)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-41)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+1),A
; 1125						break;
	JR	L_621
; 1126					case 2:
L_616:
; 1127						party[currentplayer].moves[1] = data_pokemon[party[currentplayer].id].moveids[i];
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-44),HL
	LD	IY,(IX+-44)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-44)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+2),A
; 1128						break;
	JR	L_621
; 1129					case 3:
L_617:
; 1130						party[currentplayer].moves[2] = data_pokemon[party[currentplayer].id].moveids[i];
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-47),HL
	LD	IY,(IX+-47)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-47)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+3),A
; 1131						break;
	JR	L_621
; 1132					case 4:
L_618:
; 1133						party[currentplayer].moves[3] = data_pokemon[party[currentplayer].id].moveids[i];
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-50),HL
	LD	IY,(IX+-50)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IY+34
	LD	IY,(IX+-50)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY+4),A
; 1134						break;
; 1135					}
; 1136				}
L_621:
; 1137				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
; 1138			}
L_624:
	LD.LIS	BC,10
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_622
; 1139			if (party[currentplayer].level == data_pokemon[party[currentplayer].id].evolvelevel) {
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-53),HL
	LD	IY,(IX+-53)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+44)
	LD	IY,(IX+-53)
	CP	A,(IY+9)
	JR	NZ,L_628
; 1140				sprintf(str, "%s is evolving", data_pokemon[party[currentplayer].id].name);
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__332
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1141				text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1142				if (text_AskQuestion2("Continue", "Stop", false) == 1) {
	LD	BC,0
	PUSH	BC
	LD	BC,L__333
	PUSH	BC
	LD	BC,L__334
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_628
; 1143					party[currentplayer].id = data_pokemon[party[currentplayer].id].evolveid;
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-56),HL
	LD	IY,(IX+-56)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+45)
	LD	IY,(IX+-56)
	LD	(IY+0),A
; 1144				}
; 1145			}
; 1146		}
L_628:
	LD	A,(_currentplayer)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	(IX+-12),HL
	LD	HL,(IX+-3)
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+9)
	CP	A,100
	JR	NC,L_630
	LD	BC,(IX+-3)
	LD	(IX+-17),BC
	LD	BC,(IX+-3)
	LD	(IX+-12),BC
	LD	HL,(IX+-3)
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-59),HL
	LD	IY,(IX+-59)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-59)
	LD	A,(IY+9)
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	DE,HL
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	OR	A,A
	LD	BC,(HL)
	LD	HL,(IY+10)
	SBC	HL,BC
	JP	P,L_629
L_630:
; 1147		party[currentplayer].healthEV += data_pokemon[enemyparty[currentenemy].id].basehealth;
	LD	BC,_party
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-68),HL
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-65),HL
	LD	IY,(IX+-65)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	C,(IY+18)
	LD	B,0
	LD	IY,(IX+-68)
	LD	DE,(IY+22)
	LD	HL,BC
	ADD.SIS	HL,DE
	LD	BC,HL
	LD	(IY+22),C
	LD	(IY+23),B
; 1148		party[currentplayer].attackEV += data_pokemon[enemyparty[currentenemy].id].baseattack;
	LD	IY,(IX+-65)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,51
	CALL	__imulu
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-62),HL
	LD	IY,(IX+-62)
	LD	C,(IY+19)
	LD	IY,(IX+-68)
	LD	HL,(IY+24)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+24),C
	LD	(IY+25),B
; 1149		party[currentplayer].defenceEV += data_pokemon[enemyparty[currentenemy].id].basedefence;
	LD	IY,(IX+-62)
	LD	C,(IY+20)
	LD	IY,(IX+-68)
	LD	HL,(IY+26)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+26),C
	LD	(IY+27),B
; 1150		party[currentplayer].specialattackEV += data_pokemon[enemyparty[currentenemy].id].basespecialattack;
	LD	IY,(IX+-62)
	LD	C,(IY+21)
	LD	IY,(IX+-68)
	LD	HL,(IY+28)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+28),C
	LD	(IY+29),B
; 1151		party[currentplayer].specialdefenceEV += data_pokemon[enemyparty[currentenemy].id].basespecialdefence;
	LD	IY,(IX+-62)
	LD	C,(IY+22)
	LD	IY,(IX+-68)
	LD	HL,(IY+30)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+30),C
	LD	(IY+31),B
; 1152		party[currentplayer].speedEV += data_pokemon[enemyparty[currentenemy].id].basespeed;
	LD	IY,(IX+-62)
	LD	C,(IY+23)
	LD	IY,(IX+-68)
	LD	HL,(IY+32)
	LD	B,0
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+32),C
	LD	(IY+33),B
; 1153	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _addxp ***************************
;Name                         Addr/Register   Size   Type
;_xpPerLevel                         IMPORT   1212   variable
;_text_AskQuestion2                  IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_i                                  IMPORT      2   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_currentplayer                      STATIC      1   variable
;_data_pokemon                       IMPORT  unknown variable
;_enemyparty                         STATIC    204   variable
;_currentenemy                       STATIC      1   variable
;G_147                                IX-17      3   variable
;xpgain                               IX-14      2   variable
;G_151                                IX-12      3   variable
;G_149                                 IX-9      3   variable
;G_148                                 IX-6      3   variable
;G_150                                 IX-3      3   variable


; Stack Frame Size: 74 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__325:
	DB	"%s leveled up"
	DB	0
L__327:
	DB	"%s wants to learn %s"
	DB	0
L__328:
	DB	"Choose a move to replace with %s"
	DB	0
L__332:
	DB	"%s is evolving"
	DB	0
L__333:
	DB	"Stop"
	DB	0
L__334:
	DB	"Continue"
	DB	0
	SEGMENT CODE
; 1154	/* ball is 1-4 */
; 1155	bool capture(uint8_t ball) {
_capture:
	LD	HL,-20
	CALL	__frameset
; 1156		uint8_t n1;
; 1157		uint8_t n2;
; 1158		uint32_t f;
; 1159		bool captured = false;
	LD	(IX+-6),0
; 1160		uint8_t slot = 0;
; 1161		/* Check if pokemon is captured*/
; 1162		if (!wild) {
	LD	A,(_wild)
	OR	A,A
	JR	NZ,L_657
; 1163			text_Display("You cannot catch trainer pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__340
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1164			return false;
	XOR	A,A
	JR	L_671
; 1165		}
L_657:
; 1166		if (ball == 4) {
	LD	A,(IX+6)
	CP	A,4
	JR	NZ,L_656
; 1167			captured = true;
	LD	(IX+-6),1
; 1168		}
; 1169		else {
	JR	L_669
L_656:
; 1170			if (ball = 1) {
	LD	(IX+6),1
; 1171				n1 = rand() % 255;
	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	(IX+-7),L
; 1172			}
; 1173			if (ball = 2) {
; 1174				n1 = rand() % 200;
	CALL	_rand
	LD	BC,200
	CALL	__irems
	LD	(IX+-7),L
; 1175			}
; 1176			if (ball = 3) {
; 1177				n1 = rand() % 150;
	CALL	_rand
	LD	BC,150
	CALL	__irems
	LD	(IX+-7),L
; 1178			}
; 1179			n2 = n1;
	LD	A,(IX+-7)
	LD	(IX+-8),A
; 1180			if (*currentStatusPointer[false] == 4 || *currentStatusPointer[false] == 5) {
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_642
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_648
L_642:
; 1181				if (n1 < 25) {
	LD	A,(IX+-7)
	CP	A,25
	JR	NC,L_641
; 1182					captured = true;
	LD	(IX+-6),1
; 1183				}
; 1184				else {
	JR	L_648
L_641:
; 1185					n2 -= 25;
	LD	A,(IX+-7)
	SUB	A,25
	LD	(IX+-8),A
; 1186				}
; 1187			}
L_648:
; 1188			if (*currentStatusPointer[false] == 1 || *currentStatusPointer[false] == 2 || *currentStatusPointer[false] == 3) {
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	Z,L_647
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	Z,L_647
	LD	HL,(_currentStatusPointer)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_654
L_647:
; 1189				if (n1 < 12) {
	LD	A,(IX+-7)
	CP	A,12
	JR	NC,L_646
; 1190					captured = true;
	LD	(IX+-6),1
; 1191				}
; 1192				else {
	JR	L_654
L_646:
; 1193					n2 -= 12;
	LD	A,(IX+-8)
	SUB	A,12
	LD	(IX+-8),A
; 1194				}
; 1195			}
L_654:
; 1196			if (n2 <= data_pokemon[enemyparty[currentenemy].id].catchrate) {
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	IY,(IX+-11)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+50)
	CP	A,(IX+-8)
	JR	C,L_669
; 1197				f = stats[false].health;
	LD	BC,(_stats)
	CALL	__stoiu
	LD	(IX+-5),HL
	XOR	A,A
	LD	(IX+-2),A
; 1198				f *= 255;
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,255
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1199				f *= 4;
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1200				f /= enemyparty[currentenemy].currenthealth;
	LD	IY,(IX+-11)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1201				if (ball == 2) {
; 1202					f /= 8;
; 1203				}
; 1204				else {
; 1205					f /= 12;
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	LD	BC,12
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-5),HL
	LD	(IX+-2),E
; 1206				}
; 1207				if (f >= (rand() % 255)) {
	CALL	_rand
	LD	BC,255
	CALL	__irems
	LD	BC,HL
	CALL	__itol
	LD	HL,(IX+-5)
	LD	E,(IX+-2)
	CALL	__lcmpu
	JR	C,L_669
; 1208					captured = true;
	LD	(IX+-6),1
; 1209				}
; 1210			}
; 1211		}
L_669:
; 1212		/* Find open slot if pokemon is captured */
; 1213		if (captured) {
	LD	A,(IX+-6)
	OR	A,A
	JR	Z,L_668
; 1214			sprintf(str, "%s was caught", data_pokemon[enemyparty[currentenemy].id].name);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__352
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1215			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1216			for (slot = 0; slot < 36; slot++) {
	LD	(IX+-1),0
	JR	L_664
L_662:
; 1217				if (party[slot].id == 0) {
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-14),HL
	LD	IY,(IX+-14)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_661
; 1218					party[slot] = enemyparty[currentenemy];
	LD	A,(_currentenemy)
	LD	DE,(IX+-14)
	LD	BC,34
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-17),BC	; spill
	LD	BC,_enemyparty
	LD	(IX+-20),BC	; spill
	LD	BC,(IX+-17)	; unspill
	LD	(IX+-17),BC	; spill
	LD	BC,(IX+-20)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-17)	; unspill
	LDIR	
; 1219					slot = 40;
	LD	(IX+-1),40
; 1220				}
L_661:
; 1221				i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	(IX+-1)
; 1222			}
L_664:
	LD	A,(IX+-1)
	CP	A,36
	JR	C,L_662
; 1223			if (slot == 36) {
	LD	A,(IX+-1)
	CP	A,36
	JR	NZ,L_670
; 1224				text_Display("No open slots for pokemon", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__356
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1225			}
; 1226		}
; 1227		else {
	JR	L_670
L_668:
; 1228			sprintf(str, "%s broke free", data_pokemon[enemyparty[currentenemy].id].name);
	LD	A,(_currentenemy)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_enemyparty
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__357
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1229			text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1230		}
L_670:
; 1231		return captured;
	LD	A,(IX+-6)
; 1232	}
L_671:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _capture ***************************
;Name                         Addr/Register   Size   Type
;_i                                  IMPORT      2   variable
;_party                              IMPORT   1224   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_stats                              STATIC     24   variable
;_data_pokemon                       IMPORT  unknown variable
;_currentenemy                       STATIC      1   variable
;_enemyparty                         STATIC    204   variable
;_currentStatusPointer               STATIC      6   variable
;_rand                               IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_wild                               STATIC      1   variable
;G_154                                IX-14      3   variable
;G_153                                IX-11      3   variable
;n2                                    IX-8      1   variable
;n1                                    IX-7      1   variable
;captured                              IX-6      1   variable
;f                                     IX-5      4   variable
;slot                                  IX-1      1   variable
;ball                                  IX+6      1   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__340:
	DB	"You cannot catch trainer pokemon"
	DB	0
L__352:
	DB	"%s was caught"
	DB	0
L__356:
	DB	"No open slots for pokemon"
	DB	0
L__357:
	DB	"%s broke free"
	DB	0
	XREF _PKMNSD5_init:ROM
	XREF _PKMNSD5:ROM
	XREF _PKMNSD3_init:ROM
	XREF _PKMNSD3:ROM
	XREF _PKMNSD2_init:ROM
	XREF _PKMNSD2:ROM
	XREF _PKMNSD1_init:ROM
	XREF _PKMNSD1:ROM
	XREF _PKMNSD0_init:ROM
	XREF _PKMNSD0:ROM
	XREF _itemNames:ROM
	XREF _items_UseItem:ROM
	XREF _stats_NewCharacter:ROM
	XREF _stats_CalculateStats:ROM
	XREF _playerItems:ROM
	XREF _party:ROM
	XREF _text_status2:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_DrawTextBox:ROM
	XREF _text_AskQuestion4:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _statusIcons:ROM
	XREF _colors:ROM
	XREF _e:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _FreeIcons:ROM
	XREF _MallocIcons:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _typeIcons:ROM
	XREF _menu_Items:ROM
	XREF _menu_PokemonMenu:ROM
	XREF _map_WinFight:ROM
	XREF _map_LoseFight:ROM
	XREF _xpPerLevel:ROM
	XREF _elements:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _strcpy:ROM
	XREF _sprintf:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmpu:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __imulu:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __smulu:ROM
	XREF __irems:ROM
	XREF __lshru:ROM
	XREF __fmul:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _capture
	XDEF _addxp
	XDEF _heal
	XDEF _takedamage
	XDEF _resetstatus
	XDEF _applystatus
	XDEF _attack
	XDEF _battle_End
	XDEF _CalculateXpPercent
	XDEF _redrawcharacters
	XDEF _enemyturn
	XDEF _selectMove
	XDEF _playerturn
	XDEF _battle_SpawnTrainer
	XDEF _battle_SpawnWild
	XDEF _battle_Loop
	XDEF _SetupBattleGfx
	XDEF _battle_Setup
	XDEF _battle_Initialize
	XDEF _statuscolors
	XDEF _battleMenuCurrent
	XDEF _battleMenuState2
	XDEF _battleMenuState1
	XDEF _run
	XDEF _air
	XDEF _attackturns
	XDEF _lastmove
	XDEF _disabledturns
	XDEF _disabledmove
	XDEF _rage
	XDEF _highcritratio
	XDEF _flinch
	XDEF _mistturns
	XDEF _lightscreenturns
	XDEF _reflectturns
	XDEF _trapturns
	XDEF _leech
	XDEF _confusedturns
	XDEF _statmods
	XDEF _currentStatusPointer
	XDEF _stats
	XDEF _wild
	XDEF _chosenmove
	XDEF _attackturn
	XDEF _enemyparty
	XDEF _statusSprites
	XDEF _hpBarSprite
	XDEF _backgroundSprite
	XDEF _enemySprite
	XDEF _playerSprite
	XDEF _enemyname
	XDEF _playername
	XDEF _currentenemy
	XDEF _currentplayer
	XDEF _clearcharacter
	XDEF _statmodvalues
	END
