; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_gameState:
	DB	0
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name: Pokemon
;    4	 * Author: FBDAJH
;    5	 * License: MIT License
;    6	 * Description: Pokemon
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	
;   22	/* More headers */
;   23	#include <keypadc.h>
;   24	#include <graphx.h>
;   25	#include <debug.h>
;   26	
;   27	/* Include Data */
;   28	#include "text.h"
;   29	#include "misc.h"
;   30	#include "data.h"
;   31	#include "savegame.h"
;   32	#include "stats.h"
;   33	#include "map.h"
;   34	#include "battle.h"
;   35	#include "menu.h"
;   36	#include "items.h"
;   37	
;   38	#include "gfx/battle_gfx.h"
;   39	#include "gfx/map_gfx.h"
;   40	
;   41	
;   42	/* Variables */
;   43	
;   44	uint8_t gameState = 0;
	SEGMENT CODE
;   45	
;   46	void main(void) {
_main:
	LD	HL,-106
	CALL	__frameset
;   47		int colorIndex;
;   48		/* Seed RNG */
;   49		unsigned seed = rtc_Time();
	LD	BC,(15925316)
	LD	(IX+-4),BC
;   50	
;   51		/* Setup gfx */
;   52		dbg_ClearConsole();
;   53		gfx_Begin();
	CALL	_gfx_Begin
;   54		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   55		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;   56	
;   57		/* Game */
;   58	
;   59		srand(seed);
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_srand
	POP	BC
;   60	
;   61		textBoxSprite1 = gfx_MallocSprite(160, 64);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;   62		textBoxSprite2 = gfx_MallocSprite(160, 64);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,160
	PUSH	BC
	LD	(_textBoxSprite1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_textBoxSprite2),HL
;   63	
;   64		map_Initialize();
	CALL	_map_Initialize
;   65		battle_Initialize();
	CALL	_battle_Initialize
;   66	
;   67		FindColors();
	CALL	_FindColors
;   68	
;   69		map_Setup();
	CALL	_map_Setup
;   70	
;   71		if (newGame) {
	LD	A,(_newGame)
	OR	A,A
	JR	Z,L_18
;   72			uint8_t starter = 0;
	LD	(IX+-1),0
;   73			newGame = false;
;   74			text_Display("Choose Starter", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	XOR	A,A
	LD	(_newGame),A
	CALL	_text_Display
	POP	BC
	POP	BC
;   75			while (starter == 0) {
	JR	L_0
L_1:
;   76				starter = text_AskQuestion4("Bulbasaur", "Charmander", "Squirtle", " ", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-1),L
;   77			}
L_0:
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_1
;   78			if (starter == 4) {
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_3
;   79				party[0] = stats_NewCharacter(137, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,137
	PUSH	BC
	PEA	IX+-38
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_party
	LD	BC,34
	LDIR	
;   80			}
;   81			else {
	JR	L_10
L_3:
;   82				party[0] = stats_NewCharacter(1 + ((starter - 1) * 3), 5);
	LD	BC,5
	PUSH	BC
	LD	B,(IX+-1)
	DEC	B
	LD	C,3
	MLT	BC
	INC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-72
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_party
	LD	BC,34
	LDIR	
;   83			}
L_10:
;   84			for (starter = 0; starter < 185; starter++) {
	LD	(IX+-1),0
	JR	L_9
L_7:
;   85				if (rand() % 2) {
	CALL	_rand
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	Z,L_8
;   86					playerItems[starter] = 1;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(HL),1
;   87				}
;   88			}
L_8:
	INC	(IX+-1)
L_9:
	LD	A,(IX+-1)
	CP	A,185
	JR	C,L_7
;   89			for (starter = 1; starter < 36; starter++) {
	LD	(IX+-1),1
	JR	L_15
L_13:
;   90				if (rand() % 2) {
	CALL	_rand
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	Z,L_14
;   91					party[starter] = stats_NewCharacter(rand() % 152, rand() % 101);
	CALL	_rand
	LD	BC,101
	CALL	__irems
	LD	C,L
	LD	B,0
	PUSH	BC
	CALL	_rand
	LD	BC,152
	CALL	__irems
	LD	C,L
	LD	B,0
	PUSH	BC
	PEA	IX+-106
	CALL	_stats_NewCharacter
	LD	IY,HL
	POP	BC
	POP	BC
	POP	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	DE,HL
	LD	HL,IY
	LD	BC,34
	LDIR	
;   92				}
;   93			}
L_14:
	INC	(IX+-1)
L_15:
	LD	A,(IX+-1)
	CP	A,36
	JR	C,L_13
;   94		}
L_18:
;   95	
;   96		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;   97		do {
L_24:
;   98			kb_Scan();
	CALL	_kb_Scan
;   99			if (gameState == 0) {
	LD	A,(_gameState)
	OR	A,A
	JR	NZ,L_23
;  100				gameState = map_Loop();
	CALL	_map_Loop
	LD	A,L
;  101				if (gameState == 1) {
	CP	A,1
	LD	(_gameState),A
	JR	NZ,L_25
;  102					map_End();
	CALL	_map_End
;  103					battle_Setup();
	CALL	_battle_Setup
;  104				}
;  105			}
;  106			else if (gameState == 1) {
	JR	L_25
L_23:
	LD	A,(_gameState)
	CP	A,1
	JR	NZ,L_25
;  107				gameState = battle_Loop();
	CALL	_battle_Loop
	LD	A,L
	LD	(_gameState),A
;  108				if (gameState == 0) {
	OR	A,A
	JR	NZ,L_25
;  109					battle_End();
	CALL	_battle_End
;  110					map_Setup();
	CALL	_map_Setup
;  111				}
;  112			}
;  113		} while (gameState < 2);
L_25:
	LD	A,(_gameState)
	CP	A,2
	JR	C,L_24
;  114	
;  115		map_End();
	CALL	_map_End
;  116		battle_End();
	CALL	_battle_End
;  117		free(textBoxSprite1);
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_free
	POP	BC
;  118		free(textBoxSprite2);
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_free
	POP	BC
;  119	
;  120	
;  121		gfx_End();
	CALL	_gfx_End
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_free                               IMPORT  -----   function
;_battle_End                         IMPORT  -----   function
;_battle_Loop                        IMPORT  -----   function
;_battle_Setup                       IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_map_Loop                           IMPORT  -----   function
;_gameState                          STATIC      1   variable
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_rand                               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_stats_NewCharacter                 IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_newGame                            IMPORT      1   variable
;_map_Setup                          IMPORT  -----   function
;_FindColors                         IMPORT  -----   function
;_battle_Initialize                  IMPORT  -----   function
;_map_Initialize                     IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;seed                                  IX-4      3   variable
;starter                               IX-1      1   variable


; Stack Frame Size: 112 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Choose Starter"
	DB	0
L__2:
	DB	" "
	DB	0
L__3:
	DB	"Squirtle"
	DB	0
L__4:
	DB	"Charmander"
	DB	0
L__5:
	DB	"Bulbasaur"
	DB	0
	XREF _battle_End:ROM
	XREF _battle_Loop:ROM
	XREF _battle_Setup:ROM
	XREF _battle_Initialize:ROM
	XREF _map_LoadPokeballs:ROM
	XREF _map_End:ROM
	XREF _map_Loop:ROM
	XREF _map_Setup:ROM
	XREF _map_Initialize:ROM
	XREF _stats_NewCharacter:ROM
	XREF _playerItems:ROM
	XREF _party:ROM
	XREF _newGame:ROM
	XREF _FindColors:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_AskQuestion4:ROM
	XREF _text_Display:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _rand:ROM
	XREF _srand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __irems:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _gameState
	END
