; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_gameState:
	DB	0
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name: Pokemon
;    4	 * Author: FBDAJH
;    5	 * License: MIT License
;    6	 * Description: Pokemon
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	
;   22	/* More headers */
;   23	#include <keypadc.h>
;   24	#include <graphx.h>
;   25	#include <debug.h>
;   26	
;   27	/* Include Data */
;   28	#include "text.h"
;   29	#include "misc.h"
;   30	#include "data.h"
;   31	#include "savegame.h"
;   32	#include "stats.h"
;   33	#include "map.h"
;   34	#include "battle.h"
;   35	#include "menu.h"
;   36	#include "items.h"
;   37	
;   38	#include "gfx/battle_gfx.h"
;   39	#include "gfx/map_gfx.h"
;   40	
;   41	
;   42	/* Variables */
;   43	
;   44	uint8_t gameState = 0;
	SEGMENT CODE
;   45	
;   46	void main(void) {
_main:
	LD	HL,-3
	CALL	__frameset
;   47		/* Seed RNG */
;   48		unsigned seed = rtc_Time();
	LD	BC,(15925316)
	LD	(IX+-3),BC
;   49	
;   50		/* Setup gfx */
;   51		dbg_ClearConsole();
;   52		gfx_Begin();
	CALL	_gfx_Begin
;   53		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   54		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;   55	
;   56		/* Game */
;   57	
;   58		srand(seed);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_srand
	POP	BC
;   59	
;   60		map_Initialize();
	CALL	_map_Initialize
;   61		battle_Initialize();
	CALL	_battle_Initialize
;   62	
;   63		if (kb_Data[3] & kb_0) {
	LD	A,(16056342)
	AND	A,1
	JR	Z,L_1
;   64			debugging = true;
	LD	A,1
	LD	(_debugging),A
;   65		}
L_1:
;   66	
;   67		FindColors();
	CALL	_FindColors
;   68	
;   69		map_Setup();
	CALL	_map_Setup
;   70	
;   71		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;   72	
;   73		kb_Scan();
	CALL	_kb_Scan
;   74		
;   75	
;   76		do {
L_11:
;   77			kb_Scan();
	CALL	_kb_Scan
;   78			if (gameState == 0) {
	LD	A,(_gameState)
	OR	A,A
	JR	NZ,L_10
;   79				gameState = map_Loop();
	CALL	_map_Loop
	LD	A,L
;   80				
;   81				if (gameState == 1) {
	CP	A,1
	LD	(_gameState),A
	JR	NZ,L_4
;   82					map_End();
	CALL	_map_End
;   83					battle_Setup();
	CALL	_battle_Setup
;   84				}
L_4:
;   85				if (gameState == 2) {
	LD	A,(_gameState)
	CP	A,2
	JR	NZ,L_12
;   86					map_End();
	CALL	_map_End
;   87				}
;   88			}
;   89			else if (gameState == 1) {
	JR	L_12
L_10:
	LD	A,(_gameState)
	CP	A,1
	JR	NZ,L_12
;   90				gameState = battle_Loop();
	CALL	_battle_Loop
	LD	A,L
	LD	(_gameState),A
;   91				if (gameState == 0) {
	OR	A,A
	JR	NZ,L_7
;   92					battle_End();
	CALL	_battle_End
;   93					map_Setup();
	CALL	_map_Setup
;   94				}
L_7:
;   95				if (gameState == 2) {
	LD	A,(_gameState)
	CP	A,2
	JR	NZ,L_12
;   96					battle_End();
	CALL	_battle_End
;   97				}
;   98			}
;   99		} while (gameState < 2);
L_12:
	LD	A,(_gameState)
	CP	A,2
	JR	C,L_11
;  100	
;  101		map_End();
	CALL	_map_End
;  102	
;  103	
;  104		gfx_End();
	CALL	_gfx_End
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_battle_End                         IMPORT  -----   function
;_battle_Loop                        IMPORT  -----   function
;_battle_Setup                       IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_map_Loop                           IMPORT  -----   function
;_gameState                          STATIC      1   variable
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_Setup                          IMPORT  -----   function
;_FindColors                         IMPORT  -----   function
;_debugging                          IMPORT      1   variable
;_battle_Initialize                  IMPORT  -----   function
;_map_Initialize                     IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;seed                                  IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	XREF _battle_End:ROM
	XREF _battle_Loop:ROM
	XREF _battle_Setup:ROM
	XREF _battle_Initialize:ROM
	XREF _map_LoadPokeballs:ROM
	XREF _map_End:ROM
	XREF _map_Loop:ROM
	XREF _map_Setup:ROM
	XREF _map_Initialize:ROM
	XREF _debugging:ROM
	XREF _FindColors:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _kb_Scan:ROM
	XREF _srand:ROM
	XREF __frameset:ROM
	XDEF _main
	XDEF _gameState
	END
