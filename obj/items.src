; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\ITEMS.C"
	.assume ADL=1
	SEGMENT TEXT
_healAmounts:
	DW	20
	DW	50
	DW	120
	DW	1000
	SEGMENT DATA
_itemNames:
	DB	80
	DB	111
	DB	107
	DB	101
	DB	98
	DB	97
	DB	108
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	71
	DB	114
	DB	101
	DB	97
	DB	116
	DB	32
	DB	66
	DB	97
	DB	108
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	85
	DB	108
	DB	116
	DB	114
	DB	97
	DB	32
	DB	66
	DB	97
	DB	108
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	77
	DB	97
	DB	115
	DB	116
	DB	101
	DB	114
	DB	32
	DB	66
	DB	97
	DB	108
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	80
	DB	111
	DB	116
	DB	105
	DB	111
	DB	110
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	117
	DB	112
	DB	101
	DB	114
	DB	32
	DB	80
	DB	111
	DB	116
	DB	105
	DB	111
	DB	110
	DB	0
	DB	0
	DB	0
	DB	0
	DB	72
	DB	121
	DB	112
	DB	101
	DB	114
	DB	32
	DB	80
	DB	111
	DB	116
	DB	105
	DB	111
	DB	110
	DB	0
	DB	0
	DB	0
	DB	0
	DB	77
	DB	97
	DB	120
	DB	32
	DB	80
	DB	111
	DB	116
	DB	105
	DB	111
	DB	110
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	70
	DB	117
	DB	108
	DB	108
	DB	32
	DB	72
	DB	101
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	70
	DB	117
	DB	108
	DB	108
	DB	32
	DB	82
	DB	101
	DB	115
	DB	116
	DB	111
	DB	114
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	65
	DB	110
	DB	116
	DB	105
	DB	100
	DB	111
	DB	116
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	66
	DB	117
	DB	114
	DB	110
	DB	32
	DB	72
	DB	101
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	80
	DB	97
	DB	114
	DB	108
	DB	121
	DB	122
	DB	32
	DB	72
	DB	101
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	73
	DB	99
	DB	101
	DB	32
	DB	72
	DB	101
	DB	97
	DB	108
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	65
	DB	119
	DB	97
	DB	107
	DB	101
	DB	110
	DB	105
	DB	110
	DB	103
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	84
	DB	104
	DB	117
	DB	110
	DB	100
	DB	101
	DB	114
	DB	32
	DB	83
	DB	116
	DB	111
	DB	110
	DB	101
	DB	0
	DB	0
	DB	0
	DB	77
	DB	111
	DB	111
	DB	110
	DB	32
	DB	83
	DB	116
	DB	111
	DB	110
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	70
	DB	105
	DB	114
	DB	101
	DB	32
	DB	83
	DB	116
	DB	111
	DB	110
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	76
	DB	101
	DB	97
	DB	102
	DB	32
	DB	83
	DB	116
	DB	111
	DB	110
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	87
	DB	97
	DB	116
	DB	101
	DB	114
	DB	32
	DB	83
	DB	116
	DB	111
	DB	110
	DB	101
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_itemPrices:
	DW	200
	DW	600
	DW	1200
	DW	15000
	DW	300
	DW	700
	DW	1200
	DW	2500
	DW	600
	DW	3000
	DW	100
	DW	250
	DW	200
	DW	250
	DW	200
	DW	2100
	DW	2100
	DW	2100
	DW	2100
	DW	2100
_itemCount:
	DB	20
;    1	#include <graphx.h>
;    2	#include <stdio.h>
;    3	#include <stdint.h>
;    4	#include <keypadc.h>
;    5	
;    6	#include "items.h"
;    7	#include "text.h"
;    8	#include "savegame.h"
;    9	#include "data.h"
;   10	#include "misc.h"
;   11	#include "stats.h"
;   12	#include "map.h"
;   13	#include "menu.h"
;   14	
;   15	void HealHp(uint8_t index, uint16_t amount);
;   16	void HealStatus(uint8_t index, uint8_t type);
;   17	
;   18	const uint16_t healAmounts[] = { 20,50,120,1000 };
;   19	
;   20	/* Item Data */
;   21	
;   22	char itemNames[20][16] = {
;   23		"Pokeball",
;   24		"Great Ball",
;   25		"Ultra Ball",
;   26		"Master Ball",
;   27		"Potion",
;   28		"Super Potion",
;   29		"Hyper Potion",
;   30		"Max Potion",
;   31		"Full Heal",
;   32		"Full Restore",
;   33		"Antidote",
;   34		"Burn Heal",
;   35		"Parlyz Heal",
;   36		"Ice Heal",
;   37		"Awakening",
;   38		"Thunder Stone",
;   39		"Moon Stone",
;   40		"Fire Stone",
;   41		"Leaf Stone",
;   42		"Water Stone"
;   43	};
;   44	/* Used in shop */
;   45	uint16_t itemPrices[20] = {
;   46		200,600,1200,15000,300,700,1200,2500,600,3000,100,250,200,250,200,2100,2100,2100,2100,2100
;   47	};
;   48	uint8_t itemCount = 20;
	SEGMENT CODE
;   49	
;   50	
;   51	void items_IndexToName(char *name, uint8_t index) {
_items_IndexToName:
	CALL	__frameset0
;   52		if (index < 20) {
	LD	A,(IX+9)
	CP	A,20
	JR	NC,L_1
;   53			sprintf(name, itemNames[index]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;   54		}
;   55		else {
	JR	L_2
L_1:
;   56			sprintf(name, data_moves[index-19].name);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-19
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;   57		}
;   58	}
L_2:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _items_IndexToName ***************************
;Name                         Addr/Register   Size   Type
;_data_moves                         IMPORT  unknown variable
;_itemNames                          STATIC    320   variable
;_sprintf                            IMPORT  -----   function
;index                                 IX+9      1   parameter
;name                                  IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;   59	
;   60	
;   61	void items_ItemShop(void) {
_items_ItemShop:
	LD	HL,-8
	CALL	__frameset
;   62		uint8_t shopPage = 0;
	LD	(IX+-2),0
;   63		uint8_t shopCurrent = 1;
	LD	(IX+-1),1
;   64	
;   65		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   66	reloadshop:
L_3:
;   67	
;   68		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   69		gfx_FillRectangle(20, 20, 290, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,290
	PUSH	BC
	LD	BC,20
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   70		gfx_SetColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   71		gfx_Rectangle(20, 20, 290, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,290
	PUSH	BC
	LD	BC,20
	PUSH	BC
	PUSH	BC
	CALL	_gfx_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   72		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   73		gfx_PrintStringXY(">", 25, 25 + shopCurrent * 20);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   74		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;   75		while (kb_Data[1] & kb_2nd) { kb_Scan(); }
	JR	L_4
L_5:
	CALL	_kb_Scan
L_4:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_5
;   76	
;   77		i = 0;
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   78		while (i < 10) {
	JR	L_8
L_9:
;   79			gfx_PrintStringXY(itemNames[i + shopPage], 35, 25 + i * 20);
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LEA	DE,IY+25
	PUSH	DE
	LD	DE,35
	PUSH	DE
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   80			sprintf(str, "%u$", itemPrices[i + shopPage]);
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,_itemPrices
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__4
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;   81			gfx_PrintStringXY(str, 170, 25 + i * 20);
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   82			sprintf(str, "%u", playerItems[i + shopPage]);
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_playerItems
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__5
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;   83			gfx_PrintStringXY(str, 240, 25 + i * 20);
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,240
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   84			i++;
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   85		}
L_8:
	LD.LIS	BC,10
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_9
;   86	
;   87		while (!(kb_Data[6] & kb_Clear))
	JR	L_31
L_32:
;   88		{
;   89			kb_Scan();
	CALL	_kb_Scan
;   90			if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_16
;   91				if (shopCurrent != 0) {
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_16
;   92					shopCurrent--;
	DEC	(IX+-1)
;   93					gfx_FillRectangle(25, 25, 9, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,9
	PUSH	BC
	LD	BC,25
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   94					gfx_PrintStringXY(">", 25, 25 + shopCurrent * 20);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   95					Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;   96				}
;   97			}
L_16:
;   98			if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_22
;   99				if (shopCurrent != 9) {
	LD	A,(IX+-1)
	CP	A,9
	JR	Z,L_22
;  100					shopCurrent++;
	INC	(IX+-1)
;  101					gfx_FillRectangle(25, 25, 9, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,9
	PUSH	BC
	LD	BC,25
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  102					gfx_PrintStringXY(">", 25, 25 + shopCurrent * 20);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  103					Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  104				}
;  105			}
L_22:
;  106			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_21
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_30
L_21:
;  107				if (shopPage == 10) {
	LD	A,(IX+-2)
	CP	A,10
	JR	NZ,L_19
;  108					shopPage = 0;
	LD	(IX+-2),0
;  109				}
;  110				else {
	JR	L_20
L_19:
;  111					shopPage = 10;
	LD	(IX+-2),10
;  112				}
L_20:
;  113				shopCurrent = 0;
	LD	(IX+-1),0
;  114				gfx_FillRectangle(25, 25, 9, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,9
	PUSH	BC
	LD	BC,25
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  115				gfx_PrintStringXY(">", 25, 25 + shopCurrent * 20);
	LD	BC,25
	PUSH	BC
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  116				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  117				goto reloadshop;
	JR	L_3
;  118			}
L_30:
;  119	
;  120			if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_31
;  121				if (playerMoney >= itemPrices[shopCurrent + shopPage]) {
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,_itemPrices
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	A,(_playerMoney+3)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_playerMoney)
	CALL	__lcmpu
	JR	C,L_25
;  122					playerMoney -= itemPrices[shopCurrent + shopPage];
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-8),HL
	ADD	HL,HL
	LD	BC,_itemPrices
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	A,(_playerMoney+3)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_playerMoney)
	CALL	__lsub
	LD	(_playerMoney),HL
;  123					playerItems[shopCurrent + shopPage]++;
	LD	HL,_playerItems
	LD	A,E
	LD	BC,(IX+-8)
	ADD	HL,BC
	LD	(_playerMoney+3),A
	LD	(IX+-5),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-5)
	LD	(HL),A
;  124				}
;  125				while (kb_Data[1] & kb_2nd) { kb_Scan(); }
	JR	L_25
L_26:
	CALL	_kb_Scan
L_25:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_26
;  126				goto reloadshop;
	JR	L_3
;  127			}
;  128		}
L_31:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_32
;  129		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  130	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _items_ItemShop ***************************
;Name                         Addr/Register   Size   Type
;_playerMoney                        IMPORT      4   variable
;_Wait                               IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_str                                IMPORT    100   variable
;_itemPrices                         STATIC     40   variable
;_sprintf                            IMPORT  -----   function
;_itemNames                          STATIC    320   variable
;_i                                  IMPORT      2   variable
;_kb_Scan                            IMPORT  -----   function
;_map_DrawInformationBar             IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Rectangle                      IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;shopPage                              IX-2      1   variable
;shopCurrent                           IX-1      1   variable


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	">"
	DB	0
L__4:
	DB	"%u$"
	DB	0
L__5:
	DB	"%u"
	DB	0
L__9:
	DB	">"
	DB	0
L__12:
	DB	">"
	DB	0
L__16:
	DB	">"
	DB	0
	SEGMENT CODE
;  131	
;  132	bool items_UseItem(uint8_t index) {
_items_UseItem:
	LD	HL,-74
	CALL	__frameset
;  133		char itemName[20];
;  134		if (index < 4 || playerItems[index] == 0) {
	LD	A,(IX+6)
	CP	A,4
	JR	C,L_37
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_38
L_37:
;  135			return false;
	XOR	A,A
	JR	L_76
;  136		}
L_38:
;  137		i = menu_PokemonMenu(false);
	LD	BC,0
	PUSH	BC
	CALL	_menu_PokemonMenu
	POP	BC
	LD	BC,HL
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  138		if (i == 0 || party[i - 1].id == 0 || party[i - 1].currenthealth == 0) {
	LD	HL,(_i)
	CALL	__scmpzero
	JR	Z,L_41
	LD	BC,(_i)
	CALL	__stoiu
	DEC	HL
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_41
	LD	IY,(IX+-15)
	LD	HL,(IY+14)
	CALL	__scmpzero
	JR	NZ,L_42
L_41:
;  139			return false;
	XOR	A,A
	JR	L_76
;  140		}
L_42:
;  141		i -= 1;
	LD	IY,(_i)
	LEA	BC,IY+-1
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  142		if (index < 8) {
	LD	A,(IX+6)
	CP	A,8
	JR	NC,L_65
;  143			playerItems[index]--;
	LD	HL,(IX+-3)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-3)
	LD	(HL),A
;  144			HealHp(i, healAmounts[index - 4]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	ADD	HL,HL
	LD	BC,_healAmounts
	ADD	HL,BC
	LD	A,(_i)
	LD	C,A
	LD	DE,(HL)
	PUSH	DE
	LD	B,0
	PUSH	BC
	CALL	_HealHp
	POP	BC
	POP	BC
;  145		}
;  146		else if (index < 10) {
	JR	L_74
L_65:
	LD	A,(IX+6)
	CP	A,10
	JR	NC,L_63
;  147			playerItems[index]--;
	LD	HL,(IX+-3)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-3)
	LD	(HL),A
;  148			HealStatus(i, 0);
	LD	A,(_i)
	LD	C,A
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	CALL	_HealStatus
	POP	BC
	POP	BC
;  149			HealStatus(i, 1);
	LD	A,(_i)
	LD	C,A
	LD	DE,1
	PUSH	DE
	LD	B,0
	PUSH	BC
	CALL	_HealStatus
	POP	BC
	POP	BC
;  150			HealStatus(i, 2);
	LD	A,(_i)
	LD	C,A
	LD	DE,2
	PUSH	DE
	LD	B,0
	PUSH	BC
	CALL	_HealStatus
	POP	BC
	POP	BC
;  151			HealStatus(i, 3);
	LD	A,(_i)
	LD	C,A
	LD	DE,3
	PUSH	DE
	LD	B,0
	PUSH	BC
	CALL	_HealStatus
	POP	BC
	POP	BC
;  152			HealStatus(i, 4);
	LD	A,(_i)
	LD	C,A
	LD	DE,4
	PUSH	DE
	LD	B,0
	PUSH	BC
	CALL	_HealStatus
	POP	BC
	POP	BC
;  153			if (index == 9) {
	LD	A,(IX+6)
	CP	A,9
	JR	NZ,L_74
;  154				HealHp(i, 1000);
	LD	A,(_i)
	LD	C,A
	LD	DE,1000
	PUSH	DE
	LD	B,0
	PUSH	BC
	CALL	_HealHp
	POP	BC
	POP	BC
;  155			}
;  156		}
;  157		else if (index < 15) {
	JR	L_74
L_63:
	LD	A,(IX+6)
	CP	A,15
	JR	NC,L_61
;  158			playerItems[index]--;
	LD	HL,(IX+-3)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-3)
	LD	(HL),A
;  159			HealStatus(i, index-10);
	LD	A,(IX+6)
	SUB	A,10
	LD	C,A
	LD	A,(_i)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_HealStatus
	POP	BC
	POP	BC
;  160		}
;  161		else if (index < 20) {
	JR	L_74
L_61:
	LD	A,(IX+6)
	CP	A,20
	JR	NC,L_74
;  162			sprintf(str, "%s has evolved", data_pokemon[party[i].id].name);
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__32
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
;  163			if (data_pokemon[party[i].id].evolvelevel == index + 86) {
	LD	BC,(_i)
	CALL	__stoiu
	POP	BC
	POP	BC
	POP	BC
	LD	A,35
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+44)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	IY,HL
	LEA	DE,IY+86
	LD	HL,BC
	SBC	HL,DE
	JR	NZ,L_56
;  164				party[i].id = data_pokemon[party[i].id].evolveid;
	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-44),HL
	LD	IY,(IX+-44)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+45)
	LD	IY,(IX+-44)
	LD	(IY+0),A
;  165			}
;  166			else if (data_pokemon[party[i].id].evolvelevel == 106) {
	JR	L_58
L_56:
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+44)
	CP	A,106
	JR	NZ,L_54
;  167				if (index = 19) {
	LD	(IX+6),19
;  168					party[i].id += 1;
	LD	HL,(IX+-6)
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-47),HL
	LD	IY,(IX+-47)
	LD	A,(IY+0)
	INC	A
	LD	(IY+0),A
;  169				}
;  170				else if (index = 17) {
	JR	L_58
;  171					party[i].id += 2;
;  172				}
;  173				else if (index = 15) {
;  174					party[i].id += 3;
;  175				}
;  176				else {
;  177					return false;
;  178				}
;  179			}
;  180			else {
L_54:
;  181				return false;
	XOR	A,A
	JR	L_76
;  182			}
L_58:
;  183			playerItems[index]--;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-56),HL
	LD	IY,(IX+-56)
;  184			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	A,(HL)
	DEC	A
	LD	(IY),A
	CALL	_text_Display
	POP	BC
	POP	BC
;  185			return true;
	LD	A,1
	JR	L_76
;  186		}
L_74:
;  187	
;  188		if (index >= 20) {
	LD	A,(IX+6)
	CP	A,20
	JR	C,L_75
;  189			if (data_pokemon[party[i].id].element1 == data_moves[index - 19].element || data_pokemon[party[i].id].element2 == data_moves[index - 19].element) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-19
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	(IX+-18),HL
	LD	IY,(IX+-12)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	LD	IY,(IX+-9)
	CP	A,(IY+14)
	JR	Z,L_71
	LD	BC,(IX+-9)
	LD	(IX+-18),BC
	LD	IY,(IX+-12)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	LD	IY,(IX+-9)
	CP	A,(IY+14)
	JR	NZ,L_72
L_71:
;  190				sprintf(str, "Choose a move to replace with %s", data_moves[index - 19].name);
	LD	IY,(IX+-18)
	PEA	IY+0
	LD	BC,L__38
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  191				text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  192				switch (text_AskQuestion4(data_moves[party[i].moves[0]].name, data_moves[party[i].moves[1]].name, data_moves[party[i].moves[2]].name, data_moves[party[i].moves[3]].name, false))
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-62),HL
	LD	IY,(IX+-62)
	LEA	BC,IY+1
	LD	(IX+-59),BC
	LD	BC,_data_moves
	LD	DE,_data_moves
	OR	A,A
	SBC	HL,HL
	PUSH	HL
	LD	IY,(IX+-59)
	LEA	HL,IY+3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-59)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,DE
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-59)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	HL,(IX+-59)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_text_AskQuestion4
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__seqcase
L__39:
	DW	4
	DW	1
	DB	0
	DW24	L_67	

	DW24	L_68	

	DW24	L_69	

	DW24	L_70	

	DW24	L_75	

;  193				{
;  194				case 1:
L_67:
;  195					party[i].moves[0] = data_pokemon[party[i].id].moveids[index - 19];
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-65),HL
	LD	IY,(IX+-65)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-19
	LD	IY,BC
	LEA	HL,IY+34
	ADD	HL,DE
	LD	A,(HL)
	LD	IY,(IX+-65)
	LD	(IY+1),A
;  196					break;
	JR	L_75
;  197				case 2:
L_68:
;  198					party[i].moves[1] = data_pokemon[party[i].id].moveids[index - 19];
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-68),HL
	LD	IY,(IX+-68)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-19
	LD	IY,BC
	LEA	HL,IY+34
	ADD	HL,DE
	LD	A,(HL)
	LD	IY,(IX+-68)
	LEA	HL,IY+1
	INC	HL
	LD	(HL),A
;  199					break;
	JR	L_75
;  200				case 3:
L_69:
;  201					party[i].moves[2] = data_pokemon[party[i].id].moveids[index - 19];
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-71),HL
	LD	IY,(IX+-71)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-19
	LD	IY,BC
	LEA	HL,IY+34
	ADD	HL,DE
	LD	A,(HL)
	LD	IY,(IX+-71)
	LEA	HL,IY+3
	LD	(HL),A
;  202					break;
	JR	L_75
;  203				case 4:
L_70:
;  204					party[i].moves[3] = data_pokemon[party[i].id].moveids[index - 19];
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-74),HL
	LD	IY,(IX+-74)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-19
	LD	IY,BC
	LEA	HL,IY+34
	ADD	HL,DE
	LD	A,(HL)
	LD	IY,(IX+-74)
	LEA	HL,IY+4
	LD	(HL),A
;  205					break;
	JR	L_75
;  206				}
;  207			}
;  208			else {
L_72:
;  209				sprintf(str, "%s cannot learn %s", data_pokemon[party[i].id].name, data_moves[index - 19].name);
	LD	IY,(IX+-9)
	PEA	IY+0
	LD	IY,(IX+-12)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__40
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  210				text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  211				return false;
	XOR	A,A
	JR	L_76
;  212			}
;  213		}
L_75:
;  214	
;  215	
;  216		items_IndexToName(&itemName, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	PEA	IX+-41
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  217		sprintf(str, "Used a %s on %s", itemName, data_pokemon[party[i].id].name);
	LD	BC,(_i)
	CALL	__stoiu
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	PEA	IX+-41
	LD	BC,L__41
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  218		text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  219		return true;
	LD	A,1
;  220	}
L_76:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _items_UseItem ***************************
;Name                         Addr/Register   Size   Type
;_items_IndexToName                  IMPORT  -----   function
;_text_AskQuestion4                  IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_HealStatus                         IMPORT  -----   function
;_healAmounts                        STATIC      8   variable
;_HealHp                             IMPORT  -----   function
;_party                              IMPORT   1260   variable
;_i                                  IMPORT      2   variable
;_menu_PokemonMenu                   IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;itemName                             IX-41     20   variable
;G_7                                  IX-21      3   variable
;G_12                                 IX-18      3   variable
;G_1                                  IX-15      3   variable
;G_9                                  IX-12      3   variable
;G_11                                  IX-9      3   variable
;G_5                                   IX-6      3   variable
;G_2                                   IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 83 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__32:
	DB	"%s has evolved"
	DB	0
L__38:
	DB	"Choose a move to replace with %s"
	DB	0
L__40:
	DB	"%s cannot learn %s"
	DB	0
L__41:
	DB	"Used a %s on %s"
	DB	0
	SEGMENT CODE
;  221	
;  222	void HealHp(uint8_t index, uint16_t amount) {
_HealHp:
	LD	HL,-36
	CALL	__frameset
;  223		party[index].currenthealth += amount;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,35
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,(IX+9)
	LD	IY,(IX+-3)
	LD	HL,(IY+14)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	(IY+14),C
	LD	(IY+15),B
;  224		if (party[index].currenthealth > stats_CalculateStats(party[index]).health) {
	LD	HL,(IX+-6)
	LD	BC,_party
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-18
	LD	BC,35
	LD	DE,IY
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-3)
	LD	BC,(IY+14)
	LD	HL,(HL)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_78
;  225			party[index].currenthealth = stats_CalculateStats(party[index]).health;
	LD	BC,_party
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-30
	LD	DE,IY
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	(IX+-36),HL	; spill
	ADD	IY,SP
	LD	SP,IY
	LD	HL,(IX+-6)
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-36)	; unspill
	LD	BC,(HL)
	LD	(IY+14),C
	LD	(IY+15),B
;  226		}
;  227	}
L_78:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealHp ***************************
;Name                         Addr/Register   Size   Type
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1260   variable
;G_16                                  IX-6      3   variable
;amount                                IX+9      2   parameter
;index                                 IX+6      1   parameter


; Stack Frame Size: 48 (bytes)
;       Spill Code: 0 (instruction)


;  228	void HealStatus(uint8_t index, uint8_t type) {
_HealStatus:
	CALL	__frameset0
;  229		party[index].currentstatus = 0;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+16),0
;  230	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealStatus ***************************
;Name                         Addr/Register   Size   Type
;_party                              IMPORT   1260   variable
;type                                  IX+9      1   parameter
;index                                 IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	XREF _menu_PokemonMenu:ROM
	XREF _map_DrawInformationBar:ROM
	XREF _stats_CalculateStats:ROM
	XREF _colors:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _Wait:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _playerItems:ROM
	XREF _playerMoney:ROM
	XREF _party:ROM
	XREF _text_AskQuestion4:ROM
	XREF _text_Display:ROM
	XREF _kb_Scan:ROM
	XREF _sprintf:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle:ROM
	XREF _gfx_SetColor:ROM
	XREF __lcmpu:ROM
	XREF __lsub:ROM
	XREF __stoiu:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __scmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _HealStatus
	XDEF _HealHp
	XDEF _items_UseItem
	XDEF _items_ItemShop
	XDEF _items_IndexToName
	XDEF _itemCount
	XDEF _itemPrices
	XDEF _itemNames
	XDEF _healAmounts
	END
