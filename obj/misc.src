; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MISC.C"
	.assume ADL=1
	SEGMENT BSS
_str:
	DS	100
_i:
	DS	2*1
_e:
	DS	2*1
	SEGMENT DATA
_colors:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_colorSets:
	DB	8
	DB	6
	DB	15
	DB	192
	DB	169
	DB	222
	DB	0
	DB	227
	DB	208
	DB	169
	DB	35
	DB	169
	DB	0
	DB	190
	DB	92
	DB	136
	DB	97
	DB	22
	DB	7
	DB	218
	DB	23
	DB	45
	DB	87
	DB	0
	DB	20
	DB	44
	DB	176
	DB	150
	DB	110
	DB	0
	DB	112
	DB	4
	DB	86
	DB	11
_colorValues:
	DB	247
	DB	247
	DB	247
	DB	0
	DB	0
	DB	0
	DB	127
	DB	0
	DB	127
	DB	255
	DB	0
	DB	0
	DB	255
	DB	255
	DB	0
	DB	128
	DB	128
	DB	128
	DB	0
	DB	255
	DB	255
	DB	64
	DB	200
	DB	248
	DB	62
	DB	255
	DB	90
	DB	248
	DB	224
	DB	56
	DB	248
	DB	88
	DB	56
	DB	248
	DB	224
	DB	0
	DB	0
	DB	200
	DB	200
	DB	0
	DB	128
	DB	255
	DB	40
	DB	48
	DB	48
	DB	138
	DB	138
	DB	200
	DB	200
	DB	200
	DB	216
	SEGMENT BSS
_typeIcons:
	DS	51
_statusIcons:
	DS	15
_categoryIcons:
	DS	9
;    1	#include <stdint.h>
;    2	#include <stdio.h>
;    3	#include <stdlib.h>
;    4	#include <string.h>
;    5	#include <tice.h>
;    6	#include <graphx.h>
;    7	#include <debug.h>
;    8	#include <compression.h>
;    9	
;   10	#include "misc.h"
;   11	#include "gfx/PKMNSD4.h"
;   12	#include "gfx/PKMNSD5.h"
;   13	
;   14	/* For FindColors */
;   15	#include "map.h"
;   16	#include "menu.h"
;   17	#include "battle.h"
;   18	
;   19	int ColorDifference(uint16_t color1, uint16_t color2);
;   20	void FindBestColors(void);
;   21	
;   22	/* Multipurpose string variable */
;   23	char str[100];
;   24	
;   25	uint16_t i;
;   26	uint16_t e;
;   27	
;   28	#define COLORCOUNT 17
;   29	
;   30	
;   31	uint8_t colors[COLORCOUNT] = {0};
;   32	
;   33	
;   34	uint8_t colorSets[2][COLORCOUNT] = {
;   35		{8,6,15,192,169,222,0,227,208,169,35,169,0,190,92,136,97,},
;   36		{22,7,218,23,45,87,0,20,44,176,150,110,0,112,4,86,11,},
;   37	};
;   38	
;   39	uint8_t colorValues[COLORCOUNT][3] = {
;   40		{247,247,247},//0
;   41		{0,0,0},//1
;   42		{127,0,127},//2
;   43		{255,0,0},//3
;   44		{255,255,0},//4
;   45		{128,128,128},//5
;   46		{0,255,255},//6
;   47		{64,200,248},//7
;   48		{62,255,90},//8
;   49		{248,224,56},//9
;   50		{248,88,56},//10
;   51		{248,224,0},//11
;   52		{0,200,200},//12
;   53		{0,128,255},//13
;   54		{40,48,48},//14
;   55		{138,138,200},//15
;   56		{200,200,216},//16
;   57	};
;   58	
;   59	gfx_sprite_t *typeIcons[17];
;   60	gfx_sprite_t *statusIcons[5];
;   61	gfx_sprite_t *categoryIcons[3];
	SEGMENT CODE
;   62	
;   63	/* Wait 10ms times amount */
;   64	void Wait(uint16_t amount) {
_Wait:
	CALL	__frameset0
;   65		while (amount--)
	JR	L_1
L_2:
;   66		{
;   67			boot_WaitShort();
	CALL	_boot_WaitShort
;   68		}
L_1:
	LD	IY,(IX+6)
	LEA	HL,IY+-1
	LD	BC,(IX+6)
	LD	(IX+6),L
	LD	(IX+7),H
	LD	HL,BC
	CALL	__scmpzero
	JR	NZ,L_2
;   69	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Wait ***************************
;Name                         Addr/Register   Size   Type
;_boot_WaitShort                     IMPORT  -----   function
;amount                                IX+6      2   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   70	
;   71	/* Changes the colors list to one for the current palette and sets transparent text color */
;   72	void SetColors(uint8_t gameState) {
_SetColors:
	LD	HL,-6
	CALL	__frameset
;   73		int colorIndex;
;   74		for (colorIndex = 0; colorIndex < sizeof(colors); colorIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_7
L_5:
;   75			colors[colorIndex] = colorSets[gameState][colorIndex];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	A,17
	CALL	__imul_b
	LD	BC,_colorSets
	ADD	HL,BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,_colors
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   76			
;   77		}
L_7:
	LD	BC,17
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_5
;   78		gfx_SetTextTransparentColor(colors[12]);
	LD	IY,_colors
	LEA	IY,IY+12
	LD	(IX+-6),IY
	LD	HL,(IX+-6)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextTransparentColor
	POP	BC
;   79		gfx_SetTextBGColor(colors[12]);
	LD	HL,(IX+-6)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   80	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetColors ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextTransparentColor        IMPORT  -----   function
;_colors                             STATIC     17   variable
;_colorSets                          STATIC     34   variable
;G_0                                   IX-6      3   variable
;colorIndex                            IX-3      3   variable
;gameState                             IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   81	
;   82	/* Converts the RGB data from colorValues to 1555 data for colorSets and prints it in the debug console */
;   83	void FindColors(void) {
_FindColors:
;   84	#ifndef NDEBUG
;   85		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
;   86		FindBestColors();
;   87		gfx_SetPalette(battle_gfx_pal, sizeof_battle_gfx_pal, 0);
;   88		FindBestColors();
;   89	#else
;   90		// run code in normal mode
;   91	#endif
;   92	}
	RET	


;**************************** _FindColors ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   93	void FindBestColors(void) {
_FindBestColors:
	LD	HL,-15
	CALL	__frameset
;   94		int paletteIndex, colorIndex, lowestDifference, bestColor;
;   95		dbg_sprintf(dbgout, "\n\t{");
;   96		for (colorIndex = 0; colorIndex < COLORCOUNT; colorIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_22
L_20:
;   97			lowestDifference = 10000;
	LD	BC,10000
	LD	(IX+-9),BC
;   98			bestColor = 0;
;   99			for (paletteIndex = 0; paletteIndex < 256; paletteIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_17
L_15:
;  100				if (ColorDifference(gfx_RGBTo1555(colorValues[colorIndex][0], colorValues[colorIndex][1], colorValues[colorIndex][2]), gfx_palette[paletteIndex]) < lowestDifference) {
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_colorValues
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,14877184
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-12)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,3
	CALL	__ishrs_b
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-12)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	A,3
	CALL	__ishrs_b
	LD	A,10
	CALL	__sshl_b
	LD	BC,HL
	LD	HL,DE
	CALL	__sor
	LD	DE,HL
	LD	A,(IY+2)
	UEXT	HL
	LD	L,A
	LD	A,3
	CALL	__ishrs_b
	LD	BC,HL
	LD	HL,DE
	CALL	__sor
	PUSH	HL
	CALL	_ColorDifference
	POP	BC
	POP	BC
	LD	BC,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_16
;  101					lowestDifference = ColorDifference(gfx_RGBTo1555(colorValues[colorIndex][0], colorValues[colorIndex][1], colorValues[colorIndex][2]), gfx_palette[paletteIndex]);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_colorValues
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,14877184
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-15)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,3
	CALL	__ishrs_b
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-15)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	A,3
	CALL	__ishrs_b
	LD	A,10
	CALL	__sshl_b
	LD	BC,HL
	LD	HL,DE
	CALL	__sor
	LD	DE,HL
	LD	A,(IY+2)
	UEXT	HL
	LD	L,A
	LD	A,3
	CALL	__ishrs_b
	LD	BC,HL
	LD	HL,DE
	CALL	__sor
	PUSH	HL
	CALL	_ColorDifference
	POP	BC
	POP	BC
	LD	(IX+-9),HL
;  102					bestColor = paletteIndex;
;  103					//dbg_sprintf(dbgout, "\nNew Best Color: %d / %u / %u,%u,%u", bestColor, gfx_palette[bestColor], color_1555ToRGB(gfx_palette[bestColor])[0], color_1555ToRGB(gfx_palette[bestColor])[1], color_1555ToRGB(gfx_palette[bestColor])[2]);
;  104					//dbg_sprintf(dbgout, "\nDifference: %u", ColorDifference(gfx_RGBTo1555(colorValues[colorIndex][0], colorValues[colorIndex][1], colorValues[colorIndex][2]), gfx_palette[paletteIndex]));
;  105				}
;  106			}
L_16:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_17:
	LD	BC,256
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_15
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  107			//dbg_sprintf(dbgout, "\nFinal Best Color: %d / %u / %u,%u,%u\n\n\n", bestColor, gfx_palette[bestColor], color_1555ToRGB(gfx_palette[bestColor])[0], color_1555ToRGB(gfx_palette[bestColor])[1], color_1555ToRGB(gfx_palette[bestColor])[2]);
;  108			dbg_sprintf(dbgout, "%d,", bestColor);
;  109		}
L_22:
	LD	BC,17
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_20
;  110		dbg_sprintf(dbgout, "},");
;  111	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FindBestColors ***************************
;Name                         Addr/Register   Size   Type
;_ColorDifference                    IMPORT  -----   function
;_colorValues                        STATIC     51   variable
;lowestDifference                      IX-9      3   variable
;colorIndex                            IX-6      3   variable
;paletteIndex                          IX-3      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;  112	
;  113	int ColorDifference(uint16_t color1, uint16_t color2) {
_ColorDifference:
	LD	HL,-19
	CALL	__frameset
;  114		return(abs(((int)(color_1555ToRGB(color1)[0])) - ((int)(color_1555ToRGB(color2)[0]))) + abs(((int)(color_1555ToRGB(color1)[1])) - ((int)(color_1555ToRGB(color2)[1]))) + abs(((int)(color_1555ToRGB(color1)[2])) - ((int)(color_1555ToRGB(color2)[2]))));
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_color_1555ToRGB
	POP	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	(IX+-15),BC
	CALL	_color_1555ToRGB
	LD	BC,(IX+-15)
	POP	DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	CALL	_abs
	POP	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	(IX+-15),BC
	CALL	_color_1555ToRGB
	LD	BC,(IX+-15)
	POP	DE
	LD	DE,(IX+9)
	PUSH	DE
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	(IX+-15),BC
	LD	(IX+-18),DE
	LD	(IX+-19),D
	CALL	_color_1555ToRGB
	LD	BC,(IX+-15)
	LD	DE,(IX+-18)
	LD	D,(IX+-19)
	POP	IY
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-3),BC	; spill
	LD	(IX+-6),HL	; spill
	LD	BC,(IX+-3)	; unspill
	LD	HL,DE
	OR	A,A
	LD	(IX+-3),BC	; spill
	LD	BC,(IX+-6)	; unspill
	SBC	HL,BC
	LD	BC,(IX+-3)	; unspill
	PUSH	HL
	LD	(IX+-15),BC
	CALL	_abs
	LD	BC,(IX+-15)
	POP	DE
	LD	DE,(IX+6)
	PUSH	DE
	ADD	HL,BC
	LD	BC,HL
	LD	(IX+-15),BC
	CALL	_color_1555ToRGB
	LD	BC,(IX+-15)
	POP	DE
	LD	DE,(IX+9)
	PUSH	DE
	INC	HL
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	(IX+-15),BC
	LD	(IX+-18),DE
	LD	(IX+-19),D
	CALL	_color_1555ToRGB
	LD	BC,(IX+-15)
	LD	DE,(IX+-18)
	LD	D,(IX+-19)
	POP	IY
	INC	HL
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-9),BC	; spill
	LD	(IX+-12),HL	; spill
	LD	BC,(IX+-9)	; unspill
	LD	HL,DE
	OR	A,A
	LD	(IX+-9),BC	; spill
	LD	BC,(IX+-12)	; unspill
	SBC	HL,BC
	LD	BC,(IX+-9)	; unspill
	PUSH	HL
	LD	(IX+-15),BC
	CALL	_abs
	LD	BC,(IX+-15)
	POP	DE
	ADD	HL,BC
;  115	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ColorDifference ***************************
;Name                         Addr/Register   Size   Type
;_color_1555ToRGB                    IMPORT  -----   function
;_abs                                IMPORT  -----   function
;color2                                IX+9      2   parameter
;color1                                IX+6      2   parameter


; Stack Frame Size: 31 (bytes)
;       Spill Code: 0 (instruction)


;  116	
;  117	
;  118	uint8_t * color_1555ToRGB(uint16_t input) {
_color_1555ToRGB:
	LD	HL,-3
	CALL	__frameset
;  119		uint8_t output[3];
;  120	
;  121		output[0] = (uint8_t)(((input & 0xFC00) >> 10) << 3);
	LD	HL,(IX+6)
	LD	A,10
	CALL	__sshru_b
	LD	BC,HL
	CALL	__stoiu
	LD	A,L
	AND	A,63
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	(IX+-3),A
;  122		output[1] = (uint8_t)(((input & 0x03E0) >> 5) << 3);
	LD	HL,(IX+6)
	LD	A,5
	CALL	__sshru_b
	LD	BC,HL
	CALL	__stoiu
	LD	A,L
	AND	A,31
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LEA	HL,IX+-3
	INC	HL
	LD	(HL),A
;  123		output[2] = (uint8_t)((input & 0x001F) << 3);
	LD	A,(IX+6)
;  124	
;  125		return output;
	LEA	HL,IX+-3
	LEA	IY,IX+-3
	AND	A,31
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	(IY+2),A
;  126	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _color_1555ToRGB ***************************
;Name                         Addr/Register   Size   Type
;output                                IX-3      3   variable
;input                                 IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  127	
;  128	
;  129	void MallocIcons(void) {
_MallocIcons:
	LD	HL,-3
	CALL	__frameset
;  130		int iconIndex;
;  131		for (iconIndex = 0; iconIndex < 17; iconIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_32
L_30:
;  132			typeIcons[iconIndex] = gfx_MallocSprite(32, 12);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,32
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_typeIcons
	ADD	HL,DE
	LD	(HL),BC
;  133			zx7_Decompress(typeIcons[iconIndex], PKMNSD5[iconIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD5
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  134		}
L_32:
	LD	BC,17
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_30
;  135		for (iconIndex = 0; iconIndex < 5; iconIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_36
L_34:
;  136			statusIcons[iconIndex] = gfx_MallocSprite(20, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_statusIcons
	ADD	HL,DE
	LD	(HL),BC
;  137			zx7_Decompress(statusIcons[iconIndex], PKMNSD5[17 + iconIndex]);
	LD	IY,(IX+-3)
	LEA	HL,IY+17
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD5
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  138		}
L_36:
	LD	BC,5
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_34
;  139		for (iconIndex = 0; iconIndex < 3; iconIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_41
L_39:
;  140			categoryIcons[iconIndex] = gfx_MallocSprite(32, 14);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,14
	PUSH	BC
	LD	BC,32
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_categoryIcons
	ADD	HL,DE
	LD	(HL),BC
;  141			zx7_Decompress(categoryIcons[iconIndex], PKMNSD5[22 + iconIndex]);
	LD	IY,(IX+-3)
	LEA	HL,IY+22
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD5
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_categoryIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  142		}
L_41:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_39
;  143	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _MallocIcons ***************************
;Name                         Addr/Register   Size   Type
;_categoryIcons                      STATIC      9   variable
;_statusIcons                        STATIC     15   variable
;_PKMNSD5                            IMPORT    102   variable
;_zx7_Decompress                     IMPORT  -----   function
;_typeIcons                          STATIC     51   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;iconIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  144	void FreeIcons(void) {
_FreeIcons:
	LD	HL,-3
	CALL	__frameset
;  145		int iconIndex;
;  146		for (iconIndex = 0; iconIndex < 17; iconIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_47
L_45:
;  147			free(typeIcons[iconIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  148		}
L_47:
	LD	BC,17
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_45
;  149		for (iconIndex = 0; iconIndex < 5; iconIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_51
L_49:
;  150			free(statusIcons[iconIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  151		}
L_51:
	LD	BC,5
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_49
;  152		for (iconIndex = 0; iconIndex < 3; iconIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_56
L_54:
;  153			free(categoryIcons[iconIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_categoryIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  154		}
L_56:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_54
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FreeIcons ***************************
;Name                         Addr/Register   Size   Type
;_categoryIcons                      STATIC      9   variable
;_statusIcons                        STATIC     15   variable
;_typeIcons                          STATIC     51   variable
;_free                               IMPORT  -----   function
;iconIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	XREF _PKMNSD5:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_SetTextTransparentColor:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _boot_WaitShort:ROM
	XREF _abs:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __sor:ROM
	XREF __stoiu:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __imul_b:ROM
	XREF __ishrs_b:ROM
	XREF __sshl_b:ROM
	XREF __sshru_b:ROM
	XDEF _FreeIcons
	XDEF _MallocIcons
	XDEF _color_1555ToRGB
	XDEF _ColorDifference
	XDEF _FindBestColors
	XDEF _FindColors
	XDEF _SetColors
	XDEF _Wait
	XDEF _categoryIcons
	XDEF _statusIcons
	XDEF _typeIcons
	XDEF _colorValues
	XDEF _colorSets
	XDEF _colors
	XDEF _e
	XDEF _i
	XDEF _str
	END
