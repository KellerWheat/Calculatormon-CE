; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAP.C"
	.assume ADL=1
	SEGMENT TEXT
_battlechance:
	DW	10
	DB	0
	SEGMENT DATA
_pokeballdata:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_screenX:
	DL	0
_screenY:
	DL	0
	SEGMENT BSS
_tx:
	DS	1
_ty:
	DS	1
	SEGMENT DATA
_running:
	DB	0
_currentRun:
	DB	0
_currentWater:
	DW	0
	DB	0
_grassAnimNext:
	DB	0
_grassAnimState1:
	DW	0
	DB	0
_grassAnimState2:
	DW	0
	DB	0
_grassAnimX1:
	DW	0
	DB	0
_grassAnimY1:
	DW	0
	DB	0
_grassAnimX2:
	DW	0
	DB	0
_grassAnimY2:
	DW	0
	DB	0
	SEGMENT BSS
_nextTile:
	DS	1
	SEGMENT DATA
_moveState:
	DB	0
_moveDir:
	DB	3
_playerState:
	DB	0
	SEGMENT BSS
_tilemap:
	DS	18
_mapTiles:
	DS	384
_playerSprites:
	DS	96
_enemySprites:
	DS	24
_pokeballSprites:
	DS	9
_currentTileMap:
	DS	1920
_currentTypeMap:
	DS	1920
_currentZoneData:
	DS	640
_npc1:
	DS	1
_npc2:
	DS	1
	SEGMENT DATA
_currentTrainer:
	DB	0
	SEGMENT BSS
_tempcharacter2:
	DS	34
	SEGMENT TEXT
_clearcharacter2:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_str1:
	DS	20
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <debug.h>
;   12	#include <compression.h>
;   13	#include <fileioc.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "items.h"
;   21	#include "text.h"
;   22	#include "savegame.h"
;   23	#include "stats.h"
;   24	#include "gfx/map_gfx.h"
;   25	#include "items.h"
;   26	
;   27	#include "gfx/PKMNSD4.h"
;   28	
;   29	#define OUTDOORWIDTH 48
;   30	#define OUTDOORHEIGHT 40
;   31	#define MAX_X ((OUTDOORWIDTH - 21)*16)
;   32	#define MAX_Y ((OUTDOORHEIGHT - 15)*16)
;   33	
;   34	void HealParty(void);
;   35	void OpenBox(void);
;   36	void TalkToNpc1(void);
;   37	void TalkToNpc2(void);
;   38	void EnterDoor(uint8_t index);
;   39	void ExitBuilding(void);
;   40	void ExitZone(uint8_t index);
;   41	bool FightTrainer(uint8_t index);
;   42	
;   43	int32_t Clamp(int32_t number, int min, int max);
;   44	/* Gets the tile the player is facing*/
;   45	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width);
;   46	/* Gets the typemap at a specific tile */
;   47	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width);
;   48	/* Draw 16 enemy trainers */
;   49	void DrawEnemies(void);
;   50	/* Loads the tilemap, typemap ,and zonedata for current area */
;   51	void LoadMap(void);
;   52	
;   53	void GrassAnimation(bool part);
;   54	
;   55	const int battlechance = 10; /* Chance for enemy to spawn out of 100 */
;   56	
;   57	
;   58	uint8_t pokeballdata[] = {
;   59		0,0,0,0,0,0
;   60	};
;   61	
;   62	int32_t screenX = 0;
;   63	int32_t screenY = 0;
;   64	
;   65	uint8_t tx; /* x tile */
;   66	uint8_t ty; /* y tile */
;   67	bool running = false;
;   68	bool currentRun = 0;
;   69	int currentWater = 0;
;   70	
;   71	/* Variables for the leaves that appear when walking through grass */
;   72	bool grassAnimNext = 0;
;   73	int grassAnimState1 = 0;
;   74	int grassAnimState2 = 0;
;   75	int grassAnimX1 = 0;
;   76	int grassAnimY1 = 0;
;   77	int grassAnimX2 = 0;
;   78	int grassAnimY2 = 0;
;   79	
;   80	
;   81	uint8_t nextTile;
;   82	/* Set to 8 when anything is pressed and decreases each frame until 0 */
;   83	uint8_t moveState = 0;
;   84	/* Direction Player is facing */
;   85	uint8_t moveDir = 3;
;   86	uint8_t playerState = 0;
;   87	
;   88	gfx_tilemap_t tilemap;
;   89	
;   90	gfx_sprite_t *mapTiles[128];
;   91	gfx_sprite_t *playerSprites[32];
;   92	gfx_sprite_t *enemySprites[8];
;   93	gfx_sprite_t *pokeballSprites[3];
;   94	
;   95	uint8_t currentTileMap[1920];
;   96	uint8_t currentTypeMap[1920];
;   97	struct zoneData currentZoneData;
;   98	/* zoneData is in header file because battle.c needs it*/
;   99	
;  100	uint8_t npc1;
;  101	uint8_t npc2;
;  102	
;  103	uint8_t currentTrainer = 0; /* 0-15 */
;  104	struct pokemonData tempcharacter2;
;  105	const struct pokemonData clearcharacter2 = {0};
;  106	
;  107	char str1[20];
	SEGMENT CODE
;  108	
;  109	void map_Initialize(void) {
_map_Initialize:
;  110		PKMNSD4_init();
	CALL	_PKMNSD4_init
;  111	
;  112		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,138
	LD	HL,_PKMNSD4
	ADD	HL,BC
	LD	BC,468
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  113		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  114		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  115		textBoxType = 0;	
	LD	BC,0
	LD	(_textBoxType),BC
;  116		save_SelectSave();
	CALL	_save_SelectSave
;  117		save_Load();
	CALL	_save_Load
;  118	
;  119		/* Initialize the tilemap */
;  120		tilemap.map = currentTileMap;
	LD	BC,_currentTileMap
	LD	(_tilemap),BC
;  121		tilemap.tiles = mapTiles;
	LD	BC,_mapTiles
	LD	(_tilemap+3),BC
;  122		tilemap.type_width = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  123		tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  124		tilemap.tile_height = 16;
	LD	A,16
	LD	(_tilemap+6),A
;  125		tilemap.tile_width = 16;
	LD	(_tilemap+7),A
;  126		tilemap.draw_height = 16;
	LD	(_tilemap+8),A
;  127		tilemap.draw_width = 22;
	LD	A,22
	LD	(_tilemap+9),A
;  128		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  129		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  130		tilemap.y_loc = 8;
	LD	A,8
	LD	(_tilemap+14),A
;  131		tilemap.x_loc = -8;
	LD	BC,16777208
	LD	(_tilemap+15),BC
;  132	
;  133		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_1
;  134			tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  135			tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  136		}
L_1:
;  137	
;  138		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  139		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  140		LoadMap();
	CALL	_LoadMap
;  141	}
	RET	


;**************************** _map_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_save_Load                          IMPORT  -----   function
;_save_SelectSave                    IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT    141   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_PKMNSD4_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  142	void map_Setup(void) {
_map_Setup:
;  143		map_SetupGfx();
	CALL	_map_SetupGfx
;  144	
;  145		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  146		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  147	}
	RET	


;**************************** _map_Setup ***************************
;Name                         Addr/Register   Size   Type
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_map_SetupGfx                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  148	
;  149	void map_SetupGfx(void) {
_map_SetupGfx:
	LD	HL,-6
	CALL	__frameset
;  150		int tileIndex = 0;
;  151		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_9
L_7:
;  152			mapTiles[tileIndex] = gfx_MallocSprite(16, 16);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,_mapTiles
	ADD	HL,DE
	LD	(HL),BC
;  153			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_6
;  154				zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  155			}
;  156			else {
	JR	L_8
L_6:
;  157				zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  158			}
;  159		}
L_8:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_9:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_7
;  160		for (tileIndex = 0; tileIndex < 12; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
;  161			playerSprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  162			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  163		}
L_13:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_11
;  164		for (tileIndex = 12; tileIndex < 24; tileIndex++) {
	LD	(IX+-3),BC
	JR	L_18
L_16:
;  165			playerSprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  166			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  167		}
L_18:
	LD	BC,24
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_16
;  168		for (tileIndex = 24; tileIndex < 32; tileIndex++) {
	LD	(IX+-3),BC
	JR	L_23
L_21:
;  169			playerSprites[tileIndex] = gfx_MallocSprite(22, 26);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	BC,22
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  170			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  171		}
L_23:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_21
;  172		for (tileIndex = 0; tileIndex < 8; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_28
L_26:
;  173			enemySprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_enemySprites
	ADD	HL,DE
	LD	(HL),BC
;  174			zx7_Decompress(enemySprites[tileIndex], PKMNSD4[32 + tileIndex]);
	LD	IY,(IX+-3)
	LEA	HL,IY+32
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD4
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  175		}
L_28:
	LD	BC,8
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_26
;  176		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_33
L_31:
;  177			pokeballSprites[tileIndex] = gfx_MallocSprite(16, 16);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_pokeballSprites
	ADD	HL,DE
	LD	(HL),BC
;  178			zx7_Decompress(pokeballSprites[tileIndex], pokeball_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_pokeball_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  179		}
L_33:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_31
;  180		textBoxType = 0;
	LD	BC,0
;  181		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	DE,0
	PUSH	DE
	LD	DE,138
	LD	HL,_PKMNSD4
	ADD	HL,DE
	LD	(_textBoxType),BC
	LD	BC,468
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  182		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  183		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  184		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  185		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  186	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_SetupGfx ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_pokeball_tiles_compressed          IMPORT      9   variable
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     24   variable
;_PKMNSD4                            IMPORT    141   variable
;_playerSprites                      STATIC     96   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_0                                   IX-6      3   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  187	
;  188	int map_Loop(void) {
_map_Loop:
	LD	HL,-94
	CALL	__frameset
;  189		/* Open Menu */
;  190		if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_130
;  191			int menuReturn;
;  192			gfx_sprite_t *pauseMenuSprite;
;  193			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  194			gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  195			map_End();
	CALL	_map_End
;  196			pauseMenuSprite = gfx_MallocSprite(112, 96);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,112
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  197			zx7_Decompress(pauseMenuSprite, pausemenu_compressed);
	LD	IY,_PKMNSD4
	LD	(IX+-36),HL
	LD	BC,(IY+126)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  198			gfx_Sprite(pauseMenuSprite, 195, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,195
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  199	
;  200			menuReturn = menu_Menu();
	CALL	_menu_Menu
	UEXT	HL
	LD	L,A
	LD	(IX+-64),HL
;  201			free(pauseMenuSprite);
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_free
	POP	BC
;  202			map_SetupGfx();
	CALL	_map_SetupGfx
;  203			map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  204			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_38
L_39:
	CALL	_kb_Scan
L_38:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_39
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_39
;  205			return menuReturn;
	LD	HL,(IX+-64)
	JR	L_209
;  206		}
L_130:
;  207		/* If player presses 2nd */
;  208		if ((kb_Data[1] & kb_2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_207
;  209			nextTile = GetNextTile(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	LD	(_nextTile),A
;  210			if (GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_125
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_125
;  211				int partyIndex, moveIndex;
;  212				bool hasUser = false;
	LD	(IX+-30),0
;  213				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-12),BC
	JR	L_51
L_49:
;  214					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-21),BC
	JR	L_48
L_46:
;  215						if (party[partyIndex].moves[moveIndex] == 141) {
	LD	HL,(IX+-12)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-40),HL
	LD	IY,(IX+-40)
	LEA	HL,IY+1
	LD	BC,(IX+-21)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,141
	SBC	HL,BC
	JR	NZ,L_47
;  216							hasUser = true;
	LD	(IX+-30),1
;  217							sprintf(str, "%s used Surf", data_pokemon[party[partyIndex].id].name);
	LD	IY,(IX+-40)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__18
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  218							partyIndex = 6;
	LD	BC,6
	LD	(IX+-12),BC
;  219						}
;  220					}
L_47:
	LD	BC,(IX+-21)
	INC	BC
	LD	(IX+-21),BC
L_48:
	LD	BC,4
	LD	HL,(IX+-21)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_46
	LD	BC,(IX+-12)
	INC	BC
	LD	(IX+-12),BC
;  221				}
L_51:
	LD	BC,6
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_49
;  222				if (hasUser) {
	LD	A,(IX+-30)
	OR	A,A
	JR	Z,L_61
;  223					text_Display(str,true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  224					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_54
;  225						playerX += 16;
	LD	IY,(_playerX)
	LEA	BC,IY+16
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  226					}
L_54:
;  227					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_56
;  228						playerX -= 16;
	LD	IY,(_playerX)
	LEA	BC,IY+-16
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  229					}
L_56:
;  230					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_58
;  231						playerY += 16;
	LD	IY,(_playerY)
	LEA	BC,IY+16
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  232					}
L_58:
;  233					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_59
;  234						playerY -= 16;
	LD	IY,(_playerY)
	LEA	BC,IY+-16
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  235					}
L_59:
;  236					surfing = true;
	LD	A,1
	LD	(_surfing),A
;  237					tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  238					ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  239				}
;  240				else {
	JR	L_126
L_61:
;  241					text_Display("A Pokemon with Surf could bring you across this water", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__26
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  242				}
;  243			}
;  244			else if (nextTile == 0x41) {
	JR	L_126
L_125:
	LD	A,(_nextTile)
	CP	A,65
	JR	NZ,L_123
;  245				HealParty();
	CALL	_HealParty
;  246			}
;  247			else if (nextTile == 0x42) {
	JR	L_126
L_123:
	LD	A,(_nextTile)
	CP	A,66
	JR	NZ,L_121
;  248				gfx_sprite_t *shopSpriteOriginal;
;  249				map_End();
	CALL	_map_End
;  250	
;  251				shopSpriteOriginal = gfx_MallocSprite(134, 84);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,84
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-43),HL
;  252				zx7_Decompress(shopSpriteOriginal, shop_compressed);
	LD	BC,_shop_compressed
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  253	
;  254				menu_ItemShop(shopSpriteOriginal);
	LD	BC,(IX+-43)
	PUSH	BC
	CALL	_menu_ItemShop
	POP	BC
;  255	
;  256				free(shopSpriteOriginal);
	LD	BC,(IX+-43)
	PUSH	BC
	CALL	_free
	POP	BC
;  257				map_SetupGfx();
	CALL	_map_SetupGfx
;  258			}
;  259			else if (nextTile == 0x43) {
	JR	L_126
L_121:
	LD	A,(_nextTile)
	CP	A,67
	JR	NZ,L_119
;  260				OpenBox();
	CALL	_OpenBox
;  261			}
;  262			else if (nextTile == 0x44) {
	JR	L_126
L_119:
	LD	A,(_nextTile)
	CP	A,68
	JR	NZ,L_117
;  263				TalkToNpc1();
	CALL	_TalkToNpc1
;  264			}
;  265			else if (nextTile == 0x45) {
	JR	L_126
L_117:
	LD	A,(_nextTile)
	CP	A,69
	JR	NZ,L_115
;  266				TalkToNpc2();
	CALL	_TalkToNpc2
;  267			}
;  268			else if (nextTile == 0x46) {
	JR	L_126
L_115:
	LD	A,(_nextTile)
	CP	A,70
	JR	NZ,L_113
;  269				int partyIndex, moveIndex;
;  270				bool hasUser = false;
	LD	(IX+-28),0
;  271				int oldTile;
;  272				int tempTile;
;  273				int newTile = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  274				oldTile = tx + ty * OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	(IX+-18),HL
	LD	(IX+-61),HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-18)
	ADD	HL,BC
	LD	(IX+-9),HL
;  275				if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_65
;  276					oldTile = (tx + 1) + (ty)* OUTDOORWIDTH;
	LD	BC,(IX+-18)
	LD	(IX+-61),BC
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,(IX+-18)
	ADD	HL,BC
	LD	(IX+-9),HL
;  277					newTile = (tx + 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	LD	BC,(IX+-18)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	ADD	HL,BC
	LD	(IX+-3),HL
;  278				}
L_65:
;  279				if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_67
;  280					oldTile = (tx - 1) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	BC,(IX+-61)
	LD	L,A
	DEC	HL
	LD	DE,BC
	ADD	HL,DE
	LD	(IX+-9),HL
;  281					newTile = (tx - 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	ADD	HL,BC
	LD	(IX+-3),HL
;  282				}
L_67:
;  283				if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_69
;  284					oldTile = (tx)+(ty + 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-9),HL
;  285					newTile = (tx)+(ty + 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-3),HL
;  286				}
L_69:
;  287				if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_79
;  288					oldTile = (tx)+(ty - 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-9),HL
;  289					newTile = (tx)+(ty - 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-3),HL
;  290				}
L_79:
;  291				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_78
L_76:
;  292					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-27),BC
	JR	L_75
L_73:
;  293						if (party[partyIndex].moves[moveIndex] == 133) {
	LD	HL,(IX+-6)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-46),HL
	LD	IY,(IX+-46)
	LEA	HL,IY+1
	LD	BC,(IX+-27)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,133
	SBC	HL,BC
	JR	NZ,L_74
;  294							hasUser = true;
	LD	(IX+-28),1
;  295							sprintf(str, "%s used Strength", data_pokemon[party[partyIndex].id].name);
	LD	IY,(IX+-46)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__38
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  296							partyIndex = 6;
	LD	BC,6
	LD	(IX+-6),BC
;  297						}
;  298					}
L_74:
	LD	BC,(IX+-27)
	INC	BC
	LD	(IX+-27),BC
L_75:
	LD	BC,4
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JP	M,L_73
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  299				}
L_78:
	LD	BC,6
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_76
;  300				if (hasUser && currentTypeMap[newTile] == 0) {
	LD	A,(IX+-28)
	OR	A,A
	JR	Z,L_83
	LD	BC,(IX+-3)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_83
;  301					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  302					tempTile = currentTileMap[oldTile];
	LD	BC,(IX+-9)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LD	(IX+-73),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-49),HL
;  303					currentTileMap[oldTile] = currentTileMap[newTile];
	LD	BC,(IX+-3)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LD	(IX+-70),HL
	LD	A,(HL)
	LD	HL,(IX+-73)
	LD	(HL),A
;  304					currentTileMap[newTile] = tempTile;
	LD	A,(IX+-49)
	LD	HL,(IX+-70)
	LD	(HL),A
;  305					tempTile = currentTypeMap[oldTile];
	LD	BC,(IX+-9)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IX+-67),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-49),HL
;  306					currentTypeMap[oldTile] = currentTypeMap[newTile];
	LD	HL,(IX+-33)
	LD	A,(HL)
	LD	HL,(IX+-67)
	LD	(HL),A
;  307					currentTypeMap[newTile] = tempTile;
	LD	A,(IX+-49)
	LD	HL,(IX+-33)
	LD	(HL),A
;  308				}
;  309				else if (currentTypeMap[newTile] == 0) {
	JR	L_126
L_83:
	LD	BC,_currentTypeMap
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_126
;  310					text_Display("This boulder could be moved by a strong Pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__44
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  311				}
;  312			}
;  313			else if (nextTile == 0x47) {
	JR	L_126
L_113:
	LD	A,(_nextTile)
	CP	A,71
	JR	NZ,L_111
;  314				int partyIndex, moveIndex;
;  315				bool hasUser = false;
	LD	(IX+-29),0
;  316				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-15),BC
	JR	L_93
L_91:
;  317					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-24),BC
	JR	L_90
L_88:
;  318						if (party[partyIndex].moves[moveIndex] == 26) {
	LD	HL,(IX+-15)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-52),HL
	LD	IY,(IX+-52)
	LEA	HL,IY+1
	LD	BC,(IX+-24)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JR	NZ,L_89
;  319							hasUser = true;
	LD	(IX+-29),1
;  320							sprintf(str, "%s used Cut", data_pokemon[party[partyIndex].id].name);
	LD	IY,(IX+-52)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__47
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  321							partyIndex = 6;
	LD	BC,6
	LD	(IX+-15),BC
;  322						}
;  323					}
L_89:
	LD	BC,(IX+-24)
	INC	BC
	LD	(IX+-24),BC
L_90:
	LD	BC,4
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,BC
	JP	M,L_88
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  324				}
L_93:
	LD	BC,6
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_91
;  325				if (hasUser) {
	LD	A,(IX+-29)
	OR	A,A
	JR	Z,L_102
;  326					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  327					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_96
;  328						currentTypeMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  329						currentTileMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  330					}
L_96:
;  331					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_98
;  332						currentTypeMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  333						currentTileMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  334					}
L_98:
;  335					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_100
;  336						currentTypeMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  337						currentTileMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  338					}
L_100:
;  339					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_126
;  340						currentTypeMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  341						currentTileMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  342					}
;  343				}
;  344				else {
	JR	L_126
L_102:
;  345					text_Display("This tree could be cut down", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__55
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  346				}
;  347			}
;  348			else if (nextTile >= 0x50 && nextTile < 0x60) {
	JR	L_126
L_111:
	LD	A,(_nextTile)
	CP	A,80
	JR	C,L_109
	LD	A,(_nextTile)
	CP	A,96
	JR	NC,L_109
;  349				EnterDoor(nextTile - 80);
	LD	A,(_nextTile)
	SUB	A,80
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  350			}
;  351			else if (nextTile >= 0x60 && nextTile < 0x70) {
	JR	L_126
L_109:
	LD	A,(_nextTile)
	CP	A,96
	JR	C,L_126
	LD	A,(_nextTile)
	CP	A,112
	JR	NC,L_126
;  352				if (FightTrainer(nextTile - 96)) {
	LD	A,(_nextTile)
	SUB	A,96
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_126
;  353					return 1;
	LD	HL,1
	JR	L_209
;  354				}
;  355			}
;  356			while ((kb_Data[1] & kb_2nd))
L_127:
;  357			{
;  358				kb_Scan();
	CALL	_kb_Scan
;  359			}
L_126:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_127
;  360		}
L_207:
;  361		/* If moving */
;  362		if (moveState > 0) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_206
;  363			Wait(1);
	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;  364			moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  365			if (running) {
	LD	A,(_running)
	OR	A,A
	JR	Z,L_135
;  366				Wait(1);
	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;  367				moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  368			}
L_135:
;  369			if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_137
;  370				playerX += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	LD	BC,(_playerX)
	ADD	HL,HL
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  371			}
L_137:
;  372			if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_139
;  373				playerX -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_playerX)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  374			}
L_139:
;  375			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_141
;  376				playerY += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	LD	BC,(_playerY)
	ADD	HL,HL
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  377			}
L_141:
;  378			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_157
;  379				playerY -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_playerY)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  380			}
L_157:
;  381			if (surfing) {
	LD	A,(_surfing)
	OR	A,A
	JR	Z,L_156
;  382				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_143
;  383					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  384				}
;  385				else {
	JR	L_179
L_143:
;  386					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  387				}
;  388			}
;  389			else if (running){
	JR	L_179
L_156:
	LD	A,(_running)
	OR	A,A
	JR	Z,L_154
;  390				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_145
;  391					playerState = 1 + currentRun;
	LD	A,(_currentRun)
	INC	A
	LD	(_playerState),A
;  392				}
;  393				else {
	JR	L_179
L_145:
;  394					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  395				}
;  396	
;  397			}
;  398			else {
	JR	L_179
L_154:
;  399				if (moveState > 5) {
	LD	A,5
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_152
;  400					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  401				}
;  402				else if (moveState > 3) {
	JR	L_179
L_152:
	LD	A,3
	CP	A,(HL)
	JR	NC,L_150
;  403					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  404				}
;  405				else if (moveState > 1) {
	JR	L_179
L_150:
	LD	A,1
	CP	A,(HL)
	JR	NC,L_148
;  406					playerState = 2;
	LD	A,2
	LD	(_playerState),A
;  407				}
;  408				else if (moveState > 0) {
	JR	L_179
L_148:
	XOR	A,A
	CP	A,(HL)
	JR	NC,L_179
;  409					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  410				}
;  411			}
L_179:
;  412	
;  413			if (moveState == 0) {
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_208
;  414				currentRun = !currentRun;
	LD	A,(_currentRun)
	OR	A,A
	JR	NZ,L_159
	LD	BC,1
	LD	(IX+-58),BC
	JR	L_160
L_159:
	LD	BC,0
	LD	(IX+-58),BC
L_160:
	LD	A,(IX+-58)
	LD	(_currentRun),A
;  415				/* Arrive At Tile*/
;  416				tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  417				ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  418				nextTile = GetTypeMapData(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
;  419				if (nextTile >= 0x10 && nextTile < 0x20) {
	CP	A,16
	LD	(_nextTile),A
	JR	C,L_177
	LD	A,(_nextTile)
	CP	A,32
	JR	NC,L_177
;  420					/* Grass */
;  421					if ((rand() % 100) < battlechance) {
	CALL	_rand
	LD	BC,100
	CALL	__irems
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JP	P,L_208
;  422						uint8_t wildSpawn;
;  423						wildSpawn = rand() % 5;
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	(IX+-37),L
;  424						battle_SpawnWild(currentZoneData.spawnids[wildSpawn][nextTile -16], currentZoneData.spawnminlevels[wildSpawn][nextTile - 16], currentZoneData.spawnmaxlevels[wildSpawn][nextTile - 16]);
	LD	A,(IX+-37)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-76),HL
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-16
	LD	HL,(IX+-76)
	LD	BC,_currentZoneData+160
	ADD	HL,BC
	LD	BC,DE
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,(IX+-76)
	LD	(IX+-79),DE	; spill
	LD	DE,_currentZoneData+80
	LD	(IX+-82),DE	; spill
	LD	DE,(IX+-79)	; unspill
	LD	(IX+-79),DE	; spill
	LD	DE,(IX+-82)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-79)	; unspill
	LD	(IX+-85),DE	; spill
	LD	(IX+-88),DE	; spill
	LD	DE,(IX+-85)	; unspill
	LD	(IX+-85),DE	; spill
	LD	DE,(IX+-88)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-85)	; unspill
	LD	(IX+-91),BC	; spill
	LD	BC,_currentZoneData
	LD	(IX+-94),BC	; spill
	LD	BC,(IX+-91)	; unspill
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	LD	HL,(IX+-76)
	LD	(IX+-91),BC	; spill
	LD	BC,(IX+-94)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-91)	; unspill
	ADD	HL,DE
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	PUSH	BC
	CALL	_battle_SpawnWild
	POP	BC
	POP	BC
	POP	BC
;  425						return 1;
	LD	HL,1
	JR	L_209
;  426					}
;  427				}
;  428				else if (nextTile == 0x01) {
L_177:
	LD	A,(_nextTile)
	CP	A,1
	JR	NZ,L_175
;  429					ExitBuilding();
	CALL	_ExitBuilding
;  430				}
;  431				else if (surfing && !(nextTile >= 0x1A && nextTile < 0x20)) {
	JR	L_208
L_175:
	LD	A,(_surfing)
	OR	A,A
	JR	Z,L_173
	LD	A,(_nextTile)
	CP	A,26
	JR	C,L_172
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_173
L_172:
;  432					surfing = false;
	XOR	A,A
	LD	(_surfing),A
;  433				}
;  434				else if (nextTile >= 0x20 && nextTile < 0x30) {
	JR	L_208
L_173:
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_171
	LD	A,(_nextTile)
	CP	A,48
	JR	NC,L_171
;  435					ExitZone(nextTile - 32);
	LD	A,(_nextTile)
	SUB	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ExitZone
	POP	BC
;  436				}
;  437				else if (nextTile >= 0x30 && nextTile < 0x40) {
	JR	L_208
L_171:
	LD	A,(_nextTile)
	CP	A,48
	JR	C,L_208
	LD	A,(_nextTile)
	CP	A,64
	JR	NC,L_208
;  438					if (FightTrainer(nextTile - 48)) {
	LD	A,(_nextTile)
	SUB	A,48
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_208
;  439						return 1;
	LD	HL,1
	JR	L_209
;  440					}
;  441				}
;  442			}
;  443		}
;  444	
;  445		/* If not moving */
;  446		else {
L_206:
;  447			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_186
;  448				moveDir = 1;
	LD	A,1
	LD	(_moveDir),A
;  449			}
;  450			else if (kb_Data[7] & kb_Left) {
	JR	L_197
L_186:
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_184
;  451				moveDir = 2;
	LD	A,2
	LD	(_moveDir),A
;  452			}
;  453			else if (kb_Data[7] & kb_Down) {
	JR	L_197
L_184:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_182
;  454				moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  455	
;  456			}
;  457			else if (kb_Data[7] & kb_Up) {
	JR	L_197
L_182:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_197
;  458				moveDir = 4;
	LD	A,4
	LD	(_moveDir),A
;  459			}
L_197:
;  460			
;  461			if (kb_Data[7]) {
	LD	A,(16056350)
	OR	A,A
	JR	Z,L_204
;  462				if (GetNextTile(tx, ty, tilemap.width) < 64 && !(!surfing && GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) < 0x20)) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_195
	LD	A,(_surfing)
	OR	A,A
	JR	NZ,L_190
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_190
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_195
L_190:
;  463					moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  464				}
L_195:
;  465				if (GetNextTile(tx, ty, tilemap.width) >= 112 && GetNextTile(tx, ty, tilemap.width) < 120) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,112
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_204
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_204
;  466					if (GetNextTile(tx, ty, tilemap.width) - 111 > badgeCount) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LD	A,(_badgeCount)
	UEXT	HL
	LD	L,A
	OR	A,A
	LEA	BC,IY+-111
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_193
;  467						sprintf(str, "You need %u badges to pass", (GetNextTile(tx, ty, tilemap.width) - 111));
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-111
	PUSH	BC
	LD	BC,L__102
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  468						text_Display("This route is closed. Come back later.", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__103
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  469					}
;  470					else {
	JR	L_204
L_193:
;  471						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  472					}
;  473				}
;  474			}
L_204:
;  475			running = ((kb_Data[2] & kb_Alpha) && moveState > 0 && !surfing);
	LD	A,(16056340)
	AND	A,128
	JR	Z,L_201
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_201
	LD	A,(_surfing)
	OR	A,A
	JR	NZ,L_201
	LD	BC,1
	LD	(IX+-55),BC
	JR	L_202
L_201:
	LD	BC,0
	LD	(IX+-55),BC
L_202:
	LD	A,(IX+-55)
	LD	(_running),A
;  476		}
L_208:
;  477	
;  478		map_Draw();
	CALL	_map_Draw
;  479		playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  480	
;  481		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	OR	A,A
;  482		return 0;
	SBC	HL,HL
;  483	}
L_209:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Loop ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_ExitZone                           IMPORT  -----   function
;_ExitBuilding                       IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_battle_SpawnWild                   IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_GetTypeMapData                     IMPORT  -----   function
;_currentRun                         STATIC      1   variable
;_playerState                        STATIC      1   variable
;_running                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_FightTrainer                       IMPORT  -----   function
;_EnterDoor                          IMPORT  -----   function
;_currentTileMap                     STATIC   1920   variable
;_currentTypeMap                     STATIC   1920   variable
;_TalkToNpc2                         IMPORT  -----   function
;_TalkToNpc1                         IMPORT  -----   function
;_OpenBox                            IMPORT  -----   function
;_menu_ItemShop                      IMPORT  -----   function
;_shop_compressed                    IMPORT     98   variable
;_HealParty                          IMPORT  -----   function
;_surfing                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_moveDir                            STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_nextTile                           STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_GetNextTile                        IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_free                               IMPORT  -----   function
;_menu_Menu                          IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_PKMNSD4                            IMPORT    141   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;menuReturn                           IX-64      3   variable
;G_5                                  IX-61      3   variable
;temp161                              IX-58      3   variable
;temp203                              IX-55      3   variable
;G_9                                  IX-52      3   variable
;tempTile                             IX-49      3   variable
;G_6                                  IX-46      3   variable
;shopSpriteOriginal                   IX-43      3   variable
;G_2                                  IX-40      3   variable
;wildSpawn                            IX-37      1   variable
;pauseMenuSprite                      IX-36      3   variable
;G_8                                  IX-33      3   variable
;hasUser                              IX-30      1   variable
;hasUser                              IX-29      1   variable
;hasUser                              IX-28      1   variable
;moveIndex                            IX-27      3   variable
;moveIndex                            IX-24      3   variable
;moveIndex                            IX-21      3   variable
;G_4                                  IX-18      3   variable
;partyIndex                           IX-15      3   variable
;partyIndex                           IX-12      3   variable
;oldTile                               IX-9      3   variable
;partyIndex                            IX-6      3   variable
;newTile                               IX-3      3   variable


; Stack Frame Size: 100 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__18:
	DB	"%s used Surf"
	DB	0
L__26:
	DB	"A Pokemon with Surf could bring you across this water"
	DB	0
L__38:
	DB	"%s used Strength"
	DB	0
L__44:
	DB	"This boulder could be moved by a strong Pokemon"
	DB	0
L__47:
	DB	"%s used Cut"
	DB	0
L__55:
	DB	"This tree could be cut down"
	DB	0
L__102:
	DB	"You need %u badges to pass"
	DB	0
L__103:
	DB	"This route is closed. Come back later."
	DB	0
	SEGMENT CODE
;  484	void map_End(void) {
_map_End:
	LD	HL,-3
	CALL	__frameset
;  485		int tileIndex = 0;
;  486		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_213
L_211:
;  487			free(mapTiles[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  488		}
L_213:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_211
;  489		for (tileIndex = 0; tileIndex < 32; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_217
L_215:
;  490			free(playerSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  491		}
L_217:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_215
;  492		for (tileIndex = 0; tileIndex < 8; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_222
L_220:
;  493			free(enemySprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  494		}
L_222:
	LD	BC,8
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_220
;  495		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_227
L_225:
;  496			free(pokeballSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  497		}
L_227:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_225
;  498		
;  499	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_End ***************************
;Name                         Addr/Register   Size   Type
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     24   variable
;_playerSprites                      STATIC     96   variable
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  500	
;  501	void map_Draw(void) {
_map_Draw:
	LD	HL,-21
	CALL	__frameset
;  502		/* Move Screen and Redraw */
;  503		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_257
;  504			screenX = 0;
;  505			screenY = 0;
;  506	
;  507			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	LD	BC,0
	LD	(_screenX),BC
	XOR	A,A
	LD	(_screenX+3),A
	LD	(_screenY),BC
	XOR	A,A
	LD	(_screenY+3),A
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  508	
;  509			gfx_TransparentSprite_NoClip(playerSprites[moveDir * 3 + playerState - 3], playerX - 8, playerY + 4);
	LD	A,(_playerY)
	ADD	A,4
	LD	C,A
	LD	A,(_moveDir)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	DEC	HL
	DEC	HL
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  510		}
;  511		else {
	JR	L_258
L_257:
;  512			/* Animate Water Every 20 Frames */
;  513			if (currentWater == 20) {
	LD	BC,20
	LD	HL,(_currentWater)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_232
;  514				memcpy(mapTiles[29], animatedwater1, 258);
	LD	BC,258
	PUSH	BC
	LD	HL,_mapTiles+87
	LD	BC,_animatedwater1_data
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  515			}
L_232:
;  516			if (currentWater == 0) {
	LD	HL,(_currentWater)
	CALL	__icmpzero
	JR	NZ,L_234
;  517				memcpy(mapTiles[29], animatedwater2, 258);
	LD	BC,258
	PUSH	BC
	LD	HL,_mapTiles+87
	LD	BC,_animatedwater2_data
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  518			}
L_234:
;  519			currentWater++;
	LD	BC,(_currentWater)
	INC	BC
	LD	(_currentWater),BC
;  520			if (currentWater == 40) {
	LD	HL,(_currentWater)
	OR	A,A
	LD	BC,40
	SBC	HL,BC
	JR	NZ,L_236
;  521				currentWater = 0;
	LD	BC,0
	LD	(_currentWater),BC
;  522			}
L_236:
;  523	
;  524			screenX = Clamp(playerX - 160, 0, MAX_X);
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777056
	LD	A,255
	CALL	__ladd
	LD	BC,432
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenX),HL
	LD	A,E
	LD	(_screenX+3),A
;  525			screenY = Clamp(playerY - 112, 0, MAX_Y);
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777104
	LD	A,255
	CALL	__ladd
	LD	BC,400
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenY),HL
	LD	A,E
	LD	(_screenY+3),A
;  526	
;  527			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,(_screenY)
	PUSH	BC
	LD	BC,(_screenX)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  528	
;  529	
;  530			GrassAnimation(0);
	LD	BC,0
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  531	
;  532			gfx_TransparentSprite_NoClip(playerSprites[(24 * surfing) + (12 * running) + (moveDir - 1) * (3 - surfing) + playerState], playerX - screenX - 8, playerY - screenY + 4);
	LD	A,(_playerY)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,4
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	C,A
	LD	A,(_surfing)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	UEXT	HL
	LD	L,A
	LD	A,24
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	ADD	HL,BC
	LD	(IX+-15),HL	; spill
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	DEC	DE
	LD	A,(_surfing)
	UEXT	HL
	LD	L,A
	LD	(IX+-18),DE	; spill
	LD	(IX+-21),HL	; spill
	LD	DE,(IX+-18)	; unspill
	LD	HL,3
	OR	A,A
	LD	(IX+-18),DE	; spill
	LD	DE,(IX+-21)	; unspill
	SBC	HL,DE
	LD	BC,HL
	LD	HL,(IX+-18)
	CALL	__imuls
	LD	BC,(IX+-15)	; unspill
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  533	
;  534			/* Draw overlay if player is in grass */
;  535			if (currentTileMap[tx + (moveDir == 1) - (moveDir == 2) + (ty + (moveDir == 3) - (moveDir == 4)) * OUTDOORWIDTH] == 2) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__118
	LD	B,1
	JR	L__119
L__118:
	LD	B,0
L__119:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__121
	LD	B,1
	JR	L__122
L__121:
	LD	B,0
L__122:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	A,48
	CALL	__imul_b
	LD	(IX+-9),HL	; spill
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__124
	LD	B,1
	JR	L__125
L__124:
	LD	B,0
L__125:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__127
	LD	B,1
	JR	L__128
L__127:
	LD	B,0
L__128:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	DE,(IX+-9)	; unspill
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_254
;  536				/* Always draw grass overlay if moving sideways*/
;  537				if (moveDir <= 2 && moveState > 0) {
	LD	A,2
	LD	HL,_moveDir
	CP	A,(HL)
	JR	C,L_240
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_240
;  538					gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__133
	LD	A,1
	JR	L__134
L__133:
	XOR	A,A
L__134:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__136
	LD	B,1
	JR	L__137
L__136:
	LD	B,0
L__137:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__139
	LD	B,1
	JR	L__140
L__139:
L__140:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__142
	LD	B,1
	JR	L__143
L__142:
	LD	B,0
L__143:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  539				}
;  540				/* Only draw the overlay at the end if moving vertically */
;  541				else if (moveState == 1) {
	JR	L_249
L_240:
	LD	A,(_moveState)
	CP	A,1
	JR	NZ,L_249
;  542					gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__146
	LD	A,1
	JR	L__147
L__146:
	XOR	A,A
L__147:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__149
	LD	B,1
	JR	L__150
L__149:
	LD	B,0
L__150:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__152
	LD	B,1
	JR	L__153
L__152:
L__153:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__155
	LD	B,1
	JR	L__156
L__155:
	LD	B,0
L__156:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  543				}
L_249:
;  544				if (moveState == 1) {
	LD	A,(_moveState)
	CP	A,1
	JR	NZ,L_254
;  545					if (grassAnimNext) {
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	Z,L_242
;  546						grassAnimState1 = 10;
	LD	BC,10
	LD	(_grassAnimState1),BC
;  547						grassAnimX1 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__160
	LD	B,1
	JR	L__161
L__160:
	LD	B,0
L__161:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__163
	LD	B,1
	JR	L__164
L__163:
	LD	B,0
L__164:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX1),HL
;  548						grassAnimY1 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__166
	LD	B,1
	JR	L__167
L__166:
	LD	B,0
L__167:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__169
	LD	B,1
	JR	L__170
L__169:
	LD	B,0
L__170:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY1),HL
;  549					}
;  550					else {
	JR	L_247
L_242:
;  551						grassAnimState2 = 10;
	LD	BC,10
	LD	(_grassAnimState2),BC
;  552						grassAnimX2 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__172
	LD	B,1
	JR	L__173
L__172:
	LD	B,0
L__173:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__175
	LD	B,1
	JR	L__176
L__175:
	LD	B,0
L__176:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX2),HL
;  553						grassAnimY2 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__178
	LD	B,1
	JR	L__179
L__178:
	LD	B,0
L__179:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__181
	LD	B,1
	JR	L__182
L__181:
	LD	B,0
L__182:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY2),HL
;  554					}
L_247:
;  555					grassAnimNext = !grassAnimNext;
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	NZ,L_244
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_245
L_244:
	LD	BC,0
	LD	(IX+-3),BC
L_245:
	LD	A,(IX+-3)
	LD	(_grassAnimNext),A
;  556				}
;  557			}
L_254:
;  558			if (!(moveDir == 3 && moveState != 0) && currentTileMap[tx + ty * OUTDOORWIDTH] == 2) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_252
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_255
L_252:
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_255
;  559				gfx_TransparentSprite_NoClip(grassoverlay1, tx * 16 - screenX - 8, ty * 16 - screenY + 18);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  560			}
L_255:
;  561			GrassAnimation(1);
	LD	BC,1
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  562	
;  563		}
L_258:
;  564		DrawEnemies();
	CALL	_DrawEnemies
;  565		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;  566	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Draw ***************************
;Name                         Addr/Register   Size   Type
;_map_DrawInformationBar             IMPORT  -----   function
;_DrawEnemies                        IMPORT  -----   function
;_grassAnimY2                        STATIC      3   variable
;_grassAnimX2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassAnimY1                        STATIC      3   variable
;_grassAnimX1                        STATIC      3   variable
;_grassAnimState1                    STATIC      3   variable
;_grassAnimNext                      STATIC      1   variable
;_grassoverlay1_data                 IMPORT     98   variable
;_moveState                          STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_currentTileMap                     STATIC   1920   variable
;_running                            STATIC      1   variable
;_surfing                            IMPORT      1   variable
;_GrassAnimation                     IMPORT  -----   function
;_Clamp                              IMPORT  -----   function
;_animatedwater2_data                IMPORT    258   variable
;_mapTiles                           STATIC    384   variable
;_animatedwater1_data                IMPORT    258   variable
;_memcpy                             IMPORT  -----   function
;_currentWater                       STATIC      3   variable
;_playerState                        STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_playerSprites                      STATIC     96   variable
;_playerX                            IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_indoors                            IMPORT      1   variable
;temp246                               IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: -1 (instruction)


;  567	void GrassAnimation(bool part) {
_GrassAnimation:
	LD	HL,-6
	CALL	__frameset
;  568		if (grassAnimState1 > 0) {
	LD	BC,(_grassAnimState1)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_284
;  569			if ((moveDir == 3 && moveState != 0 && ty == grassAnimY1 / 16) != part) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_263
	LD	A,(_moveState)
	OR	A,A
	JR	Z,L_263
	LD	HL,(_grassAnimY1)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_263
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_264
L_263:
	LD	BC,0
	LD	(IX+-3),BC
L_264:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	JR	Z,L_270
;  570				if (grassAnimState1 > 5) {
	LD	BC,(_grassAnimState1)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_267
;  571					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 13);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  572				}
;  573				else {
	JR	L_270
L_267:
;  574					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 14);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  575				}
;  576			}
L_270:
;  577			grassAnimState1--;
	LD	BC,(_grassAnimState1)
	DEC	BC
	LD	(_grassAnimState1),BC
;  578		}
L_284:
;  579		if (grassAnimState2 > 0) {
	LD	BC,(_grassAnimState2)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_285
;  580			if ((moveDir == 3 && moveState != 0 && ty == grassAnimY2 / 16) != part) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_275
	LD	A,(_moveState)
	OR	A,A
	JR	Z,L_275
	LD	HL,(_grassAnimY2)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_275
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_276
L_275:
	LD	BC,0
	LD	(IX+-6),BC
L_276:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-6)
	SBC	HL,BC
	JR	Z,L_282
;  581				if (grassAnimState2 > 5) {
	LD	BC,(_grassAnimState2)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_279
;  582					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 13);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  583				}
;  584				else {
	JR	L_282
L_279:
;  585					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 14);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  586				}
;  587			}
L_282:
;  588			grassAnimState2--;
	LD	BC,(_grassAnimState2)
	DEC	BC
	LD	(_grassAnimState2),BC
;  589		}
;  590	}
L_285:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GrassAnimation ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimX2                        STATIC      3   variable
;_grassAnimY2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_screenX                            STATIC      4   variable
;_grassAnimX1                        STATIC      3   variable
;_screenY                            STATIC      4   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_grassAnimY1                        STATIC      3   variable
;_moveState                          STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_grassAnimState1                    STATIC      3   variable
;temp277                               IX-6      3   variable
;temp265                               IX-3      3   variable
;part                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  591	
;  592	void HealParty(void) {
_HealParty:
	LD	HL,-33
	CALL	__frameset
;  593		int pokemonIndex, moveIndex;
;  594		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_293
L_291:
;  595			party[pokemonIndex].currenthealth = stats_CalculateStats(party[pokemonIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-30
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	BC,(HL)
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-18)
	LD	(IY+13),C
	LD	(IY+14),B
;  596			party[pokemonIndex].currentstatus = 0;
	LD	(IY+15),0
;  597			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-12),HL
	JR	L_290
L_288:
;  598				party[pokemonIndex].pp[moveIndex] = data_moves[party[pokemonIndex].moves[moveIndex]].uses;
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	IY,(IX+-33)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  599			}
L_290:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_288
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  600		}
L_293:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_291
;  601		text_Display("Your party has been healed", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__203
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  602		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  603	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealParty ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;O_29                                 IX-15      3   variable
;O_30                                 IX-12      3   variable
;G_11                                  IX-9      3   variable
;moveIndex                             IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__203:
	DB	"Your party has been healed"
	DB	0
	SEGMENT CODE
;  604	void OpenBox(void) {
_OpenBox:
;  605		map_End();
	CALL	_map_End
;  606		
;  607		menu_Box();
	CALL	_menu_Box
;  608	
;  609		map_SetupGfx();
	CALL	_map_SetupGfx
;  610		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  611	}
	RET	


;**************************** _OpenBox ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Box                           IMPORT  -----   function
;_map_End                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -1 (instruction)


;  612	void TalkToNpc1(void) {
_TalkToNpc1:
	LD	HL,-6
	CALL	__frameset
;  613		text_Display(data_npcText[npc1], false);
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  614		if (!takenGifts[npc1] && data_npcReward[npc1] > 0) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_303
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_303
;  615			playerItems[data_npcReward[npc1] - 1]++;
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-6)
	LD	(HL),A
;  616			items_IndexToName(str1, data_npcReward[npc1] - 1);
	LD	HL,(IX+-3)
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  617			if (data_npcReward[npc1] - 1 >= 20) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_300
;  618				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__209
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  619			}
;  620			else {
	JR	L_301
L_300:
;  621				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__210
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  622			}
L_301:
;  623			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  624			takenGifts[npc1] = true;
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  625		}
;  626	}
L_303:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc1 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc1                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;G_12                                  IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__209:
	DB	"Recieved the TM for %s"
	DB	0
L__210:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  627	void TalkToNpc2(void) {
_TalkToNpc2:
	LD	HL,-3
	CALL	__frameset
;  628		text_Display(data_npcText[npc2], false);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  629		if (!takenGifts[npc2]) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_309
;  630			playerItems[data_npcReward[npc2] - 1]++;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-3)
	LD	(HL),A
;  631			items_IndexToName(str1, data_npcReward[npc2] - 1);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  632			if (data_npcReward[npc2] - 1 >= 20) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_306
;  633				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__214
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  634			}
;  635			else {
	JR	L_307
L_306:
;  636				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__215
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  637			}
L_307:
;  638			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  639			takenGifts[npc2] = true;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  640		}
;  641	}
L_309:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc2 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc2                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__214:
	DB	"Recieved the TM for %s"
	DB	0
L__215:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  642	void EnterDoor(uint8_t index) {
_EnterDoor:
	LD	HL,-3
	CALL	__frameset
;  643		int tileIndex;
;  644		lastPlayerX = playerX;
	LD	BC,(_playerX)
	LD	HL,_lastPlayerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  645		lastPlayerY = playerY;
	LD	BC,(_playerY)
	LD	HL,_lastPlayerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  646		indoors = true;
	LD	A,1
	LD	(_indoors),A
;  647		currentBuilding = currentZoneData.doorzones[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+288
	ADD	HL,BC
	LD	A,(HL)
	LD	(_currentBuilding),A
;  648	
;  649		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_313
L_311:
;  650			zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_indoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  651		}
L_313:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_311
;  652		tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  653		tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  654		playerX = currentZoneData.doorx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+304
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  655		playerY = currentZoneData.doory[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+320
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  656		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  657		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  658		npc1 = currentZoneData.doornpc1[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+336
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc1),A
;  659		npc2 = currentZoneData.doornpc2[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+352
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc2),A
;  660		LoadMap();
	CALL	_LoadMap
;  661	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _EnterDoor ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_npc2                               STATIC      1   variable
;_npc1                               STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;tileIndex                             IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


;  662	void ExitBuilding(void) {
_ExitBuilding:
	LD	HL,-3
	CALL	__frameset
;  663		int tileIndex;
;  664		playerX = lastPlayerX;
	LD	BC,(_lastPlayerX)
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  665		playerY = lastPlayerY;
	LD	BC,(_lastPlayerY)
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  666		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  667		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_319
L_317:
;  668			zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_outdoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  669		}
L_319:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_317
;  670		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  671		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  672		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  673		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  674		LoadMap();
	CALL	_LoadMap
;  675	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitBuilding ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  676	void ExitZone(uint8_t index) {
_ExitZone:
	CALL	__frameset0
;  677		playerX = currentZoneData.exitx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+256
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  678		playerY = currentZoneData.exity[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+272
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  679		currentZone = currentZoneData.exitzone[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+240
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_currentZone
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  680		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  681		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  682		LoadMap();
	CALL	_LoadMap
;  683	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitZone ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  684	bool FightTrainer(uint8_t index) {
_FightTrainer:
	CALL	__frameset0
;  685		currentTrainer = index;
	LD	A,(IX+6)
	LD	(_currentTrainer),A
;  686		if (indoors && !defeatedTrainersIndoors[currentBuilding][currentTrainer]) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_327
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_327
;  687			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  688			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  689			return true;
	LD	A,1
	JR	L_329
;  690		}
;  691		else if (!indoors && !defeatedTrainers[currentZone][currentTrainer]) {
L_327:
	LD	A,(_indoors)
	OR	A,A
	JR	NZ,L_328
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_328
;  692			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  693			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  694			return true;
	LD	A,1
	JR	L_329
;  695		}
L_328:
;  696		return false;
	XOR	A,A
;  697	}
L_329:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FightTrainer ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_battle_SpawnTrainer                IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_data_trainerText                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_currentTrainer                     STATIC      1   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  698	
;  699	void map_LoadPokeballs(void) {
_map_LoadPokeballs:
	LD	HL,-6
	CALL	__frameset
;  700		int pokemonIndex;
;  701		/* Generate pokemon info To Display At Top of Screen */
;  702		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_337
L_335:
;  703			if (party[pokemonIndex].id == 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_334
;  704				pokeballdata[pokemonIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),2
;  705			}
;  706			else {
	JR	L_336
L_334:
;  707				if (party[pokemonIndex].currenthealth > 0) {
	LD	IY,(IX+-6)
	LD	BC,(IY+13)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_332
;  708					pokeballdata[pokemonIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),0
;  709				}
;  710				else {
	JR	L_336
L_332:
;  711					pokeballdata[pokemonIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),1
;  712				}
;  713			}
;  714		}
L_336:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_337:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_335
;  715	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoadPokeballs ***************************
;Name                         Addr/Register   Size   Type
;_pokeballdata                       STATIC      6   variable
;_party                              IMPORT   1224   variable
;G_13                                  IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


;  716	void LoadMap(void) {
_LoadMap:
	LD	HL,-1
	CALL	__frameset
;  717		ti_var_t mapAV;
;  718		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_340
;  719			mapAV = ti_Open("PKMNMD1", "r");
	LD	BC,L__232
	PUSH	BC
	LD	BC,L__233
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  720			ti_Seek(((int)currentBuilding) * 1270, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	LD	BC,1270
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  721			ti_Read(&currentTileMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  722			ti_Read(&currentTypeMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  723			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  724		}
;  725		else {
	JR	L_341
L_340:
;  726			mapAV = ti_Open("PKMNMD0", "r");
	LD	BC,L__234
	PUSH	BC
	LD	BC,L__235
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  727			ti_Seek(((int)currentZone) * 4480, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentZone)
	CALL	__stoiu
	LD	BC,4480
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  728			ti_Read(&currentTileMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  729			ti_Read(&currentTypeMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  730			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  731		}
L_341:
;  732		ti_CloseAll();
	CALL	_ti_CloseAll
;  733	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadMap ***************************
;Name                         Addr/Register   Size   Type
;_ti_CloseAll                        IMPORT  -----   function
;_currentZone                        IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;_currentTypeMap                     STATIC   1920   variable
;_currentTileMap                     STATIC   1920   variable
;_ti_Read                            IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;mapAV                                 IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__232:
	DB	"r"
	DB	0
L__233:
	DB	"PKMNMD1"
	DB	0
L__234:
	DB	"r"
	DB	0
L__235:
	DB	"PKMNMD0"
	DB	0
	SEGMENT CODE
;  734	
;  735	int32_t Clamp(int32_t number, int min, int max) {
_Clamp:
	CALL	__frameset0
;  736		if (number < min) {
	LD	BC,(IX+12)
	CALL	__itol
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmps
	JP	P,L_345
;  737			number = min;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  738		}
L_345:
;  739		if (number > max) {
	LD	BC,(IX+15)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_346
;  740			number = max;
	LD	BC,(IX+15)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  741		}
L_346:
;  742		return number;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  743	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Clamp ***************************
;Name                         Addr/Register   Size   Type
;max                                  IX+15      3   parameter
;min                                  IX+12      3   parameter
;number                                IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  744	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width) {
_GetNextTile:
	CALL	__frameset0
;  745	
;  746		switch (moveDir) {
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__240:
	DW	4
	DW	1
	DB	0
	DW24	L_348	

	DW24	L_349	

	DW24	L_350	

	DW24	L_351	

	DW24	L_352	

;  747		case 1:
L_348:
;  748			return(GetTypeMapData(tx + 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	INC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_353
;  749		case 2:
L_349:
;  750			return(GetTypeMapData(tx - 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	DEC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_353
;  751		case 3:
L_350:
;  752			return(GetTypeMapData(tx, ty + 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	INC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_353
;  753		case 4:
L_351:
;  754			return(GetTypeMapData(tx, ty - 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_353
;  755		}
L_352:
;  756		return 0;
	XOR	A,A
;  757	}
L_353:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetNextTile ***************************
;Name                         Addr/Register   Size   Type
;_GetTypeMapData                     IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  758	
;  759	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width) {
_GetTypeMapData:
	CALL	__frameset0
;  760		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_355
;  761			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	JR	L_356
;  762		}
;  763		else {
L_355:
;  764			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
;  765		}
;  766	}
L_356:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetTypeMapData ***************************
;Name                         Addr/Register   Size   Type
;_currentTypeMap                     STATIC   1920   variable
;_indoors                            IMPORT      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  767	
;  768	void DrawEnemies(void) {
_DrawEnemies:
	LD	HL,-12
	CALL	__frameset
;  769		int xloc = 0;
;  770		int yloc = 0;
;  771		for (i = 0; i < 16; i++) {
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_368
L_366:
;  772			if (indoors){
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_365
;  773				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_367
;  774					xloc = currentZoneData.trainerx[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-3),HL
;  775					yloc = currentZoneData.trainery[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-6),HL
;  776					gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  777				}
;  778			}
;  779			else {
	JR	L_367
L_365:
;  780				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_367
;  781					xloc = currentZoneData.trainerx[i] * 16 - screenX;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(_screenX)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
;  782					yloc = currentZoneData.trainery[i] * 16 - screenY;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(_screenY)
	LD	DE,_currentZoneData+576
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
;  783					if (xloc < 336 && yloc < 240 && xloc >= 0 && yloc >= 0) {
	OR	A,A
	LD	(IX+-6),HL
	LD	HL,(IX+-3)
	LD	BC,336
	SBC	HL,BC
	JP	P,L_367
	LD	BC,240
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_367
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_367
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_367
;  784						gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  785					}
;  786				}
;  787			}
;  788			
;  789		}
L_367:
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
L_368:
	LD.LIS	BC,16
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_366
;  790	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawEnemies ***************************
;Name                         Addr/Register   Size   Type
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_enemySprites                       STATIC     24   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_i                                  IMPORT      2   variable
;G_18                                 IX-12      3   variable
;G_16                                  IX-9      3   variable
;yloc                                  IX-6      3   variable
;xloc                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  791	
;  792	void map_DrawInformationBar(void) {
_map_DrawInformationBar:
	LD	HL,-3
	CALL	__frameset
;  793		int pokemonIndex;
;  794		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  795		gfx_FillRectangle(0, 0, 320, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  796		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_373
L_371:
;  797			gfx_TransparentSprite_NoClip(pokeballSprites[pokeballdata[pokemonIndex]], 16 * pokemonIndex, 0);
	LD	BC,_pokeballdata
	LD	DE,0
	PUSH	DE
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  798		}
L_373:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_371
;  799		sprintf(str, "%u$", playerMoney);
	LD	A,(_playerMoney+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_playerMoney)
	PUSH	BC
	LD	BC,L__254
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  800		gfx_PrintStringXY(str, 100, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  801	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_DrawInformationBar ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playerMoney                        IMPORT      4   variable
;_sprintf                            IMPORT  -----   function
;_pokeballdata                       STATIC      6   variable
;_pokeballSprites                    STATIC      9   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__254:
	DB	"%u$"
	DB	0
	SEGMENT CODE
;  802	
;  803	void map_LoseFight(void) {
_map_LoseFight:
	LD	HL,-33
	CALL	__frameset
;  804		int tileIndex, partyIndex, moveIndex;
;  805		text_Display("All your pokemon have fainted", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__256
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  806		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_383
L_381:
;  807			party[partyIndex].currenthealth = stats_CalculateStats(party[partyIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-30
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	BC,(HL)
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-18)
	LD	(IY+13),C
	LD	(IY+14),B
;  808			party[partyIndex].currentstatus = 0;
	LD	(IY+15),0
;  809			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-12),HL
	JR	L_380
L_378:
;  810				party[partyIndex].pp[moveIndex] = data_moves[party[partyIndex].moves[moveIndex]].uses;
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	IY,(IX+-33)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  811			}
L_380:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_378
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  812		}
L_383:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_381
;  813		playerX = 5*16;
	LD	HL,_playerX
	LD	(HL),80
	INC	HL
	LD	(HL),0
;  814		playerY = 7*16;
	LD	HL,_playerY
	LD	(HL),112
	INC	HL
	LD	(HL),0
;  815		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  816		currentZone = 0;
	LD	HL,_currentZone
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  817		moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  818		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  819		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  820		tx = playerX / 16;
	LD	A,5
	LD	(_tx),A
;  821		ty = playerY / 16;
	LD	A,7
	LD	(_ty),A
;  822		LoadMap();
	CALL	_LoadMap
;  823	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoseFight ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_moveDir                            STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_text_Display                       IMPORT  -----   function
;O_43                                 IX-15      3   variable
;O_44                                 IX-12      3   variable
;G_19                                  IX-9      3   variable
;moveIndex                             IX-6      3   variable
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__256:
	DB	"All your pokemon have fainted"
	DB	0
	SEGMENT CODE
;  824	
;  825	void map_WinFight(bool wild, uint16_t rewardMoney) {
_map_WinFight:
	LD	HL,-28
	CALL	__frameset
;  826		char str1[16];
;  827		if (!wild) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_402
;  828			playerMoney += rewardMoney;
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	A,(_playerMoney+3)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_playerMoney)
	CALL	__ladd
	LD	(_playerMoney),HL
	LD	A,E
	LD	(_playerMoney+3),A
;  829			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_400
;  830				defeatedTrainersIndoors[currentBuilding][currentTrainer] = true;
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  831				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_402
;  832					if (currentZoneData.trainerreward[currentTrainer] == 255) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_391
;  833						badgeCount++;
;  834						sprintf(str, "Recieved a badge");
	LD	BC,L__264
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	A,(_badgeCount)
	INC	A
	LD	(_badgeCount),A
	CALL	_sprintf
	POP	BC
	POP	BC
;  835					}
;  836					else {
	JR	L_392
L_391:
;  837						playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-25)
	LD	(HL),A
;  838						items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  839						if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_389
;  840							sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__266
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  841						}
;  842						else {
	JR	L_392
L_389:
;  843							sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__267
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  844						}
;  845					}
L_392:
;  846					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  847				}
;  848			}
;  849			else {
	JR	L_402
L_400:
;  850				defeatedTrainers[currentZone][currentTrainer] = true;
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  851				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_402
;  852					playerItems[currentZoneData.trainerreward[currentTrainer]-1]++;
	LD	(IX+-3),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-28),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-28)
	LD	(HL),A
;  853					items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  854					if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_396
;  855						sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__270
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  856					}
;  857					else {
	JR	L_397
L_396:
;  858						sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__271
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  859					}
L_397:
;  860					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  861				}
;  862			}
;  863		}
L_402:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_WinFight ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_currentTrainer                     STATIC      1   variable
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_playerMoney                        IMPORT      4   variable
;str1                                 IX-22     16   variable
;G_21                                  IX-6      3   variable
;G_25                                  IX-3      3   variable
;rewardMoney                           IX+9      2   parameter
;wild                                  IX+6      1   parameter


; Stack Frame Size: 40 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__264:
	DB	"Recieved a badge"
	DB	0
L__266:
	DB	"Recieved the TM for %s"
	DB	0
L__267:
	DB	"Recieved a %s"
	DB	0
L__270:
	DB	"Recieved the TM for %s"
	DB	0
L__271:
	DB	"Recieved a %s"
	DB	0
	XREF _PKMNSD4_init:ROM
	XREF _indoortileset_tiles_compressed:ROM
	XREF _outdoortileset_tiles_compressed:ROM
	XREF _pokeball_tiles_compressed:ROM
	XREF _PKMNSD4:ROM
	XREF _shop_compressed:ROM
	XREF _animatedwater2_data:ROM
	XREF _animatedwater1_data:ROM
	XREF _grassoverlay3_data:ROM
	XREF _grassoverlay2_data:ROM
	XREF _grassoverlay1_data:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_SelectSave:ROM
	XREF _save_Load:ROM
	XREF _badgeCount:ROM
	XREF _takenGifts:ROM
	XREF _defeatedTrainersIndoors:ROM
	XREF _defeatedTrainers:ROM
	XREF _playerItems:ROM
	XREF _playerMoney:ROM
	XREF _currentBuilding:ROM
	XREF _surfing:ROM
	XREF _indoors:ROM
	XREF _currentZone:ROM
	XREF _party:ROM
	XREF _lastPlayerY:ROM
	XREF _lastPlayerX:ROM
	XREF _playerY:ROM
	XREF _playerX:ROM
	XREF _textBoxType:ROM
	XREF _text_Display:ROM
	XREF _items_IndexToName:ROM
	XREF _colors:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _menu_ItemShop:ROM
	XREF _menu_Box:ROM
	XREF _menu_Menu:ROM
	XREF _battle_SpawnTrainer:ROM
	XREF _battle_SpawnWild:ROM
	XREF _data_npcReward:ROM
	XREF _data_npcText:ROM
	XREF _data_trainerText:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _memcpy:ROM
	XREF _sprintf:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmps:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _map_WinFight
	XDEF _map_LoseFight
	XDEF _map_DrawInformationBar
	XDEF _DrawEnemies
	XDEF _GetTypeMapData
	XDEF _GetNextTile
	XDEF _Clamp
	XDEF _LoadMap
	XDEF _map_LoadPokeballs
	XDEF _FightTrainer
	XDEF _ExitZone
	XDEF _ExitBuilding
	XDEF _EnterDoor
	XDEF _TalkToNpc2
	XDEF _TalkToNpc1
	XDEF _OpenBox
	XDEF _HealParty
	XDEF _GrassAnimation
	XDEF _map_Draw
	XDEF _map_End
	XDEF _map_Loop
	XDEF _map_SetupGfx
	XDEF _map_Setup
	XDEF _map_Initialize
	XDEF _str1
	XDEF _clearcharacter2
	XDEF _tempcharacter2
	XDEF _currentTrainer
	XDEF _npc2
	XDEF _npc1
	XDEF _currentZoneData
	XDEF _currentTypeMap
	XDEF _currentTileMap
	XDEF _pokeballSprites
	XDEF _enemySprites
	XDEF _playerSprites
	XDEF _mapTiles
	XDEF _tilemap
	XDEF _playerState
	XDEF _moveDir
	XDEF _moveState
	XDEF _nextTile
	XDEF _grassAnimY2
	XDEF _grassAnimX2
	XDEF _grassAnimY1
	XDEF _grassAnimX1
	XDEF _grassAnimState2
	XDEF _grassAnimState1
	XDEF _grassAnimNext
	XDEF _currentWater
	XDEF _currentRun
	XDEF _running
	XDEF _ty
	XDEF _tx
	XDEF _screenY
	XDEF _screenX
	XDEF _pokeballdata
	XDEF _battlechance
	END
