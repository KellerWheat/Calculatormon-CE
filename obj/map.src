; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAP.C"
	.assume ADL=1
	SEGMENT TEXT
_battlechance:
	DW	10
	DB	0
	SEGMENT DATA
_pokeballdata:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_screenX:
	DL	0
_screenY:
	DL	0
	SEGMENT BSS
_tx:
	DS	1
_ty:
	DS	1
_running:
	DS	1
_currentWater:
	DS	3
	SEGMENT DATA
_grassAnimNext:
	DB	0
_grassAnimState1:
	DW	0
	DB	0
_grassAnimState2:
	DW	0
	DB	0
_grassAnimX1:
	DW	0
	DB	0
_grassAnimY1:
	DW	0
	DB	0
_grassAnimX2:
	DW	0
	DB	0
_grassAnimY2:
	DW	0
	DB	0
	SEGMENT BSS
_nextTile:
	DS	1
	SEGMENT DATA
_moveState:
	DB	0
_moveDir:
	DB	3
_playerState:
	DB	0
	SEGMENT BSS
_tilemap:
	DS	18
_mapTiles:
	DS	384
_playerSprites:
	DS	96
_enemySprites:
	DS	24
_pokeballSprites:
	DS	9
_currentTileMap:
	DS	1920
_currentTypeMap:
	DS	1920
_currentZoneData:
	DS	640
_npc1:
	DS	1
_npc2:
	DS	1
	SEGMENT DATA
_currentTrainer:
	DB	0
	SEGMENT BSS
_tempcharacter2:
	DS	34
	SEGMENT TEXT
_clearcharacter2:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_str1:
	DS	20
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <debug.h>
;   12	#include <compression.h>
;   13	#include <fileioc.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "items.h"
;   21	#include "text.h"
;   22	#include "savegame.h"
;   23	#include "stats.h"
;   24	#include "gfx/map_gfx.h"
;   25	#include "items.h"
;   26	
;   27	#include "gfx/PKMNSD4.h"
;   28	
;   29	#define OUTDOORWIDTH 48
;   30	#define OUTDOORHEIGHT 40
;   31	#define MAX_X ((OUTDOORWIDTH - 21)*16)
;   32	#define MAX_Y ((OUTDOORHEIGHT - 15)*16)
;   33	
;   34	void HealParty(void);
;   35	void OpenBox(void);
;   36	void TalkToNpc1(void);
;   37	void TalkToNpc2(void);
;   38	void EnterDoor(uint8_t index);
;   39	void ExitBuilding(void);
;   40	void ExitZone(uint8_t index);
;   41	bool FightTrainer(uint8_t index);
;   42	
;   43	int32_t Clamp(int32_t number, int min, int max);
;   44	/* Gets the tile the player is facing*/
;   45	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width);
;   46	/* Gets the typemap at a specific tile */
;   47	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width);
;   48	/* Draw 16 enemy trainers */
;   49	void DrawEnemies(void);
;   50	/* Loads the tilemap, typemap ,and zonedata for current area */
;   51	void LoadMap(void);
;   52	
;   53	void GrassAnimation(bool part);
;   54	
;   55	const int battlechance = 10; /* Chance for enemy to spawn out of 100 */
;   56	
;   57	
;   58	uint8_t pokeballdata[] = {
;   59		0,0,0,0,0,0
;   60	};
;   61	
;   62	int32_t screenX = 0;
;   63	int32_t screenY = 0;
;   64	
;   65	uint8_t tx; /* x tile */
;   66	uint8_t ty; /* y tile */
;   67	bool running;
;   68	int currentWater;
;   69	
;   70	/* Variables for the leaves that appear when walking through grass */
;   71	bool grassAnimNext = 0;
;   72	int grassAnimState1 = 0;
;   73	int grassAnimState2 = 0;
;   74	int grassAnimX1 = 0;
;   75	int grassAnimY1 = 0;
;   76	int grassAnimX2 = 0;
;   77	int grassAnimY2 = 0;
;   78	
;   79	
;   80	uint8_t nextTile;
;   81	/* Set to 8 when anything is pressed and decreases each frame until 0 */
;   82	uint8_t moveState = 0;
;   83	/* Direction Player is facing */
;   84	uint8_t moveDir = 3;
;   85	uint8_t playerState = 0;
;   86	
;   87	gfx_tilemap_t tilemap;
;   88	
;   89	gfx_sprite_t *mapTiles[128];
;   90	gfx_sprite_t *playerSprites[32];
;   91	gfx_sprite_t *enemySprites[8];
;   92	gfx_sprite_t *pokeballSprites[3];
;   93	
;   94	uint8_t currentTileMap[1920];
;   95	uint8_t currentTypeMap[1920];
;   96	struct zoneData currentZoneData;
;   97	/* zoneData is in header file because battle.c needs it*/
;   98	
;   99	uint8_t npc1;
;  100	uint8_t npc2;
;  101	
;  102	uint8_t currentTrainer = 0; /* 0-15 */
;  103	struct pokemonData tempcharacter2;
;  104	const struct pokemonData clearcharacter2 = {0};
;  105	
;  106	char str1[20];
	SEGMENT CODE
;  107	
;  108	void map_Initialize(void) {
_map_Initialize:
;  109		PKMNSD4_init();
	CALL	_PKMNSD4_init
;  110	
;  111		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,138
	LD	HL,_PKMNSD4
	ADD	HL,BC
	LD	BC,468
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  112		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  113		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  114		textBoxType = 0;	
	LD	BC,0
	LD	(_textBoxType),BC
;  115		save_SelectSave();
	CALL	_save_SelectSave
;  116		save_Load();
	CALL	_save_Load
;  117	
;  118		/* Initialize the tilemap */
;  119		tilemap.map = currentTileMap;
	LD	BC,_currentTileMap
	LD	(_tilemap),BC
;  120		tilemap.tiles = mapTiles;
	LD	BC,_mapTiles
	LD	(_tilemap+3),BC
;  121		tilemap.type_width = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  122		tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  123		tilemap.tile_height = 16;
	LD	A,16
	LD	(_tilemap+6),A
;  124		tilemap.tile_width = 16;
	LD	(_tilemap+7),A
;  125		tilemap.draw_height = 16;
	LD	(_tilemap+8),A
;  126		tilemap.draw_width = 22;
	LD	A,22
	LD	(_tilemap+9),A
;  127		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  128		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  129		tilemap.y_loc = 8;
	LD	A,8
	LD	(_tilemap+14),A
;  130		tilemap.x_loc = -8;
	LD	BC,16777208
	LD	(_tilemap+15),BC
;  131	
;  132		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_1
;  133			tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  134			tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  135		}
L_1:
;  136	
;  137		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  138		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  139		LoadMap();
	CALL	_LoadMap
;  140	}
	RET	


;**************************** _map_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_save_Load                          IMPORT  -----   function
;_save_SelectSave                    IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT    141   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_PKMNSD4_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  141	void map_Setup(void) {
_map_Setup:
;  142		map_SetupGfx();
	CALL	_map_SetupGfx
;  143	
;  144		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  145		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  146	}
	RET	


;**************************** _map_Setup ***************************
;Name                         Addr/Register   Size   Type
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_map_SetupGfx                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  147	
;  148	void map_SetupGfx(void) {
_map_SetupGfx:
	LD	HL,-6
	CALL	__frameset
;  149		int tileIndex = 0;
;  150		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_9
L_7:
;  151			mapTiles[tileIndex] = gfx_MallocSprite(16, 16);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,_mapTiles
	ADD	HL,DE
	LD	(HL),BC
;  152			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_6
;  153				zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  154			}
;  155			else {
	JR	L_8
L_6:
;  156				zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  157			}
;  158		}
L_8:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_9:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_7
;  159		for (tileIndex = 0; tileIndex < 12; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
;  160			playerSprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  161			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  162		}
L_13:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_11
;  163		for (tileIndex = 12; tileIndex < 24; tileIndex++) {
	LD	(IX+-3),BC
	JR	L_18
L_16:
;  164			playerSprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  165			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  166		}
L_18:
	LD	BC,24
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_16
;  167		for (tileIndex = 24; tileIndex < 32; tileIndex++) {
	LD	(IX+-3),BC
	JR	L_23
L_21:
;  168			playerSprites[tileIndex] = gfx_MallocSprite(22, 26);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	BC,22
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  169			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  170		}
L_23:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_21
;  171		for (tileIndex = 0; tileIndex < 8; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_28
L_26:
;  172			enemySprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_enemySprites
	ADD	HL,DE
	LD	(HL),BC
;  173			zx7_Decompress(enemySprites[tileIndex], PKMNSD4[32 + tileIndex]);
	LD	IY,(IX+-3)
	LEA	HL,IY+32
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD4
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  174		}
L_28:
	LD	BC,8
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_26
;  175		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_33
L_31:
;  176			pokeballSprites[tileIndex] = gfx_MallocSprite(16, 16);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_pokeballSprites
	ADD	HL,DE
	LD	(HL),BC
;  177			zx7_Decompress(pokeballSprites[tileIndex], pokeball_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_pokeball_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  178		}
L_33:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_31
;  179		textBoxType = 0;
	LD	BC,0
;  180		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	DE,0
	PUSH	DE
	LD	DE,138
	LD	HL,_PKMNSD4
	ADD	HL,DE
	LD	(_textBoxType),BC
	LD	BC,468
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  181		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  182		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  183		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  184		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  185	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_SetupGfx ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_pokeball_tiles_compressed          IMPORT      9   variable
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     24   variable
;_PKMNSD4                            IMPORT    141   variable
;_playerSprites                      STATIC     96   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_0                                   IX-6      3   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  186	
;  187	int map_Loop(void) {
_map_Loop:
	LD	HL,-44
	CALL	__frameset
;  188		/* Open Menu */
;  189		if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_84
;  190			int menuReturn;
;  191			gfx_sprite_t *pauseMenuSprite;
;  192			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  193			gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  194			gfx_Sprite(pauseMenuSprite, 195, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,195
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  195			map_End();
	CALL	_map_End
;  196			pauseMenuSprite = gfx_MallocSprite(112, 96);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,112
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  197			zx7_Decompress(pauseMenuSprite, pausemenu_compressed);
	LD	IY,_PKMNSD4
	LD	(IX+-10),HL
	LD	BC,(IY+126)
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  198	
;  199			menuReturn = menu_Menu();
	CALL	_menu_Menu
	UEXT	HL
	LD	L,A
	LD	(IX+-23),HL
;  200			free(pauseMenuSprite);
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_free
	POP	BC
;  201			map_SetupGfx();
	CALL	_map_SetupGfx
;  202			map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  203			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_38
L_39:
	CALL	_kb_Scan
L_38:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_39
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_39
;  204			return menuReturn;
	LD	HL,(IX+-23)
	JR	L_155
;  205		}
L_84:
;  206		/* If player presses 2nd */
;  207		if ((kb_Data[1] & kb_2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_153
;  208			nextTile = GetNextTile(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	LD	(_nextTile),A
;  209			if (GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_79
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_79
;  210				int partyIndex, moveIndex;
;  211				bool hasUser = false;
	LD	(IX+-7),0
;  212				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_51
L_49:
;  213					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_48
L_46:
;  214						if (party[partyIndex].moves[moveIndex] == 141) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-17),HL
	LD	IY,(IX+-17)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,141
	SBC	HL,BC
	JR	NZ,L_47
;  215							hasUser = true;
	LD	(IX+-7),1
;  216							sprintf(str, "%s used Surf", data_pokemon[party[partyIndex].id].name);
	LD	IY,(IX+-17)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__18
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  217							partyIndex = 6;
	LD	BC,6
	LD	(IX+-3),BC
;  218						}
;  219					}
L_47:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_48:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_46
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  220				}
L_51:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_49
;  221				if (hasUser) {
	LD	A,(IX+-7)
	OR	A,A
	JR	Z,L_79
;  222					text_Display(str,true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  223					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_54
;  224						playerX += 16;
	LD	IY,(_playerX)
	LEA	BC,IY+16
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  225					}
L_54:
;  226					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_56
;  227						playerX -= 16;
	LD	IY,(_playerX)
	LEA	BC,IY+-16
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  228					}
L_56:
;  229					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_58
;  230						playerY += 16;
	LD	IY,(_playerY)
	LEA	BC,IY+16
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  231					}
L_58:
;  232					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_59
;  233						playerY -= 16;
	LD	IY,(_playerY)
	LEA	BC,IY+-16
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  234					}
L_59:
;  235					surfing = true;
	LD	A,1
	LD	(_surfing),A
;  236					tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  237					ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  238				}
;  239			}
L_79:
;  240			if (nextTile == 0x41) {
	LD	A,(_nextTile)
	CP	A,65
	JR	NZ,L_78
;  241				HealParty();
	CALL	_HealParty
;  242			}
;  243			else if (nextTile == 0x42) {
	JR	L_80
L_78:
	LD	A,(_nextTile)
	CP	A,66
	JR	NZ,L_76
;  244				gfx_sprite_t *shopSpriteOriginal;
;  245				map_End();
	CALL	_map_End
;  246	
;  247				shopSpriteOriginal = gfx_MallocSprite(134, 84);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,84
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-13),HL
;  248				zx7_Decompress(shopSpriteOriginal, shop_compressed);
	LD	BC,_shop_compressed
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  249	
;  250				menu_ItemShop(shopSpriteOriginal);
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_menu_ItemShop
	POP	BC
;  251	
;  252				free(shopSpriteOriginal);
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_free
	POP	BC
;  253				map_SetupGfx();
	CALL	_map_SetupGfx
;  254			}
;  255			else if (nextTile == 0x43) {
	JR	L_80
L_76:
	LD	A,(_nextTile)
	CP	A,67
	JR	NZ,L_74
;  256				OpenBox();
	CALL	_OpenBox
;  257			}
;  258			else if (nextTile == 0x44) {
	JR	L_80
L_74:
	LD	A,(_nextTile)
	CP	A,68
	JR	NZ,L_72
;  259				TalkToNpc1();
	CALL	_TalkToNpc1
;  260			}
;  261			else if (nextTile == 0x45) {
	JR	L_80
L_72:
	LD	A,(_nextTile)
	CP	A,69
	JR	NZ,L_70
;  262				TalkToNpc2();
	CALL	_TalkToNpc2
;  263			}
;  264			else if (nextTile >= 0x50 && nextTile < 0x60) {
	JR	L_80
L_70:
	LD	A,(_nextTile)
	CP	A,80
	JR	C,L_68
	LD	A,(_nextTile)
	CP	A,96
	JR	NC,L_68
;  265				EnterDoor(nextTile - 80);
	LD	A,(_nextTile)
	SUB	A,80
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  266			}
;  267			else if (nextTile >= 0x60 && nextTile < 0x70) {
	JR	L_80
L_68:
	LD	A,(_nextTile)
	CP	A,96
	JR	C,L_80
	LD	A,(_nextTile)
	CP	A,112
	JR	NC,L_80
;  268				if (FightTrainer(nextTile - 96)) {
	LD	A,(_nextTile)
	SUB	A,96
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_80
;  269					return 1;
	LD	HL,1
	JR	L_155
;  270				}
;  271			}
;  272			while ((kb_Data[1] & kb_2nd))
L_81:
;  273			{
;  274				kb_Scan();
	CALL	_kb_Scan
;  275			}
L_80:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_81
;  276		}
L_153:
;  277		/* If moving */
;  278		if (moveState > 0) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_152
;  279			Wait(2);
	LD	BC,2
	PUSH	BC
	CALL	_Wait
	POP	BC
;  280			moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  281			if (running) {
	LD	A,(_running)
	OR	A,A
	JR	Z,L_89
;  282				moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  283			}
L_89:
;  284			if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_91
;  285				playerX += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	LD	BC,(_playerX)
	ADD	HL,HL
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  286			}
L_91:
;  287			if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_93
;  288				playerX -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_playerX)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  289			}
L_93:
;  290			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_95
;  291				playerY += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	LD	BC,(_playerY)
	ADD	HL,HL
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  292			}
L_95:
;  293			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_107
;  294				playerY -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_playerY)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  295			}
L_107:
;  296			if (surfing) {
	LD	A,(_surfing)
	OR	A,A
	JR	Z,L_106
;  297				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_97
;  298					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  299				}
;  300				else {
	JR	L_125
L_97:
;  301					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  302				}
;  303			}
;  304			else {
	JR	L_125
L_106:
;  305				if (moveState > 5) {
	LD	A,5
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_104
;  306					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  307				}
;  308				else if (moveState > 3) {
	JR	L_125
L_104:
	LD	A,3
	CP	A,(HL)
	JR	NC,L_102
;  309					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  310				}
;  311				else if (moveState > 1) {
	JR	L_125
L_102:
	LD	A,1
	CP	A,(HL)
	JR	NC,L_100
;  312					playerState = 2;
	LD	A,2
	LD	(_playerState),A
;  313				}
;  314				else if (moveState > 0) {
	JR	L_125
L_100:
	XOR	A,A
	CP	A,(HL)
	JR	NC,L_125
;  315					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  316				}
;  317			}
L_125:
;  318	
;  319			if (moveState == 0) {
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_154
;  320				/* Arrive At Tile*/
;  321				tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  322				ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  323				nextTile = GetTypeMapData(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
;  324				if (nextTile >= 0x10 && nextTile < 0x20) {
	CP	A,16
	LD	(_nextTile),A
	JR	C,L_123
	LD	A,(_nextTile)
	CP	A,32
	JR	NC,L_123
;  325					/* Grass */
;  326					if ((rand() % 100) < battlechance) {
	CALL	_rand
	LD	BC,100
	CALL	__irems
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JP	P,L_154
;  327						uint8_t wildSpawn;
;  328						wildSpawn = rand() % 5;
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	(IX+-14),L
;  329						battle_SpawnWild(currentZoneData.spawnids[wildSpawn][nextTile -16], currentZoneData.spawnminlevels[wildSpawn][nextTile - 16], currentZoneData.spawnmaxlevels[wildSpawn][nextTile - 16]);
	LD	A,(IX+-14)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-26),HL
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-16
	LD	HL,(IX+-26)
	LD	BC,_currentZoneData+160
	ADD	HL,BC
	LD	BC,DE
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,(IX+-26)
	LD	(IX+-29),DE	; spill
	LD	DE,_currentZoneData+80
	LD	(IX+-32),DE	; spill
	LD	DE,(IX+-29)	; unspill
	LD	(IX+-29),DE	; spill
	LD	DE,(IX+-32)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-29)	; unspill
	LD	(IX+-35),DE	; spill
	LD	(IX+-38),DE	; spill
	LD	DE,(IX+-35)	; unspill
	LD	(IX+-35),DE	; spill
	LD	DE,(IX+-38)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-35)	; unspill
	LD	(IX+-41),BC	; spill
	LD	BC,_currentZoneData
	LD	(IX+-44),BC	; spill
	LD	BC,(IX+-41)	; unspill
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	LD	HL,(IX+-26)
	LD	(IX+-41),BC	; spill
	LD	BC,(IX+-44)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-41)	; unspill
	ADD	HL,DE
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	PUSH	BC
	CALL	_battle_SpawnWild
	POP	BC
	POP	BC
	POP	BC
;  330						return 1;
	LD	HL,1
	JR	L_155
;  331					}
;  332				}
;  333				else if (nextTile == 0x01) {
L_123:
	LD	A,(_nextTile)
	CP	A,1
	JR	NZ,L_121
;  334					ExitBuilding();
	CALL	_ExitBuilding
;  335				}
;  336				else if (surfing && !(nextTile >= 0x1A && nextTile <= 0x20)) {
	JR	L_154
L_121:
	LD	A,(_surfing)
	OR	A,A
	JR	Z,L_119
	LD	A,(_nextTile)
	CP	A,26
	JR	C,L_118
	LD	A,32
	LD	HL,_nextTile
	CP	A,(HL)
	JR	NC,L_119
L_118:
;  337					surfing = false;
	XOR	A,A
	LD	(_surfing),A
;  338				}
;  339				else if (nextTile >= 0x20 && nextTile < 0x30) {
	JR	L_154
L_119:
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_117
	LD	A,(_nextTile)
	CP	A,48
	JR	NC,L_117
;  340					ExitZone(nextTile - 32);
	LD	A,(_nextTile)
	SUB	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ExitZone
	POP	BC
;  341				}
;  342				else if (nextTile >= 0x30 && nextTile < 0x40) {
	JR	L_154
L_117:
	LD	A,(_nextTile)
	CP	A,48
	JR	C,L_154
	LD	A,(_nextTile)
	CP	A,64
	JR	NC,L_154
;  343					if (FightTrainer(nextTile - 48)) {
	LD	A,(_nextTile)
	SUB	A,48
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_154
;  344						return 1;
	LD	HL,1
	JR	L_155
;  345					}
;  346				}
;  347			}
;  348		}
;  349	
;  350		/* If not moving */
;  351		else {
L_152:
;  352			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_132
;  353				moveDir = 1;
	LD	A,1
	LD	(_moveDir),A
;  354			}
;  355			else if (kb_Data[7] & kb_Left) {
	JR	L_143
L_132:
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_130
;  356				moveDir = 2;
	LD	A,2
	LD	(_moveDir),A
;  357			}
;  358			else if (kb_Data[7] & kb_Down) {
	JR	L_143
L_130:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_128
;  359				moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  360	
;  361			}
;  362			else if (kb_Data[7] & kb_Up) {
	JR	L_143
L_128:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_143
;  363				moveDir = 4;
	LD	A,4
	LD	(_moveDir),A
;  364			}
L_143:
;  365			
;  366			if (kb_Data[7]) {
	LD	A,(16056350)
	OR	A,A
	JR	Z,L_150
;  367				if (GetNextTile(tx, ty, tilemap.width) < 64 && !(!surfing && GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20)) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_141
	LD	A,(_surfing)
	OR	A,A
	JR	NZ,L_136
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_136
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_141
L_136:
;  368					moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  369				}
L_141:
;  370				if (GetNextTile(tx, ty, tilemap.width) >= 112 && GetNextTile(tx, ty, tilemap.width) < 120) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,112
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_150
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_150
;  371					if (GetNextTile(tx, ty, tilemap.width) - 111 > badgeCount) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LD	A,(_badgeCount)
	UEXT	HL
	LD	L,A
	OR	A,A
	LEA	BC,IY+-111
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_139
;  372						sprintf(str, "You need %u badges to pass", (GetNextTile(tx, ty, tilemap.width) - 111));
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-111
	PUSH	BC
	LD	BC,L__74
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  373						text_Display("This route is closed. Come back later.", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__75
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  374					}
;  375					else {
	JR	L_150
L_139:
;  376						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  377					}
;  378				}
;  379			}
L_150:
;  380			running = ((kb_Data[2] & kb_Alpha) && moveState > 0 && !surfing);
	LD	A,(16056340)
	AND	A,128
	JR	Z,L_147
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_147
	LD	A,(_surfing)
	OR	A,A
	JR	NZ,L_147
	LD	BC,1
	LD	(IX+-20),BC
	JR	L_148
L_147:
	LD	BC,0
	LD	(IX+-20),BC
L_148:
	LD	A,(IX+-20)
	LD	(_running),A
;  381		}
L_154:
;  382	
;  383		map_Draw();
	CALL	_map_Draw
;  384		playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  385	
;  386		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	OR	A,A
;  387		return 0;
	SBC	HL,HL
;  388	}
L_155:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Loop ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_ExitZone                           IMPORT  -----   function
;_ExitBuilding                       IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_battle_SpawnWild                   IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_GetTypeMapData                     IMPORT  -----   function
;_playerState                        STATIC      1   variable
;_running                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_FightTrainer                       IMPORT  -----   function
;_EnterDoor                          IMPORT  -----   function
;_TalkToNpc2                         IMPORT  -----   function
;_TalkToNpc1                         IMPORT  -----   function
;_OpenBox                            IMPORT  -----   function
;_menu_ItemShop                      IMPORT  -----   function
;_shop_compressed                    IMPORT     98   variable
;_HealParty                          IMPORT  -----   function
;_surfing                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_moveDir                            STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_nextTile                           STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_GetNextTile                        IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_free                               IMPORT  -----   function
;_menu_Menu                          IMPORT  -----   function
;_PKMNSD4                            IMPORT    141   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;menuReturn                           IX-23      3   variable
;temp149                              IX-20      3   variable
;G_2                                  IX-17      3   variable
;wildSpawn                            IX-14      1   variable
;shopSpriteOriginal                   IX-13      3   variable
;pauseMenuSprite                      IX-10      3   variable
;hasUser                               IX-7      1   variable
;moveIndex                             IX-6      3   variable
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 50 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__18:
	DB	"%s used Surf"
	DB	0
L__74:
	DB	"You need %u badges to pass"
	DB	0
L__75:
	DB	"This route is closed. Come back later."
	DB	0
	SEGMENT CODE
;  389	void map_End(void) {
_map_End:
	LD	HL,-3
	CALL	__frameset
;  390		int tileIndex = 0;
;  391		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_159
L_157:
;  392			free(mapTiles[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  393		}
L_159:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_157
;  394		for (tileIndex = 0; tileIndex < 32; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_163
L_161:
;  395			free(playerSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  396		}
L_163:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_161
;  397		for (tileIndex = 0; tileIndex < 8; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_168
L_166:
;  398			free(enemySprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  399		}
L_168:
	LD	BC,8
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_166
;  400		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_173
L_171:
;  401			free(pokeballSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  402		}
L_173:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_171
;  403		
;  404	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_End ***************************
;Name                         Addr/Register   Size   Type
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     24   variable
;_playerSprites                      STATIC     96   variable
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  405	
;  406	void map_Draw(void) {
_map_Draw:
	LD	HL,-21
	CALL	__frameset
;  407		/* Move Screen and Redraw */
;  408		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_204
;  409			screenX = 0;
;  410			screenY = 0;
;  411	
;  412			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	LD	BC,0
	LD	(_screenX),BC
	XOR	A,A
	LD	(_screenX+3),A
	LD	(_screenY),BC
	XOR	A,A
	LD	(_screenY+3),A
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  413	
;  414			gfx_TransparentSprite_NoClip(playerSprites[moveDir * 3 + playerState - 3], playerX - 8, playerY + 4);
	LD	A,(_playerY)
	ADD	A,4
	LD	C,A
	LD	A,(_moveDir)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	DEC	HL
	DEC	HL
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  415		}
;  416		else {
	JR	L_205
L_204:
;  417			/* Animate Water Every 20 Frames */
;  418			if (currentWater == 20) {
	LD	BC,20
	LD	HL,(_currentWater)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_178
;  419				memcpy(mapTiles[29], animatedwater1, 258);
	LD	BC,258
	PUSH	BC
	LD	HL,_mapTiles+87
	LD	BC,_animatedwater1_data
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  420			}
L_178:
;  421			if (currentWater == 0) {
	LD	HL,(_currentWater)
	CALL	__icmpzero
	JR	NZ,L_180
;  422				memcpy(mapTiles[29], animatedwater2, 258);
	LD	BC,258
	PUSH	BC
	LD	HL,_mapTiles+87
	LD	BC,_animatedwater2_data
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  423			}
L_180:
;  424			currentWater++;
	LD	BC,(_currentWater)
	INC	BC
	LD	(_currentWater),BC
;  425			if (currentWater == 40) {
	LD	HL,(_currentWater)
	OR	A,A
	LD	BC,40
	SBC	HL,BC
	JR	NZ,L_182
;  426				currentWater = 0;
	LD	BC,0
	LD	(_currentWater),BC
;  427			}
L_182:
;  428	
;  429			screenX = Clamp(playerX - 160, 0, MAX_X);
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777056
	LD	A,255
	CALL	__ladd
	LD	BC,432
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenX),HL
	LD	A,E
	LD	(_screenX+3),A
;  430			screenY = Clamp(playerY - 112, 0, MAX_Y);
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777104
	LD	A,255
	CALL	__ladd
	LD	BC,400
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenY),HL
	LD	A,E
	LD	(_screenY+3),A
;  431	
;  432			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,(_screenY)
	PUSH	BC
	LD	BC,(_screenX)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  433	
;  434	
;  435			GrassAnimation(0);
	LD	BC,0
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  436	
;  437			gfx_TransparentSprite_NoClip(playerSprites[(24 * surfing) + (12 * running) + (moveDir - 1) * (3 - surfing) + playerState], playerX - screenX - 8, playerY - screenY + 4);
	LD	A,(_playerY)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,4
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	C,A
	LD	A,(_surfing)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	UEXT	HL
	LD	L,A
	LD	A,24
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	ADD	HL,BC
	LD	(IX+-15),HL	; spill
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	DEC	DE
	LD	A,(_surfing)
	UEXT	HL
	LD	L,A
	LD	(IX+-18),DE	; spill
	LD	(IX+-21),HL	; spill
	LD	DE,(IX+-18)	; unspill
	LD	HL,3
	OR	A,A
	LD	(IX+-18),DE	; spill
	LD	DE,(IX+-21)	; unspill
	SBC	HL,DE
	LD	BC,HL
	LD	HL,(IX+-18)
	CALL	__imuls
	LD	BC,(IX+-15)	; unspill
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  438	
;  439			/* Draw overlay if player is in grass */
;  440			if (currentTileMap[tx + (moveDir == 1) - (moveDir == 2) + (ty + (moveDir == 3) - (moveDir == 4)) * OUTDOORWIDTH] == 2) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__90
	LD	B,1
	JR	L__91
L__90:
	LD	B,0
L__91:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__93
	LD	B,1
	JR	L__94
L__93:
	LD	B,0
L__94:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	A,48
	CALL	__imul_b
	LD	(IX+-9),HL	; spill
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__96
	LD	B,1
	JR	L__97
L__96:
	LD	B,0
L__97:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__99
	LD	B,1
	JR	L__100
L__99:
	LD	B,0
L__100:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	DE,(IX+-9)	; unspill
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_201
;  441				/* Always draw grass overlay if moving sideways*/
;  442				if (moveDir <= 2 && moveState > 0) {
	LD	A,2
	LD	HL,_moveDir
	CP	A,(HL)
	JR	C,L_187
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_187
;  443					gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__105
	LD	A,1
	JR	L__106
L__105:
	XOR	A,A
L__106:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__108
	LD	B,1
	JR	L__109
L__108:
	LD	B,0
L__109:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__111
	LD	B,1
	JR	L__112
L__111:
L__112:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__114
	LD	B,1
	JR	L__115
L__114:
	LD	B,0
L__115:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  444				}
;  445				/* Only draw the overlay at the end if moving vertically */
;  446				else if (moveState == 1 || moveState == 2) {
	JR	L_196
L_187:
	LD	A,(_moveState)
	CP	A,1
	JR	Z,L_185
	LD	A,(_moveState)
	CP	A,2
	JR	NZ,L_196
L_185:
;  447					gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__119
	LD	A,1
	JR	L__120
L__119:
	XOR	A,A
L__120:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__122
	LD	B,1
	JR	L__123
L__122:
	LD	B,0
L__123:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__125
	LD	B,1
	JR	L__126
L__125:
L__126:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__128
	LD	B,1
	JR	L__129
L__128:
	LD	B,0
L__129:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  448				}
L_196:
;  449				if (moveState == 2) {
	LD	A,(_moveState)
	CP	A,2
	JR	NZ,L_201
;  450					if (grassAnimNext) {
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	Z,L_189
;  451						grassAnimState1 = 10;
	LD	BC,10
	LD	(_grassAnimState1),BC
;  452						grassAnimX1 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__133
	LD	B,1
	JR	L__134
L__133:
	LD	B,0
L__134:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__136
	LD	B,1
	JR	L__137
L__136:
	LD	B,0
L__137:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX1),HL
;  453						grassAnimY1 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__139
	LD	B,1
	JR	L__140
L__139:
	LD	B,0
L__140:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__142
	LD	B,1
	JR	L__143
L__142:
	LD	B,0
L__143:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY1),HL
;  454					}
;  455					else {
	JR	L_194
L_189:
;  456						grassAnimState2 = 10;
	LD	BC,10
	LD	(_grassAnimState2),BC
;  457						grassAnimX2 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__145
	LD	B,1
	JR	L__146
L__145:
	LD	B,0
L__146:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__148
	LD	B,1
	JR	L__149
L__148:
	LD	B,0
L__149:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX2),HL
;  458						grassAnimY2 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__151
	LD	B,1
	JR	L__152
L__151:
	LD	B,0
L__152:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__154
	LD	B,1
	JR	L__155
L__154:
	LD	B,0
L__155:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY2),HL
;  459					}
L_194:
;  460					grassAnimNext = !grassAnimNext;
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	NZ,L_191
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_192
L_191:
	LD	BC,0
	LD	(IX+-3),BC
L_192:
	LD	A,(IX+-3)
	LD	(_grassAnimNext),A
;  461				}
;  462			}
L_201:
;  463			if (!(moveDir == 3 && moveState != 0) && currentTileMap[tx + ty * OUTDOORWIDTH] == 2) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_199
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_202
L_199:
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_202
;  464				gfx_TransparentSprite_NoClip(grassoverlay1, tx * 16 - screenX - 8, ty * 16 - screenY + 18);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  465			}
L_202:
;  466			GrassAnimation(1);
	LD	BC,1
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  467	
;  468		}
L_205:
;  469		DrawEnemies();
	CALL	_DrawEnemies
;  470		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;  471	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Draw ***************************
;Name                         Addr/Register   Size   Type
;_map_DrawInformationBar             IMPORT  -----   function
;_DrawEnemies                        IMPORT  -----   function
;_grassAnimY2                        STATIC      3   variable
;_grassAnimX2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassAnimY1                        STATIC      3   variable
;_grassAnimX1                        STATIC      3   variable
;_grassAnimState1                    STATIC      3   variable
;_grassAnimNext                      STATIC      1   variable
;_grassoverlay1_data                 IMPORT     98   variable
;_moveState                          STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_currentTileMap                     STATIC   1920   variable
;_running                            STATIC      1   variable
;_surfing                            IMPORT      1   variable
;_GrassAnimation                     IMPORT  -----   function
;_Clamp                              IMPORT  -----   function
;_animatedwater2_data                IMPORT    258   variable
;_mapTiles                           STATIC    384   variable
;_animatedwater1_data                IMPORT    258   variable
;_memcpy                             IMPORT  -----   function
;_currentWater                       STATIC      3   variable
;_playerState                        STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_playerSprites                      STATIC     96   variable
;_playerX                            IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_indoors                            IMPORT      1   variable
;temp193                               IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: -1 (instruction)


;  472	void GrassAnimation(bool part) {
_GrassAnimation:
	LD	HL,-6
	CALL	__frameset
;  473		if (grassAnimState1 > 0) {
	LD	BC,(_grassAnimState1)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_229
;  474			if ((moveDir == 3 && ty == grassAnimY1 / 16) == part) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_209
	LD	HL,(_grassAnimY1)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_209
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_210
L_209:
	LD	BC,0
	LD	(IX+-3),BC
L_210:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	JR	NZ,L_216
;  475				if (grassAnimState1 > 5) {
	LD	BC,(_grassAnimState1)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_213
;  476					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 13);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  477				}
;  478				else {
	JR	L_216
L_213:
;  479					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 14);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  480				}
;  481			}
L_216:
;  482			grassAnimState1--;
	LD	BC,(_grassAnimState1)
	DEC	BC
	LD	(_grassAnimState1),BC
;  483		}
L_229:
;  484		if (grassAnimState2 > 0) {
	LD	BC,(_grassAnimState2)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_230
;  485			if ((moveDir == 3 && ty == grassAnimY2 / 16) == part) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_220
	LD	HL,(_grassAnimY2)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_220
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_221
L_220:
	LD	BC,0
	LD	(IX+-6),BC
L_221:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-6)
	SBC	HL,BC
	JR	NZ,L_227
;  486				if (grassAnimState2 > 5) {
	LD	BC,(_grassAnimState2)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_224
;  487					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 13);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  488				}
;  489				else {
	JR	L_227
L_224:
;  490					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 14);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  491				}
;  492			}
L_227:
;  493			grassAnimState2--;
	LD	BC,(_grassAnimState2)
	DEC	BC
	LD	(_grassAnimState2),BC
;  494		}
;  495	}
L_230:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GrassAnimation ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimX2                        STATIC      3   variable
;_grassAnimY2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_screenX                            STATIC      4   variable
;_grassAnimX1                        STATIC      3   variable
;_screenY                            STATIC      4   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_grassAnimY1                        STATIC      3   variable
;_moveDir                            STATIC      1   variable
;_grassAnimState1                    STATIC      3   variable
;temp222                               IX-6      3   variable
;temp211                               IX-3      3   variable
;part                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  496	
;  497	void HealParty(void) {
_HealParty:
	LD	HL,-33
	CALL	__frameset
;  498		int pokemonIndex, moveIndex;
;  499		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_238
L_236:
;  500			party[pokemonIndex].currenthealth = stats_CalculateStats(party[pokemonIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-30
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	BC,(HL)
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-18)
	LD	(IY+13),C
	LD	(IY+14),B
;  501			party[pokemonIndex].currentstatus = 0;
	LD	(IY+15),0
;  502			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-12),HL
	JR	L_235
L_233:
;  503				party[pokemonIndex].pp[moveIndex] = data_moves[party[pokemonIndex].moves[moveIndex]].uses;
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	IY,(IX+-33)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  504			}
L_235:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_233
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  505		}
L_238:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_236
;  506		text_Display("Your party has been healed", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__174
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  507		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  508	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealParty ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;O_11                                 IX-15      3   variable
;O_12                                 IX-12      3   variable
;G_4                                   IX-9      3   variable
;moveIndex                             IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__174:
	DB	"Your party has been healed"
	DB	0
	SEGMENT CODE
;  509	void OpenBox(void) {
_OpenBox:
;  510		map_End();
	CALL	_map_End
;  511		
;  512		menu_Box();
	CALL	_menu_Box
;  513	
;  514		map_SetupGfx();
	CALL	_map_SetupGfx
;  515		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  516	}
	RET	


;**************************** _OpenBox ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Box                           IMPORT  -----   function
;_map_End                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -1 (instruction)


;  517	void TalkToNpc1(void) {
_TalkToNpc1:
	LD	HL,-6
	CALL	__frameset
;  518		text_Display(data_npcText[npc1], false);
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  519		if (!takenGifts[npc1] && data_npcReward[npc1] > 0) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_248
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_248
;  520			playerItems[data_npcReward[npc1] - 1]++;
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-6)
	LD	(HL),A
;  521			items_IndexToName(str1, data_npcReward[npc1] - 1);
	LD	HL,(IX+-3)
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  522			if (data_npcReward[npc1] - 1 >= 20) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_245
;  523				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__180
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  524			}
;  525			else {
	JR	L_246
L_245:
;  526				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__181
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  527			}
L_246:
;  528			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  529			takenGifts[npc1] = true;
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  530		}
;  531	}
L_248:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc1 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc1                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;G_5                                   IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__180:
	DB	"Recieved the TM for %s"
	DB	0
L__181:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  532	void TalkToNpc2(void) {
_TalkToNpc2:
	LD	HL,-3
	CALL	__frameset
;  533		text_Display(data_npcText[npc2], false);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  534		if (!takenGifts[npc2]) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_254
;  535			playerItems[data_npcReward[npc2] - 1]++;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-3)
	LD	(HL),A
;  536			items_IndexToName(str1, data_npcReward[npc2] - 1);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  537			if (data_npcReward[npc2] - 1 >= 20) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_251
;  538				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__185
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  539			}
;  540			else {
	JR	L_252
L_251:
;  541				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__186
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  542			}
L_252:
;  543			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  544			takenGifts[npc2] = true;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  545		}
;  546	}
L_254:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc2 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc2                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__185:
	DB	"Recieved the TM for %s"
	DB	0
L__186:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  547	void EnterDoor(uint8_t index) {
_EnterDoor:
	LD	HL,-3
	CALL	__frameset
;  548		int tileIndex;
;  549		lastPlayerX = playerX;
	LD	BC,(_playerX)
	LD	HL,_lastPlayerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  550		lastPlayerY = playerY;
	LD	BC,(_playerY)
	LD	HL,_lastPlayerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  551		indoors = true;
	LD	A,1
	LD	(_indoors),A
;  552		currentBuilding = currentZoneData.doorzones[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+288
	ADD	HL,BC
	LD	A,(HL)
	LD	(_currentBuilding),A
;  553	
;  554		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_258
L_256:
;  555			zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_indoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  556		}
L_258:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_256
;  557		tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  558		tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  559		playerX = currentZoneData.doorx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+304
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  560		playerY = currentZoneData.doory[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+320
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  561		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  562		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  563		npc1 = currentZoneData.doornpc1[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+336
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc1),A
;  564		npc2 = currentZoneData.doornpc2[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+352
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc2),A
;  565		LoadMap();
	CALL	_LoadMap
;  566	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _EnterDoor ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_npc2                               STATIC      1   variable
;_npc1                               STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;tileIndex                             IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


;  567	void ExitBuilding(void) {
_ExitBuilding:
	LD	HL,-3
	CALL	__frameset
;  568		int tileIndex;
;  569		playerX = lastPlayerX;
	LD	BC,(_lastPlayerX)
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  570		playerY = lastPlayerY;
	LD	BC,(_lastPlayerY)
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  571		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  572		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_264
L_262:
;  573			zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_outdoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  574		}
L_264:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_262
;  575		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  576		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  577		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  578		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  579		LoadMap();
	CALL	_LoadMap
;  580	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitBuilding ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  581	void ExitZone(uint8_t index) {
_ExitZone:
	CALL	__frameset0
;  582		playerX = currentZoneData.exitx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+256
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  583		playerY = currentZoneData.exity[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+272
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  584		currentZone = currentZoneData.exitzone[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+240
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_currentZone
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  585		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  586		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  587		LoadMap();
	CALL	_LoadMap
;  588	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitZone ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  589	bool FightTrainer(uint8_t index) {
_FightTrainer:
	CALL	__frameset0
;  590		currentTrainer = index;
	LD	A,(IX+6)
	LD	(_currentTrainer),A
;  591		if (indoors && !defeatedTrainersIndoors[currentBuilding][currentTrainer]) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_272
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_272
;  592			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  593			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  594			return true;
	LD	A,1
	JR	L_274
;  595		}
;  596		else if (!indoors && !defeatedTrainers[currentZone][currentTrainer]) {
L_272:
	LD	A,(_indoors)
	OR	A,A
	JR	NZ,L_273
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_273
;  597			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  598			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  599			return true;
	LD	A,1
	JR	L_274
;  600		}
L_273:
;  601		return false;
	XOR	A,A
;  602	}
L_274:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FightTrainer ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_battle_SpawnTrainer                IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_data_trainerText                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_currentTrainer                     STATIC      1   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  603	
;  604	void map_LoadPokeballs(void) {
_map_LoadPokeballs:
	LD	HL,-6
	CALL	__frameset
;  605		int pokemonIndex;
;  606		/* Generate pokemon info To Display At Top of Screen */
;  607		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_282
L_280:
;  608			if (party[pokemonIndex].id == 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_279
;  609				pokeballdata[pokemonIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),2
;  610			}
;  611			else {
	JR	L_281
L_279:
;  612				if (party[pokemonIndex].currenthealth > 0) {
	LD	IY,(IX+-6)
	LD	BC,(IY+13)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_277
;  613					pokeballdata[pokemonIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),0
;  614				}
;  615				else {
	JR	L_281
L_277:
;  616					pokeballdata[pokemonIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),1
;  617				}
;  618			}
;  619		}
L_281:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_282:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_280
;  620	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoadPokeballs ***************************
;Name                         Addr/Register   Size   Type
;_pokeballdata                       STATIC      6   variable
;_party                              IMPORT   1224   variable
;G_6                                   IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


;  621	void LoadMap(void) {
_LoadMap:
	LD	HL,-1
	CALL	__frameset
;  622		ti_var_t mapAV;
;  623		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_285
;  624			mapAV = ti_Open("PKMNMD1", "r");
	LD	BC,L__203
	PUSH	BC
	LD	BC,L__204
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  625			ti_Seek(((int)currentBuilding) * 1270, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	LD	BC,1270
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  626			ti_Read(&currentTileMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  627			ti_Read(&currentTypeMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  628			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  629		}
;  630		else {
	JR	L_286
L_285:
;  631			mapAV = ti_Open("PKMNMD0", "r");
	LD	BC,L__205
	PUSH	BC
	LD	BC,L__206
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  632			ti_Seek(((int)currentZone) * 4480, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentZone)
	CALL	__stoiu
	LD	BC,4480
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  633			ti_Read(&currentTileMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  634			ti_Read(&currentTypeMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  635			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  636		}
L_286:
;  637		ti_CloseAll();
	CALL	_ti_CloseAll
;  638	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadMap ***************************
;Name                         Addr/Register   Size   Type
;_ti_CloseAll                        IMPORT  -----   function
;_currentZone                        IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;_currentTypeMap                     STATIC   1920   variable
;_currentTileMap                     STATIC   1920   variable
;_ti_Read                            IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;mapAV                                 IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__203:
	DB	"r"
	DB	0
L__204:
	DB	"PKMNMD1"
	DB	0
L__205:
	DB	"r"
	DB	0
L__206:
	DB	"PKMNMD0"
	DB	0
	SEGMENT CODE
;  639	
;  640	int32_t Clamp(int32_t number, int min, int max) {
_Clamp:
	CALL	__frameset0
;  641		if (number < min) {
	LD	BC,(IX+12)
	CALL	__itol
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmps
	JP	P,L_290
;  642			number = min;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  643		}
L_290:
;  644		if (number > max) {
	LD	BC,(IX+15)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_291
;  645			number = max;
	LD	BC,(IX+15)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  646		}
L_291:
;  647		return number;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  648	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Clamp ***************************
;Name                         Addr/Register   Size   Type
;max                                  IX+15      3   parameter
;min                                  IX+12      3   parameter
;number                                IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  649	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width) {
_GetNextTile:
	CALL	__frameset0
;  650	
;  651		switch (moveDir) {
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__211:
	DW	4
	DW	1
	DB	0
	DW24	L_293	

	DW24	L_294	

	DW24	L_295	

	DW24	L_296	

	DW24	L_297	

;  652		case 1:
L_293:
;  653			return(GetTypeMapData(tx + 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	INC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_298
;  654		case 2:
L_294:
;  655			return(GetTypeMapData(tx - 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	DEC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_298
;  656		case 3:
L_295:
;  657			return(GetTypeMapData(tx, ty + 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	INC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_298
;  658		case 4:
L_296:
;  659			return(GetTypeMapData(tx, ty - 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_298
;  660		}
L_297:
;  661		return 0;
	XOR	A,A
;  662	}
L_298:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetNextTile ***************************
;Name                         Addr/Register   Size   Type
;_GetTypeMapData                     IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  663	
;  664	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width) {
_GetTypeMapData:
	CALL	__frameset0
;  665		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_300
;  666			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	JR	L_301
;  667		}
;  668		else {
L_300:
;  669			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
;  670		}
;  671	}
L_301:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetTypeMapData ***************************
;Name                         Addr/Register   Size   Type
;_currentTypeMap                     STATIC   1920   variable
;_indoors                            IMPORT      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  672	
;  673	void DrawEnemies(void) {
_DrawEnemies:
	LD	HL,-12
	CALL	__frameset
;  674		int xloc = 0;
;  675		int yloc = 0;
;  676		for (i = 0; i < 16; i++) {
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_313
L_311:
;  677			if (indoors){
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_310
;  678				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_312
;  679					xloc = currentZoneData.trainerx[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-3),HL
;  680					yloc = currentZoneData.trainery[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-6),HL
;  681					gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  682				}
;  683			}
;  684			else {
	JR	L_312
L_310:
;  685				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_312
;  686					xloc = currentZoneData.trainerx[i] * 16 - screenX;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(_screenX)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
;  687					yloc = currentZoneData.trainery[i] * 16 - screenY;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(_screenY)
	LD	DE,_currentZoneData+576
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
;  688					if (xloc < 336 && yloc < 240 && xloc >= 0 && yloc >= 0) {
	OR	A,A
	LD	(IX+-6),HL
	LD	HL,(IX+-3)
	LD	BC,336
	SBC	HL,BC
	JP	P,L_312
	LD	BC,240
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_312
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_312
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_312
;  689						gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  690					}
;  691				}
;  692			}
;  693			
;  694		}
L_312:
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
L_313:
	LD.LIS	BC,16
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_311
;  695	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawEnemies ***************************
;Name                         Addr/Register   Size   Type
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_enemySprites                       STATIC     24   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_i                                  IMPORT      2   variable
;G_11                                 IX-12      3   variable
;G_9                                   IX-9      3   variable
;yloc                                  IX-6      3   variable
;xloc                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  696	
;  697	void map_DrawInformationBar(void) {
_map_DrawInformationBar:
	LD	HL,-3
	CALL	__frameset
;  698		int pokemonIndex;
;  699		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  700		gfx_FillRectangle(0, 0, 320, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  701		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_318
L_316:
;  702			gfx_TransparentSprite_NoClip(pokeballSprites[pokeballdata[pokemonIndex]], 16 * pokemonIndex, 0);
	LD	BC,_pokeballdata
	LD	DE,0
	PUSH	DE
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  703		}
L_318:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_316
;  704		sprintf(str, "%u$", playerMoney);
	LD	A,(_playerMoney+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_playerMoney)
	PUSH	BC
	LD	BC,L__225
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  705		gfx_PrintStringXY(str, 100, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  706	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_DrawInformationBar ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playerMoney                        IMPORT      4   variable
;_sprintf                            IMPORT  -----   function
;_pokeballdata                       STATIC      6   variable
;_pokeballSprites                    STATIC      9   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__225:
	DB	"%u$"
	DB	0
	SEGMENT CODE
;  707	
;  708	void map_LoseFight(void) {
_map_LoseFight:
	LD	HL,-33
	CALL	__frameset
;  709		int tileIndex, partyIndex, moveIndex;
;  710		text_Display("All your pokemon have fainted", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__227
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  711		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_328
L_326:
;  712			party[partyIndex].currenthealth = stats_CalculateStats(party[partyIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-30
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	BC,(HL)
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-18)
	LD	(IY+13),C
	LD	(IY+14),B
;  713			party[partyIndex].currentstatus = 0;
	LD	(IY+15),0
;  714			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-12),HL
	JR	L_325
L_323:
;  715				party[partyIndex].pp[moveIndex] = data_moves[party[partyIndex].moves[moveIndex]].uses;
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	IY,(IX+-33)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  716			}
L_325:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_323
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  717		}
L_328:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_326
;  718		playerX = 5*16;
	LD	HL,_playerX
	LD	(HL),80
	INC	HL
	LD	(HL),0
;  719		playerY = 7*16;
	LD	HL,_playerY
	LD	(HL),112
	INC	HL
	LD	(HL),0
;  720		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  721		currentZone = 0;
	LD	HL,_currentZone
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  722		moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  723		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  724		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  725		tx = playerX / 16;
	LD	A,5
	LD	(_tx),A
;  726		ty = playerY / 16;
	LD	A,7
	LD	(_ty),A
;  727		LoadMap();
	CALL	_LoadMap
;  728	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoseFight ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_moveDir                            STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_text_Display                       IMPORT  -----   function
;O_25                                 IX-15      3   variable
;O_26                                 IX-12      3   variable
;G_12                                  IX-9      3   variable
;moveIndex                             IX-6      3   variable
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__227:
	DB	"All your pokemon have fainted"
	DB	0
	SEGMENT CODE
;  729	
;  730	void map_WinFight(bool wild, uint16_t rewardMoney) {
_map_WinFight:
	LD	HL,-28
	CALL	__frameset
;  731		char str1[16];
;  732		if (!wild) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_347
;  733			playerMoney += rewardMoney;
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	A,(_playerMoney+3)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_playerMoney)
	CALL	__ladd
	LD	(_playerMoney),HL
	LD	A,E
	LD	(_playerMoney+3),A
;  734			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_345
;  735				defeatedTrainersIndoors[currentBuilding][currentTrainer] = true;
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  736				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_347
;  737					if (currentZoneData.trainerreward[currentTrainer] == 255) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_336
;  738						badgeCount++;
;  739						sprintf(str, "Recieved a badge");
	LD	BC,L__235
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	A,(_badgeCount)
	INC	A
	LD	(_badgeCount),A
	CALL	_sprintf
	POP	BC
	POP	BC
;  740					}
;  741					else {
	JR	L_337
L_336:
;  742						playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-25)
	LD	(HL),A
;  743						items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  744						if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_334
;  745							sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__237
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  746						}
;  747						else {
	JR	L_337
L_334:
;  748							sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__238
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  749						}
;  750					}
L_337:
;  751					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  752				}
;  753			}
;  754			else {
	JR	L_347
L_345:
;  755				defeatedTrainers[currentZone][currentTrainer] = true;
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  756				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_347
;  757					playerItems[currentZoneData.trainerreward[currentTrainer]-1]++;
	LD	(IX+-3),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-28),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-28)
	LD	(HL),A
;  758					items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  759					if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_341
;  760						sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__241
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  761					}
;  762					else {
	JR	L_342
L_341:
;  763						sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__242
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  764					}
L_342:
;  765					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  766				}
;  767			}
;  768		}
L_347:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_WinFight ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_currentTrainer                     STATIC      1   variable
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_playerMoney                        IMPORT      4   variable
;str1                                 IX-22     16   variable
;G_14                                  IX-6      3   variable
;G_18                                  IX-3      3   variable
;rewardMoney                           IX+9      2   parameter
;wild                                  IX+6      1   parameter


; Stack Frame Size: 40 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__235:
	DB	"Recieved a badge"
	DB	0
L__237:
	DB	"Recieved the TM for %s"
	DB	0
L__238:
	DB	"Recieved a %s"
	DB	0
L__241:
	DB	"Recieved the TM for %s"
	DB	0
L__242:
	DB	"Recieved a %s"
	DB	0
	XREF _PKMNSD4_init:ROM
	XREF _indoortileset_tiles_compressed:ROM
	XREF _outdoortileset_tiles_compressed:ROM
	XREF _pokeball_tiles_compressed:ROM
	XREF _PKMNSD4:ROM
	XREF _shop_compressed:ROM
	XREF _animatedwater2_data:ROM
	XREF _animatedwater1_data:ROM
	XREF _grassoverlay3_data:ROM
	XREF _grassoverlay2_data:ROM
	XREF _grassoverlay1_data:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_SelectSave:ROM
	XREF _save_Load:ROM
	XREF _badgeCount:ROM
	XREF _takenGifts:ROM
	XREF _defeatedTrainersIndoors:ROM
	XREF _defeatedTrainers:ROM
	XREF _playerItems:ROM
	XREF _playerMoney:ROM
	XREF _currentBuilding:ROM
	XREF _surfing:ROM
	XREF _indoors:ROM
	XREF _currentZone:ROM
	XREF _party:ROM
	XREF _lastPlayerY:ROM
	XREF _lastPlayerX:ROM
	XREF _playerY:ROM
	XREF _playerX:ROM
	XREF _textBoxType:ROM
	XREF _text_Display:ROM
	XREF _items_IndexToName:ROM
	XREF _colors:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _menu_ItemShop:ROM
	XREF _menu_Box:ROM
	XREF _menu_Menu:ROM
	XREF _battle_SpawnTrainer:ROM
	XREF _battle_SpawnWild:ROM
	XREF _data_npcReward:ROM
	XREF _data_npcText:ROM
	XREF _data_trainerText:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _memcpy:ROM
	XREF _sprintf:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmps:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _map_WinFight
	XDEF _map_LoseFight
	XDEF _map_DrawInformationBar
	XDEF _DrawEnemies
	XDEF _GetTypeMapData
	XDEF _GetNextTile
	XDEF _Clamp
	XDEF _LoadMap
	XDEF _map_LoadPokeballs
	XDEF _FightTrainer
	XDEF _ExitZone
	XDEF _ExitBuilding
	XDEF _EnterDoor
	XDEF _TalkToNpc2
	XDEF _TalkToNpc1
	XDEF _OpenBox
	XDEF _HealParty
	XDEF _GrassAnimation
	XDEF _map_Draw
	XDEF _map_End
	XDEF _map_Loop
	XDEF _map_SetupGfx
	XDEF _map_Setup
	XDEF _map_Initialize
	XDEF _str1
	XDEF _clearcharacter2
	XDEF _tempcharacter2
	XDEF _currentTrainer
	XDEF _npc2
	XDEF _npc1
	XDEF _currentZoneData
	XDEF _currentTypeMap
	XDEF _currentTileMap
	XDEF _pokeballSprites
	XDEF _enemySprites
	XDEF _playerSprites
	XDEF _mapTiles
	XDEF _tilemap
	XDEF _playerState
	XDEF _moveDir
	XDEF _moveState
	XDEF _nextTile
	XDEF _grassAnimY2
	XDEF _grassAnimX2
	XDEF _grassAnimY1
	XDEF _grassAnimX1
	XDEF _grassAnimState2
	XDEF _grassAnimState1
	XDEF _grassAnimNext
	XDEF _currentWater
	XDEF _running
	XDEF _ty
	XDEF _tx
	XDEF _screenY
	XDEF _screenX
	XDEF _pokeballdata
	XDEF _battlechance
	END
