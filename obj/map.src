; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAP.C"
	.assume ADL=1
	SEGMENT TEXT
_battlechance:
	DW	10
	DB	0
	SEGMENT DATA
_pokeballdata:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_screenX:
	DL	0
_screenY:
	DL	0
	SEGMENT BSS
_tx:
	DS	1
_ty:
	DS	1
	SEGMENT DATA
_running:
	DB	0
_currentStep:
	DB	0
_currentRun:
	DB	24
_currentWater:
	DW	0
	DB	0
_grassAnimNext:
	DB	0
_grassAnimState1:
	DW	0
	DB	0
_grassAnimState2:
	DW	0
	DB	0
_grassAnimX1:
	DW	0
	DB	0
_grassAnimY1:
	DW	0
	DB	0
_grassAnimX2:
	DW	0
	DB	0
_grassAnimY2:
	DW	0
	DB	0
	SEGMENT BSS
_npcMoveState:
	DS	16
_npcOldTiles:
	DS	16
	SEGMENT DATA
_npcToFight:
	DW	16
	DB	0
_showExclamationPoint:
	DB	0
_exclamationX:
	DW	0
	DB	0
_exclamationY:
	DW	0
	DB	0
	SEGMENT BSS
_npcGrassAnimState:
	DS	16
_npcSaidMessage:
	DS	16
	SEGMENT DATA
_npcPatterns:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	2
	DB	5
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	3
	DB	5
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	0
	DB	0
	DB	0
	DB	1
	DB	0
	DB	0
	DB	5
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	5
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT BSS
_nextTile:
	DS	1
	SEGMENT DATA
_moveState:
	DB	0
_moveDir:
	DB	3
_playerState:
	DB	0
_jumpState:
	DB	0
_jumpHeights:
	DB	1
	DB	3
	DB	6
	DB	9
	DB	12
	DB	14
	DB	15
	DB	16
	DB	16
	DB	15
	DB	14
	DB	12
	DB	9
	DB	6
	DB	3
	DB	1
	DB	0
	SEGMENT BSS
_tilemap:
	DS	18
_mapTiles:
	DS	384
_pokeballSprites:
	DS	9
_currentTileMap:
	DS	1920
_currentTypeMap:
	DS	1920
_currentZoneData:
	DS	720
	SEGMENT DATA
_currentTrainer:
	DB	0
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <debug.h>
;   12	#include <compression.h>
;   13	#include <fileioc.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "items.h"
;   21	#include "text.h"
;   22	#include "savegame.h"
;   23	#include "stats.h"
;   24	#include "gfx/map_gfx.h"
;   25	#include "gfx/test_gfx.h"
;   26	#include "items.h"
;   27	
;   28	#include "gfx/PKMNSD4.h"
;   29	#include "gfx/PKMNSD7.h"
;   30	#include "gfx/PKMNSD8.h"
;   31	
;   32	#define OUTDOORWIDTH 48
;   33	#define OUTDOORHEIGHT 40
;   34	#define MAX_X ((OUTDOORWIDTH - 21)*16)
;   35	#define MAX_Y ((OUTDOORHEIGHT - 15)*16)
;   36	
;   37	
;   38	
;   39	void HealParty(void);
;   40	void OpenBox(void);
;   41	void ReadText(uint8_t index);
;   42	void EnterDoor(uint8_t index);
;   43	void ExitBuilding(void);
;   44	void ExitZone(uint8_t index);
;   45	void AddItem(uint8_t index);
;   46	bool FightTrainer(uint8_t index);
;   47	int32_t Clamp(int32_t number, int min, int max);
;   48	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width);
;   49	uint16_t ShiftTile(uint16_t value, uint8_t direction, uint8_t amount);
;   50	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width);
;   51	void DrawPlayer(void);
;   52	void ProcessNpcs(void);
;   53	void LoadMap(void);
;   54	void LoadTileset(bool freeOld);
;   55	void GrassAnimation(bool part);
;   56	
;   57	
;   58	
;   59	/* Chance for enemy to spawn out of 100 */
;   60	const int battlechance = 10; 
;   61	uint8_t pokeballdata[] = {
;   62		0,0,0,0,0,0
;   63	};
;   64	
;   65	int32_t screenX = 0;
;   66	int32_t screenY = 0;
;   67	
;   68	uint8_t tx; /* x tile */
;   69	uint8_t ty; /* y tile */
;   70	bool running = false;
;   71	bool currentStep = 0;
;   72	bool currentRun = 24;
;   73	int currentWater = 0;
;   74	
;   75	/* Variables for the leaves that appear when walking through grass */
;   76	bool grassAnimNext = 0;
;   77	int grassAnimState1 = 0;
;   78	int grassAnimState2 = 0;
;   79	int grassAnimX1 = 0;
;   80	int grassAnimY1 = 0;
;   81	int grassAnimX2 = 0;
;   82	int grassAnimY2 = 0;
;   83	
;   84	uint8_t npcMoveState[16];
;   85	uint8_t npcOldTiles[16];
;   86	int npcToFight = 16;
;   87	uint8_t showExclamationPoint = 0;
;   88	int exclamationX = 0;
;   89	int exclamationY = 0;
;   90	uint8_t npcGrassAnimState[16];
;   91	bool npcSaidMessage[16];
;   92	
;   93	/*0 = wait, 1 = rotate counterclockwise, 2 = turn around, 3 = rotate clockwise, 4 = walk, 5 = repeat*/
;   94	uint8_t npcPatterns[8][16] = {
;   95		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   96		{0,4,4,4,2,5,0,0,0,0,0,0,0,0,0,0},
;   97		{0,4,4,4,3,5,0,0,0,0,0,0,0,0,0,0},
;   98		{0,3,0,0,0,1,0,0,5,0,0,0,0,0,0,0},
;   99		{4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,5},
;  100		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  101		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  102		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  103	};
;  104	
;  105	uint8_t nextTile;
;  106	/* Set to 8 when anything is pressed and decreases each frame until 0 */
;  107	uint8_t moveState = 0;
;  108	/* Direction Player is facing */
;  109	uint8_t moveDir = 3;
;  110	uint8_t playerState = 0;
;  111	uint8_t jumpState = 0;
;  112	uint8_t jumpHeights[17] = {1,3,6,9,12,14,15,16,16,15,14,12,9,6,3,1, 0 };
;  113	
;  114	gfx_tilemap_t tilemap;
;  115	
;  116	gfx_sprite_t *mapTiles[128];
;  117	gfx_sprite_t *pokeballSprites[3];
;  118	
;  119	/* What map looks like */
;  120	uint8_t currentTileMap[1920];
;  121	/* How map behaves */
;  122	uint8_t currentTypeMap[1920];
;  123	
;  124	struct zoneData currentZoneData;
;  125	/* What trainer the player is fighting*/
;  126	uint8_t currentTrainer = 0; /* 0-15 */
	SEGMENT CODE
;  127	
;  128	void map_Initialize(void) {
_map_Initialize:
;  129		PKMNSD4_init();
	CALL	_PKMNSD4_init
;  130		PKMNSD7_init();
	CALL	_PKMNSD7_init
;  131		PKMNSD8_init();
	CALL	_PKMNSD8_init
;  132	
;  133		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD4+27
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  134		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  135		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  136		textBoxType = 0;	
	LD	BC,0
	LD	(_textBoxType),BC
;  137		save_SelectSave();
	CALL	_save_SelectSave
;  138		save_Load();
	CALL	_save_Load
;  139	
;  140		/* Initialize the tilemap */
;  141		tilemap.map = currentTileMap;
	LD	BC,_currentTileMap
	LD	(_tilemap),BC
;  142		tilemap.tiles = mapTiles;
	LD	BC,_mapTiles
	LD	(_tilemap+3),BC
;  143		tilemap.type_width = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  144		tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  145		tilemap.tile_height = 16;
	LD	A,16
	LD	(_tilemap+6),A
;  146		tilemap.tile_width = 16;
	LD	(_tilemap+7),A
;  147		tilemap.draw_height = 16;
	LD	(_tilemap+8),A
;  148		tilemap.draw_width = 22;
	LD	A,22
	LD	(_tilemap+9),A
;  149		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  150		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  151		tilemap.y_loc = 8;
	LD	A,8
	LD	(_tilemap+14),A
;  152		tilemap.x_loc = -8;
	LD	BC,16777208
	LD	(_tilemap+15),BC
;  153	
;  154		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_1
;  155			tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  156			tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  157		}
L_1:
;  158	
;  159		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  160		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  161		LoadMap();
	CALL	_LoadMap
;  162	}
	RET	


;**************************** _map_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_mapTiles                           STATIC    384   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_save_Load                          IMPORT  -----   function
;_save_SelectSave                    IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT     30   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_PKMNSD8_init                       IMPORT  -----   function
;_PKMNSD7_init                       IMPORT  -----   function
;_PKMNSD4_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  163	void map_Setup(void) {
_map_Setup:
;  164		map_SetupGfx();
	CALL	_map_SetupGfx
;  165	
;  166		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  167		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  168	}
	RET	


;**************************** _map_Setup ***************************
;Name                         Addr/Register   Size   Type
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_map_SetupGfx                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  169	void map_SetupGfx(void) {
_map_SetupGfx:
	LD	HL,-3
	CALL	__frameset
;  170		int tileIndex = 0;
;  171		LoadTileset(false);
	LD	BC,0
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  172		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_7
L_5:
;  173			pokeballSprites[tileIndex] = gfx_MallocSprite(16, 16);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_pokeballSprites
	ADD	HL,DE
	LD	(HL),BC
;  174			zx7_Decompress(pokeballSprites[tileIndex], pokeball_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_pokeball_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  175		}
L_7:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_5
;  176		textBoxType = 0;
	LD	BC,0
;  177		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	DE,0
	PUSH	DE
	LD	HL,_PKMNSD4+27
	LD	(_textBoxType),BC
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  178		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  179		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  180		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  181		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  182	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_SetupGfx ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT     30   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_pokeball_tiles_compressed          IMPORT      9   variable
;_zx7_Decompress                     IMPORT  -----   function
;_pokeballSprites                    STATIC      9   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  183	int map_Loop(void) {
_map_Loop:
	LD	HL,-282
	CALL	__frameset
;  184		
;  185		/* Open Menu */
;  186		if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_138
;  187			int menuReturn;
;  188			gfx_sprite_t *pauseMenuSprite;
;  189			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  190			gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  191			map_End();
	CALL	_map_End
;  192			pauseMenuSprite = gfx_MallocSprite(112, 96);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,112
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  193			zx7_Decompress(pauseMenuSprite, pausemenu_compressed);
	LD	IY,_PKMNSD4
	LD	(IX+-66),HL
	LD	BC,(IY+21)
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  194			gfx_Sprite(pauseMenuSprite, 195, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,195
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  195	
;  196			menuReturn = menu_Menu();
	CALL	_menu_Menu
	UEXT	HL
	LD	L,A
	LD	(IX+-111),HL
;  197			free(pauseMenuSprite);
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_free
	POP	BC
;  198			map_SetupGfx();
	CALL	_map_SetupGfx
;  199			map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  200			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_11
L_12:
	CALL	_kb_Scan
L_11:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_12
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_12
;  201			return menuReturn;
	LD	HL,(IX+-111)
	JR	L_273
;  202		}
L_138:
;  203		/* If player presses 2nd */
;  204		if ((kb_Data[1] & kb_2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_263
;  205			bool awaitSecond = true;
	LD	(IX+-52),1
;  206			nextTile = GetNextTile(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_nextTile),A
;  207			if (GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_132
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_132
;  208				int partyIndex, moveIndex;
;  209				bool hasUser = false;
	LD	(IX+-44),0
;  210				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-15),BC
	JR	L_24
L_22:
;  211					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-40),BC
	JR	L_21
L_19:
;  212						if (currentSave.party[partyIndex].moves[moveIndex] == 141) {
	LD	HL,(IX+-15)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-78),HL
	LD	IY,(IX+-78)
	LEA	HL,IY+1
	LD	BC,(IX+-40)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,141
	SBC	HL,BC
	JR	NZ,L_20
;  213							hasUser = true;
	LD	(IX+-44),1
;  214							sprintf(str, "%s used Surf", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-78)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__12
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  215							partyIndex = 6;
	LD	BC,6
	LD	(IX+-15),BC
;  216						}
;  217					}
L_20:
	LD	BC,(IX+-40)
	INC	BC
	LD	(IX+-40),BC
L_21:
	LD	BC,4
	LD	HL,(IX+-40)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_19
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  218				}
L_24:
	LD	BC,6
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_22
;  219				if (hasUser) {
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_34
;  220					text_Display(str,true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  221					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_27
;  222						currentSave.playerX += 16;
	LD	IY,(_currentSave+2)
	LEA	BC,IY+16
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  223					}
L_27:
;  224					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_29
;  225						currentSave.playerX -= 16;
	LD	IY,(_currentSave+2)
	LEA	BC,IY+-16
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  226					}
L_29:
;  227					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_31
;  228						currentSave.playerY += 16;
	LD	IY,(_currentSave+4)
	LEA	BC,IY+16
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  229					}
L_31:
;  230					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_32
;  231						currentSave.playerY -= 16;
	LD	IY,(_currentSave+4)
	LEA	BC,IY+-16
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  232					}
L_32:
;  233					currentSave.surfing = true;
	LD	A,1
	LD	(_currentSave+1237),A
;  234					tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  235					ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  236				}
;  237				else {
	JR	L_136
L_34:
;  238					text_Display("A Pokemon with Surf could bring you across this water", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__20
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  239				}
;  240			}
;  241			else if (nextTile == 0x41) {
	JR	L_136
L_132:
	LD	A,(_nextTile)
	CP	A,65
	JR	NZ,L_130
;  242				HealParty();
	CALL	_HealParty
;  243			}
;  244			else if (nextTile == 0x42) {
	JR	L_136
L_130:
	LD	A,(_nextTile)
	CP	A,66
	JR	NZ,L_128
;  245				gfx_sprite_t *shopSpriteOriginal;
;  246				map_End();
	CALL	_map_End
;  247	
;  248				shopSpriteOriginal = gfx_MallocSprite(134, 84);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,84
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-75),HL
;  249				zx7_Decompress(shopSpriteOriginal, shop_compressed);
	LD	BC,_shop_compressed
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  250	
;  251				menu_ItemShop(shopSpriteOriginal);
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_menu_ItemShop
	POP	BC
;  252	
;  253				free(shopSpriteOriginal);
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_free
	POP	BC
;  254				map_SetupGfx();
	CALL	_map_SetupGfx
;  255			}
;  256			else if (nextTile == 0x43) {
	JR	L_136
L_128:
	LD	A,(_nextTile)
	CP	A,67
	JR	NZ,L_126
;  257				OpenBox();
	CALL	_OpenBox
;  258			}
;  259			else if (nextTile == 0x44) {
	JR	L_136
L_126:
	LD	A,(_nextTile)
	CP	A,68
	JR	NZ,L_124
;  260				if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_37
;  261					EnterDoor(15);
	LD	BC,15
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  262				}
;  263				else {
	JR	L_136
L_37:
;  264					EnterDoor(0);
	LD	BC,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  265				}
;  266			}
;  267			else if (nextTile == 0x45) {
	JR	L_136
L_124:
	LD	A,(_nextTile)
	CP	A,69
	JR	NZ,L_122
;  268				if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_45
;  269					uint8_t starter = 2;
	LD	(IX+-19),2
;  270					int tilePos = tx + (moveDir == 1) - (moveDir == 2) + ((ty + (moveDir == 3) - (moveDir == 4)) * tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	A,(_moveDir)
	CP	A,3
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-279	; spill
	CALL	__istix
	POP	HL
	POP	BC
	JR	NZ,L__29
	LD	B,1
	JR	L__30
L__29:
	LD	B,0
L__30:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__32
	LD	B,1
	JR	L__33
L__32:
	LD	B,0
L__33:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),HL
	POP	IY
	LD	BC,-279	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-276	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__35
	LD	B,1
	JR	L__36
L__35:
	LD	B,0
L__36:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-270	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__38
	LD	B,1
	JR	L__39
L__38:
	LD	B,0
L__39:
;  271	
;  272					sprintf(str, "Choose Squirtle as your starter?");
	LD	DE,_str
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-267	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-270	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-267	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	OR	A,A
	SBC	HL,BC
	LD	BC,-276	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	(IX+-72),HL
	LD	BC,L__40
	PUSH	BC
	PUSH	DE
	CALL	_sprintf
	POP	BC
	POP	BC
;  273					if (currentTypeMap[tilePos + 1] == 0x45) {
	LD	HL,(IX+-72)
	INC	HL
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_40
;  274						starter = 0;
	LD	(IX+-19),0
;  275						sprintf(str, "Choose Bulbasaur as your starter?");
	LD	BC,L__42
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  276						if (currentTypeMap[tilePos - 1] == 0x45) {
	LD	HL,(IX+-72)
	DEC	HL
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_40
;  277							starter = 1;
	LD	(IX+-19),1
;  278							sprintf(str, "Choose Charmander as your starter?");
	LD	BC,L__44
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  279						}
;  280					}
L_40:
;  281	
;  282					
;  283					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  284					if (text_AskQuestion2("Yes", "No", false) == 1) {
	LD	BC,0
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	LD	BC,L__46
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_43
;  285						currentSave.party[0] = stats_NewCharacter((1 + (starter) * 3), 5);
	LD	B,3
	LD	DE,5
	PUSH	DE
	LD	C,(IX+-19)
	MLT	BC
	INC	C
	LD	B,0
	PUSH	BC
	LD	HL,IX
	LD	BC,-168
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_currentSave+10
	LD	BC,34
	LDIR	
;  286						currentTileMap[tilePos]-=3;
	LD	BC,(IX+-72)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-6),HL
	LD	HL,(IY+-6)
	LD	IY,(IY+-6)
	LD	A,(HL)
	SUB	A,3
	LD	(IY),A
;  287						currentSave.newGame = false;
	XOR	A,A
	LD	(_currentSave),A
;  288						currentSave.worldState++;
	LD	BC,(_currentSave+4140)
	INC	BC
	LD	HL,_currentSave+4140
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  289						currentSave.rivalPokemon = (starter + 1) % 3;
	LD	A,(IX+-19)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,3
	CALL	__irems
	LD	A,L
	LD	(_currentSave+1),A
;  290					}
L_43:
;  291					map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  292				}
;  293				else {
	JR	L_136
L_45:
;  294					text_Display("You already chose a Pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  295				}
;  296			}
;  297			else if (nextTile == 0x46) {
	JR	L_136
L_122:
	LD	A,(_nextTile)
	CP	A,70
	JR	NZ,L_120
;  298				int partyIndex, moveIndex;
;  299				bool hasUser = false;
	LD	(IX+-53),0
;  300				int oldTile;
;  301				int tempTile;
;  302				int newTile = 0;
	LD	BC,0
	LD	(IX+-9),BC
;  303				oldTile = tx + ty * OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	(IX+-28),HL
	LD	(IX+-93),HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-28)
	ADD	HL,BC
	LD	(IX+-12),HL
;  304				if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_48
;  305					oldTile = (tx + 1) + (ty)* OUTDOORWIDTH;
	LD	BC,(IX+-28)
	LD	(IX+-93),BC
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,(IX+-28)
	ADD	HL,BC
	LD	(IX+-12),HL
;  306					newTile = (tx + 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	LD	BC,(IX+-28)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	ADD	HL,BC
	LD	(IX+-9),HL
;  307				}
L_48:
;  308				if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_50
;  309					oldTile = (tx - 1) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	BC,(IX+-93)
	LD	L,A
	DEC	HL
	LD	DE,BC
	ADD	HL,DE
	LD	(IX+-12),HL
;  310					newTile = (tx - 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	ADD	HL,BC
	LD	(IX+-9),HL
;  311				}
L_50:
;  312				if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_52
;  313					oldTile = (tx)+(ty + 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
;  314					newTile = (tx)+(ty + 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-9),HL
;  315				}
L_52:
;  316				if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_62
;  317					oldTile = (tx)+(ty - 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
;  318					newTile = (tx)+(ty - 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-9),HL
;  319				}
L_62:
;  320				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-34),BC
	JR	L_61
L_59:
;  321					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-37),BC
	JR	L_58
L_56:
;  322						if (currentSave.party[partyIndex].moves[moveIndex] == 133) {
	LD	HL,(IX+-34)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-59),HL
	LD	IY,(IX+-59)
	LEA	HL,IY+1
	LD	BC,(IX+-37)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,133
	SBC	HL,BC
	JR	NZ,L_57
;  323							hasUser = true;
	LD	(IX+-53),1
;  324							sprintf(str, "%s used Strength", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-59)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__55
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  325							partyIndex = 6;
	LD	BC,6
	LD	(IX+-34),BC
;  326						}
;  327					}
L_57:
	LD	BC,(IX+-37)
	INC	BC
	LD	(IX+-37),BC
L_58:
	LD	BC,4
	LD	HL,(IX+-37)
	OR	A,A
	SBC	HL,BC
	JP	M,L_56
	LD	BC,(IX+-34)
	INC	BC
	LD	(IX+-34),BC
;  328				}
L_61:
	LD	BC,6
	LD	HL,(IX+-34)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_59
;  329				if (hasUser && currentTypeMap[newTile] == 0) {
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_66
	LD	BC,(IX+-9)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IX+-48),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_66
;  330					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  331					tempTile = currentTileMap[oldTile];
	LD	BC,(IX+-12)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-49),HL
	LD	HL,(IY+-49)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-81),HL
;  332					currentTileMap[oldTile] = currentTileMap[newTile];
	LD	BC,(IX+-9)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LD	(IY+-46),HL
	LD	HL,(IY+-46)
	LD	IY,(IY+-49)
	LD	A,(HL)
	LD	(IY),A
;  333					currentTileMap[newTile] = tempTile;
	LD	A,(IX+-81)
	LEA	IY,IX+-128
	LD	HL,(IY+-46)
	LD	(HL),A
;  334					tempTile = currentTypeMap[oldTile];
	LD	BC,(IX+-12)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IY+-43),HL
	LD	HL,(IY+-43)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-81),HL
;  335					currentTypeMap[oldTile] = currentTypeMap[newTile];
	LD	HL,(IX+-48)
	LD	IY,(IY+-43)
	LD	A,(HL)
	LD	(IY),A
;  336					currentTypeMap[newTile] = tempTile;
	LD	A,(IX+-81)
	LD	HL,(IX+-48)
	LD	(HL),A
;  337				}
;  338				else if (currentTypeMap[newTile] == 0) {
	JR	L_136
L_66:
	LD	BC,_currentTypeMap
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_136
;  339					text_Display("This boulder could be moved by a strong Pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__61
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  340				}
;  341			}
;  342			else if (nextTile == 0x47) {
	JR	L_136
L_120:
	LD	A,(_nextTile)
	CP	A,71
	JR	NZ,L_118
;  343				int partyIndex, moveIndex;
;  344				bool hasUser = false;
	LD	(IX+-45),0
;  345				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-18),BC
	JR	L_76
L_74:
;  346					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-43),BC
	JR	L_73
L_71:
;  347						if (currentSave.party[partyIndex].moves[moveIndex] == 26) {
	LD	HL,(IX+-18)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-63),HL
	LD	IY,(IX+-63)
	LEA	HL,IY+1
	LD	BC,(IX+-43)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JR	NZ,L_72
;  348							hasUser = true;
	LD	(IX+-45),1
;  349							sprintf(str, "%s used Cut", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-63)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  350							partyIndex = 6;
	LD	BC,6
	LD	(IX+-18),BC
;  351						}
;  352					}
L_72:
	LD	BC,(IX+-43)
	INC	BC
	LD	(IX+-43),BC
L_73:
	LD	BC,4
	LD	HL,(IX+-43)
	OR	A,A
	SBC	HL,BC
	JP	M,L_71
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  353				}
L_76:
	LD	BC,6
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_74
;  354				if (hasUser) {
	LD	A,(IX+-45)
	OR	A,A
	JR	Z,L_85
;  355					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  356					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_79
;  357						currentTypeMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  358						currentTileMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  359					}
L_79:
;  360					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_81
;  361						currentTypeMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  362						currentTileMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  363					}
L_81:
;  364					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_83
;  365						currentTypeMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  366						currentTileMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  367					}
L_83:
;  368					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_136
;  369						currentTypeMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  370						currentTileMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  371					}
;  372				}
;  373				else {
	JR	L_136
L_85:
;  374					text_Display("This tree could be cut down", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  375				}
;  376			}
;  377			
;  378			else if (nextTile >= 0x50 && nextTile < 0x60) {
	JR	L_136
L_118:
	LD	A,(_nextTile)
	CP	A,80
	JR	C,L_116
	LD	A,(_nextTile)
	CP	A,96
	JR	NC,L_116
;  379				EnterDoor(nextTile - 80);
	LD	A,(_nextTile)
	SUB	A,80
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  380			}
;  381			else if (nextTile >= 0x60 && nextTile < 0x70) {
	JR	L_136
L_116:
	LD	A,(_nextTile)
	CP	A,96
	JR	C,L_114
	LD	A,(_nextTile)
	CP	A,112
	JR	NC,L_114
;  382				if (FightTrainer(nextTile - 96)) {
	LD	A,(_nextTile)
	SUB	A,96
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_136
;  383					return 1;
	LD	HL,1
	JR	L_273
;  384				}
;  385			}
;  386			else if (nextTile >= 0x70 && nextTile < 0x80) {
L_114:
	LD	A,(_nextTile)
	CP	A,112
	JR	C,L_112
	LD	A,(_nextTile)
	CP	A,128
	JR	NC,L_112
;  387				ReadText(nextTile - 0x70);
	LD	A,(_nextTile)
	SUB	A,112
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ReadText
	POP	BC
;  388			}
;  389			else if (nextTile >= 0x80 && nextTile < 0x90) {
	JR	L_136
L_112:
	LD	A,(_nextTile)
	CP	A,128
	JR	C,L_110
	LD	A,(_nextTile)
	CP	A,144
	JR	NC,L_110
;  390				if (!currentSave.takenGroundGifts[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][nextTile - 0x80]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_93
	LD	BC,1
	LD	(IX+-96),BC
	JR	L_94
L_93:
	LD	BC,0
	LD	(IX+-96),BC
L_94:
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	IY,IY+-128
	LD	(IX+-51),IY
	LD	BC,_currentSave+2452
	LD	(IX+-108),BC
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,8
	CALL	__ishl_b
	LD	BC,(IX+-108)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-96)
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-261	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-264	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),HL
	POP	IY
	LD	BC,-264	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	CALL	__imuls
	LD	BC,-261	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-51)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_136
;  391					char str1[20];
;  392					currentSave.takenGroundGifts[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][nextTile - 0x80] = true;
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_97
	LD	BC,1
	LD	(IX+-99),BC
	JR	L_98
L_97:
	LD	BC,0
	LD	(IX+-99),BC
L_98:
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,8
	CALL	__ishl_b
	LD	BC,(IX+-108)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-99)
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-127),HL
	POP	IY
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-258	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),HL
	POP	IY
	LD	BC,-258	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-127)
	POP	IY
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-51)
	ADD	HL,BC
	LD	(HL),1
;  393					currentSave.playerItems[currentZoneData.grounditems[nextTile - 0x80] - 1]++;
	LD	BC,_currentSave+1243
	LEA	IY,IX+-128
	LD	(IY+-58),BC
	LD	BC,_currentZoneData+704
	LD	(IX+-69),BC
	LD	BC,(IX+-51)
	LD	HL,(IX+-69)
	ADD	HL,BC
	LD	(IY+-55),HL
	LD	HL,(IY+-55)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,IX
	LD	IY,-186
	ADD	IY,BC
	LD	BC,HL
	LD	DE,BC
	LD	HL,(IY)
	ADD	HL,DE
	LEA	IY,IX+-128
	LD	(IY+-52),HL
	LD	HL,(IY+-52)
	LD	DE,IX
	LD	A,(HL)
	LD	HL,-186
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	INC	A
	LD	(HL),A
;  394					items_IndexToName(str1, currentZoneData.grounditems[nextTile - 0x80] - 1);
	LD	HL,(IY+-55)
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	HL,IX
	LD	BC,-131
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  395					if (currentZoneData.grounditems[nextTile - 0x80] - 1 >= 20) {
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-128
	LD	HL,(IX+-69)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_102
;  396						sprintf(str, "Found the TM for %s", str1);
	LD	HL,IX
	LD	BC,-131
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__86
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  397					}
;  398					else {
	JR	L_103
L_102:
;  399						sprintf(str, "Found a %s", str1);
	LD	HL,IX
	LD	BC,-131
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__87
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  400					}
L_103:
;  401					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_text_Display
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  402					currentTileMap[ShiftTile(tx + tilemap.width*ty, moveDir, 1)] = 0;
	LD	A,(_moveDir)
	LD	C,A
	LD	A,(_tilemap+13)
	LD	DE,1
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	DE,BC
	LD	A,(_ty)
	LD	C,A
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tx)
	LD	C,A
	LD	B,0
	ADD.SIS	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_ShiftTile
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  403					currentTypeMap[ShiftTile(tx + tilemap.width*ty, moveDir, 1)] = 0;
	LD	A,(_moveDir)
	LD	C,A
	LD	A,(_tilemap+13)
	LD	DE,1
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	DE,BC
	LD	A,(_ty)
	LD	C,A
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tx)
	LD	C,A
	LD	B,0
	ADD.SIS	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_ShiftTile
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	(HL),0
;  404					currentSave.foundItemsPos[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][nextTile - 0x80] = ShiftTile(tx + tilemap.width*ty, moveDir, 1);
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_105
	LD	BC,1
	LD	(IX+-102),BC
	JR	L_106
L_105:
	LD	BC,0
	LD	(IX+-102),BC
L_106:
	LD	A,(_moveDir)
	LD	C,A
	LD	A,(_tilemap+13)
	LD	DE,1
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	DE,BC
	LD	A,(_ty)
	LD	C,A
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tx)
	LD	C,A
	LD	B,0
	ADD.SIS	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-282
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_ShiftTile
	PUSH	BC
	LD	BC,-282
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	DE,HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__ishl_b
	LD	BC,_currentSave+2964
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-118),HL
	POP	IY
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-102)
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-121),HL
	POP	IY
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-124),HL
	POP	IY
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),HL
	LD	BC,(IY+-124)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	CALL	__imuls
	LD	A,(_nextTile)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),DE
	LD	BC,(IY+-121)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),BC
	LD	BC,(IY+-118)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-128
	ADD	HL,HL
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  405				}
;  406			}
;  407			else {
	JR	L_136
L_110:
;  408				awaitSecond = false;
	LD	(IX+-52),0
;  409			}
L_136:
;  410			if (awaitSecond) {
	LD	A,(IX+-52)
	OR	A,A
	JR	NZ,L_133
	JR	L_263
;  411				while ((kb_Data[1] & kb_2nd))
L_134:
;  412				{
;  413					kb_Scan();
	CALL	_kb_Scan
;  414				}
L_133:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_134
;  415			}
;  416		}
L_263:
;  417		/* If moving */
;  418		if (moveState > 0) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_262
;  419			moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  420			if (jumpState) {
	LD	A,(_jumpState)
	OR	A,A
	JR	Z,L_147
;  421				jumpState--;
	LD	A,(_jumpState)
	DEC	A
	LD	(_jumpState),A
;  422			}
L_147:
;  423			if (running) {
	LD	A,(_running)
	OR	A,A
	JR	Z,L_149
;  424				moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  425				if (jumpState) {
	LD	A,(_jumpState)
	OR	A,A
	JR	Z,L_145
;  426					jumpState--;
	LD	A,(_jumpState)
	DEC	A
	LD	(_jumpState),A
;  427				}
L_145:
;  428				Wait(1);
	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;  429			}
L_149:
;  430			if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_151
;  431				currentSave.playerX += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  432			}
L_151:
;  433			if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_153
;  434				currentSave.playerX -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  435			}
L_153:
;  436			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_155
;  437				currentSave.playerY += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  438			}
L_155:
;  439			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_167
;  440				currentSave.playerY -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  441			}
L_167:
;  442			if (currentSave.surfing) {
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	Z,L_166
;  443				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_157
;  444					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  445				}
;  446				else {
	JR	L_221
L_157:
;  447					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  448				}
;  449			}
;  450			else if (running){
	JR	L_221
L_166:
	LD	A,(_running)
	OR	A,A
	JR	Z,L_164
;  451				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_159
;  452					playerState = 1 + currentStep;
	LD	A,(_currentStep)
	INC	A
	LD	(_playerState),A
;  453				}
;  454				else {
	JR	L_221
L_159:
;  455					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  456				}
;  457			}
;  458			else {
	JR	L_221
L_164:
;  459				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_162
;  460					playerState = 1 + currentStep;
	LD	A,(_currentStep)
	INC	A
	LD	(_playerState),A
;  461				}
;  462				else if (moveState >= 0) {
	JR	L_221
L_162:
	LD	A,(_moveState)
	OR	A,A
	JR	C,L_221
;  463					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  464				}
;  465			}
L_221:
;  466	
;  467			if (moveState == 0) {
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_264
;  468				if (currentStep) {
	LD	A,(_currentStep)
	OR	A,A
	JR	Z,L_177
;  469					currentRun = !currentRun;
	LD	A,(_currentRun)
	OR	A,A
	JR	NZ,L_169
	LD	BC,1
	LD	(IX+-105),BC
	JR	L_170
L_169:
	LD	BC,0
	LD	(IX+-105),BC
L_170:
	LD	A,(IX+-105)
	LD	(_currentRun),A
;  470				}
L_177:
;  471				currentStep = !currentStep;
	LD	A,(_currentStep)
	OR	A,A
	JR	NZ,L_174
	LD	BC,1
	LD	(IX+-87),BC
	JR	L_175
L_174:
	LD	BC,0
	LD	(IX+-87),BC
L_175:
	LD	A,(IX+-87)
	LD	(_currentStep),A
;  472				playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  473				/* Arrive At Tile*/
;  474				tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  475				ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  476				nextTile = GetTypeMapData(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
;  477				if (nextTile >= 0x10 && nextTile < 0x20) {
	CP	A,16
	LD	(_nextTile),A
	JR	C,L_219
	LD	A,(_nextTile)
	CP	A,32
	JR	NC,L_219
;  478					/* Grass */
;  479					if ((rand() % 100) < battlechance) {
	CALL	_rand
	LD	BC,100
	CALL	__irems
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JP	P,L_264
;  480						uint8_t wildSpawn;
;  481						map_Draw();
	CALL	_map_Draw
;  482						gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  483						wildSpawn = rand() % 5;
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	(IX+-60),L
;  484						battle_SpawnWild(currentZoneData.spawnids[wildSpawn][nextTile -16], currentZoneData.spawnminlevels[wildSpawn][nextTile - 16], currentZoneData.spawnmaxlevels[wildSpawn][nextTile - 16]);
	LD	A,(IX+-60)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LD	HL,DE
	LD	BC,_currentZoneData+160
	ADD	HL,BC
	LEA	BC,IY+-16
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-73),BC
	LD	BC,(IY+-73)
	POP	IY
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-109),BC
	POP	IY
	LD	BC,_currentZoneData+80
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-112),BC	; unspill
	LD	BC,(IY+-109)
	LD	(IY+-109),BC
	LD	BC,(IY+-112)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-109)
	LD	(IY+-70),BC
	LD	BC,(IY+-73)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	LD	(IY+-70),BC
	POP	IY
	LD	BC,_currentZoneData
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-115),BC	; unspill
	LD	BC,(IY+-70)
	POP	IY
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),BC
	LD	BC,(IY+-115)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	LD	(IY+-70),BC
	LD	BC,(IY+-73)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	PUSH	BC
	CALL	_battle_SpawnWild
	POP	BC
	POP	BC
	POP	BC
;  485						return 1;
	LD	HL,1
	JR	L_273
;  486					}
;  487				}
;  488				else if (nextTile != 0) {
L_219:
	LD	A,(_nextTile)
	OR	A,A
	JR	Z,L_264
;  489					running = false;
	XOR	A,A
	LD	(_running),A
;  490					map_Draw();
	CALL	_map_Draw
;  491					gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  492					if (nextTile == 0x01) {
	LD	A,(_nextTile)
	CP	A,1
	JR	NZ,L_216
;  493						ExitBuilding();
	CALL	_ExitBuilding
;  494					}
;  495					else if (nextTile == 0x02) {
	JR	L_264
L_216:
	LD	A,(_nextTile)
	CP	A,2
	JR	NZ,L_214
;  496						if (((currentSave.indoors && !currentSave.defeatedTrainersIndoors[currentSave.currentZone][15]) || (!currentSave.indoors && !currentSave.defeatedTrainers[currentSave.currentZone][15])) && currentZoneData.trainerdir[15] != 0) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_182
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_183
L_182:
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_264
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_264
L_183:
	LD	BC,_currentZoneData+576
	LD	(IX+-3),BC
	LD	(IX+-90),BC
	LD	IY,(IX+-3)
	LEA	IY,IY+15
	LD	(IX+-31),IY
	LD	HL,(IX+-31)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_264
;  497							if (currentZoneData.trainerx[15] == 255) {
	LD	IY,_currentZoneData+544
	LEA	HL,IY+15
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_199
;  498								int walkState, xloc, yloc;
;  499	
;  500								if (currentZoneData.trainerdir[15] <= 2) {
	LD	HL,(IX+-31)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	JP	M,L_189
;  501									if (currentZoneData.trainerdir[15] == 1) {
	LD	HL,(IX+-31)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_185
;  502										xloc = -8;
	LD	BC,16777208
	LD	(IX+-22),BC
;  503										yloc = currentSave.playerY - screenY + 3;
	LD	BC,(_currentSave+4)
	LD	DE,(_screenY)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	BC,IY+3
	LD	(IX+-25),BC
;  504										walkState = currentSave.playerX - screenX - 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	IY,HL
	LEA	IY,IY+-16
	LD	(IX+-6),IY
;  505									}
;  506									else {
	JR	L_191
L_185:
;  507										xloc = 312;
	LD	BC,312
	LD	(IX+-22),BC
;  508										yloc = currentSave.playerY - screenY + 3;
	LD	BC,(_currentSave+4)
	LD	DE,(_screenY)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	BC,IY+3
	LD	(IX+-25),BC
;  509										walkState = 320 - (currentSave.playerX - screenX + 16);
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+16
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	(IX+-6),HL
;  510									}
;  511									
;  512								}
;  513								else {
	JR	L_191
L_189:
;  514									if (currentZoneData.trainerdir[15] == 3) {
	LD	HL,(IX+-31)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_187
;  515										xloc = currentSave.playerX - screenX - 8;
	LD	BC,(_currentSave+2)
	LD	DE,(_screenX)
;  516										yloc = 3;
	LD	HL,3
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-106),HL
	POP	IY
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	BC,IY+-8
	LD	(IX+-22),BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-106)
	POP	IY
	LD	(IX+-25),HL
;  517										walkState = currentSave.playerY - screenY - 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	LD	IY,HL
	LEA	IY,IY+-16
	LD	(IX+-6),IY
;  518									}
;  519									else {
	JR	L_191
L_187:
;  520										xloc = currentSave.playerX - screenX - 8;
	LD	BC,(_currentSave+2)
	LD	DE,(_screenX)
;  521										yloc = 243;
	LD	HL,243
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-103),HL
	POP	IY
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	LD	IY,HL
	LEA	BC,IY+-8
	LD	(IX+-22),BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-103)
	POP	IY
	LD	(IX+-25),HL
;  522										walkState = 240-(currentSave.playerY - screenY + 16);
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+16
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	LD	(IX+-6),HL
;  523									}
;  524									
;  525								}
;  526								while (walkState > 0)
	JR	L_191
L_192:
;  527								{
;  528									map_Draw();
	CALL	_map_Draw
;  529									xloc += ((currentZoneData.trainerdir[15] == 1) - (currentZoneData.trainerdir[15] == 2));
	LD	BC,(IX+-3)
	LD	(IX+-90),BC
	LD	IY,(IX+-3)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-61),BC
	LD	HL,(IY+-61)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__125
	LD	B,1
	JR	L__126
L__125:
	LD	B,0
L__126:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-61)
	LD	L,B
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__128
	LD	B,1
	JR	L__129
L__128:
	LD	B,0
L__129:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-22)
	ADD	HL,BC
	LD	(IX+-22),HL
;  530									yloc += ((currentZoneData.trainerdir[15] == 3) - (currentZoneData.trainerdir[15] == 4));
	LEA	IY,IX+-128
	LD	HL,(IY+-61)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__131
	LD	B,1
	JR	L__132
L__131:
	LD	B,0
L__132:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-61)
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-97),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__134
	LD	B,1
	JR	L__135
L__134:
	LD	B,0
L__135:
;  531	
;  532									gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[(currentZoneData.trainerskin[15] * 12) + ((currentZoneData.trainerdir[15] - 1) * 3) + ((walkState % 16) / 4 == 1) + 2 * ((walkState % 16) / 4 == 3)], xloc, yloc);
	LD	DE,1
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-94),HL
	LD	BC,(IY+-97)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-94)
	POP	IY
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-25)
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	HL,(IX+-6)
	LD	BC,(IX+-25)
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	LD	BC,16
	CALL	__irems
	LD	BC,4
	CALL	__idivs
	LD	BC,HL
	LD	HL,_currentZoneData+607
	LD	IY,(IX+-3)
	LEA	IY,IY+15
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-76),BC
	LD	(IY+-79),HL	; unspill
	LD	BC,(IY+-76)
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	DEC	HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),BC
	LD	(IY+-85),HL	; unspill
	LD	BC,(IY+-82)
	POP	IY
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),BC
	LD	BC,(IY+-85)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-82)
	LD	(IY+-76),BC
	LD	BC,(IY+-79)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-76)
	LD	(IY+-88),BC
	LD	(IY+-91),HL	; unspill
	LD	BC,(IY+-88)
	POP	IY
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L__137
	LD	D,1
	JR	L__138
L__137:
	LD	D,0
L__138:
	LD	A,D
	SEXT	HL
	LD	L,D
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-88),BC
	LD	BC,(IY+-91)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-88)
	POP	IY
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__140
	LD	B,1
	JR	L__141
L__140:
	LD	B,0
L__141:
	LD	A,B
	SEXT	HL
	LD	L,B
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  533	
;  534									gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  535	
;  536									walkState--;
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  537								}
L_191:
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_192
;  538								if (currentZoneData.trainerdir[15] == 3) {
	LD	BC,(IX+-90)
	LD	(IX+-56),BC
	LD	IY,(IX+-56)
	LEA	HL,IY+15
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_196
;  539									DrawPlayer();
	CALL	_DrawPlayer
;  540								}
L_196:
;  541								currentZoneData.trainerx[15] = tx + ((0 - currentZoneData.trainerdir[15] == 1) + (currentZoneData.trainerdir[15] == 2));
	LD	IY,(IX+-56)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-67),BC
	LD	HL,(IY+-67)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__ineg
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__145
	LD	B,1
	JR	L__146
L__145:
	LD	B,0
L__146:
	LEA	IY,IX+-128
	LD	HL,(IY+-67)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,2
	SBC	HL,DE
	JR	NZ,L__148
	LD	C,1
	JR	L__149
L__148:
	LD	C,0
L__149:
	LD	A,B
	ADD	A,C
	LD	BC,(_tx)
	ADD	A,C
	LD	HL,_currentZoneData+559
	LD	(HL),A
;  542								currentZoneData.trainery[15] = ty + ((0 - currentZoneData.trainerdir[15] == 3) + (currentZoneData.trainerdir[15] == 4));
	LD	IY,(IX+-56)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-64),BC
	LD	HL,(IY+-64)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__ineg
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__151
	LD	D,1
	JR	L__152
L__151:
	LD	D,0
L__152:
	LEA	IY,IX+-128
	LD	HL,(IY+-64)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__154
	LD	E,1
	JR	L__155
L__154:
	LD	E,0
L__155:
	LD	BC,(_ty)
	LD	A,D
	ADD	A,E
	ADD	A,C
	LD	HL,_currentZoneData+575
	LD	(HL),A
;  543							}
L_199:
;  544							if (FightTrainer(15)) {
	LD	BC,15
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_264
;  545								currentZoneData.trainerx[15] = 255;
	LD	HL,_currentZoneData+559
	LD	A,255
	LD	(HL),A
;  546								currentZoneData.trainery[15] = 255;
	LD	HL,_currentZoneData+575
	LD	(HL),A
;  547								return 1;
	LD	HL,1
	JR	L_273
;  548							}
;  549						}
;  550					}
;  551					else if (currentSave.surfing && !(nextTile >= 0x1A && nextTile < 0x20)) {
L_214:
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	Z,L_212
	LD	A,(_nextTile)
	CP	A,26
	JR	C,L_211
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_212
L_211:
;  552						currentSave.surfing = false;
	XOR	A,A
	LD	(_currentSave+1237),A
;  553					}
;  554					else if (nextTile >= 0x20 && nextTile < 0x30) {
	JR	L_264
L_212:
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_210
	LD	A,(_nextTile)
	CP	A,48
	JR	NC,L_210
;  555						ExitZone(nextTile - 32);
	LD	A,(_nextTile)
	SUB	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ExitZone
	POP	BC
;  556					}
;  557					else if (nextTile >= 0x30 && nextTile < 0x40) {
	JR	L_264
L_210:
	LD	A,(_nextTile)
	CP	A,48
	JR	C,L_208
	LD	A,(_nextTile)
	CP	A,64
	JR	NC,L_208
;  558						if (FightTrainer(nextTile - 48)) {
	LD	A,(_nextTile)
	SUB	A,48
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_264
;  559							return 1;
	LD	HL,1
	JR	L_273
;  560						}
;  561					}
;  562					else if (nextTile == 0x48) {
L_208:
	LD	A,(_nextTile)
	CP	A,72
	JR	NZ,L_264
;  563						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  564					}
;  565				}
;  566			}
;  567		}
;  568	
;  569		/* If not moving */
;  570		else {
	JR	L_264
L_262:
;  571			if (kb_Data[6] & kb_Add) {
	LD	A,(16056348)
	AND	A,2
	JR	Z,L_234
;  572				if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_225
;  573					currentSave.currentBuilding++;
	LD	A,(_currentSave+1238)
	INC	A
	LD	(_currentSave+1238),A
;  574				}
;  575				else {
	JR	L_226
L_225:
;  576					currentSave.currentZone++;
	LD	BC,(_currentSave+1234)
	INC	BC
	LD	HL,_currentSave+1234
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  577				}
L_226:
;  578				LoadTileset(true);
	LD	BC,1
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  579				LoadMap();
	CALL	_LoadMap
;  580			}
L_234:
;  581			if (kb_Data[6] & kb_Sub) {
	LD	A,(16056348)
	AND	A,4
	JR	Z,L_242
;  582				if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_231
;  583					currentSave.currentBuilding--;
	LD	A,(_currentSave+1238)
	DEC	A
	LD	(_currentSave+1238),A
;  584				}
;  585				else {
	JR	L_232
L_231:
;  586					currentSave.currentZone--;
	LD	IY,(_currentSave+1234)
	LEA	BC,IY+-1
	LD	HL,_currentSave+1234
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  587				}
L_232:
;  588				LoadTileset(true);
	LD	BC,1
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  589				LoadMap();
	CALL	_LoadMap
;  590			}
L_242:
;  591			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_241
;  592				moveDir = 1;
	LD	A,1
	LD	(_moveDir),A
;  593			}
;  594			else if (kb_Data[7] & kb_Left) {
	JR	L_253
L_241:
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_239
;  595				moveDir = 2;
	LD	A,2
	LD	(_moveDir),A
;  596			}
;  597			else if (kb_Data[7] & kb_Down) {
	JR	L_253
L_239:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_237
;  598				moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  599	
;  600			}
;  601			else if (kb_Data[7] & kb_Up) {
	JR	L_253
L_237:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_253
;  602				moveDir = 4;
	LD	A,4
	LD	(_moveDir),A
;  603			}
L_253:
;  604			
;  605			if (kb_Data[7]) {
	LD	A,(16056350)
	OR	A,A
	JR	Z,L_260
;  606				if (kb_Data[6] & kb_Mul) {
	LD	A,(16056348)
	AND	A,8
	JR	Z,L_251
;  607					currentSave.playerX += 16 * (moveDir == 1);
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__177
	LD	A,1
	JR	L__178
L__177:
	XOR	A,A
L__178:
	LD	B,A
	SEXT	HL
	LD	L,B
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  608					currentSave.playerX -= 16 * (moveDir == 2);
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__180
	LD	A,1
	JR	L__181
L__180:
	XOR	A,A
L__181:
	LD	B,A
	SEXT	HL
	LD	L,B
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  609					currentSave.playerY += 16 * (moveDir == 3);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__183
	LD	A,1
	JR	L__184
L__183:
	XOR	A,A
L__184:
	LD	B,A
	SEXT	HL
	LD	L,B
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  610					currentSave.playerY -= 16 * (moveDir == 4);
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__186
	LD	A,1
	JR	L__187
L__186:
	XOR	A,A
L__187:
	LD	B,A
	SEXT	HL
	LD	L,B
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  611					tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  612					ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  613				}
;  614				else {
	JR	L_260
L_251:
;  615					if (GetNextTile(tx, ty, tilemap.width) < 64 && !(!currentSave.surfing && GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) < 0x20)) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_249
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	NZ,L_248
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_248
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_249
L_248:
;  616						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  617					}
;  618					else if (GetNextTile(tx, ty, tilemap.width) == 0x48 && moveDir == 3) {
	JR	L_260
L_249:
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,72
	SBC	HL,BC
	JR	NZ,L_260
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_260
;  619						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  620						jumpState = 16;
	LD	A,16
	LD	(_jumpState),A
;  621					}
;  622				}
;  623			}
L_260:
;  624			running = ((kb_Data[2] & kb_Alpha) && moveState > 0 && !currentSave.surfing);
	LD	A,(16056340)
	AND	A,128
	JR	Z,L_257
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_257
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	NZ,L_257
	LD	BC,1
	LD	(IX+-84),BC
	JR	L_258
L_257:
	LD	BC,0
	LD	(IX+-84),BC
L_258:
	LD	A,(IX+-84)
	LD	(_running),A
;  625		}
L_264:
;  626	
;  627		map_Draw();
	CALL	_map_Draw
;  628		playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  629		if (showExclamationPoint == 1) {
	LD	A,(_showExclamationPoint)
	CP	A,1
	JR	NZ,L_266
;  630			gfx_TransparentSprite(exclamationpoint, exclamationX, exclamationY);
	LD	BC,(_exclamationY)
	PUSH	BC
	LD	BC,(_exclamationX)
	PUSH	BC
	LD	BC,_exclamationpoint_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  631		}
L_266:
;  632	
;  633		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  634	
;  635		if (showExclamationPoint == 1) {
	LD	A,(_showExclamationPoint)
	CP	A,1
	JR	NZ,L_271
;  636			showExclamationPoint = 0;
;  637			Wait(20);
	LD	BC,20
	PUSH	BC
	XOR	A,A
	LD	(_showExclamationPoint),A
	CALL	_Wait
	POP	BC
;  638		}
L_271:
;  639	
;  640		if (npcToFight != 16) {
	LD	BC,16
	LD	HL,(_npcToFight)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_272
;  641			if (FightTrainer(npcToFight)) {
	LD	A,(_npcToFight)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_269
;  642				npcToFight = 16;
	LD	BC,16
	LD	(_npcToFight),BC
;  643				return 1;
	LD	HL,1
	JR	L_273
;  644			}
L_269:
;  645			npcToFight = 16;
	LD	BC,16
	LD	(_npcToFight),BC
;  646		}
L_272:
	OR	A,A
;  647	
;  648		return 0;
	SBC	HL,HL
;  649	}
L_273:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Loop ***************************
;Name                         Addr/Register   Size   Type
;_npcToFight                         STATIC      3   variable
;_exclamationpoint_data              IMPORT    122   variable
;_exclamationX                       STATIC      3   variable
;_exclamationY                       STATIC      3   variable
;_showExclamationPoint               STATIC      1   variable
;_LoadMap                            IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;_ExitZone                           IMPORT  -----   function
;_DrawPlayer                         IMPORT  -----   function
;_PKMNSD7                            IMPORT    360   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_screenX                            STATIC      4   variable
;_screenY                            STATIC      4   variable
;_ExitBuilding                       IMPORT  -----   function
;_battle_SpawnWild                   IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_GetTypeMapData                     IMPORT  -----   function
;_currentRun                         STATIC      1   variable
;_currentStep                        STATIC      1   variable
;_playerState                        STATIC      1   variable
;_running                            STATIC      1   variable
;_jumpState                          STATIC      1   variable
;_moveState                          STATIC      1   variable
;_ShiftTile                          IMPORT  -----   function
;_items_IndexToName                  IMPORT  -----   function
;_currentZoneData                    STATIC    720   variable
;_ReadText                           IMPORT  -----   function
;_FightTrainer                       IMPORT  -----   function
;_currentTileMap                     STATIC   1920   variable
;_stats_NewCharacter                 IMPORT  -----   function
;_text_AskQuestion2                  IMPORT  -----   function
;_currentTypeMap                     STATIC   1920   variable
;_EnterDoor                          IMPORT  -----   function
;_OpenBox                            IMPORT  -----   function
;_menu_ItemShop                      IMPORT  -----   function
;_shop_compressed                    IMPORT     98   variable
;_HealParty                          IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_currentSave                        IMPORT   4142   variable
;_nextTile                           STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_GetNextTile                        IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_free                               IMPORT  -----   function
;_menu_Menu                          IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_PKMNSD4                            IMPORT     30   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;str1                                IX-131     20   variable
;menuReturn                          IX-111      3   variable
;G_10                                IX-108      3   variable
;temp171                             IX-105      3   variable
;temp107                             IX-102      3   variable
;temp99                               IX-99      3   variable
;temp95                               IX-96      3   variable
;G_3                                  IX-93      3   variable
;G_19                                 IX-90      3   variable
;temp176                              IX-87      3   variable
;temp259                              IX-84      3   variable
;tempTile                             IX-81      3   variable
;G_0                                  IX-78      3   variable
;shopSpriteOriginal                   IX-75      3   variable
;tilePos                              IX-72      3   variable
;G_11                                 IX-69      3   variable
;pauseMenuSprite                      IX-66      3   variable
;G_7                                  IX-63      3   variable
;wildSpawn                            IX-60      1   variable
;G_4                                  IX-59      3   variable
;G_20                                 IX-56      3   variable
;hasUser                              IX-53      1   variable
;awaitSecond                          IX-52      1   variable
;G_9                                  IX-51      3   variable
;G_6                                  IX-48      3   variable
;hasUser                              IX-45      1   variable
;hasUser                              IX-44      1   variable
;moveIndex                            IX-43      3   variable
;moveIndex                            IX-40      3   variable
;moveIndex                            IX-37      3   variable
;partyIndex                           IX-34      3   variable
;G_13                                 IX-31      3   variable
;G_2                                  IX-28      3   variable
;yloc                                 IX-25      3   variable
;xloc                                 IX-22      3   variable
;starter                              IX-19      1   variable
;partyIndex                           IX-18      3   variable
;partyIndex                           IX-15      3   variable
;oldTile                              IX-12      3   variable
;newTile                               IX-9      3   variable
;walkState                             IX-6      3   variable
;G_12                                  IX-3      3   variable


; Stack Frame Size: 288 (bytes)
;       Spill Code: -26 (instruction)


	SEGMENT STRSECT
L__12:
	DB	"%s used Surf"
	DB	0
L__20:
	DB	"A Pokemon with Surf could bring you across this water"
	DB	0
L__40:
	DB	"Choose Squirtle as your starter?"
	DB	0
L__42:
	DB	"Choose Bulbasaur as your starter?"
	DB	0
L__44:
	DB	"Choose Charmander as your starter?"
	DB	0
L__45:
	DB	"No"
	DB	0
L__46:
	DB	"Yes"
	DB	0
L__48:
	DB	"You already chose a Pokemon"
	DB	0
L__55:
	DB	"%s used Strength"
	DB	0
L__61:
	DB	"This boulder could be moved by a strong Pokemon"
	DB	0
L__64:
	DB	"%s used Cut"
	DB	0
L__72:
	DB	"This tree could be cut down"
	DB	0
L__86:
	DB	"Found the TM for %s"
	DB	0
L__87:
	DB	"Found a %s"
	DB	0
	SEGMENT CODE
;  650	void map_End(void) {
_map_End:
	LD	HL,-3
	CALL	__frameset
;  651		int tileIndex = 0;
;  652		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_277
L_275:
;  653			free(mapTiles[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  654		}
L_277:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_275
;  655		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_281
L_279:
;  656			free(pokeballSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  657		}
L_281:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_279
;  658	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_End ***************************
;Name                         Addr/Register   Size   Type
;_pokeballSprites                    STATIC      9   variable
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -26 (instruction)


;  659	void map_Draw(void) {
_map_Draw:
;  660		/* Move Screen and Redraw */
;  661		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_285
;  662			screenX = 0;
;  663			screenY = 0;
;  664	
;  665			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	LD	BC,0
	LD	(_screenX),BC
	XOR	A,A
	LD	(_screenX+3),A
	LD	(_screenY),BC
	XOR	A,A
	LD	(_screenY+3),A
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  666	
;  667			DrawPlayer();
	CALL	_DrawPlayer
;  668		}
;  669		else {
	JR	L_286
L_285:
;  670			/* Animate Water Every 20 Frames */
;  671			/*if (data_tileSets[currentSave.currentZone] == 0) {
;  672				if (currentWater == 20) {
;  673					memcpy(mapTiles[29], animatedwater1, 258);
;  674				}
;  675				if (currentWater == 0) {
;  676					memcpy(mapTiles[29], animatedwater2, 258);
;  677				}
;  678				currentWater++;
;  679				if (currentWater == 40) {
;  680					currentWater = 0;
;  681				}
;  682			}*/
;  683	
;  684			screenX = Clamp(currentSave.playerX - 160, 0, MAX_X);
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777056
	LD	A,255
	CALL	__ladd
	LD	BC,432
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenX),HL
	LD	A,E
	LD	(_screenX+3),A
;  685			screenY = Clamp(currentSave.playerY - 112, 0, MAX_Y);
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777104
	LD	A,255
	CALL	__ladd
	LD	BC,400
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenY),HL
	LD	A,E
	LD	(_screenY+3),A
;  686	
;  687			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,(_screenY)
	PUSH	BC
	LD	BC,(_screenX)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  688	
;  689			DrawPlayer();
	CALL	_DrawPlayer
;  690			
;  691	
;  692		}
L_286:
;  693		ProcessNpcs();
	CALL	_ProcessNpcs
;  694		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;  695	}
	RET	


;**************************** _map_Draw ***************************
;Name                         Addr/Register   Size   Type
;_map_DrawInformationBar             IMPORT  -----   function
;_ProcessNpcs                        IMPORT  -----   function
;_Clamp                              IMPORT  -----   function
;_DrawPlayer                         IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_currentSave                        IMPORT   4142   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -26 (instruction)


;  696	void DrawPlayer(void) {
_DrawPlayer:
	LD	HL,-15
	CALL	__frameset
;  697		GrassAnimation(0);
	LD	BC,0
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  698	
;  699		gfx_TransparentSprite((gfx_sprite_t*)PKMNSD8[(24 * currentSave.surfing) + (12 * running) + (moveDir - 1) * (3 - currentSave.surfing) + playerState], currentSave.playerX - screenX - 8, currentSave.playerY - screenY + 4 - jumpHeights[16-jumpState]);
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	LD	IY,HL
	LD	A,(_jumpState)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	LD	BC,_jumpHeights
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IY+4
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	IY,HL
	LD	A,(_currentSave+1237)
	UEXT	HL
	LD	L,A
	LD	A,24
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_currentSave+1237)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	LD	(IX+-15),HL
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	HL,(IX+-15)
	CALL	__imuls
	ADD	HL,DE
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD8
	ADD	HL,BC
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  700	
;  701		/* Draw overlay if player is in grass */
;  702		if (currentTileMap[tx + (moveDir == 1) - (moveDir == 2) + (ty + (moveDir == 3) - (moveDir == 4)) * tilemap.width] == 2 && !currentSave.indoors) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	A,(_moveDir)
	CP	A,3
	LD	(IX+-12),HL
	JR	NZ,L__208
	LD	B,1
	JR	L__209
L__208:
	LD	B,0
L__209:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__211
	LD	B,1
	JR	L__212
L__211:
	LD	B,0
L__212:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-12)
	CALL	__imuls
	LD	(IX+-9),HL	; spill
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__214
	LD	B,1
	JR	L__215
L__214:
	LD	B,0
L__215:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__217
	LD	B,1
	JR	L__218
L__217:
	LD	B,0
L__218:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	DE,(IX+-9)	; unspill
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_312
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_312
;  703			/* Always draw grass overlay if moving sideways*/
;  704			if (moveDir <= 2 && moveState > 0) {
	LD	A,2
	LD	HL,_moveDir
	CP	A,(HL)
	JR	C,L_306
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_306
;  705				gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__224
	LD	A,1
	JR	L__225
L__224:
	XOR	A,A
L__225:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__227
	LD	B,1
	JR	L__228
L__227:
	LD	B,0
L__228:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__230
	LD	B,1
	JR	L__231
L__230:
L__231:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__233
	LD	B,1
	JR	L__234
L__233:
	LD	B,0
L__234:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  706			}
L_306:
;  707			if ((moveDir == 1 && moveState == 1 + running) || (moveDir == 2 && moveState == 1 + running) || (moveDir == 3 && moveState == 3 + running) || (moveDir == 4 && moveState == 1 + running)) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_293
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_305
L_293:
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_295
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_305
L_295:
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_297
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IY+3
	OR	A,A
	SBC	HL,BC
	JR	Z,L_305
L_297:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_312
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_312
L_305:
;  708				if (grassAnimNext) {
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	Z,L_299
;  709					grassAnimState1 = 10;
	LD	BC,10
	LD	(_grassAnimState1),BC
;  710					grassAnimX1 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__245
	LD	B,1
	JR	L__246
L__245:
	LD	B,0
L__246:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__248
	LD	B,1
	JR	L__249
L__248:
	LD	B,0
L__249:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX1),HL
;  711					grassAnimY1 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__251
	LD	B,1
	JR	L__252
L__251:
	LD	B,0
L__252:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__254
	LD	B,1
	JR	L__255
L__254:
	LD	B,0
L__255:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY1),HL
;  712				}
;  713				else {
	JR	L_304
L_299:
;  714					grassAnimState2 = 10;
	LD	BC,10
	LD	(_grassAnimState2),BC
;  715					grassAnimX2 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__257
	LD	B,1
	JR	L__258
L__257:
	LD	B,0
L__258:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__260
	LD	B,1
	JR	L__261
L__260:
	LD	B,0
L__261:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX2),HL
;  716					grassAnimY2 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__263
	LD	B,1
	JR	L__264
L__263:
	LD	B,0
L__264:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__266
	LD	B,1
	JR	L__267
L__266:
	LD	B,0
L__267:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY2),HL
;  717				}
L_304:
;  718				grassAnimNext = !grassAnimNext;
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	NZ,L_301
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_302
L_301:
	LD	BC,0
	LD	(IX+-3),BC
L_302:
	LD	A,(IX+-3)
	LD	(_grassAnimNext),A
;  719			}
;  720		}
L_312:
;  721		if (!(moveDir == 3 && moveState != 0) && currentTileMap[tx + ty * tilemap.width] == 2 && !currentSave.indoors) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_309
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_313
L_309:
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_313
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_313
;  722			gfx_TransparentSprite_NoClip(grassoverlay1, tx * 16 - screenX - 8, ty * 16 - screenY + 18);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  723		}
L_313:
;  724	
;  725		GrassAnimation(1);
	LD	BC,1
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  726	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawPlayer ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimY2                        STATIC      3   variable
;_grassAnimX2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassAnimY1                        STATIC      3   variable
;_grassAnimX1                        STATIC      3   variable
;_grassAnimState1                    STATIC      3   variable
;_grassAnimNext                      STATIC      1   variable
;_grassoverlay1_data                 IMPORT     98   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_moveState                          STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_playerState                        STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_running                            STATIC      1   variable
;_PKMNSD8                            IMPORT    240   variable
;_screenX                            STATIC      4   variable
;_jumpState                          STATIC      1   variable
;_jumpHeights                        STATIC     17   variable
;_screenY                            STATIC      4   variable
;_currentSave                        IMPORT   4142   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_GrassAnimation                     IMPORT  -----   function
;temp303                               IX-3      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: -26 (instruction)


;  727	void GrassAnimation(bool part) {
_GrassAnimation:
	LD	HL,-6
	CALL	__frameset
;  728		if (grassAnimState1 > 0) {
	LD	BC,(_grassAnimState1)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_343
;  729			if (part != ((moveDir == 3 && (currentSave.playerY + 16 > grassAnimY1 + 16) && (currentSave.playerY - 4 < grassAnimY1 + 10)) || (moveDir == 4 && ty != (grassAnimY1 / 16)))) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_318
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	IY,HL
	LEA	BC,IY+16
	LD	IY,(_grassAnimY1)
	LEA	HL,IY+16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_318
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	OR	A,A
	LD	IY,(_grassAnimY1)
	LEA	BC,IY+10
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_319
L_318:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_320
	LD	HL,(_grassAnimY1)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_320
L_319:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_321
L_320:
	LD	BC,0
	LD	(IX+-3),BC
L_321:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	JR	Z,L_327
;  730				if (grassAnimState1 > 5) {
	LD	BC,(_grassAnimState1)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_324
;  731					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 13);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  732				}
;  733				else {
	JR	L_327
L_324:
;  734					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 14);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  735				}
;  736			}
L_327:
;  737			grassAnimState1--;
	LD	BC,(_grassAnimState1)
	DEC	BC
	LD	(_grassAnimState1),BC
;  738		}
L_343:
;  739		if (grassAnimState2 > 0) {
	LD	BC,(_grassAnimState2)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_344
;  740			if (part != ((moveDir == 3 && (currentSave.playerY + 16 > grassAnimY2 + 16) && (currentSave.playerY - 4 < grassAnimY2 + 10)) || (moveDir == 4 && ty != (grassAnimY2 / 16)))) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_332
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	IY,HL
	LEA	BC,IY+16
	LD	IY,(_grassAnimY2)
	LEA	HL,IY+16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_332
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	OR	A,A
	LD	IY,(_grassAnimY2)
	LEA	BC,IY+10
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_333
L_332:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_334
	LD	HL,(_grassAnimY2)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_334
L_333:
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_335
L_334:
	LD	BC,0
	LD	(IX+-6),BC
L_335:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-6)
	SBC	HL,BC
	JR	Z,L_341
;  741				if (grassAnimState2 > 5) {
	LD	BC,(_grassAnimState2)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_338
;  742					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 13);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  743				}
;  744				else {
	JR	L_341
L_338:
;  745					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 14);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  746				}
;  747			}
L_341:
;  748			grassAnimState2--;
	LD	BC,(_grassAnimState2)
	DEC	BC
	LD	(_grassAnimState2),BC
;  749		}
;  750	}
L_344:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GrassAnimation ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimX2                        STATIC      3   variable
;_grassAnimY2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_screenX                            STATIC      4   variable
;_grassAnimX1                        STATIC      3   variable
;_screenY                            STATIC      4   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_grassAnimY1                        STATIC      3   variable
;_currentSave                        IMPORT   4142   variable
;_moveDir                            STATIC      1   variable
;_grassAnimState1                    STATIC      3   variable
;temp336                               IX-6      3   variable
;temp322                               IX-3      3   variable
;part                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -26 (instruction)


;  751	void HealParty(void) {
_HealParty:
	LD	HL,-45
	CALL	__frameset
;  752		int pokemonIndex, moveIndex;
;  753		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_352
L_350:
;  754			currentSave.party[pokemonIndex].currenthealth = stats_CalculateStats(currentSave.party[pokemonIndex]).health;
	LD	BC,_currentSave+10
	LD	(IX+-6),BC
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-39),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-33
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	(IX+-45),HL	; spill
	ADD	IY,SP
	LD	SP,IY
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-45)	; unspill
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
;  755			currentSave.party[pokemonIndex].currentstatus = 0;
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+15),0
;  756			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-15),HL
	JR	L_349
L_347:
;  757				currentSave.party[pokemonIndex].pp[moveIndex] = data_moves[currentSave.party[pokemonIndex].moves[moveIndex]].uses;
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	IY,(IX+-36)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  758			}
L_349:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_347
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  759		}
L_352:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_350
;  760		text_Display("Your party has been healed", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__293
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  761		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  762	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealParty ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_currentSave                        IMPORT   4142   variable
;O_38                                 IX-21      3   variable
;O_37                                 IX-18      3   variable
;O_39                                 IX-15      3   variable
;G_22                                 IX-12      3   variable
;moveIndex                             IX-9      3   variable
;G_21                                  IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 51 (bytes)
;       Spill Code: -27 (instruction)


	SEGMENT STRSECT
L__293:
	DB	"Your party has been healed"
	DB	0
	SEGMENT CODE
;  763	void OpenBox(void) {
_OpenBox:
;  764		map_End();
	CALL	_map_End
;  765		
;  766		menu_Box();
	CALL	_menu_Box
;  767	
;  768		map_SetupGfx();
	CALL	_map_SetupGfx
;  769		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  770	}
	RET	


;**************************** _OpenBox ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Box                           IMPORT  -----   function
;_map_End                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -27 (instruction)


;  771	void ReadText(uint8_t index) {
_ReadText:
	CALL	__frameset0
;  772		LoadText(currentZoneData.textIds[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+336
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  773		text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  774	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ReadText ***************************
;Name                         Addr/Register   Size   Type
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_currentZoneData                    STATIC    720   variable
;_LoadText                           IMPORT  -----   function
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -27 (instruction)


;  775	void EnterDoor(uint8_t index) {
_EnterDoor:
	CALL	__frameset0
;  776		int tileIndex;
;  777		currentSave.lastPlayerX = currentSave.playerX;
	LD	BC,(_currentSave+2)
	LD	HL,_currentSave+6
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  778		currentSave.lastPlayerY = currentSave.playerY;
	LD	BC,(_currentSave+4)
	LD	HL,_currentSave+8
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  779		currentSave.indoors = true;
	LD	A,1
	LD	(_currentSave+1236),A
;  780		currentSave.currentBuilding = currentZoneData.doorzones[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_currentZoneData+288
;  781		LoadTileset(true);
	LD	BC,1
	PUSH	BC
	ADD	HL,DE
	LD	A,(HL)
	LD	(_currentSave+1238),A
	CALL	_LoadTileset
	POP	BC
;  782		tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  783		tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  784		currentSave.playerX = currentZoneData.doorx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+304
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  785		currentSave.playerY = currentZoneData.doory[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+320
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  786		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  787		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  788		LoadMap();
	CALL	_LoadMap
;  789	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _EnterDoor ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_LoadTileset                        IMPORT  -----   function
;_currentZoneData                    STATIC    720   variable
;_currentSave                        IMPORT   4142   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -27 (instruction)


;  790	void ExitBuilding(void) {
_ExitBuilding:
;  791		int tileIndex;
;  792		currentSave.playerX = currentSave.lastPlayerX;
	LD	BC,(_currentSave+6)
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  793		currentSave.playerY = currentSave.lastPlayerY;
	LD	BC,(_currentSave+8)
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  794		currentSave.indoors = false;
	XOR	A,A
	LD	(_currentSave+1236),A
;  795		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  796		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  797		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  798		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
;  799		LoadTileset(true);
	LD	DE,1
	PUSH	DE
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
	CALL	_LoadTileset
	POP	BC
;  800		LoadMap();
	CALL	_LoadMap
;  801	}
	RET	


;**************************** _ExitBuilding ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_currentSave                        IMPORT   4142   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -27 (instruction)


;  802	void ExitZone(uint8_t index) {
_ExitZone:
	CALL	__frameset0
;  803		currentSave.playerX = currentZoneData.exitx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+256
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  804		currentSave.playerY = currentZoneData.exity[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+272
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  805		currentSave.currentZone = currentZoneData.exitzone[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+240
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_currentSave+1234
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  806		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  807		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  808		LoadTileset(true);
	LD	BC,1
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  809		LoadMap();
	CALL	_LoadMap
;  810	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitZone ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_currentZoneData                    STATIC    720   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -27 (instruction)


;  811	
;  812	void AddItem(uint8_t index) {
_AddItem:
	LD	HL,-20
	CALL	__frameset
;  813		char str1[20];
;  814		if (index != 0) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_373
;  815			if (index == 255) {
	LD	A,(IX+6)
	CP	A,255
	JR	NZ,L_369
;  816				currentSave.badgeCount++;
	LD	A,(_currentSave+3988)
	INC	A
;  817				currentSave.worldState++;
;  818				sprintf(str, "You recieved a badge");
	LD	BC,L__302
	PUSH	BC
	LD	(_currentSave+3988),A
	LD	BC,_str
	PUSH	BC
	LD	BC,(_currentSave+4140)
	INC	BC
	LD	HL,_currentSave+4140
	LD	(HL),C
	INC	HL
	LD	(HL),B
	CALL	_sprintf
	POP	BC
	POP	BC
;  819			}
;  820			else if (index == 254) {
	JR	L_371
L_369:
	LD	A,(IX+6)
	CP	A,254
	JR	NZ,L_367
;  821				currentSave.worldState++;
	LD	BC,(_currentSave+4140)
	INC	BC
	LD	HL,_currentSave+4140
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  822			}
;  823			else {
	JR	L_371
L_367:
;  824				currentSave.playerItems[index - 1]++;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentSave+1243
	ADD	HL,DE
	LD	IY,HL
	LD	HL,BC
	LD	BC,_currentSave+1243
	ADD	HL,BC
	LD	A,(IY)
	INC	A
	LD	(HL),A
;  825				items_IndexToName(str1, index - 1);
	LD	C,(IX+6)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-20
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  826				if (index - 1 >= 20) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_365
;  827					sprintf(str, "You recieved the TM for\n%s", str1);
	PEA	IX+-20
	LD	BC,L__305
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  828				}
;  829				else {
	JR	L_371
L_365:
;  830					sprintf(str, "You recieved a %s", str1);
	PEA	IX+-20
	LD	BC,L__306
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  831				}
;  832			}
L_371:
;  833			if (index != 254) {
	LD	A,(IX+6)
	CP	A,254
	JR	Z,L_373
;  834				text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  835			}
;  836		}
;  837	}
L_373:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _AddItem ***************************
;Name                         Addr/Register   Size   Type
;_text_Display                       IMPORT  -----   function
;_items_IndexToName                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentSave                        IMPORT   4142   variable
;str1                                 IX-20     20   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: -27 (instruction)


	SEGMENT STRSECT
L__302:
	DB	"You recieved a badge"
	DB	0
L__305:
	DB	"You recieved the TM for"
	DB	10
	DB	"%s"
	DB	0
L__306:
	DB	"You recieved a %s"
	DB	0
	SEGMENT CODE
;  838	bool FightTrainer(uint8_t index) {
_FightTrainer:
	LD	HL,-30
	CALL	__frameset
;  839		if (currentZoneData.trainertype[index] <=1) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+608
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,1
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_408
;  840			currentTrainer = index;
	LD	A,(IX+6)
	LD	(_currentTrainer),A
;  841			if (currentZoneData.trainerspawnids[0][index] >= 253) {
	LD	BC,_currentZoneData+352
	LD	(IX+-15),BC
	LD	(IX+-12),BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,253
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_380
;  842				currentZoneData.trainerspawnids[0][index] = currentZoneData.trainerspawnids[0][index] - 252 + 3*currentSave.rivalPokemon;
	LD	BC,_currentZoneData+352
	LD	(IX+-15),BC
	LD	(IX+-12),BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	A,(_currentSave+1)
	LD	B,A
	LD	HL,(IX+-27)
	LD	A,(HL)
	SUB	A,252
	LD	D,A
	LD	HL,(IX+-27)
	LD	C,3
	MLT	BC
	LD	A,C
	ADD	A,D
	LD	(HL),A
;  843			}
L_380:
;  844			if (currentSave.indoors && !currentSave.defeatedTrainersIndoors[currentSave.currentBuilding][currentTrainer]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_379
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_379
;  845				lastTextIndex = 0;
	LD	HL,_lastTextIndex
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  846				lastTextID = currentZoneData.trainertext[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_lastTextID
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  847				LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  848				text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  849				battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+448
	PUSH	BC
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  850				return true;
	LD	A,1
	JR	L_410
;  851			}
;  852			else if (!currentSave.indoors && !currentSave.defeatedTrainers[currentSave.currentZone][currentTrainer]) {
L_379:
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_409
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_409
;  853				lastTextIndex = 0;
	LD	HL,_lastTextIndex
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  854				lastTextID = currentZoneData.trainertext[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_lastTextID
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  855				LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  856				text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  857				battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+448
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  858				return true;
	LD	A,1
	JR	L_410
;  859			}
;  860			
;  861		}
;  862		else if (currentZoneData.trainertype[index] <= 3) {
L_408:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	JP	M,L_406
;  863			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  864			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  865			if (currentSave.indoors && !currentSave.takenGiftsIndoors[currentSave.currentBuilding][index]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_385
	LD	BC,_currentSave+2196
	LD	(IX+-18),BC
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-18)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_385
;  866				AddItem(currentZoneData.trainerreward[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_AddItem
	POP	BC
;  867				currentSave.takenGiftsIndoors[currentSave.currentBuilding][index] = true;
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,(IX+6)
	LD	BC,(IX+-18)
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  868			}
L_385:
;  869			if (!currentSave.indoors && !currentSave.takenGifts[currentSave.currentZone][index]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_409
	LD	BC,_currentSave+1940
	LD	(IX+-21),BC
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-21)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_409
;  870				AddItem(currentZoneData.trainerreward[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_AddItem
	POP	BC
;  871				currentSave.takenGifts[currentSave.currentZone][index] = true;
	LD	DE,(IX+-21)
	LD	A,(IX+6)
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  872			}
;  873		}
;  874		else if (currentZoneData.trainertype[index] == 4 && moveState == 0) {
	JR	L_409
L_406:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_404
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_404
;  875			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  876			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  877			moveDir = moveDir + 1 - 2 * !(moveDir % 2);
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_388
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_389
L_388:
	LD	BC,0
	LD	(IX+-6),BC
L_389:
	LD	A,(_moveDir)
	LD	B,A
	INC	B
	LD	A,(IX+-6)
	ADD	A,A
	LD	C,A
	LD	A,B
	SUB	A,C
	LD	(_moveDir),A
;  878			moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  879	
;  880		}
;  881		else if (currentZoneData.trainertype[index] == 5 && moveState == 0) {
	JR	L_409
L_404:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_402
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_402
;  882			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  883			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  884			moveDir = moveDir + 1 - 2 * !(moveDir % 2);
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_393
	LD	BC,1
	LD	(IX+-9),BC
	JR	L_394
L_393:
	LD	BC,0
	LD	(IX+-9),BC
L_394:
	LD	A,(_moveDir)
	LD	B,A
	INC	B
	LD	A,(IX+-9)
	ADD	A,A
	LD	C,A
	LD	A,B
	SUB	A,C
	LD	(_moveDir),A
;  885			moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  886		}
;  887		else if (currentZoneData.trainertype[index] == 6) {
	JR	L_409
L_402:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	NZ,L_409
;  888			if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_399
;  889				text_Display("Professor Spruce was looking for\nyou. He is in his Laboratory.", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__328
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  890			}
;  891			else {
	JR	L_409
L_399:
;  892				if (!currentSave.takenGiftsIndoors[currentSave.currentBuilding][index]) {
	LD	BC,_currentSave+2196
	LD	(IX+-24),BC
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_397
;  893					text_Display("You can use these to catch\nmore Pokemon.\n\nRecieved 5 pokeballs.", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__330
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  894					currentSave.playerItems[0] += 5;
	LD	BC,_currentSave+1243
	LD	(IX+-30),BC
	LD	HL,BC
	LD	A,(HL)
	ADD	A,5
	LD	HL,(IX+-30)
	LD	(HL),A
;  895					currentSave.takenGiftsIndoors[currentSave.currentBuilding][index] = true;
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	A,(IX+6)
	LD	BC,(IX+-24)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  896				}
;  897				else {
	JR	L_409
L_397:
;  898					text_Display("Good luck on your adventure!", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__331
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  899				}
;  900			}
;  901		}
L_409:
;  902		return false;
	XOR	A,A
;  903	}
L_410:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FightTrainer ***************************
;Name                         Addr/Register   Size   Type
;_moveDir                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_AddItem                            IMPORT  -----   function
;_battle_SpawnTrainer                IMPORT  -----   function
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_LoadText                           IMPORT  -----   function
;_lastTextID                         IMPORT      2   variable
;_lastTextIndex                      IMPORT      2   variable
;_currentSave                        IMPORT   4142   variable
;_currentTrainer                     STATIC      1   variable
;_currentZoneData                    STATIC    720   variable
;G_36                                 IX-24      3   variable
;G_29                                 IX-21      3   variable
;G_28                                 IX-18      3   variable
;G_24                                 IX-15      3   variable
;G_25                                 IX-12      3   variable
;temp395                               IX-9      3   variable
;temp390                               IX-6      3   variable
;G_27                                  IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 39 (bytes)
;       Spill Code: -27 (instruction)


	SEGMENT STRSECT
L__328:
	DB	"Professor Spruce was looking for"
	DB	10
	DB	"you. He is in his Laboratory."
	DB	0
L__330:
	DB	"You can use these to catch"
	DB	10
	DB	"more Pokemon."
	DB	10,10
	DB	"Recieved 5 pokeballs."
	DB	0
L__331:
	DB	"Good luck on your adventure!"
	DB	0
	SEGMENT CODE
;  904	void map_LoadPokeballs(void) {
_map_LoadPokeballs:
	LD	HL,-6
	CALL	__frameset
;  905		int pokemonIndex;
;  906		/* Generate pokemon info To Display At Top of Screen */
;  907		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_418
L_416:
;  908			if (currentSave.party[pokemonIndex].id == 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_415
;  909				pokeballdata[pokemonIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),2
;  910			}
;  911			else {
	JR	L_417
L_415:
;  912				if (currentSave.party[pokemonIndex].currenthealth > 0) {
	LD	IY,(IX+-6)
	LD	BC,(IY+13)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_413
;  913					pokeballdata[pokemonIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),0
;  914				}
;  915				else {
	JR	L_417
L_413:
;  916					pokeballdata[pokemonIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),1
;  917				}
;  918			}
;  919		}
L_417:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_418:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_416
;  920	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoadPokeballs ***************************
;Name                         Addr/Register   Size   Type
;_pokeballdata                       STATIC      6   variable
;_currentSave                        IMPORT   4142   variable
;G_37                                  IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -27 (instruction)


;  921	void LoadMap(void) {
_LoadMap:
	LD	HL,-70
	CALL	__frameset
;  922		int i, j;
;  923		int npcIndex;
;  924		ti_var_t mapAV;
;  925		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_421
;  926			mapAV = ti_Open("PKMNMD1", "r");
	LD	BC,L__338
	PUSH	BC
	LD	BC,L__339
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;  927			ti_Seek(((int)currentSave.currentBuilding) * (630 + sizeof(currentZoneData)), 0, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,1350
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  928			ti_Read(&currentTileMap, 315, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  929			ti_Read(&currentTypeMap, 315, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  930			ti_Read(&currentZoneData, sizeof(currentZoneData), 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,720
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  931		}
;  932		else {
	JR	L_422
L_421:
;  933			mapAV = ti_Open("PKMNMD0", "r");
	LD	BC,L__340
	PUSH	BC
	LD	BC,L__341
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;  934			ti_Seek(((int)currentSave.currentZone) * (3840 + sizeof(currentZoneData)), 0, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,4560
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  935			ti_Read(&currentTileMap, 1920, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  936			ti_Read(&currentTypeMap, 1920, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  937			ti_Read(&currentZoneData, sizeof(currentZoneData), 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,720
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  938		}
L_422:
;  939		ti_CloseAll();
	CALL	_ti_CloseAll
;  940		for (npcIndex = 0; npcIndex < 16; npcIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_446
L_444:
;  941			if (currentZoneData.minworldstate[npcIndex] > 0 && currentZoneData.maxworldstate[npcIndex] > 0) {
	LD	BC,_currentZoneData+672
	LD	(IX+-37),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-37)
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_428
	LD	BC,_currentZoneData+688
	LD	(IX+-40),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-40)
	ADD	HL,BC
	LD	(IX+-16),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_428
;  942				if (currentSave.worldState < currentZoneData.minworldstate[npcIndex] || currentSave.worldState > currentZoneData.maxworldstate[npcIndex]) {
	LD	BC,(_currentSave+4140)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+-13)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	M,L_426
	LD	BC,(_currentSave+4140)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+-16)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_428
L_426:
;  943					currentZoneData.trainerdir[npcIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),0
;  944				}
;  945			}
L_428:
;  946	
;  947	
;  948			npcMoveState[npcIndex] = 0;
	LD	BC,_npcMoveState
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),0
;  949			npcGrassAnimState[npcIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_npcGrassAnimState
	ADD	HL,BC
	LD	(HL),0
;  950			npcOldTiles[npcIndex] = currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])];
	LD	BC,_currentZoneData+544
	LD	(IX+-34),BC
	LD	BC,_currentZoneData+560
	LD	(IX+-43),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-34)
	ADD	HL,BC
	LD	(IX+-22),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+-43)
	ADD	HL,BC
	LD	(IX+-19),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-19)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	IY,(IX+-22)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,_npcOldTiles
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
;  951			if (currentZoneData.trainerdir[npcIndex] != 0) {
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_430
;  952				currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])] = 96 + npcIndex;
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-19)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	IY,(IX+-22)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(IX+-3)
	ADD	A,96
	LD	(HL),A
;  953			}
L_430:
;  954			npcSaidMessage[npcIndex] = false;
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),0
;  955	
;  956			if (currentSave.takenGroundGifts[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][npcIndex]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_432
	LD	BC,1
	LD	(IX+-31),BC
	JR	L_433
L_432:
	LD	BC,0
	LD	(IX+-31),BC
L_433:
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,8
	CALL	__ishl_b
	LD	BC,_currentSave+2452
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-31)
	CALL	__imuls
	LD	(IX+-67),HL	; spill
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	(IX+-70),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-70)
	CALL	__imuls
	LD	BC,(IX+-67)	; unspill
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_445
;  957				currentTileMap[currentSave.foundItemsPos[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][npcIndex]] = 0;
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_436
	LD	BC,1
	LD	(IX+-7),BC
	JR	L_437
L_436:
	LD	BC,0
	LD	(IX+-7),BC
L_437:
	LD	BC,_currentSave+2964
	LD	(IX+-28),BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	(IX+-25),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__ishl_b
	LD	BC,(IX+-28)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-7)
	CALL	__imuls
	LD	(IX+-61),HL	; spill
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	(IX+-64),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-64)
	CALL	__imuls
	LD	BC,(IX+-61)	; unspill
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-25)
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  958				currentTypeMap[currentSave.foundItemsPos[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][npcIndex]] = 0;
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_440
	LD	BC,1
	LD	(IX+-10),BC
	JR	L_441
L_440:
	LD	BC,0
	LD	(IX+-10),BC
L_441:
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__ishl_b
	LD	BC,(IX+-28)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-10)
	CALL	__imuls
	LD	(IX+-49),HL	; spill
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	(IX+-52),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-52)
	CALL	__imuls
	LD	(IX+-55),BC	; spill
	LD	BC,(IX+-25)
	LD	(IX+-58),BC	; spill
	LD	BC,(IX+-49)	; unspill
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-58)	; unspill
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	(HL),0
;  959			}
;  960		}
L_445:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_446:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_444
;  961		
;  962	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadMap ***************************
;Name                         Addr/Register   Size   Type
;_npcSaidMessage                     STATIC     16   variable
;_npcOldTiles                        STATIC     16   variable
;_tilemap                            STATIC     18   variable
;_npcGrassAnimState                  STATIC     16   variable
;_npcMoveState                       STATIC     16   variable
;_ti_CloseAll                        IMPORT  -----   function
;_currentZoneData                    STATIC    720   variable
;_currentTypeMap                     STATIC   1920   variable
;_currentTileMap                     STATIC   1920   variable
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_currentSave                        IMPORT   4142   variable
;G_44                                 IX-43      3   variable
;G_41                                 IX-40      3   variable
;G_39                                 IX-37      3   variable
;G_43                                 IX-34      3   variable
;temp434                              IX-31      3   variable
;G_47                                 IX-28      3   variable
;G_48                                 IX-25      3   variable
;G_45                                 IX-22      3   variable
;G_46                                 IX-19      3   variable
;G_42                                 IX-16      3   variable
;G_40                                 IX-13      3   variable
;temp442                              IX-10      3   variable
;temp438                               IX-7      3   variable
;mapAV                                 IX-4      1   variable
;npcIndex                              IX-3      3   variable


; Stack Frame Size: 76 (bytes)
;       Spill Code: -28 (instruction)


	SEGMENT STRSECT
L__338:
	DB	"r"
	DB	0
L__339:
	DB	"PKMNMD1"
	DB	0
L__340:
	DB	"r"
	DB	0
L__341:
	DB	"PKMNMD0"
	DB	0
	SEGMENT CODE
;  963	int32_t Clamp(int32_t number, int min, int max) {
_Clamp:
	CALL	__frameset0
;  964		if (number < min) {
	LD	BC,(IX+12)
	CALL	__itol
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_450
;  965			number = min;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  966		}
L_450:
;  967		if (number > max) {
	LD	BC,(IX+15)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_451
;  968			number = max;
	LD	BC,(IX+15)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  969		}
L_451:
;  970		return number;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  971	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Clamp ***************************
;Name                         Addr/Register   Size   Type
;max                                  IX+15      3   parameter
;min                                  IX+12      3   parameter
;number                                IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -28 (instruction)


;  972	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width) {
_GetNextTile:
	CALL	__frameset0
;  973	
;  974		switch (moveDir) {
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__356:
	DW	4
	DW	1
	DB	0
	DW24	L_453	

	DW24	L_454	

	DW24	L_455	

	DW24	L_456	

	DW24	L_457	

;  975		case 1:
L_453:
;  976			return(GetTypeMapData(tx + 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	INC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_458
;  977		case 2:
L_454:
;  978			return(GetTypeMapData(tx - 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	DEC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_458
;  979		case 3:
L_455:
;  980			return(GetTypeMapData(tx, ty + 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	INC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_458
;  981		case 4:
L_456:
;  982			return(GetTypeMapData(tx, ty - 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_458
;  983		}
L_457:
;  984		return 0;
	XOR	A,A
;  985	}
L_458:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetNextTile ***************************
;Name                         Addr/Register   Size   Type
;_GetTypeMapData                     IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -28 (instruction)


;  986	uint16_t ShiftTile(uint16_t value, uint8_t direction, uint8_t amount) {
_ShiftTile:
	LD	HL,-9
	CALL	__frameset
;  987		return (value + ((direction == 1) * amount) - ((direction == 2) * amount) + ((direction == 3) * tilemap.width * amount) - ((direction == 4) * tilemap.width * amount));
	LD	A,(IX+9)
	CP	A,1
	JR	NZ,L__359
	LD	A,1
	JR	L__360
L__359:
	XOR	A,A
L__360:
	LD	B,A
	SEXT	HL
	LD	A,(IX+9)
	CP	A,2
	LD	L,B
	LD	DE,HL
	LD	C,(IX+12)
	LD	B,0
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	BC,(IX+6)
	ADD.SIS	HL,BC
	LD	(IX+-9),HL
	JR	NZ,L__362
	LD	A,1
	JR	L__363
L__362:
	XOR	A,A
L__363:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	C,(IX+12)
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	DE,HL
	LD	A,(_tilemap+13)
	LD	C,A
	LD	HL,(IX+-9)
	OR	A,A
	SBC.SIS	HL,DE
	LD	A,(IX+9)
	CP	A,3
	LD	(IX+-6),HL
	LD	B,0
	LD	DE,BC
	JR	NZ,L__365
	LD	A,1
	JR	L__366
L__365:
	XOR	A,A
L__366:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,DE
	CALL	__smulu
	LD	C,(IX+12)
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tilemap+13)
	LD	C,A
	LD	A,(IX+9)
	CP	A,4
	LD	DE,HL
	LD	HL,(IX+-6)
	ADD.SIS	HL,DE
	LD	(IX+-3),HL
	LD	B,0
	LD	DE,BC
	JR	NZ,L__368
	LD	A,1
	JR	L__369
L__368:
	XOR	A,A
L__369:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,DE
	CALL	__smulu
	LD	C,(IX+12)
	OR	A,A
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	BC,HL
	LD	HL,(IX+-3)
	SBC.SIS	HL,BC
;  988	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ShiftTile ***************************
;Name                         Addr/Register   Size   Type
;_tilemap                            STATIC     18   variable
;amount                               IX+12      1   parameter
;direction                             IX+9      1   parameter
;value                                 IX+6      2   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: -28 (instruction)


;  989	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width) {
_GetTypeMapData:
	CALL	__frameset0
;  990		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_461
;  991			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	JR	L_462
;  992		}
;  993		else {
L_461:
;  994			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
;  995		}
;  996	}
L_462:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetTypeMapData ***************************
;Name                         Addr/Register   Size   Type
;_currentTypeMap                     STATIC   1920   variable
;_currentSave                        IMPORT   4142   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -28 (instruction)


;  997	void ProcessNpcs(void) {
_ProcessNpcs:
	LD	HL,-289
	CALL	__frameset
;  998		int npcIndex, tileIndex, xloc, yloc, xlocMod, ylocMod;
;  999		for (npcIndex = 0; npcIndex < 16; npcIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_596
L_594:
; 1000			if (currentZoneData.trainerdir[npcIndex] != 0) {
	LD	BC,IX
	LD	DE,_currentZoneData+576
	LEA	IY,IX+-128
	LD	(IY+-54),DE
	LD	DE,(IX+-3)
	LD	HL,-182
	ADD	HL,BC
	LD	HL,(HL)
	ADD	HL,DE
	LD	(IY+-27),HL
	LD	HL,(IY+-27)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_595
; 1001				xloc = currentZoneData.trainerx[npcIndex] * 16 - screenX;
	LD	BC,_currentZoneData+544
	LD	(IX+-125),BC
	LEA	IY,IX+-128
	LD	(IY+-45),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-125)
	ADD	HL,BC
	LD	(IX+-85),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	(IX+-45),HL
; 1002				yloc = currentZoneData.trainery[npcIndex] * 16 - screenY;
	LD	BC,_currentZoneData+560
	LD	(IX+-122),BC
	LD	(IY+-39),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-122)
	ADD	HL,BC
	LD	(IX+-101),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	LD	(IX+-48),HL
; 1003				xlocMod = 0;
; 1004				ylocMod = 0;
; 1005	
; 1006				if (xloc < 336 && yloc < 240 && xloc >= 0 && yloc >= 0) {
	OR	A,A
	LD	BC,0
	LD	(IX+-69),BC
	LD	(IX+-78),BC
	LD	HL,(IX+-45)
	LD	BC,336
	SBC	HL,BC
	JP	P,L_595
	LD	BC,240
	LD	HL,(IX+-48)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_595
	LD	HL,(IX+-45)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_595
	LD	HL,(IX+-48)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_595
; 1007					bool canMove;
; 1008					int trainerDir = currentZoneData.trainerdir[npcIndex];
	LEA	IY,IX+-128
	LD	HL,(IY+-27)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-6),HL
; 1009					canMove = true;
	LD	(IX+-49),1
; 1010					for (tileIndex = 1; tileIndex < 5; tileIndex++) {
	LD	BC,1
	LD	(IX+-42),BC
	JR	L_494
L_492:
; 1011						if (currentTypeMap[(currentZoneData.trainerx[npcIndex] + (trainerDir == 1)*tileIndex - (trainerDir == 2)*tileIndex) + tilemap.width * (currentZoneData.trainery[npcIndex] + (trainerDir == 3) * tileIndex - (trainerDir == 4) * tileIndex)] >= 64) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__379
	LD	B,1
	JR	L__380
L__379:
	LD	B,0
L__380:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-9),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__382
	LD	B,1
	JR	L__383
L__382:
	LD	B,0
L__383:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-6),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__385
	LD	B,1
	JR	L__386
L__385:
	LD	B,0
L__386:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-3),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__388
	LD	B,1
	JR	L__389
L__388:
	LD	B,0
L__389:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LD	(IX+-128),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-101)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-3)
	LD	L,A
	ADD	HL,BC
	OR	A,A
	LD	BC,(IX+-128)
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	IY,(IX+-85)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LEA	IY,IX+-128
	LD	DE,(IY+-9)
	LD	L,A
	ADD	HL,DE
	LD	DE,(IY+-6)
	OR	A,A
	SBC	HL,DE
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_491
; 1012							if (tileIndex == 1 && (npcMoveState[npcIndex] % 16 == 0) && npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4) {
	LD	BC,1
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_504
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-15),HL
	LD	HL,(IY+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_504
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,_npcPatterns
	LD	BC,16
	ADD	HL,DE
	LD	DE,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-120),BC
	POP	IY
	LD	BC,4
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-289	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-120)
	POP	IY
	LEA	IY,IX+-128
	LD	HL,(IY+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,-289	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	SBC	HL,BC
	JR	NZ,L_504
; 1013								canMove = false;
	LD	(IX+-49),0
; 1014							}
; 1015							break;
	JR	L_504
; 1016						}
L_491:
; 1017						if ((currentZoneData.trainerx[npcIndex] + (trainerDir == 1)*tileIndex - (trainerDir == 2)*tileIndex) == tx && (currentZoneData.trainery[npcIndex] + (trainerDir == 3) * tileIndex - (trainerDir == 4) * tileIndex) == ty) {
	LD	HL,-173
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-85),HL
	LD	A,(HL)
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-9)
	LD	L,A
	ADD	HL,BC
	LD	BC,(IY+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_493
	LD	HL,-167
	LD	BC,IX
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-101),HL
	LD	A,(HL)
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-3)
	LD	L,A
	ADD	HL,BC
	OR	A,A
	LD	BC,(IX+-128)
	SBC	HL,BC
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_493
; 1018							if (tileIndex == 1 && (npcMoveState[npcIndex] % 16 == 0) && npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4) {
	LD	BC,1
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_488
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-24),HL
	LD	HL,(IY+-24)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_488
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,_npcPatterns
	LD	BC,16
	ADD	HL,DE
	LD	DE,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-120),BC
	POP	IY
	LD	BC,4
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-286	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-120)
	POP	IY
	LEA	IY,IX+-128
	LD	HL,(IY+-24)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,-286	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	SBC	HL,BC
	JR	NZ,L_488
; 1019								canMove = false;
	LD	(IX+-49),0
; 1020							}
L_488:
; 1021							if (currentZoneData.trainertype[npcIndex] == 0 || (currentZoneData.trainertype[npcIndex] == 2 && !npcSaidMessage[npcIndex]) || currentZoneData.trainertype[npcIndex] == 4 || (currentZoneData.trainertype[npcIndex] == 6 && !npcSaidMessage[npcIndex] && currentSave.newGame)) {
	LD	BC,_currentZoneData+608
	LD	(IX+-107),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-107)
	ADD	HL,BC
	LD	(IX+-66),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_487
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_479
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_487
L_479:
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_487
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	NZ,L_504
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_504
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_504
L_487:
; 1022								npcSaidMessage[npcIndex] = true;
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),1
; 1023								npcToFight = npcIndex;
	LD	BC,(IX+-3)
	LD	(_npcToFight),BC
; 1024								if ((currentSave.indoors && !currentSave.defeatedTrainersIndoors[currentSave.currentBuilding][npcIndex]) || (!currentSave.indoors && !currentSave.defeatedTrainers[currentSave.currentZone][npcIndex])) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_485
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_486
L_485:
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_504
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_504
L_486:
; 1025									showExclamationPoint = 2;
	LD	A,2
	LD	(_showExclamationPoint),A
; 1026								}
; 1027							}
; 1028							break;
	JR	L_504
; 1029						}
; 1030					}
L_493:
	LD	BC,(IX+-42)
	INC	BC
	LD	(IX+-42),BC
L_494:
	LD	BC,5
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JP	M,L_492
L_504:
; 1031					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 1 && npcMoveState[npcIndex] % 16 == 8) {
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LD	(IX+-9),HL
	LEA	IY,IX+-128
	LD	(IY+-48),HL
	LD	(IX+-12),HL
	LD	(IX+-15),HL
	LD	(IX+-52),HL
	LD	(IX+-61),HL
	LD	(IX+-58),HL
	LD	(IX+-55),HL
	LD	(IX+-30),HL
	LD	(IX+-27),HL
	LD	(IX+-24),HL
	LD	(IX+-21),HL
	LD	(IX+-39),HL
	LD	(IX+-36),HL
	LD	(IX+-33),HL
	LD	(IX+-18),HL
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	LD	(IX+-82),HL
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_514
	LD	BC,(IX+-9)
	LEA	IY,IX+-128
	LD	(IY+-48),BC
	LD	BC,(IX+-9)
	LD	(IX+-12),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	(IX+-52),BC
	LD	BC,(IX+-9)
	LD	(IX+-61),BC
	LD	BC,(IX+-9)
	LD	(IX+-58),BC
	LD	BC,(IX+-9)
	LD	(IX+-55),BC
	LD	BC,(IX+-9)
	LD	(IX+-30),BC
	LD	BC,(IX+-9)
	LD	(IX+-27),BC
	LD	BC,(IX+-9)
	LD	(IX+-24),BC
	LD	BC,(IX+-9)
	LD	(IX+-21),BC
	LD	BC,(IX+-9)
	LD	(IX+-39),BC
	LD	BC,(IX+-9)
	LD	(IX+-36),BC
	LD	BC,(IX+-9)
	LD	(IX+-33),BC
	LD	BC,(IX+-9)
	LD	(IX+-18),BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_514
; 1032						if (trainerDir == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_498
; 1033							currentZoneData.trainerdir[npcIndex] = 4;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),4
; 1034						}
L_498:
; 1035						if (trainerDir == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_500
; 1036							currentZoneData.trainerdir[npcIndex] = 3;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),3
; 1037						}
L_500:
; 1038						if (trainerDir == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_502
; 1039							currentZoneData.trainerdir[npcIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),1
; 1040						}
L_502:
; 1041						if (trainerDir == 4) {
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_514
; 1042							currentZoneData.trainerdir[npcIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),2
; 1043						}
; 1044					}
L_514:
; 1045					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 2 && npcMoveState[npcIndex] % 16 == 8) {
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-57),HL
	LD	HL,(IY+-57)
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	(IX+-116),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_524
	LEA	IY,IX+-128
	LD	BC,(IY+-48)
	LD	(IX+-12),BC
	LD	(IX+-15),BC
	LD	BC,(IX+-12)
	LD	(IX+-52),BC
	LD	BC,(IX+-12)
	LD	(IX+-61),BC
	LD	BC,(IX+-12)
	LD	(IX+-58),BC
	LD	BC,(IX+-12)
	LD	(IX+-55),BC
	LD	BC,(IX+-12)
	LD	(IX+-30),BC
	LD	BC,(IX+-12)
	LD	(IX+-27),BC
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	(IX+-39),BC
	LD	BC,(IX+-12)
	LD	(IX+-36),BC
	LD	BC,(IX+-12)
	LD	(IX+-33),BC
	LD	BC,(IX+-12)
	LD	(IX+-18),BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_524
; 1046						if (trainerDir == 1 || trainerDir == 3) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_508
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_512
L_508:
; 1047							currentZoneData.trainerdir[npcIndex]++;
	LD	BC,_currentZoneData+576
	LEA	IY,IX+-128
	LD	HL,-191
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-63),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-60),HL
	LD	HL,(IY+-60)
	LD	BC,(IX+-3)
	LD	A,(HL)
	LD	DE,IX
	LD	HL,-191
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	INC	A
	LD	(HL),A
; 1048						}
L_512:
; 1049						if (trainerDir == 2 || trainerDir == 4) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_511
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_524
L_511:
; 1050							currentZoneData.trainerdir[npcIndex]--;
	LD	BC,_currentZoneData+576
	LEA	IY,IX+-128
	LD	HL,-197
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-69),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-66),HL
	LD	HL,(IY+-66)
	LD	BC,(IX+-3)
	LD	A,(HL)
	LD	DE,IX
	LD	HL,-197
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	DEC	A
	LD	(HL),A
; 1051						}
; 1052					}
L_524:
; 1053					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 3 && npcMoveState[npcIndex] % 16 == 8) {
	LD	HL,(IX+-116)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_538
	LD	BC,(IX+-12)
	LD	(IX+-15),BC
	LD	(IX+-52),BC
	LD	BC,(IX+-15)
	LD	(IX+-61),BC
	LD	BC,(IX+-15)
	LD	(IX+-58),BC
	LD	BC,(IX+-15)
	LD	(IX+-55),BC
	LD	BC,(IX+-15)
	LD	(IX+-30),BC
	LD	BC,(IX+-15)
	LD	(IX+-27),BC
	LD	BC,(IX+-15)
	LD	(IX+-24),BC
	LD	BC,(IX+-15)
	LD	(IX+-21),BC
	LD	BC,(IX+-15)
	LD	(IX+-39),BC
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	BC,(IX+-15)
	LD	(IX+-33),BC
	LD	BC,(IX+-15)
	LD	(IX+-18),BC
	LD	HL,(IX+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_538
; 1054						if (trainerDir == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_518
; 1055							currentZoneData.trainerdir[npcIndex] = 3;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),3
; 1056						}
L_518:
; 1057						if (trainerDir == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_520
; 1058							currentZoneData.trainerdir[npcIndex] = 4;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),4
; 1059						}
L_520:
; 1060						if (trainerDir == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_522
; 1061							currentZoneData.trainerdir[npcIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),2
; 1062						}
L_522:
; 1063						if (trainerDir == 4) {
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_538
; 1064							currentZoneData.trainerdir[npcIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),1
; 1065						}
; 1066					}
L_538:
; 1067	
; 1068					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove) {
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LD	(IX+-72),HL
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	(IX+-104),HL
	LD	(IX+-119),HL
	LD	HL,(IX+-104)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L__430
	LD	A,1
	JR	L__431
L__430:
	XOR	A,A
L__431:
	LD	(IX+-62),A
	LD	(IX+-79),A
	LD	A,(IX+-62)
	LD	(IX+-63),A
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_553
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_553
; 1069						if (trainerDir == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__435
	LD	A,1
	JR	L__436
L__435:
	XOR	A,A
L__436:
	LD	(IX+-86),A
	OR	A,A
	JR	NZ,L_528
; 1070							xlocMod += (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-15)
	LD	(IX+-52),BC
	LD	(IX+-61),BC
	LD	BC,(IX+-52)
	LD	(IX+-58),BC
	LD	BC,(IX+-52)
	LD	(IX+-55),BC
	LD	HL,(IX+-52)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-69),HL
; 1071						}
L_528:
; 1072						if (trainerDir == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_530
; 1073							xlocMod -= (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-52)
	LD	(IX+-61),BC
	LD	(IX+-58),BC
	LD	BC,(IX+-61)
	LD	(IX+-55),BC
	LD	HL,(IX+-61)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,(IX+-69)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-69),HL
; 1074						}
L_530:
; 1075						if (trainerDir == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_532
; 1076							ylocMod += (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-61)
	LD	(IX+-58),BC
	LD	(IX+-55),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-78),HL
; 1077						}
L_532:
; 1078						if (trainerDir == 4) {
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_534
; 1079							ylocMod -= (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-58)
	LD	(IX+-55),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,(IX+-78)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-78),HL
; 1080						}
L_534:
; 1081						if (npcMoveState[npcIndex] % 16 == 0) {
	LD	BC,(IX+-55)
	LD	(IX+-30),BC
	LD	(IX+-27),BC
	LD	BC,(IX+-30)
	LD	(IX+-24),BC
	LD	BC,(IX+-30)
	LD	(IX+-21),BC
	LD	BC,(IX+-30)
	LD	(IX+-39),BC
	LD	BC,(IX+-30)
	LD	(IX+-36),BC
	LD	BC,(IX+-30)
	LD	(IX+-33),BC
	LD	BC,(IX+-30)
	LD	(IX+-18),BC
	LD	HL,(IX+-30)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LEA	IY,IX+-128
	LD	(IY+-12),HL
	LD	HL,(IY+-12)
	CALL	__icmpzero
	JR	NZ,L_536
; 1082							currentTypeMap[(currentZoneData.trainerx[npcIndex] + (trainerDir == 1) - (trainerDir == 2) - (trainerDir != 1)) + (tilemap.width * (currentZoneData.trainery[npcIndex] + (trainerDir == 3) - (trainerDir == 4)))] = 96 + npcIndex;
	LD	BC,_currentZoneData+544
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	BC,1
	LD	L,A
	LD	DE,HL
	LD	H,(IX+-3)
	PUSH	IY
	PUSH	BC
	LD	IY,-283	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	JR	NZ,L__443
	LD	B,1
	JR	L__444
L__443:
	LD	B,0
L__444:
	LD	A,B
	SEXT	HL
	LD	L,B
	ADD	HL,DE
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-281	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,2
	SBC	HL,DE
	JR	NZ,L__446
	LD	B,1
	JR	L__447
L__446:
	LD	B,0
L__447:
	LD	DE,3
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(IX+-86)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-278	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-281	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-278	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-263	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-3)
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-266	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,_currentZoneData+560
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-269	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-266	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-269	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-272	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-275	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-272	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__449
	LD	B,1
	JR	L__450
L__449:
	LD	B,0
L__450:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,-275	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-260	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__452
	LD	B,1
	JR	L__453
L__452:
	LD	B,0
L__453:
	LD	A,B
	LD	DE,_currentTypeMap
	SEXT	HL
	LD	A,(_tilemap+13)
	LD	L,B
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-257	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-260	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-257	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-126),BC
	POP	IY
	UEXT	HL
	LD	L,A
	PUSH	IY
	PUSH	BC
	LD	IY,-282	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-283	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-282	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	LEA	IY,IX+-128	; spill
	LD	(IY+-120),HL
	LD	BC,(IY+-126)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-120)
	POP	IY
	CALL	__imuls
	LD	BC,-263	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	ADD	HL,DE
	ADD	A,96
	LD	(HL),A
; 1083						}
L_536:
; 1084						if (npcMoveState[npcIndex] % 16 == 15) {
	LEA	IY,IX+-128
	LD	HL,(IY+-12)
	LD	BC,15
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_553
; 1085							currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])] = 0;
	LD	BC,_currentZoneData+544
	LEA	IY,IX+-128
	LD	HL,-209
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-81),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-78),HL
	LD	BC,_currentZoneData+560
	LD	HL,-203
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-75),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-72),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	IY,(IY+-72)
	LD	L,A
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LEA	IY,IX+-128
	LD	IY,(IY+-78)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	(HL),0
; 1086							currentZoneData.trainerx[npcIndex] += ((trainerDir == 1) - (trainerDir == 2));
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__456
	LD	A,1
	JR	L__457
L__456:
	XOR	A,A
L__457:
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__459
	LD	B,1
	JR	L__460
L__459:
	LD	B,0
L__460:
	SUB	A,B
	LEA	IY,IX+-128
	LD	HL,-209
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(IY+-78)
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
; 1087							currentZoneData.trainery[npcIndex] += ((trainerDir == 3) - (trainerDir == 4));
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__462
	LD	A,1
	JR	L__463
L__462:
	XOR	A,A
L__463:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__465
	LD	B,1
	JR	L__466
L__465:
	LD	B,0
L__466:
	SUB	A,B
	LEA	IY,IX+-128
	LD	HL,-203
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(IY+-72)
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
; 1088						}
; 1089					}
L_553:
; 1090	
; 1091	
; 1092					if (currentZoneData.trainerskin[npcIndex] < 128) {
	LD	BC,_currentZoneData+592
	LEA	IY,IX+-128
	LD	HL,-146
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-18),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IX+-89),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,128
	SBC	HL,BC
	JP	P,L_552
; 1093						gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[(currentZoneData.trainerskin[npcIndex] * 12) + ((trainerDir - 1) * 3) + ((npcMoveState[npcIndex] % 16) / 4 == 1 && (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove)) + 2 * ((npcMoveState[npcIndex] % 16) / 4 == 3 && (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove))], xloc + xlocMod - 8, yloc + ylocMod + 3);
	LD	BC,(IX+-30)
	LD	(IX+-27),BC
	LD	(IX+-24),BC
	LD	BC,(IX+-27)
	LD	(IX+-21),BC
	LD	BC,(IX+-27)
	LD	(IX+-39),BC
	LD	BC,(IX+-27)
	LD	(IX+-36),BC
	LD	BC,(IX+-27)
	LD	(IX+-33),BC
	LD	BC,(IX+-27)
	LD	(IX+-18),BC
	LD	HL,(IX+-27)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LEA	IY,IX+-128
	LD	BC,16
	CALL	__irems
	LD	BC,4
	CALL	__idivs
	LD	(IY+-21),HL
	LD	HL,(IY+-21)
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_542
	LD	A,(IX+-62)
	LD	(IX+-79),A
	LD	A,(IX+-62)
	LD	(IX+-63),A
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_542
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_542
	LD	(IX+-110),BC
	JR	L_543
L_542:
	LD	BC,0
	LD	(IX+-110),BC
L_543:
	LEA	IY,IX+-128
	LD	HL,(IY+-21)
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_548
	LD	A,(IX+-79)
	LD	(IX+-63),A
	OR	A,A
	JR	NZ,L_548
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_548
	LD	BC,1
	LD	(IX+-113),BC
	JR	L_549
L_548:
	LD	BC,0
	LD	(IX+-113),BC
L_549:
	LD	BC,(IX+-69)
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	(IX+-95),HL
	LD	BC,(IX+-78)
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	(IX+-92),HL
	LD	IY,(IX+-92)
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+-95)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-89)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,HL
	LD	HL,(IX+-6)
	DEC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IX+-110)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-113)
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1094					}
; 1095					else {
	JR	L_555
L_552:
; 1096						gfx_TransparentSprite((gfx_sprite_t*)PKMNSD8[32 + ((currentZoneData.trainerskin[npcIndex] - 128) * 4) + (trainerDir - 1)], xloc + xlocMod - 8, yloc + ylocMod + 3);
	LD	BC,(IX+-69)
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	(IX+-95),HL
	LD	BC,(IX+-78)
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	(IX+-92),HL
	LD	IY,(IX+-92)
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+-95)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-89)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-128
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LD	BC,(IX+-6)
	DEC	BC
	LEA	HL,IY+32
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD8
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1097					}
L_555:
; 1098					if (showExclamationPoint == 2) {
	LD	A,(_showExclamationPoint)
	CP	A,2
	JR	NZ,L_584
; 1099						showExclamationPoint = 1;
	LD	A,1
	LD	(_showExclamationPoint),A
; 1100						exclamationX = xloc + xlocMod - 6;
	LD	IY,(IX+-95)
	LEA	BC,IY+-6
	LD	(_exclamationX),BC
; 1101						exclamationY = yloc + ylocMod - 8;
	LD	IY,(IX+-92)
	LEA	BC,IY+-8
	LD	(_exclamationY),BC
; 1102					}
L_584:
; 1103					
; 1104					/* Grass */
; 1105					if (currentTileMap[currentZoneData.trainerx[npcIndex] + tilemap.width * currentZoneData.trainery[npcIndex]] == 2 && !currentSave.indoors) {
	LD	BC,_currentZoneData+560
	LEA	IY,IX+-128
	LD	HL,-179
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-51),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-30),HL
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+544
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	IY,(IY+-30)
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-123),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-120),HL
	LD	BC,(IY+-123)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-120)
	POP	IY
	CALL	__imuls
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_587
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_587
; 1106						if (trainerDir != 3 || npcMoveState[npcIndex] % 16 <= 1 || !canMove || npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] != 4) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_566
	LD	BC,(IX+-27)
	LD	(IX+-24),BC
	LD	(IX+-21),BC
	LD	BC,(IX+-24)
	LD	(IX+-39),BC
	LD	BC,(IX+-24)
	LD	(IX+-36),BC
	LD	BC,(IX+-24)
	LD	(IX+-33),BC
	LD	BC,(IX+-24)
	LD	(IX+-18),BC
	LD	HL,(IX+-24)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,1
	OR	A,A
	SBC	HL,BC
	JP	P,L_566
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_566
	LD	BC,(IX+-104)
	LD	(IX+-119),BC
	LD	HL,(IX+-104)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_579
L_566:
; 1107							if (npcGrassAnimState[npcIndex] > 5 && npcMoveState[npcIndex] % 16 < 14) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-33),HL
	LD	HL,(IY+-33)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_565
	LD	BC,(IX+-24)
	LD	(IX+-21),BC
	LD	(IX+-39),BC
	LD	BC,(IX+-21)
	LD	(IX+-36),BC
	LD	BC,(IX+-21)
	LD	(IX+-33),BC
	LD	BC,(IX+-21)
	LD	(IX+-18),BC
	LD	HL,(IX+-21)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_565
; 1108								gfx_TransparentSprite(grassoverlay3, xloc - 8, yloc + 13);
	LD	IY,(IX+-48)
	LEA	BC,IY+13
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1109							}
; 1110							else if (npcGrassAnimState[npcIndex] > 0 && npcMoveState[npcIndex] % 16 < 14) {
	JR	L_579
L_565:
	LEA	IY,IX+-128
	LD	HL,(IY+-33)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_563
	LD	BC,(IX+-21)
	LD	(IX+-39),BC
	LD	(IX+-36),BC
	LD	BC,(IX+-39)
	LD	(IX+-33),BC
	LD	BC,(IX+-39)
	LD	(IX+-18),BC
	LD	HL,(IX+-39)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_563
; 1111								gfx_TransparentSprite(grassoverlay2, xloc - 8, yloc + 14);
	LD	IY,(IX+-48)
	LEA	BC,IY+14
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1112							}
; 1113							else {
	JR	L_579
L_563:
; 1114								gfx_TransparentSprite(grassoverlay1, xloc - 8, yloc + 18);
	LD	IY,(IX+-48)
	LEA	BC,IY+18
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1115							}
; 1116						}
L_579:
; 1117						if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove && (trainerDir != 4 || npcMoveState[npcIndex] % 16 >= 14)) {
	LD	A,(IX+-63)
	OR	A,A
	JR	NZ,L_582
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_582
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_578
	LD	BC,(IX+-39)
	LD	(IX+-36),BC
	LD	(IX+-33),BC
	LD	BC,(IX+-36)
	LD	(IX+-18),BC
	LD	HL,(IX+-36)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,14
	SBC	HL,BC
	JP	M,L_582
L_578:
; 1118							if (npcMoveState[npcIndex] % 16 == 14) {
	LD	BC,(IX+-36)
	LD	(IX+-33),BC
	LD	(IX+-18),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-98),HL
	LEA	IY,IX+-128
	LD	(IY+-36),HL
	LD	HL,(IX+-98)
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	JR	NZ,L_577
; 1119								npcGrassAnimState[npcIndex] = 10;
	LD	HL,(IX+-3)
	LD	BC,_npcGrassAnimState
	ADD	HL,BC
	LD	(HL),10
; 1120							}
L_577:
; 1121							if (npcGrassAnimState[npcIndex] > 5 && npcMoveState[npcIndex] % 16 >= 14) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-42),HL
	LD	HL,(IY+-42)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_576
	LD	BC,(IX+-98)
	LEA	IY,IX+-128
	LD	(IY+-36),BC
	LD	HL,(IX+-98)
	LD	BC,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_576
; 1122								gfx_TransparentSprite(grassoverlay3, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 13 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__493
	LD	B,1
	JR	L__494
L__493:
	LD	B,0
L__494:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-117),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__496
	LD	B,1
	JR	L__497
L__496:
	LD	B,0
L__497:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-108),DE
	POP	IY
	LEA	DE,IY+13
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-111),DE	; unspill
	LD	DE,(IY+-108)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-114),HL
	LD	BC,(IY+-117)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-114)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-108),DE
	LD	DE,(IY+-111)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-108)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__499
	LD	B,1
	JR	L__500
L__499:
	LD	B,0
L__500:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__502
	LD	B,1
	JR	L__503
L__502:
	LD	B,0
L__503:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1123							}
; 1124							else if (npcGrassAnimState[npcIndex] > 0 && npcMoveState[npcIndex] % 16 >= 14) {
	JR	L_582
L_576:
	LEA	IY,IX+-128
	LD	HL,(IY+-42)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_574
	LEA	IY,IX+-128
	LD	HL,(IY+-36)
	LD	BC,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_574
; 1125								gfx_TransparentSprite(grassoverlay2, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 14 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__507
	LD	B,1
	JR	L__508
L__507:
	LD	B,0
L__508:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-105),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__510
	LD	B,1
	JR	L__511
L__510:
	LD	B,0
L__511:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-96),DE
	POP	IY
	LEA	DE,IY+14
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-99),DE	; unspill
	LD	DE,(IY+-96)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-102),HL
	LD	BC,(IY+-105)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-102)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-96),DE
	LD	DE,(IY+-99)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-96)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__513
	LD	B,1
	JR	L__514
L__513:
	LD	B,0
L__514:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__516
	LD	B,1
	JR	L__517
L__516:
	LD	B,0
L__517:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1126							}
; 1127							else {
	JR	L_582
L_574:
; 1128								gfx_TransparentSprite(grassoverlay1, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 18 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__519
	LD	B,1
	JR	L__520
L__519:
	LD	B,0
L__520:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-93),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__522
	LD	B,1
	JR	L__523
L__522:
	LD	B,0
L__523:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-84),DE
	POP	IY
	LEA	DE,IY+18
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-87),DE	; unspill
	LD	DE,(IY+-84)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-90),HL
	LD	BC,(IY+-93)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-90)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-84),DE
	LD	DE,(IY+-87)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-84)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__525
	LD	B,1
	JR	L__526
L__525:
	LD	B,0
L__526:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__528
	LD	B,1
	JR	L__529
L__528:
	LD	B,0
L__529:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1129							}
; 1130						}
L_582:
; 1131						if (npcGrassAnimState[npcIndex] > 0) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LD	(IX+-75),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_587
; 1132							npcGrassAnimState[npcIndex]--;
	LD	HL,(IX+-75)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-75)
	LD	(HL),A
; 1133						}
; 1134	
; 1135						
; 1136					}
L_587:
; 1137	
; 1138					if (canMove) {
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_589
; 1139						npcMoveState[npcIndex]++;
	LD	BC,(IX+-33)
	LD	(IX+-18),BC
	LD	HL,BC
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-18)
	LD	(HL),A
; 1140					}
L_589:
; 1141	
; 1142	
; 1143					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 5) {
	LD	HL,(IX+-119)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_591
; 1144						npcMoveState[npcIndex] = 0;
	LD	HL,(IX+-18)
	LD	(HL),0
; 1145					}
L_591:
; 1146	
; 1147					if (ty - 1 == currentZoneData.trainery[npcIndex]) {
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LEA	IY,IX+-128
	LD	IY,(IY+-30)
	LD	BC,HL
	DEC	BC
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_595
; 1148						DrawPlayer();
	CALL	_DrawPlayer
; 1149					}
; 1150	
; 1151				}
; 1152			}
; 1153	
; 1154		}
L_595:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_596:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_594
; 1155	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ProcessNpcs ***************************
;Name                         Addr/Register   Size   Type
;_DrawPlayer                         IMPORT  -----   function
;_grassoverlay1_data                 IMPORT     98   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_npcGrassAnimState                  STATIC     16   variable
;_currentTileMap                     STATIC   1920   variable
;_exclamationY                       STATIC      3   variable
;_exclamationX                       STATIC      3   variable
;_PKMNSD8                            IMPORT    240   variable
;_PKMNSD7                            IMPORT    360   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_showExclamationPoint               STATIC      1   variable
;_npcToFight                         STATIC      3   variable
;_currentSave                        IMPORT   4142   variable
;_npcSaidMessage                     STATIC     16   variable
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_npcPatterns                        STATIC    128   variable
;_npcMoveState                       STATIC     16   variable
;_tilemap                            STATIC     18   variable
;_currentTypeMap                     STATIC   1920   variable
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_currentZoneData                    STATIC    720   variable
;G_72                                IX-185      3   variable
;G_49                                IX-182      3   variable
;G_113                               IX-179      3   variable
;G_71                                IX-176      3   variable
;G_56                                IX-173      3   variable
;G_106                               IX-170      3   variable
;G_59                                IX-167      3   variable
;G_107                               IX-164      3   variable
;G_99                                IX-161      3   variable
;G_114                               IX-158      3   variable
;G_50                                IX-155      3   variable
;G_62                                IX-152      3   variable
;G_86                                IX-149      3   variable
;G_89                                IX-146      3   variable
;G_55                                IX-143      3   variable
;G_82                                IX-140      3   variable
;G_57                                IX-137      3   variable
;G_58                                IX-134      3   variable
;G_60                                IX-131      3   variable
;G_61                                IX-128      3   variable
;G_51                                IX-125      3   variable
;G_52                                IX-122      3   variable
;G_111                               IX-119      3   variable
;G_73                                IX-116      3   variable
;temp550                             IX-113      3   variable
;temp544                             IX-110      3   variable
;G_63                                IX-107      3   variable
;G_97                                IX-104      3   variable
;G_54                                IX-101      3   variable
;G_105                                IX-98      3   variable
;G_93                                 IX-95      3   variable
;G_94                                 IX-92      3   variable
;G_90                                 IX-89      3   variable
;G_81                                 IX-86      1   variable
;G_53                                 IX-85      3   variable
;G_70                                 IX-82      3   variable
;G_88                                 IX-79      1   variable
;ylocMod                              IX-78      3   variable
;G_108                                IX-75      3   variable
;G_84                                 IX-72      3   variable
;xlocMod                              IX-69      3   variable
;G_64                                 IX-66      3   variable
;G_102                                IX-63      1   variable
;G_85                                 IX-62      1   variable
;G_78                                 IX-61      3   variable
;G_79                                 IX-58      3   variable
;G_80                                 IX-55      3   variable
;G_77                                 IX-52      3   variable
;canMove                              IX-49      1   variable
;yloc                                 IX-48      3   variable
;xloc                                 IX-45      3   variable
;tileIndex                            IX-42      3   variable
;G_103                                IX-39      3   variable
;G_104                                IX-36      3   variable
;G_109                                IX-33      3   variable
;G_83                                 IX-30      3   variable
;G_95                                 IX-27      3   variable
;G_98                                 IX-24      3   variable
;G_100                                IX-21      3   variable
;G_112                                IX-18      3   variable
;G_76                                 IX-15      3   variable
;G_74                                 IX-12      3   variable
;G_69                                  IX-9      3   variable
;trainerDir                            IX-6      3   variable
;npcIndex                              IX-3      3   variable


; Stack Frame Size: 295 (bytes)
;       Spill Code: -39 (instruction)


; 1156	void map_DrawInformationBar(void) {
_map_DrawInformationBar:
	LD	HL,-3
	CALL	__frameset
; 1157		int pokemonIndex;
; 1158		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
; 1159		gfx_FillRectangle(0, 0, 320, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1160		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_601
L_599:
; 1161			gfx_TransparentSprite_NoClip(pokeballSprites[pokeballdata[pokemonIndex]], 16 * pokemonIndex, 0);
	LD	BC,_pokeballdata
	LD	DE,0
	PUSH	DE
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
; 1162		}
L_601:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_599
; 1163		sprintf(str, "%u$", currentSave.playerMoney);
	LD	A,(_currentSave+1242)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+1239)
	PUSH	BC
	LD	BC,L__537
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1164		gfx_PrintStringXY(str, 100, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1165	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_DrawInformationBar ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_currentSave                        IMPORT   4142   variable
;_sprintf                            IMPORT  -----   function
;_pokeballdata                       STATIC      6   variable
;_pokeballSprites                    STATIC      9   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -39 (instruction)


	SEGMENT STRSECT
L__537:
	DB	"%u$"
	DB	0
	SEGMENT CODE
; 1166	void map_LoseFight(void) {
_map_LoseFight:
	LD	HL,-45
	CALL	__frameset
; 1167		int tileIndex, partyIndex, moveIndex;
; 1168		text_Display("All your pokemon have fainted", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__539
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1169		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_611
L_609:
; 1170			currentSave.party[partyIndex].currenthealth = stats_CalculateStats(currentSave.party[partyIndex]).health;
	LD	BC,_currentSave+10
	LD	(IX+-6),BC
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-39),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-33
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	(IX+-45),HL	; spill
	ADD	IY,SP
	LD	SP,IY
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-45)	; unspill
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
; 1171			currentSave.party[partyIndex].currentstatus = 0;
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+15),0
; 1172			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-15),HL
	JR	L_608
L_606:
; 1173				currentSave.party[partyIndex].pp[moveIndex] = data_moves[currentSave.party[partyIndex].moves[moveIndex]].uses;
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	IY,(IX+-36)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
; 1174			}
L_608:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_606
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
; 1175		}
L_611:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_609
; 1176		currentSave.playerX = 16*16;
	LD	HL,_currentSave+2
	LD	(HL),0
	INC	HL
	LD	(HL),1
; 1177		currentSave.playerY = 20*16;
	LD	HL,_currentSave+4
	LD	(HL),64
	INC	HL
	LD	(HL),1
; 1178		currentSave.indoors = false;
	XOR	A,A
	LD	(_currentSave+1236),A
; 1179		currentSave.currentZone = 0;
	LD	HL,_currentSave+1234
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1180		moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
; 1181		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
; 1182		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
; 1183		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
; 1184		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
; 1185		LoadMap();
	CALL	_LoadMap
; 1186	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoseFight ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_moveDir                            STATIC      1   variable
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_currentSave                        IMPORT   4142   variable
;_text_Display                       IMPORT  -----   function
;O_65                                 IX-21      3   variable
;O_64                                 IX-18      3   variable
;O_66                                 IX-15      3   variable
;G_116                                IX-12      3   variable
;moveIndex                             IX-9      3   variable
;G_115                                 IX-6      3   variable
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 51 (bytes)
;       Spill Code: -40 (instruction)


	SEGMENT STRSECT
L__539:
	DB	"All your pokemon have fainted"
	DB	0
	SEGMENT CODE
; 1187	void map_WinFight(bool wild, uint16_t rewardMoney) {
_map_WinFight:
	CALL	__frameset0
; 1188		char str1[16];
; 1189		if (!wild) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_619
; 1190			if (lastTextIndex > 0) {
	LD	BC,(_lastTextIndex)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_615
; 1191				LoadText(lastTextID);
	LD	BC,(_lastTextID)
	CALL	__stoiu
	PUSH	HL
	CALL	_LoadText
	POP	BC
; 1192				text_Display(loadedText + lastTextIndex , true);
	LD	BC,(_lastTextIndex)
	CALL	__stoiu
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
; 1193			}
L_615:
; 1194			currentSave.playerMoney += rewardMoney;
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	A,(_currentSave+1242)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_currentSave+1239)
	CALL	__ladd
	LD	(_currentSave+1239),HL
	LD	A,E
	LD	(_currentSave+1242),A
; 1195			if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_617
; 1196				currentSave.defeatedTrainersIndoors[currentSave.currentBuilding][currentTrainer] = true;
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
; 1197				AddItem(currentZoneData.trainerreward[currentTrainer]);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_AddItem
	POP	BC
; 1198			}
; 1199			else {
	JR	L_619
L_617:
; 1200				currentSave.defeatedTrainers[currentSave.currentZone][currentTrainer] = true;
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
; 1201				AddItem(currentZoneData.trainerreward[currentTrainer]);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_AddItem
	POP	BC
; 1202			}
; 1203		}
; 1204	}
L_619:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_WinFight ***************************
;Name                         Addr/Register   Size   Type
;_currentZoneData                    STATIC    720   variable
;_AddItem                            IMPORT  -----   function
;_currentTrainer                     STATIC      1   variable
;_currentSave                        IMPORT   4142   variable
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_lastTextID                         IMPORT      2   variable
;_LoadText                           IMPORT  -----   function
;_lastTextIndex                      IMPORT      2   variable
;rewardMoney                           IX+9      2   parameter
;wild                                  IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -40 (instruction)


; 1205	void LoadTileset(bool freeOld) {
_LoadTileset:
	LD	HL,-6
	CALL	__frameset
; 1206		int tileIndex = 0;
; 1207		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_645
L_643:
; 1208			if (freeOld) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_622
; 1209				free(mapTiles[tileIndex]);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
; 1210			}
L_622:
; 1211			mapTiles[tileIndex] = gfx_MallocSprite(16, 16);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,_mapTiles
	ADD	HL,DE
	LD	(HL),BC
; 1212			if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_642
; 1213				if (data_indoortileSets[currentSave.currentBuilding] == 0) {
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,_data_indoortileSets
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_627
; 1214					zx7_Decompress(mapTiles[tileIndex], indoortileset0_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset0_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1215				}
; 1216				else if (data_indoortileSets[currentSave.currentBuilding] == 1) {
	JR	L_644
L_627:
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_625
; 1217					zx7_Decompress(mapTiles[tileIndex], indoortileset1_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset1_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1218				}
; 1219				else if (data_indoortileSets[currentSave.currentBuilding] == 2) {
	JR	L_644
L_625:
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,_data_indoortileSets
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_644
; 1220					zx7_Decompress(mapTiles[tileIndex], indoortileset2_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset2_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1221				}
; 1222			}
; 1223			else {
	JR	L_644
L_642:
; 1224			
; 1225				if (data_tileSets[currentSave.currentZone] == 0) {
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_640
; 1226					zx7_Decompress(mapTiles[tileIndex], outdoortileset0_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset0_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1227				}
; 1228				else if (data_tileSets[currentSave.currentZone] == 1) {
	JR	L_644
L_640:
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_638
; 1229					zx7_Decompress(mapTiles[tileIndex], outdoortileset1_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset1_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1230				}
; 1231				else if (data_tileSets[currentSave.currentZone] == 2) {
	JR	L_644
L_638:
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_636
; 1232					zx7_Decompress(mapTiles[tileIndex], outdoortileset2_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset2_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1233				}
; 1234				else if (data_tileSets[currentSave.currentZone] == 3) {
	JR	L_644
L_636:
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_644
; 1235					zx7_Decompress(mapTiles[tileIndex], outdoortileset3_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset3_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1236				}
; 1237				else if (data_tileSets[currentSave.currentZone] == 4) {
; 1238					//zx7_Decompress(mapTiles[tileIndex], outdoortileset4_tiles_compressed[tileIndex]);
; 1239				}
; 1240				else if (data_tileSets[currentSave.currentZone] == 5) {
; 1241					//zx7_Decompress(mapTiles[tileIndex], outdoortileset5_tiles_compressed[tileIndex]);
; 1242				}
; 1243				else if (data_tileSets[currentSave.currentZone] == 6) {
; 1244					//zx7_Decompress(mapTiles[tileIndex], outdoortileset6_tiles_compressed[tileIndex]);
; 1245				}
; 1246			}
; 1247		}
L_644:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_645:
	LD	BC,128
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_643
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadTileset ***************************
;Name                         Addr/Register   Size   Type
;_outdoortileset3_tiles_compressed      IMPORT    384   variable
;_outdoortileset2_tiles_compressed      IMPORT    384   variable
;_outdoortileset1_tiles_compressed      IMPORT    384   variable
;_outdoortileset0_tiles_compressed      IMPORT    384   variable
;_data_tileSets                      IMPORT     32   variable
;_indoortileset2_tiles_compressed      IMPORT    384   variable
;_indoortileset1_tiles_compressed      IMPORT    384   variable
;_indoortileset0_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_data_indoortileSets                IMPORT     32   variable
;_currentSave                        IMPORT   4142   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-6      3   variable
;G_117                                 IX-3      3   variable
;freeOld                               IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -40 (instruction)


	XREF _PKMNSD8_init:ROM
	XREF _PKMNSD8:ROM
	XREF _PKMNSD7_init:ROM
	XREF _PKMNSD7:ROM
	XREF _PKMNSD4_init:ROM
	XREF _pokeball_tiles_compressed:ROM
	XREF _outdoortileset3_tiles_compressed:ROM
	XREF _outdoortileset2_tiles_compressed:ROM
	XREF _outdoortileset1_tiles_compressed:ROM
	XREF _outdoortileset0_tiles_compressed:ROM
	XREF _indoortileset2_tiles_compressed:ROM
	XREF _indoortileset1_tiles_compressed:ROM
	XREF _indoortileset0_tiles_compressed:ROM
	XREF _PKMNSD4:ROM
	XREF _shop_compressed:ROM
	XREF _exclamationpoint_data:ROM
	XREF _grassoverlay3_data:ROM
	XREF _grassoverlay2_data:ROM
	XREF _grassoverlay1_data:ROM
	XREF _stats_NewCharacter:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_SelectSave:ROM
	XREF _save_Load:ROM
	XREF _currentSave:ROM
	XREF _lastTextID:ROM
	XREF _lastTextIndex:ROM
	XREF _textBoxType:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _items_IndexToName:ROM
	XREF _colors:ROM
	XREF _str:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _menu_ItemShop:ROM
	XREF _menu_Box:ROM
	XREF _menu_Menu:ROM
	XREF _battle_SpawnTrainer:ROM
	XREF _battle_SpawnWild:ROM
	XREF _data_indoortileSets:ROM
	XREF _data_tileSets:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _loadedText:ROM
	XREF _LoadText:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _sprintf:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmps:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __ineg:ROM
	XREF __smulu:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XREF __ishl_b:ROM
	XDEF _LoadTileset
	XDEF _map_WinFight
	XDEF _map_LoseFight
	XDEF _map_DrawInformationBar
	XDEF _ProcessNpcs
	XDEF _GetTypeMapData
	XDEF _ShiftTile
	XDEF _GetNextTile
	XDEF _Clamp
	XDEF _LoadMap
	XDEF _map_LoadPokeballs
	XDEF _FightTrainer
	XDEF _AddItem
	XDEF _ExitZone
	XDEF _ExitBuilding
	XDEF _EnterDoor
	XDEF _ReadText
	XDEF _OpenBox
	XDEF _HealParty
	XDEF _GrassAnimation
	XDEF _DrawPlayer
	XDEF _map_Draw
	XDEF _map_End
	XDEF _map_Loop
	XDEF _map_SetupGfx
	XDEF _map_Setup
	XDEF _map_Initialize
	XDEF _currentTrainer
	XDEF _currentZoneData
	XDEF _currentTypeMap
	XDEF _currentTileMap
	XDEF _pokeballSprites
	XDEF _mapTiles
	XDEF _tilemap
	XDEF _jumpHeights
	XDEF _jumpState
	XDEF _playerState
	XDEF _moveDir
	XDEF _moveState
	XDEF _nextTile
	XDEF _npcPatterns
	XDEF _npcSaidMessage
	XDEF _npcGrassAnimState
	XDEF _exclamationY
	XDEF _exclamationX
	XDEF _showExclamationPoint
	XDEF _npcToFight
	XDEF _npcOldTiles
	XDEF _npcMoveState
	XDEF _grassAnimY2
	XDEF _grassAnimX2
	XDEF _grassAnimY1
	XDEF _grassAnimX1
	XDEF _grassAnimState2
	XDEF _grassAnimState1
	XDEF _grassAnimNext
	XDEF _currentWater
	XDEF _currentRun
	XDEF _currentStep
	XDEF _running
	XDEF _ty
	XDEF _tx
	XDEF _screenY
	XDEF _screenX
	XDEF _pokeballdata
	XDEF _battlechance
	END
