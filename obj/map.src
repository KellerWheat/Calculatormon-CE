; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAP.C"
	.assume ADL=1
	SEGMENT TEXT
_battlechance:
	DW	10
	DB	0
	SEGMENT DATA
_pokeballdata:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_screenX:
	DL	0
_screenY:
	DL	0
	SEGMENT BSS
_tx:
	DS	1
_ty:
	DS	1
_running:
	DS	1
_currentWater:
	DS	3
_nextTile:
	DS	1
	SEGMENT DATA
_moveState:
	DB	0
_moveDir:
	DB	3
_playerState:
	DB	0
	SEGMENT BSS
_tilemap:
	DS	18
_mapTiles:
	DS	384
_playerSprites:
	DS	96
_enemySprites:
	DS	12
_pokeballSprites:
	DS	9
_pauseMenuSprite:
	DS	3
_currentTileMap:
	DS	1920
_currentTypeMap:
	DS	1920
_currentZoneData:
	DS	640
_npc1:
	DS	1
_npc2:
	DS	1
	SEGMENT DATA
_currentTrainer:
	DB	0
	SEGMENT BSS
_tempcharacter2:
	DS	34
	SEGMENT TEXT
_clearcharacter2:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_str1:
	DS	20
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <debug.h>
;   12	#include <compression.h>
;   13	#include <fileioc.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "items.h"
;   21	#include "text.h"
;   22	#include "savegame.h"
;   23	#include "stats.h"
;   24	#include "gfx/map_gfx.h"
;   25	#include "items.h"
;   26	
;   27	#include "gfx/PKMNSD4.h"
;   28	
;   29	#define OUTDOORWIDTH 48
;   30	#define OUTDOORHEIGHT 40
;   31	#define MAX_X ((OUTDOORWIDTH - 21)*16)
;   32	#define MAX_Y ((OUTDOORHEIGHT - 15)*16)
;   33	
;   34	void HealParty(void);
;   35	void OpenBox(void);
;   36	void TalkToNpc1(void);
;   37	void TalkToNpc2(void);
;   38	void EnterDoor(uint8_t index);
;   39	void ExitBuilding(void);
;   40	void ExitZone(uint8_t index);
;   41	bool FightTrainer(uint8_t index);
;   42	
;   43	int32_t Clamp(int32_t number, int min, int max);
;   44	/* Gets the tile the player is facing*/
;   45	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width);
;   46	/* Gets the typemap at a specific tile */
;   47	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width);
;   48	/* Draw 16 enemy trainers */
;   49	void DrawEnemies(void);
;   50	/* Loads the tilemap, typemap ,and zonedata for current area */
;   51	void LoadMap(void);
;   52	
;   53	void GrassOverlay(bool part);
;   54	
;   55	const int battlechance = 10; /* Chance for enemy to spawn out of 100 */
;   56	
;   57	
;   58	uint8_t pokeballdata[] = {
;   59		0,0,0,0,0,0
;   60	};
;   61	
;   62	int32_t screenX = 0;
;   63	int32_t screenY = 0;
;   64	
;   65	uint8_t tx; /* x tile */
;   66	uint8_t ty; /* y tile */
;   67	bool running;
;   68	int currentWater;
;   69	
;   70	uint8_t nextTile;
;   71	uint8_t moveState = 0;
;   72	uint8_t moveDir = 3;
;   73	uint8_t playerState = 0;
;   74	
;   75	gfx_tilemap_t tilemap;
;   76	
;   77	gfx_sprite_t *mapTiles[128];
;   78	gfx_sprite_t *playerSprites[32];
;   79	gfx_sprite_t *enemySprites[4];
;   80	gfx_sprite_t *pokeballSprites[3];
;   81	gfx_sprite_t *pauseMenuSprite;
;   82	
;   83	uint8_t currentTileMap[1920];
;   84	uint8_t currentTypeMap[1920];
;   85	struct zoneData currentZoneData;
;   86	/* zoneData is in header file because battle.c needs it*/
;   87	
;   88	uint8_t npc1;
;   89	uint8_t npc2;
;   90	
;   91	uint8_t currentTrainer = 0; /* 0-15 */
;   92	struct pokemonData tempcharacter2;
;   93	const struct pokemonData clearcharacter2 = {0};
;   94	
;   95	char str1[20];
	SEGMENT CODE
;   96	
;   97	void map_Initialize(void) {
_map_Initialize:
;   98		PKMNSD4_init();
	CALL	_PKMNSD4_init
;   99	
;  100		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD4+126
	LD	BC,462
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  101		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  102		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  103		zx7_Decompress(textBoxSprite1, maptextbox1_compressed);
	LD	HL,_PKMNSD4+108
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  104		zx7_Decompress(textBoxSprite2, maptextbox2_compressed);
	LD	HL,_PKMNSD4+111
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  105		save_SelectSave();
	CALL	_save_SelectSave
;  106		save_Load();
	CALL	_save_Load
;  107	
;  108		/* Initialize the tilemap */
;  109		tilemap.map = currentTileMap;
	LD	BC,_currentTileMap
	LD	(_tilemap),BC
;  110		tilemap.tiles = mapTiles;
	LD	BC,_mapTiles
	LD	(_tilemap+3),BC
;  111		tilemap.type_width = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  112		tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  113		tilemap.tile_height = 16;
	LD	A,16
	LD	(_tilemap+6),A
;  114		tilemap.tile_width = 16;
	LD	(_tilemap+7),A
;  115		tilemap.draw_height = 16;
	LD	(_tilemap+8),A
;  116		tilemap.draw_width = 22;
	LD	A,22
	LD	(_tilemap+9),A
;  117		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  118		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  119		tilemap.y_loc = 8;
	LD	A,8
	LD	(_tilemap+14),A
;  120		tilemap.x_loc = -8;
	LD	BC,16777208
	LD	(_tilemap+15),BC
;  121	
;  122		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_1
;  123			tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  124			tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  125		}
L_1:
;  126	
;  127		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  128		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  129		LoadMap();
	CALL	_LoadMap
;  130	}
	RET	


;**************************** _map_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_save_Load                          IMPORT  -----   function
;_save_SelectSave                    IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_zx7_Decompress                     IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT    129   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_PKMNSD4_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  131	void map_Setup(void) {
_map_Setup:
;  132		map_SetupGfx();
	CALL	_map_SetupGfx
;  133	
;  134		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  135		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  136	}
	RET	


;**************************** _map_Setup ***************************
;Name                         Addr/Register   Size   Type
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_map_SetupGfx                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  137	
;  138	void map_SetupGfx(void) {
_map_SetupGfx:
	LD	HL,-6
	CALL	__frameset
;  139		int tileIndex = 0;
;  140		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_9
L_7:
;  141			mapTiles[tileIndex] = gfx_MallocSprite(16, 16);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,_mapTiles
	ADD	HL,DE
	LD	(HL),BC
;  142			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_6
;  143				zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  144			}
;  145			else {
	JR	L_8
L_6:
;  146				zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  147			}
;  148		}
L_8:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_9:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_7
;  149		for (tileIndex = 0; tileIndex < 12; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
;  150			playerSprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  151			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  152		}
L_13:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_11
;  153		for (tileIndex = 12; tileIndex < 24; tileIndex++) {
	LD	(IX+-3),BC
	JR	L_18
L_16:
;  154			playerSprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  155			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  156		}
L_18:
	LD	BC,24
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_16
;  157		for (tileIndex = 24; tileIndex < 32; tileIndex++) {
	LD	(IX+-3),BC
	JR	L_23
L_21:
;  158			playerSprites[tileIndex] = gfx_MallocSprite(22, 26);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	BC,22
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  159			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  160		}
L_23:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_21
;  161		for (tileIndex = 0; tileIndex < 4; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_28
L_26:
;  162			enemySprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_enemySprites
	ADD	HL,DE
	LD	(HL),BC
;  163			zx7_Decompress(enemySprites[tileIndex], PKMNSD4[32 + tileIndex]);
	LD	IY,(IX+-3)
	LEA	HL,IY+32
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD4
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  164		}
L_28:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_26
;  165		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_33
L_31:
;  166			pokeballSprites[tileIndex] = gfx_MallocSprite(16, 16);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_pokeballSprites
	ADD	HL,DE
	LD	(HL),BC
;  167			zx7_Decompress(pokeballSprites[tileIndex], pokeball_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_pokeball_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  168		}
L_33:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_31
;  169		pauseMenuSprite = gfx_MallocSprite(112, 96);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,112
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  170		zx7_Decompress(pauseMenuSprite, pausemenu_compressed);
	LD	IY,_PKMNSD4
	LD	(_pauseMenuSprite),HL
	LD	BC,(IY+114)
	PUSH	BC
	LD	BC,(_pauseMenuSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  171		zx7_Decompress(textBoxSprite1, maptextbox1_compressed);
	LD	HL,_PKMNSD4+108
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  172		zx7_Decompress(textBoxSprite2, maptextbox2_compressed);
	LD	HL,_PKMNSD4+111
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  173		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD4+126
	LD	BC,462
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  174		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  175		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  176		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  177		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  178	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_SetupGfx ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_pauseMenuSprite                    STATIC      3   variable
;_pokeball_tiles_compressed          IMPORT      9   variable
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     12   variable
;_PKMNSD4                            IMPORT    129   variable
;_playerSprites                      STATIC     96   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_0                                   IX-6      3   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  179	
;  180	int map_Loop(void) {
_map_Loop:
	LD	HL,-31
	CALL	__frameset
;  181		/* Open Menu */
;  182		if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_73
;  183			int menuReturn;
;  184			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  185			gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  186			gfx_Sprite(pauseMenuSprite, 195, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,195
	PUSH	BC
	LD	BC,(_pauseMenuSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  187			map_End();
	CALL	_map_End
;  188	
;  189			menuReturn = menu_Menu();
	CALL	_menu_Menu
	UEXT	HL
	LD	L,A
	LD	(IX+-10),HL
;  190			map_SetupGfx();
	CALL	_map_SetupGfx
;  191			map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  192			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_38
L_39:
	CALL	_kb_Scan
L_38:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_39
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_39
;  193			return menuReturn;
	LD	HL,(IX+-10)
	JR	L_144
;  194		}
L_73:
;  195		/* If player presses 2nd */
;  196		if ((kb_Data[1] & kb_2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_142
;  197			nextTile = GetNextTile(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	LD	(_nextTile),A
;  198			if (GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_68
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_68
;  199				if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_45
;  200					playerX += 16;
	LD	IY,(_playerX)
	LEA	BC,IY+16
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  201				}
L_45:
;  202				if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_47
;  203					playerX -= 16;
	LD	IY,(_playerX)
	LEA	BC,IY+-16
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  204				}
L_47:
;  205				if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_49
;  206					playerY += 16;
	LD	IY,(_playerY)
	LEA	BC,IY+16
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  207				}
L_49:
;  208				if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_50
;  209					playerY -= 16;
	LD	IY,(_playerY)
	LEA	BC,IY+-16
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  210				}
L_50:
;  211				surfing = true;
	LD	A,1
	LD	(_surfing),A
;  212				tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  213				ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  214			}
L_68:
;  215			if (nextTile == 0x41) {
	LD	A,(_nextTile)
	CP	A,65
	JR	NZ,L_67
;  216				HealParty();
	CALL	_HealParty
;  217			}
;  218			else if (nextTile == 0x42) {
	JR	L_69
L_67:
	LD	A,(_nextTile)
	CP	A,66
	JR	NZ,L_65
;  219				gfx_sprite_t *shopSpriteOriginal;
;  220				map_End();
	CALL	_map_End
;  221	
;  222				shopSpriteOriginal = gfx_MallocSprite(134, 84);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,84
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;  223				zx7_Decompress(shopSpriteOriginal, shop_compressed);
	LD	BC,_shop_compressed
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  224	
;  225				menu_ItemShop(shopSpriteOriginal);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_menu_ItemShop
	POP	BC
;  226	
;  227				free(shopSpriteOriginal);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;  228				map_SetupGfx();
	CALL	_map_SetupGfx
;  229			}
;  230			else if (nextTile == 0x43) {
	JR	L_69
L_65:
	LD	A,(_nextTile)
	CP	A,67
	JR	NZ,L_63
;  231				OpenBox();
	CALL	_OpenBox
;  232			}
;  233			else if (nextTile == 0x44) {
	JR	L_69
L_63:
	LD	A,(_nextTile)
	CP	A,68
	JR	NZ,L_61
;  234				TalkToNpc1();
	CALL	_TalkToNpc1
;  235			}
;  236			else if (nextTile == 0x45) {
	JR	L_69
L_61:
	LD	A,(_nextTile)
	CP	A,69
	JR	NZ,L_59
;  237				TalkToNpc2();
	CALL	_TalkToNpc2
;  238			}
;  239			else if (nextTile >= 0x50 && nextTile < 0x60) {
	JR	L_69
L_59:
	LD	A,(_nextTile)
	CP	A,80
	JR	C,L_57
	LD	A,(_nextTile)
	CP	A,96
	JR	NC,L_57
;  240				EnterDoor(nextTile - 80);
	LD	A,(_nextTile)
	SUB	A,80
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  241			}
;  242			else if (nextTile >= 0x60 && nextTile < 0x70) {
	JR	L_69
L_57:
	LD	A,(_nextTile)
	CP	A,96
	JR	C,L_69
	LD	A,(_nextTile)
	CP	A,112
	JR	NC,L_69
;  243				if (FightTrainer(nextTile - 96)) {
	LD	A,(_nextTile)
	SUB	A,96
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_69
;  244					return 1;
	LD	HL,1
	JR	L_144
;  245				}
;  246			}
;  247			while ((kb_Data[1] & kb_2nd))
L_70:
;  248			{
;  249				kb_Scan();
	CALL	_kb_Scan
;  250			}
L_69:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_70
;  251		}
L_142:
;  252		/* If moving */
;  253		if (moveState > 0) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_141
;  254			Wait(2);
	LD	BC,2
	PUSH	BC
	CALL	_Wait
	POP	BC
;  255			moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  256			if (running) {
	LD	A,(_running)
	OR	A,A
	JR	Z,L_78
;  257				moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  258			}
L_78:
;  259			if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_80
;  260				playerX += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	LD	BC,(_playerX)
	ADD	HL,HL
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  261			}
L_80:
;  262			if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_82
;  263				playerX -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_playerX)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  264			}
L_82:
;  265			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_84
;  266				playerY += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	LD	BC,(_playerY)
	ADD	HL,HL
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  267			}
L_84:
;  268			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_96
;  269				playerY -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_playerY)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  270			}
L_96:
;  271			if (surfing) {
	LD	A,(_surfing)
	OR	A,A
	JR	Z,L_95
;  272				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_86
;  273					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  274				}
;  275				else {
	JR	L_114
L_86:
;  276					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  277				}
;  278			}
;  279			else {
	JR	L_114
L_95:
;  280				if (moveState > 5) {
	LD	A,5
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_93
;  281					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  282				}
;  283				else if (moveState > 3) {
	JR	L_114
L_93:
	LD	A,3
	CP	A,(HL)
	JR	NC,L_91
;  284					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  285				}
;  286				else if (moveState > 1) {
	JR	L_114
L_91:
	LD	A,1
	CP	A,(HL)
	JR	NC,L_89
;  287					playerState = 2;
	LD	A,2
	LD	(_playerState),A
;  288				}
;  289				else if (moveState > 0) {
	JR	L_114
L_89:
	XOR	A,A
	CP	A,(HL)
	JR	NC,L_114
;  290					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  291				}
;  292			}
L_114:
;  293	
;  294			if (moveState == 0) {
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_143
;  295				/* Arrive At Tile*/
;  296				tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  297				ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  298				nextTile = GetTypeMapData(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
;  299				if (nextTile >= 0x10 && nextTile < 0x20) {
	CP	A,16
	LD	(_nextTile),A
	JR	C,L_112
	LD	A,(_nextTile)
	CP	A,32
	JR	NC,L_112
;  300					/* Grass */
;  301					if ((rand() % 100) < battlechance) {
	CALL	_rand
	LD	BC,100
	CALL	__irems
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JP	P,L_143
;  302						uint8_t wildSpawn;
;  303						wildSpawn = rand() % 5;
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	(IX+-4),L
;  304						battle_SpawnWild(currentZoneData.spawnids[wildSpawn][nextTile -16], currentZoneData.spawnminlevels[wildSpawn][nextTile - 16], currentZoneData.spawnmaxlevels[wildSpawn][nextTile - 16]);
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-13),HL
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-16
	LD	HL,(IX+-13)
	LD	BC,_currentZoneData+160
	ADD	HL,BC
	LD	BC,DE
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,(IX+-13)
	LD	(IX+-16),DE	; spill
	LD	DE,_currentZoneData+80
	LD	(IX+-19),DE	; spill
	LD	DE,(IX+-16)	; unspill
	LD	(IX+-16),DE	; spill
	LD	DE,(IX+-19)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-16)	; unspill
	LD	(IX+-22),DE	; spill
	LD	(IX+-25),DE	; spill
	LD	DE,(IX+-22)	; unspill
	LD	(IX+-22),DE	; spill
	LD	DE,(IX+-25)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-22)	; unspill
	LD	(IX+-28),BC	; spill
	LD	BC,_currentZoneData
	LD	(IX+-31),BC	; spill
	LD	BC,(IX+-28)	; unspill
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	LD	HL,(IX+-13)
	LD	(IX+-28),BC	; spill
	LD	BC,(IX+-31)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-28)	; unspill
	ADD	HL,DE
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	PUSH	BC
	CALL	_battle_SpawnWild
	POP	BC
	POP	BC
	POP	BC
;  305						return 1;
	LD	HL,1
	JR	L_144
;  306					}
;  307				}
;  308				else if (nextTile == 0x01) {
L_112:
	LD	A,(_nextTile)
	CP	A,1
	JR	NZ,L_110
;  309					ExitBuilding();
	CALL	_ExitBuilding
;  310				}
;  311				else if (surfing && !(nextTile >= 0x1A && nextTile <= 0x20)) {
	JR	L_143
L_110:
	LD	A,(_surfing)
	OR	A,A
	JR	Z,L_108
	LD	A,(_nextTile)
	CP	A,26
	JR	C,L_107
	LD	A,32
	LD	HL,_nextTile
	CP	A,(HL)
	JR	NC,L_108
L_107:
;  312					surfing = false;
	XOR	A,A
	LD	(_surfing),A
;  313				}
;  314				else if (nextTile >= 0x20 && nextTile < 0x30) {
	JR	L_143
L_108:
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_106
	LD	A,(_nextTile)
	CP	A,48
	JR	NC,L_106
;  315					ExitZone(nextTile - 32);
	LD	A,(_nextTile)
	SUB	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ExitZone
	POP	BC
;  316				}
;  317				else if (nextTile >= 0x30 && nextTile < 0x40) {
	JR	L_143
L_106:
	LD	A,(_nextTile)
	CP	A,48
	JR	C,L_143
	LD	A,(_nextTile)
	CP	A,64
	JR	NC,L_143
;  318					if (FightTrainer(nextTile - 48)) {
	LD	A,(_nextTile)
	SUB	A,48
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_143
;  319						return 1;
	LD	HL,1
	JR	L_144
;  320					}
;  321				}
;  322			}
;  323		}
;  324	
;  325		/* If not moving */
;  326		else {
L_141:
;  327			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_121
;  328				moveDir = 1;
	LD	A,1
	LD	(_moveDir),A
;  329			}
;  330			else if (kb_Data[7] & kb_Left) {
	JR	L_132
L_121:
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_119
;  331				moveDir = 2;
	LD	A,2
	LD	(_moveDir),A
;  332			}
;  333			else if (kb_Data[7] & kb_Down) {
	JR	L_132
L_119:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_117
;  334				moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  335	
;  336			}
;  337			else if (kb_Data[7] & kb_Up) {
	JR	L_132
L_117:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_132
;  338				moveDir = 4;
	LD	A,4
	LD	(_moveDir),A
;  339			}
L_132:
;  340			
;  341			if (kb_Data[7]) {
	LD	A,(16056350)
	OR	A,A
	JR	Z,L_139
;  342				if (GetNextTile(tx, ty, tilemap.width) < 64 && !(!surfing && GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20)) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_130
	LD	A,(_surfing)
	OR	A,A
	JR	NZ,L_125
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_125
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_130
L_125:
;  343					moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  344				}
L_130:
;  345				if (GetNextTile(tx, ty, tilemap.width) >= 112 && GetNextTile(tx, ty, tilemap.width) < 120) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,112
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_139
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_139
;  346					if (GetNextTile(tx, ty, tilemap.width) - 111 > badgeCount) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LD	A,(_badgeCount)
	UEXT	HL
	LD	L,A
	OR	A,A
	LEA	BC,IY+-111
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_128
;  347						sprintf(str, "You need %u badges to pass", (GetNextTile(tx, ty, tilemap.width) - 111));
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-111
	PUSH	BC
	LD	BC,L__69
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  348						text_Display("This route is closed. Come back later.", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__70
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  349					}
;  350					else {
	JR	L_139
L_128:
;  351						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  352					}
;  353				}
;  354			}
L_139:
;  355			running = ((kb_Data[2] & kb_Alpha) && moveState > 0 && !surfing);
	LD	A,(16056340)
	AND	A,128
	JR	Z,L_136
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_136
	LD	A,(_surfing)
	OR	A,A
	JR	NZ,L_136
	LD	BC,1
	LD	(IX+-7),BC
	JR	L_137
L_136:
	LD	BC,0
	LD	(IX+-7),BC
L_137:
	LD	A,(IX+-7)
	LD	(_running),A
;  356		}
L_143:
;  357	
;  358		map_Draw();
	CALL	_map_Draw
;  359		playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  360	
;  361		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	OR	A,A
;  362		return 0;
	SBC	HL,HL
;  363	}
L_144:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Loop ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_ExitZone                           IMPORT  -----   function
;_ExitBuilding                       IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_battle_SpawnWild                   IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_GetTypeMapData                     IMPORT  -----   function
;_playerState                        STATIC      1   variable
;_running                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_FightTrainer                       IMPORT  -----   function
;_EnterDoor                          IMPORT  -----   function
;_TalkToNpc2                         IMPORT  -----   function
;_TalkToNpc1                         IMPORT  -----   function
;_OpenBox                            IMPORT  -----   function
;_free                               IMPORT  -----   function
;_menu_ItemShop                      IMPORT  -----   function
;_shop_compressed                    IMPORT     98   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_HealParty                          IMPORT  -----   function
;_surfing                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_moveDir                            STATIC      1   variable
;_nextTile                           STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_GetNextTile                        IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Menu                          IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_pauseMenuSprite                    STATIC      3   variable
;_gfx_Sprite                         IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;menuReturn                           IX-10      3   variable
;temp138                               IX-7      3   variable
;wildSpawn                             IX-4      1   variable
;shopSpriteOriginal                    IX-3      3   variable


; Stack Frame Size: 37 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__69:
	DB	"You need %u badges to pass"
	DB	0
L__70:
	DB	"This route is closed. Come back later."
	DB	0
	SEGMENT CODE
;  364	void map_End(void) {
_map_End:
	LD	HL,-3
	CALL	__frameset
;  365		int tileIndex = 0;
;  366		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_148
L_146:
;  367			free(mapTiles[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  368		}
L_148:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_146
;  369		for (tileIndex = 0; tileIndex < 32; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_152
L_150:
;  370			free(playerSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  371		}
L_152:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_150
;  372		for (tileIndex = 0; tileIndex < 4; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_157
L_155:
;  373			free(enemySprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  374		}
L_157:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_155
;  375		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_162
L_160:
;  376			free(pokeballSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  377		}
L_162:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_160
;  378		free(pauseMenuSprite);
	LD	BC,(_pauseMenuSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  379	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_End ***************************
;Name                         Addr/Register   Size   Type
;_pauseMenuSprite                    STATIC      3   variable
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     12   variable
;_playerSprites                      STATIC     96   variable
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  380	
;  381	void map_Draw(void) {
_map_Draw:
	LD	HL,-12
	CALL	__frameset
;  382		/* Move Screen and Redraw */
;  383	
;  384		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_181
;  385			screenX = 0;
;  386			screenY = 0;
;  387	
;  388			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	LD	BC,0
	LD	(_screenX),BC
	XOR	A,A
	LD	(_screenX+3),A
	LD	(_screenY),BC
	XOR	A,A
	LD	(_screenY+3),A
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  389	
;  390			gfx_TransparentSprite_NoClip(playerSprites[moveDir * 3 + playerState - 3], playerX - 8, playerY + 4);
	LD	A,(_playerY)
	ADD	A,4
	LD	C,A
	LD	A,(_moveDir)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	DEC	HL
	DEC	HL
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  391		}
;  392		else {
	JR	L_182
L_181:
;  393			/* Animate Water Every 20 Frames */
;  394			if (currentWater == 20) {
	LD	BC,20
	LD	HL,(_currentWater)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_168
;  395				memcpy(mapTiles[29], animatedwater1, 258);
	LD	BC,258
	PUSH	BC
	LD	HL,_mapTiles+87
	LD	BC,_animatedwater1_data
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  396			}
L_168:
;  397			if (currentWater == 0) {
	LD	HL,(_currentWater)
	CALL	__icmpzero
	JR	NZ,L_170
;  398				memcpy(mapTiles[29], animatedwater2, 258);
	LD	BC,258
	PUSH	BC
	LD	HL,_mapTiles+87
	LD	BC,_animatedwater2_data
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  399			}
L_170:
;  400			currentWater++;
	LD	BC,(_currentWater)
	INC	BC
	LD	(_currentWater),BC
;  401			if (currentWater == 40) {
	LD	HL,(_currentWater)
	OR	A,A
	LD	BC,40
	SBC	HL,BC
	JR	NZ,L_172
;  402				currentWater = 0;
	LD	BC,0
	LD	(_currentWater),BC
;  403			}
L_172:
;  404	
;  405			screenX = Clamp(playerX - 160, 0, MAX_X);
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777056
	LD	A,255
	CALL	__ladd
	LD	BC,432
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenX),HL
	LD	A,E
	LD	(_screenX+3),A
;  406			screenY = Clamp(playerY - 112, 0, MAX_Y);
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777104
	LD	A,255
	CALL	__ladd
	LD	BC,400
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenY),HL
	LD	A,E
	LD	(_screenY+3),A
;  407	
;  408			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,(_screenY)
	PUSH	BC
	LD	BC,(_screenX)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  409			
;  410	
;  411			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_175
;  412				GrassOverlay(1);
	LD	BC,1
	PUSH	BC
	CALL	_GrassOverlay
	POP	BC
;  413			}
L_175:
;  414			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_176
;  415				GrassOverlay(0);
	LD	BC,0
	PUSH	BC
	CALL	_GrassOverlay
	POP	BC
;  416			}
L_176:
;  417			gfx_TransparentSprite_NoClip(playerSprites[(24*surfing) + (12*running) + (moveDir - 1) * (3 - surfing) + playerState], playerX - screenX - 8, playerY - screenY + 4);
	LD	A,(_playerY)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,4
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	C,A
	LD	A,(_surfing)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	UEXT	HL
	LD	L,A
	LD	A,24
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	ADD	HL,BC
	LD	(IX+-6),HL	; spill
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	DEC	DE
	LD	A,(_surfing)
	UEXT	HL
	LD	L,A
	LD	(IX+-9),DE	; spill
	LD	(IX+-12),HL	; spill
	LD	DE,(IX+-9)	; unspill
	LD	HL,3
	OR	A,A
	LD	(IX+-9),DE	; spill
	LD	DE,(IX+-12)	; unspill
	SBC	HL,DE
	LD	BC,HL
	LD	HL,(IX+-9)
	CALL	__imuls
	LD	BC,(IX+-6)	; unspill
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  418			if (moveDir != 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	Z,L_179
;  419				GrassOverlay(0);
	LD	BC,0
	PUSH	BC
	CALL	_GrassOverlay
	POP	BC
;  420			}
L_179:
;  421			if (moveDir != 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	Z,L_182
;  422				GrassOverlay(1);
	LD	BC,1
	PUSH	BC
	CALL	_GrassOverlay
	POP	BC
;  423			}
;  424			
;  425		}
L_182:
;  426		DrawEnemies();
	CALL	_DrawEnemies
;  427		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;  428	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Draw ***************************
;Name                         Addr/Register   Size   Type
;_map_DrawInformationBar             IMPORT  -----   function
;_DrawEnemies                        IMPORT  -----   function
;_running                            STATIC      1   variable
;_surfing                            IMPORT      1   variable
;_GrassOverlay                       IMPORT  -----   function
;_Clamp                              IMPORT  -----   function
;_animatedwater2_data                IMPORT    258   variable
;_mapTiles                           STATIC    384   variable
;_animatedwater1_data                IMPORT    258   variable
;_memcpy                             IMPORT  -----   function
;_currentWater                       STATIC      3   variable
;_playerState                        STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_playerSprites                      STATIC     96   variable
;_playerX                            IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_indoors                            IMPORT      1   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  429	void GrassOverlay(bool part) {
_GrassOverlay:
	LD	HL,-6
	CALL	__frameset
;  430		if (!part &&currentTileMap[tx + ty * OUTDOORWIDTH] == 2) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_197
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_197
;  431			if (moveState > 4) {
	LD	A,4
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_188
;  432				if (moveState > 6) {
	LD	A,6
	CP	A,(HL)
	JR	NC,L_186
;  433					gfx_TransparentSprite_NoClip(grassoverlay3, tx * 16 - screenX - 8, ty * 16 - screenY + 13);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  434				}
;  435				else {
	JR	L_197
L_186:
;  436					gfx_TransparentSprite_NoClip(grassoverlay2, tx * 16 - screenX - 8, ty * 16 - screenY + 14);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  437				}
;  438			}
;  439			else {
	JR	L_197
L_188:
;  440				gfx_TransparentSprite_NoClip(grassoverlay1, tx * 16 - screenX - 8, ty * 16 - screenY + 18);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  441			}
;  442		}
L_197:
;  443		if (part && currentTileMap[tx + (moveDir == 1) - (moveDir == 2) + (ty + (moveDir == 3) - (moveDir == 4)) * OUTDOORWIDTH] == 2) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_198
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__95
	LD	B,1
	JR	L__96
L__95:
	LD	B,0
L__96:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__98
	LD	B,1
	JR	L__99
L__98:
	LD	B,0
L__99:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	A,48
	CALL	__imul_b
	LD	(IX+-6),HL	; spill
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__101
	LD	B,1
	JR	L__102
L__101:
	LD	B,0
L__102:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__104
	LD	B,1
	JR	L__105
L__104:
	LD	B,0
L__105:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	DE,(IX+-6)	; unspill
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_198
;  444			if (moveState > 0 && moveState <= 5) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_195
	LD	A,5
	CP	A,(HL)
	JR	C,L_195
;  445				if (moveState > 2) {
	LD	A,2
	CP	A,(HL)
	JR	NC,L_193
;  446					gfx_TransparentSprite_NoClip(grassoverlay3, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 13);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__111
	LD	A,1
	JR	L__112
L__111:
	XOR	A,A
L__112:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__114
	LD	B,1
	JR	L__115
L__114:
	LD	B,0
L__115:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__117
	LD	B,1
	JR	L__118
L__117:
L__118:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__120
	LD	B,1
	JR	L__121
L__120:
	LD	B,0
L__121:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  447				}
;  448				else {
	JR	L_198
L_193:
;  449					gfx_TransparentSprite_NoClip(grassoverlay2, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 14);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__123
	LD	A,1
	JR	L__124
L__123:
	XOR	A,A
L__124:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__126
	LD	B,1
	JR	L__127
L__126:
	LD	B,0
L__127:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__129
	LD	B,1
	JR	L__130
L__129:
L__130:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__132
	LD	B,1
	JR	L__133
L__132:
	LD	B,0
L__133:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  450				}
;  451			}
;  452			else {
	JR	L_198
L_195:
;  453				gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__135
	LD	A,1
	JR	L__136
L__135:
	XOR	A,A
L__136:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__138
	LD	B,1
	JR	L__139
L__138:
	LD	B,0
L__139:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__141
	LD	B,1
	JR	L__142
L__141:
L__142:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__144
	LD	B,1
	JR	L__145
L__144:
	LD	B,0
L__145:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  454			}
;  455		}
;  456	}
L_198:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GrassOverlay ***************************
;Name                         Addr/Register   Size   Type
;_moveDir                            STATIC      1   variable
;_grassoverlay1_data                 IMPORT     98   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_screenX                            STATIC      4   variable
;_screenY                            STATIC      4   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_moveState                          STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_currentTileMap                     STATIC   1920   variable
;part                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  457	
;  458	void HealParty(void) {
_HealParty:
	LD	HL,-33
	CALL	__frameset
;  459		int pokemonIndex, moveIndex;
;  460		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_206
L_204:
;  461			party[pokemonIndex].currenthealth = stats_CalculateStats(party[pokemonIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-30
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	BC,(HL)
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-18)
	LD	(IY+13),C
	LD	(IY+14),B
;  462			party[pokemonIndex].currentstatus = 0;
	LD	(IY+15),0
;  463			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-12),HL
	JR	L_203
L_201:
;  464				party[pokemonIndex].pp[moveIndex] = data_moves[party[pokemonIndex].moves[moveIndex]].uses;
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	IY,(IX+-33)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  465			}
L_203:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_201
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  466		}
L_206:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_204
;  467		text_Display("Your party has been healed", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__149
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  468		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  469	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealParty ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;O_11                                 IX-15      3   variable
;O_12                                 IX-12      3   variable
;G_2                                   IX-9      3   variable
;moveIndex                             IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__149:
	DB	"Your party has been healed"
	DB	0
	SEGMENT CODE
;  470	void OpenBox(void) {
_OpenBox:
;  471		map_End();
	CALL	_map_End
;  472		
;  473		menu_Box();
	CALL	_menu_Box
;  474	
;  475		map_SetupGfx();
	CALL	_map_SetupGfx
;  476		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  477	}
	RET	


;**************************** _OpenBox ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Box                           IMPORT  -----   function
;_map_End                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -1 (instruction)


;  478	void TalkToNpc1(void) {
_TalkToNpc1:
	LD	HL,-6
	CALL	__frameset
;  479		text_Display(data_npcText[npc1], false);
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  480		if (!takenGifts[npc1] && data_npcReward[npc1] > 0) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_216
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_216
;  481			playerItems[data_npcReward[npc1] - 1]++;
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-6)
	LD	(HL),A
;  482			items_IndexToName(str1, data_npcReward[npc1] - 1);
	LD	HL,(IX+-3)
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  483			if (data_npcReward[npc1] - 1 >= 20) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_213
;  484				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__155
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  485			}
;  486			else {
	JR	L_214
L_213:
;  487				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__156
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  488			}
L_214:
;  489			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  490			takenGifts[npc1] = true;
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  491		}
;  492	}
L_216:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc1 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc1                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;G_3                                   IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__155:
	DB	"Recieved the TM for %s"
	DB	0
L__156:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  493	void TalkToNpc2(void) {
_TalkToNpc2:
	LD	HL,-3
	CALL	__frameset
;  494		text_Display(data_npcText[npc2], false);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  495		if (!takenGifts[npc2]) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_222
;  496			playerItems[data_npcReward[npc2] - 1]++;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-3)
	LD	(HL),A
;  497			items_IndexToName(str1, data_npcReward[npc2] - 1);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  498			if (data_npcReward[npc2] - 1 >= 20) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_219
;  499				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__160
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  500			}
;  501			else {
	JR	L_220
L_219:
;  502				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__161
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  503			}
L_220:
;  504			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  505			takenGifts[npc2] = true;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  506		}
;  507	}
L_222:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc2 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc2                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__160:
	DB	"Recieved the TM for %s"
	DB	0
L__161:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  508	void EnterDoor(uint8_t index) {
_EnterDoor:
	LD	HL,-3
	CALL	__frameset
;  509		int tileIndex;
;  510		lastPlayerX = playerX;
	LD	BC,(_playerX)
	LD	HL,_lastPlayerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  511		lastPlayerY = playerY;
	LD	BC,(_playerY)
	LD	HL,_lastPlayerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  512		indoors = true;
	LD	A,1
	LD	(_indoors),A
;  513		currentBuilding = currentZoneData.doorzones[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+288
	ADD	HL,BC
	LD	A,(HL)
	LD	(_currentBuilding),A
;  514	
;  515		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_226
L_224:
;  516			zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_indoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  517		}
L_226:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_224
;  518		tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  519		tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  520		playerX = currentZoneData.doorx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+304
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  521		playerY = currentZoneData.doory[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+320
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  522		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  523		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  524		npc1 = currentZoneData.doornpc1[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+336
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc1),A
;  525		npc2 = currentZoneData.doornpc2[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+352
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc2),A
;  526		LoadMap();
	CALL	_LoadMap
;  527	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _EnterDoor ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_npc2                               STATIC      1   variable
;_npc1                               STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;tileIndex                             IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


;  528	void ExitBuilding(void) {
_ExitBuilding:
	LD	HL,-3
	CALL	__frameset
;  529		int tileIndex;
;  530		playerX = lastPlayerX;
	LD	BC,(_lastPlayerX)
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  531		playerY = lastPlayerY;
	LD	BC,(_lastPlayerY)
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  532		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  533		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_232
L_230:
;  534			zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_outdoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  535		}
L_232:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_230
;  536		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  537		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  538		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  539		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  540		LoadMap();
	CALL	_LoadMap
;  541	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitBuilding ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  542	void ExitZone(uint8_t index) {
_ExitZone:
	CALL	__frameset0
;  543		playerX = currentZoneData.exitx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+256
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  544		playerY = currentZoneData.exity[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+272
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  545		currentZone = currentZoneData.exitzone[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+240
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_currentZone
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  546		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  547		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  548		LoadMap();
	CALL	_LoadMap
;  549	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitZone ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  550	bool FightTrainer(uint8_t index) {
_FightTrainer:
	CALL	__frameset0
;  551		currentTrainer = index;
	LD	A,(IX+6)
	LD	(_currentTrainer),A
;  552		if (indoors && !defeatedTrainersIndoors[currentBuilding][currentTrainer]) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_240
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_240
;  553			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  554			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  555			return true;
	LD	A,1
	JR	L_242
;  556		}
;  557		else if (!indoors && !defeatedTrainers[currentZone][currentTrainer]) {
L_240:
	LD	A,(_indoors)
	OR	A,A
	JR	NZ,L_241
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_241
;  558			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  559			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  560			return true;
	LD	A,1
	JR	L_242
;  561		}
L_241:
;  562		return false;
	XOR	A,A
;  563	}
L_242:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FightTrainer ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_battle_SpawnTrainer                IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_data_trainerText                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_currentTrainer                     STATIC      1   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


;  564	
;  565	void map_LoadPokeballs(void) {
_map_LoadPokeballs:
	LD	HL,-6
	CALL	__frameset
;  566		int pokemonIndex;
;  567		/* Generate pokemon info To Display At Top of Screen */
;  568		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_250
L_248:
;  569			if (party[pokemonIndex].id == 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_247
;  570				pokeballdata[pokemonIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),2
;  571			}
;  572			else {
	JR	L_249
L_247:
;  573				if (party[pokemonIndex].currenthealth > 0) {
	LD	IY,(IX+-6)
	LD	BC,(IY+13)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_245
;  574					pokeballdata[pokemonIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),0
;  575				}
;  576				else {
	JR	L_249
L_245:
;  577					pokeballdata[pokemonIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),1
;  578				}
;  579			}
;  580		}
L_249:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_250:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_248
;  581	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoadPokeballs ***************************
;Name                         Addr/Register   Size   Type
;_pokeballdata                       STATIC      6   variable
;_party                              IMPORT   1224   variable
;G_4                                   IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -1 (instruction)


;  582	void LoadMap(void) {
_LoadMap:
	LD	HL,-1
	CALL	__frameset
;  583		ti_var_t mapAV;
;  584		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_253
;  585			mapAV = ti_Open("PKMNMD1", "r");
	LD	BC,L__178
	PUSH	BC
	LD	BC,L__179
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  586			ti_Seek(((int)currentBuilding) * 1270, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	LD	BC,1270
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  587			ti_Read(&currentTileMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  588			ti_Read(&currentTypeMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  589			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  590		}
;  591		else {
	JR	L_254
L_253:
;  592			mapAV = ti_Open("PKMNMD0", "r");
	LD	BC,L__180
	PUSH	BC
	LD	BC,L__181
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  593			ti_Seek(((int)currentZone) * 4480, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentZone)
	CALL	__stoiu
	LD	BC,4480
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  594			ti_Read(&currentTileMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  595			ti_Read(&currentTypeMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  596			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  597		}
L_254:
;  598		ti_CloseAll();
	CALL	_ti_CloseAll
;  599	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadMap ***************************
;Name                         Addr/Register   Size   Type
;_ti_CloseAll                        IMPORT  -----   function
;_currentZone                        IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;_currentTypeMap                     STATIC   1920   variable
;_currentTileMap                     STATIC   1920   variable
;_ti_Read                            IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;mapAV                                 IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__178:
	DB	"r"
	DB	0
L__179:
	DB	"PKMNMD1"
	DB	0
L__180:
	DB	"r"
	DB	0
L__181:
	DB	"PKMNMD0"
	DB	0
	SEGMENT CODE
;  600	
;  601	int32_t Clamp(int32_t number, int min, int max) {
_Clamp:
	CALL	__frameset0
;  602		if (number < min) {
	LD	BC,(IX+12)
	CALL	__itol
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmps
	JP	P,L_258
;  603			number = min;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  604		}
L_258:
;  605		if (number > max) {
	LD	BC,(IX+15)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_259
;  606			number = max;
	LD	BC,(IX+15)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  607		}
L_259:
;  608		return number;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  609	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Clamp ***************************
;Name                         Addr/Register   Size   Type
;max                                  IX+15      3   parameter
;min                                  IX+12      3   parameter
;number                                IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  610	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width) {
_GetNextTile:
	CALL	__frameset0
;  611	
;  612		switch (moveDir) {
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__186:
	DW	4
	DW	1
	DB	0
	DW24	L_261	

	DW24	L_262	

	DW24	L_263	

	DW24	L_264	

	DW24	L_265	

;  613		case 1:
L_261:
;  614			return(GetTypeMapData(tx + 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	INC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_266
;  615		case 2:
L_262:
;  616			return(GetTypeMapData(tx - 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	DEC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_266
;  617		case 3:
L_263:
;  618			return(GetTypeMapData(tx, ty + 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	INC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_266
;  619		case 4:
L_264:
;  620			return(GetTypeMapData(tx, ty - 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_266
;  621		}
L_265:
;  622		return 0;
	XOR	A,A
;  623	}
L_266:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetNextTile ***************************
;Name                         Addr/Register   Size   Type
;_GetTypeMapData                     IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  624	
;  625	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width) {
_GetTypeMapData:
	CALL	__frameset0
;  626		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_268
;  627			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	JR	L_269
;  628		}
;  629		else {
L_268:
;  630			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
;  631		}
;  632	}
L_269:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetTypeMapData ***************************
;Name                         Addr/Register   Size   Type
;_currentTypeMap                     STATIC   1920   variable
;_indoors                            IMPORT      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -1 (instruction)


;  633	
;  634	void DrawEnemies(void) {
_DrawEnemies:
	LD	HL,-12
	CALL	__frameset
;  635		int xloc = 0;
;  636		int yloc = 0;
;  637		for (i = 0; i < 16; i++) {
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_281
L_279:
;  638			if (indoors){
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_278
;  639				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_280
;  640					xloc = currentZoneData.trainerx[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-3),HL
;  641					yloc = currentZoneData.trainery[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-6),HL
;  642					gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  643				}
;  644			}
;  645			else {
	JR	L_280
L_278:
;  646				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_280
;  647					xloc = currentZoneData.trainerx[i] * 16 - screenX;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(_screenX)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
;  648					yloc = currentZoneData.trainery[i] * 16 - screenY;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(_screenY)
	LD	DE,_currentZoneData+576
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
;  649					if (xloc < 336 && yloc < 240 && xloc >= 0 && yloc >= 0) {
	OR	A,A
	LD	(IX+-6),HL
	LD	HL,(IX+-3)
	LD	BC,336
	SBC	HL,BC
	JP	P,L_280
	LD	BC,240
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_280
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_280
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_280
;  650						gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  651					}
;  652				}
;  653			}
;  654			
;  655		}
L_280:
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
L_281:
	LD.LIS	BC,16
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_279
;  656	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawEnemies ***************************
;Name                         Addr/Register   Size   Type
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_enemySprites                       STATIC     12   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_i                                  IMPORT      2   variable
;G_9                                  IX-12      3   variable
;G_7                                   IX-9      3   variable
;yloc                                  IX-6      3   variable
;xloc                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -1 (instruction)


;  657	
;  658	void map_DrawInformationBar(void) {
_map_DrawInformationBar:
	LD	HL,-3
	CALL	__frameset
;  659		int pokemonIndex;
;  660		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  661		gfx_FillRectangle(0, 0, 320, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  662		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_286
L_284:
;  663			gfx_TransparentSprite_NoClip(pokeballSprites[pokeballdata[pokemonIndex]], 16 * pokemonIndex, 0);
	LD	BC,_pokeballdata
	LD	DE,0
	PUSH	DE
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  664		}
L_286:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_284
;  665		sprintf(str, "%u$", playerMoney);
	LD	A,(_playerMoney+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_playerMoney)
	PUSH	BC
	LD	BC,L__200
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  666		gfx_PrintStringXY(str, 100, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  667	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_DrawInformationBar ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playerMoney                        IMPORT      4   variable
;_sprintf                            IMPORT  -----   function
;_pokeballdata                       STATIC      6   variable
;_pokeballSprites                    STATIC      9   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__200:
	DB	"%u$"
	DB	0
	SEGMENT CODE
;  668	
;  669	void map_LoseFight(void) {
_map_LoseFight:
	LD	HL,-33
	CALL	__frameset
;  670		int tileIndex, partyIndex, moveIndex;
;  671		text_Display("All your pokemon have fainted", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__202
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  672		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_296
L_294:
;  673			party[partyIndex].currenthealth = stats_CalculateStats(party[partyIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-9),HL
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-30
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	BC,(HL)
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-18)
	LD	(IY+13),C
	LD	(IY+14),B
;  674			party[partyIndex].currentstatus = 0;
	LD	(IY+15),0
;  675			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-12),HL
	JR	L_293
L_291:
;  676				party[partyIndex].pp[moveIndex] = data_moves[party[partyIndex].moves[moveIndex]].uses;
	LD	BC,_party
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	IY,(IX+-33)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  677			}
L_293:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_291
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  678		}
L_296:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_294
;  679		playerX = 5*16;
	LD	HL,_playerX
	LD	(HL),80
	INC	HL
	LD	(HL),0
;  680		playerY = 7*16;
	LD	HL,_playerY
	LD	(HL),112
	INC	HL
	LD	(HL),0
;  681		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  682		currentZone = 0;
	LD	HL,_currentZone
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  683		moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  684		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  685		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  686		tx = playerX / 16;
	LD	A,5
	LD	(_tx),A
;  687		ty = playerY / 16;
	LD	A,7
	LD	(_ty),A
;  688		LoadMap();
	CALL	_LoadMap
;  689	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoseFight ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_moveDir                            STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_text_Display                       IMPORT  -----   function
;O_25                                 IX-15      3   variable
;O_26                                 IX-12      3   variable
;G_10                                  IX-9      3   variable
;moveIndex                             IX-6      3   variable
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__202:
	DB	"All your pokemon have fainted"
	DB	0
	SEGMENT CODE
;  690	
;  691	void map_WinFight(bool wild, uint16_t rewardMoney) {
_map_WinFight:
	LD	HL,-28
	CALL	__frameset
;  692		char str1[16];
;  693		if (!wild) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_315
;  694			playerMoney += rewardMoney;
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	A,(_playerMoney+3)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_playerMoney)
	CALL	__ladd
	LD	(_playerMoney),HL
	LD	A,E
	LD	(_playerMoney+3),A
;  695			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_313
;  696				defeatedTrainersIndoors[currentBuilding][currentTrainer] = true;
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  697				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_315
;  698					if (currentZoneData.trainerreward[currentTrainer] == 255) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_304
;  699						badgeCount++;
;  700						sprintf(str, "Recieved a badge");
	LD	BC,L__210
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	A,(_badgeCount)
	INC	A
	LD	(_badgeCount),A
	CALL	_sprintf
	POP	BC
	POP	BC
;  701					}
;  702					else {
	JR	L_305
L_304:
;  703						playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-25)
	LD	(HL),A
;  704						items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  705						if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_302
;  706							sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__212
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  707						}
;  708						else {
	JR	L_305
L_302:
;  709							sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__213
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  710						}
;  711					}
L_305:
;  712					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  713				}
;  714			}
;  715			else {
	JR	L_315
L_313:
;  716				defeatedTrainers[currentZone][currentTrainer] = true;
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  717				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_315
;  718					playerItems[currentZoneData.trainerreward[currentTrainer]-1]++;
	LD	(IX+-3),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-28),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-28)
	LD	(HL),A
;  719					items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  720					if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_309
;  721						sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__216
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  722					}
;  723					else {
	JR	L_310
L_309:
;  724						sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__217
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  725					}
L_310:
;  726					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  727				}
;  728			}
;  729		}
L_315:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_WinFight ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_currentTrainer                     STATIC      1   variable
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_playerMoney                        IMPORT      4   variable
;str1                                 IX-22     16   variable
;G_12                                  IX-6      3   variable
;G_16                                  IX-3      3   variable
;rewardMoney                           IX+9      2   parameter
;wild                                  IX+6      1   parameter


; Stack Frame Size: 40 (bytes)
;       Spill Code: -1 (instruction)


	SEGMENT STRSECT
L__210:
	DB	"Recieved a badge"
	DB	0
L__212:
	DB	"Recieved the TM for %s"
	DB	0
L__213:
	DB	"Recieved a %s"
	DB	0
L__216:
	DB	"Recieved the TM for %s"
	DB	0
L__217:
	DB	"Recieved a %s"
	DB	0
	XREF _PKMNSD4_init:ROM
	XREF _indoortileset_tiles_compressed:ROM
	XREF _outdoortileset_tiles_compressed:ROM
	XREF _pokeball_tiles_compressed:ROM
	XREF _PKMNSD4:ROM
	XREF _shop_compressed:ROM
	XREF _animatedwater2_data:ROM
	XREF _animatedwater1_data:ROM
	XREF _grassoverlay3_data:ROM
	XREF _grassoverlay2_data:ROM
	XREF _grassoverlay1_data:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_SelectSave:ROM
	XREF _save_Load:ROM
	XREF _badgeCount:ROM
	XREF _takenGifts:ROM
	XREF _defeatedTrainersIndoors:ROM
	XREF _defeatedTrainers:ROM
	XREF _playerItems:ROM
	XREF _playerMoney:ROM
	XREF _currentBuilding:ROM
	XREF _surfing:ROM
	XREF _indoors:ROM
	XREF _currentZone:ROM
	XREF _party:ROM
	XREF _lastPlayerY:ROM
	XREF _lastPlayerX:ROM
	XREF _playerY:ROM
	XREF _playerX:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_Display:ROM
	XREF _items_IndexToName:ROM
	XREF _colors:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _menu_ItemShop:ROM
	XREF _menu_Box:ROM
	XREF _menu_Menu:ROM
	XREF _battle_SpawnTrainer:ROM
	XREF _battle_SpawnWild:ROM
	XREF _data_npcReward:ROM
	XREF _data_npcText:ROM
	XREF _data_trainerText:ROM
	XREF _data_moves:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _memcpy:ROM
	XREF _sprintf:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmps:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _map_WinFight
	XDEF _map_LoseFight
	XDEF _map_DrawInformationBar
	XDEF _DrawEnemies
	XDEF _GetTypeMapData
	XDEF _GetNextTile
	XDEF _Clamp
	XDEF _LoadMap
	XDEF _map_LoadPokeballs
	XDEF _FightTrainer
	XDEF _ExitZone
	XDEF _ExitBuilding
	XDEF _EnterDoor
	XDEF _TalkToNpc2
	XDEF _TalkToNpc1
	XDEF _OpenBox
	XDEF _HealParty
	XDEF _GrassOverlay
	XDEF _map_Draw
	XDEF _map_End
	XDEF _map_Loop
	XDEF _map_SetupGfx
	XDEF _map_Setup
	XDEF _map_Initialize
	XDEF _str1
	XDEF _clearcharacter2
	XDEF _tempcharacter2
	XDEF _currentTrainer
	XDEF _npc2
	XDEF _npc1
	XDEF _currentZoneData
	XDEF _currentTypeMap
	XDEF _currentTileMap
	XDEF _pauseMenuSprite
	XDEF _pokeballSprites
	XDEF _enemySprites
	XDEF _playerSprites
	XDEF _mapTiles
	XDEF _tilemap
	XDEF _playerState
	XDEF _moveDir
	XDEF _moveState
	XDEF _nextTile
	XDEF _currentWater
	XDEF _running
	XDEF _ty
	XDEF _tx
	XDEF _screenY
	XDEF _screenX
	XDEF _pokeballdata
	XDEF _battlechance
	END
