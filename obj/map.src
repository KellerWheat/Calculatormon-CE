; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAP.C"
	.assume ADL=1
	SEGMENT TEXT
_battlechance:
	DW	10
	DB	0
	SEGMENT DATA
_pokeballdata:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_screenX:
	DL	0
_screenY:
	DL	0
	SEGMENT BSS
_tx:
	DS	1
_ty:
	DS	1
	SEGMENT DATA
_running:
	DB	0
_currentRun:
	DB	0
_currentWater:
	DW	0
	DB	0
_grassAnimNext:
	DB	0
_grassAnimState1:
	DW	0
	DB	0
_grassAnimState2:
	DW	0
	DB	0
_grassAnimX1:
	DW	0
	DB	0
_grassAnimY1:
	DW	0
	DB	0
_grassAnimX2:
	DW	0
	DB	0
_grassAnimY2:
	DW	0
	DB	0
	SEGMENT BSS
_npcMoveState:
	DS	16
_npcOldTiles:
	DS	16
	SEGMENT DATA
_npcToFight:
	DW	16
	DB	0
	SEGMENT BSS
_npcGrassAnimState:
	DS	16
_npcSaidMessage:
	DS	16
	SEGMENT DATA
_npcPatterns:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	2
	DB	5
	DB	5
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT BSS
_nextTile:
	DS	1
	SEGMENT DATA
_moveState:
	DB	0
_moveDir:
	DB	3
_playerState:
	DB	0
_jumpState:
	DB	0
_jumpHeights:
	DB	1
	DB	3
	DB	6
	DB	9
	DB	12
	DB	14
	DB	15
	DB	16
	DB	16
	DB	15
	DB	14
	DB	12
	DB	9
	DB	6
	DB	3
	DB	1
	DB	0
	SEGMENT BSS
_tilemap:
	DS	18
_mapTiles:
	DS	384
_pokeballSprites:
	DS	9
_currentTileMap:
	DS	1920
_currentTypeMap:
	DS	1920
_currentZoneData:
	DS	688
	SEGMENT DATA
_currentTrainer:
	DB	0
	SEGMENT BSS
_tempcharacter2:
	DS	34
	SEGMENT TEXT
_clearcharacter2:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_str1:
	DS	20
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <debug.h>
;   12	#include <compression.h>
;   13	#include <fileioc.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "items.h"
;   21	#include "text.h"
;   22	#include "savegame.h"
;   23	#include "stats.h"
;   24	#include "gfx/map_gfx.h"
;   25	#include "gfx/test_gfx.h"
;   26	#include "items.h"
;   27	
;   28	#include "gfx/PKMNSD4.h"
;   29	#include "gfx/PKMNSD7.h"
;   30	#include "gfx/PKMNSD8.h"
;   31	
;   32	#define OUTDOORWIDTH 48
;   33	#define OUTDOORHEIGHT 40
;   34	#define MAX_X ((OUTDOORWIDTH - 21)*16)
;   35	#define MAX_Y ((OUTDOORHEIGHT - 15)*16)
;   36	
;   37	void HealParty(void);
;   38	void OpenBox(void);
;   39	void ReadText(uint8_t index);
;   40	void EnterDoor(uint8_t index);
;   41	void ExitBuilding(void);
;   42	void ExitZone(uint8_t index);
;   43	bool FightTrainer(uint8_t index);
;   44	
;   45	int32_t Clamp(int32_t number, int min, int max);
;   46	/* Gets the tile the player is facing*/
;   47	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width);
;   48	/* Gets the typemap at a specific tile */
;   49	uint16_t ShiftTile(uint16_t value, uint8_t direction, uint8_t amount);
;   50	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width);
;   51	void DrawPlayer(void);
;   52	/* Draw 16 npcs */
;   53	void ProcessNpcs(void);
;   54	/* Loads the tilemap, typemap ,and zonedata for current area */
;   55	void LoadMap(void);
;   56	void LoadTileset(bool freeOld);
;   57	
;   58	void GrassAnimation(bool part);
;   59	
;   60	
;   61	
;   62	const int battlechance = 10; /* Chance for enemy to spawn out of 100 */
;   63	
;   64	
;   65	uint8_t pokeballdata[] = {
;   66		0,0,0,0,0,0
;   67	};
;   68	
;   69	int32_t screenX = 0;
;   70	int32_t screenY = 0;
;   71	
;   72	uint8_t tx; /* x tile */
;   73	uint8_t ty; /* y tile */
;   74	bool running = false;
;   75	bool currentRun = 0;
;   76	int currentWater = 0;
;   77	
;   78	/* Variables for the leaves that appear when walking through grass */
;   79	bool grassAnimNext = 0;
;   80	int grassAnimState1 = 0;
;   81	int grassAnimState2 = 0;
;   82	int grassAnimX1 = 0;
;   83	int grassAnimY1 = 0;
;   84	int grassAnimX2 = 0;
;   85	int grassAnimY2 = 0;
;   86	
;   87	uint8_t npcMoveState[16];
;   88	uint8_t npcOldTiles[16];
;   89	int npcToFight = 16;
;   90	uint8_t npcGrassAnimState[16];
;   91	bool npcSaidMessage[16];
;   92	
;   93	uint8_t npcPatterns[8][16] = {
;   94		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   95		{0,4,4,4,2,5,5,0,0,0,0,0,0,0,0,0},
;   96		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   97		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   98		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   99		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  100		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  101		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  102	};
;  103	
;  104	uint8_t nextTile;
;  105	/* Set to 8 when anything is pressed and decreases each frame until 0 */
;  106	uint8_t moveState = 0;
;  107	/* Direction Player is facing */
;  108	uint8_t moveDir = 3;
;  109	uint8_t playerState = 0;
;  110	uint8_t jumpState = 0;
;  111	uint8_t jumpHeights[17] = {1,3,6,9,12,14,15,16,16,15,14,12,9,6,3,1, 0 };
;  112	
;  113	gfx_tilemap_t tilemap;
;  114	
;  115	gfx_sprite_t *mapTiles[128];
;  116	gfx_sprite_t *pokeballSprites[3];
;  117	
;  118	uint8_t currentTileMap[1920];
;  119	uint8_t currentTypeMap[1920];
;  120	struct zoneData currentZoneData;
;  121	
;  122	uint8_t currentTrainer = 0; /* 0-15 */
;  123	struct pokemonData tempcharacter2;
;  124	const struct pokemonData clearcharacter2 = {0};
;  125	
;  126	char str1[20];
	SEGMENT CODE
;  127	
;  128	void map_Initialize(void) {
_map_Initialize:
;  129		PKMNSD4_init();
	CALL	_PKMNSD4_init
;  130		PKMNSD7_init();
	CALL	_PKMNSD7_init
;  131		PKMNSD8_init();
	CALL	_PKMNSD8_init
;  132	
;  133		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD4+18
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  134		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  135		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  136		textBoxType = 0;	
	LD	BC,0
	LD	(_textBoxType),BC
;  137		save_SelectSave();
	CALL	_save_SelectSave
;  138		save_Load();
	CALL	_save_Load
;  139	
;  140		/* Initialize the tilemap */
;  141		tilemap.map = currentTileMap;
	LD	BC,_currentTileMap
	LD	(_tilemap),BC
;  142		tilemap.tiles = mapTiles;
	LD	BC,_mapTiles
	LD	(_tilemap+3),BC
;  143		tilemap.type_width = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  144		tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  145		tilemap.tile_height = 16;
	LD	A,16
	LD	(_tilemap+6),A
;  146		tilemap.tile_width = 16;
	LD	(_tilemap+7),A
;  147		tilemap.draw_height = 16;
	LD	(_tilemap+8),A
;  148		tilemap.draw_width = 22;
	LD	A,22
	LD	(_tilemap+9),A
;  149		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  150		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  151		tilemap.y_loc = 8;
	LD	A,8
	LD	(_tilemap+14),A
;  152		tilemap.x_loc = -8;
	LD	BC,16777208
	LD	(_tilemap+15),BC
;  153	
;  154		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_1
;  155			tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  156			tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  157		}
L_1:
;  158	
;  159		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  160		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  161		LoadMap();
	CALL	_LoadMap
;  162		dbg_SetBreakpoint(&map_Draw);
;  163	}
	RET	


;**************************** _map_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   4140   variable
;_mapTiles                           STATIC    384   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_save_Load                          IMPORT  -----   function
;_save_SelectSave                    IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT     21   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_PKMNSD8_init                       IMPORT  -----   function
;_PKMNSD7_init                       IMPORT  -----   function
;_PKMNSD4_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  164	void map_Setup(void) {
_map_Setup:
;  165		map_SetupGfx();
	CALL	_map_SetupGfx
;  166	
;  167		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  168		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  169	}
	RET	


;**************************** _map_Setup ***************************
;Name                         Addr/Register   Size   Type
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   4140   variable
;_map_SetupGfx                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  170	
;  171	void map_SetupGfx(void) {
_map_SetupGfx:
	LD	HL,-3
	CALL	__frameset
;  172		int tileIndex = 0;
;  173		LoadTileset(false);
	LD	BC,0
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  174		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_7
L_5:
;  175			pokeballSprites[tileIndex] = gfx_MallocSprite(16, 16);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_pokeballSprites
	ADD	HL,DE
	LD	(HL),BC
;  176			zx7_Decompress(pokeballSprites[tileIndex], pokeball_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_pokeball_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  177		}
L_7:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_5
;  178		textBoxType = 0;
	LD	BC,0
;  179		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	DE,0
	PUSH	DE
	LD	HL,_PKMNSD4+18
	LD	(_textBoxType),BC
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  180		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  181		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  182		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  183		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  184	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_SetupGfx ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT     21   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_pokeball_tiles_compressed          IMPORT      9   variable
;_zx7_Decompress                     IMPORT  -----   function
;_pokeballSprites                    STATIC      9   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  185	
;  186	int map_Loop(void) {
_map_Loop:
	LD	HL,-277
	CALL	__frameset
;  187		
;  188		/* Open Menu */
;  189		if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_137
;  190			int menuReturn;
;  191			gfx_sprite_t *pauseMenuSprite;
;  192			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  193			gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  194			map_End();
	CALL	_map_End
;  195			pauseMenuSprite = gfx_MallocSprite(112, 96);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,112
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  196			zx7_Decompress(pauseMenuSprite, pausemenu_compressed);
	LD	IY,_PKMNSD4
	LD	(IX+-59),HL
	LD	BC,(IY+12)
	PUSH	BC
	LD	BC,(IX+-59)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  197			gfx_Sprite(pauseMenuSprite, 195, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,195
	PUSH	BC
	LD	BC,(IX+-59)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  198	
;  199			menuReturn = menu_Menu();
	CALL	_menu_Menu
	UEXT	HL
	LD	L,A
	LD	(IX+-102),HL
;  200			free(pauseMenuSprite);
	LD	BC,(IX+-59)
	PUSH	BC
	CALL	_free
	POP	BC
;  201			map_SetupGfx();
	CALL	_map_SetupGfx
;  202			map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  203			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_11
L_12:
	CALL	_kb_Scan
L_11:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_12
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_12
;  204			return menuReturn;
	LD	HL,(IX+-102)
	JR	L_243
;  205		}
L_137:
;  206		/* If player presses 2nd */
;  207		if ((kb_Data[1] & kb_2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_237
;  208			bool awaitSecond = true;
	LD	(IX+-46),1
;  209			nextTile = GetNextTile(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_nextTile),A
;  210			if (GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_131
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_131
;  211				int partyIndex, moveIndex;
;  212				bool hasUser = false;
	LD	(IX+-39),0
;  213				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-15),BC
	JR	L_24
L_22:
;  214					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-31),BC
	JR	L_21
L_19:
;  215						if (currentSave.party[partyIndex].moves[moveIndex] == 141) {
	LD	HL,(IX+-15)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-50),HL
	LD	IY,(IX+-50)
	LEA	HL,IY+1
	LD	BC,(IX+-31)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,141
	SBC	HL,BC
	JR	NZ,L_20
;  216							hasUser = true;
	LD	(IX+-39),1
;  217							sprintf(str, "%s used Surf", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-50)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__12
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  218							partyIndex = 6;
	LD	BC,6
	LD	(IX+-15),BC
;  219						}
;  220					}
L_20:
	LD	BC,(IX+-31)
	INC	BC
	LD	(IX+-31),BC
L_21:
	LD	BC,4
	LD	HL,(IX+-31)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_19
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  221				}
L_24:
	LD	BC,6
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_22
;  222				if (hasUser) {
	LD	A,(IX+-39)
	OR	A,A
	JR	Z,L_34
;  223					text_Display(str,true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  224					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_27
;  225						currentSave.playerX += 16;
	LD	IY,(_currentSave+2)
	LEA	BC,IY+16
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  226					}
L_27:
;  227					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_29
;  228						currentSave.playerX -= 16;
	LD	IY,(_currentSave+2)
	LEA	BC,IY+-16
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  229					}
L_29:
;  230					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_31
;  231						currentSave.playerY += 16;
	LD	IY,(_currentSave+4)
	LEA	BC,IY+16
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  232					}
L_31:
;  233					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_32
;  234						currentSave.playerY -= 16;
	LD	IY,(_currentSave+4)
	LEA	BC,IY+-16
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  235					}
L_32:
;  236					currentSave.surfing = true;
	LD	A,1
	LD	(_currentSave+1237),A
;  237					tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  238					ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  239				}
;  240				else {
	JR	L_135
L_34:
;  241					text_Display("A Pokemon with Surf could bring you across this water", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__20
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  242				}
;  243			}
;  244			else if (nextTile == 0x41) {
	JR	L_135
L_131:
	LD	A,(_nextTile)
	CP	A,65
	JR	NZ,L_129
;  245				HealParty();
	CALL	_HealParty
;  246			}
;  247			else if (nextTile == 0x42) {
	JR	L_135
L_129:
	LD	A,(_nextTile)
	CP	A,66
	JR	NZ,L_127
;  248				gfx_sprite_t *shopSpriteOriginal;
;  249				map_End();
	CALL	_map_End
;  250	
;  251				shopSpriteOriginal = gfx_MallocSprite(134, 84);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,84
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-69),HL
;  252				zx7_Decompress(shopSpriteOriginal, shop_compressed);
	LD	BC,_shop_compressed
	PUSH	BC
	LD	BC,(IX+-69)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  253	
;  254				menu_ItemShop(shopSpriteOriginal);
	LD	BC,(IX+-69)
	PUSH	BC
	CALL	_menu_ItemShop
	POP	BC
;  255	
;  256				free(shopSpriteOriginal);
	LD	BC,(IX+-69)
	PUSH	BC
	CALL	_free
	POP	BC
;  257				map_SetupGfx();
	CALL	_map_SetupGfx
;  258			}
;  259			else if (nextTile == 0x43) {
	JR	L_135
L_127:
	LD	A,(_nextTile)
	CP	A,67
	JR	NZ,L_125
;  260				OpenBox();
	CALL	_OpenBox
;  261			}
;  262			else if (nextTile == 0x44) {
	JR	L_135
L_125:
	LD	A,(_nextTile)
	CP	A,68
	JR	NZ,L_123
;  263				if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_37
;  264					EnterDoor(15);
	LD	BC,15
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  265				}
;  266				else {
	JR	L_135
L_37:
;  267					EnterDoor(0);
	LD	BC,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  268				}
;  269			}
;  270			else if (nextTile == 0x45) {
	JR	L_135
L_123:
	LD	A,(_nextTile)
	CP	A,69
	JR	NZ,L_121
;  271				if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_44
;  272					uint8_t starter = 2;
	LD	(IX+-25),2
;  273					int tilePos = tx + (moveDir == 1) - (moveDir == 2) + ((ty + (moveDir == 3) - (moveDir == 4)) * tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	A,(_moveDir)
	CP	A,3
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-274	; spill
	CALL	__istix
	POP	HL
	POP	BC
	JR	NZ,L__29
	LD	B,1
	JR	L__30
L__29:
	LD	B,0
L__30:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__32
	LD	B,1
	JR	L__33
L__32:
	LD	B,0
L__33:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),HL
	POP	IY
	LD	BC,-274	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	POP	IY
	CALL	__imuls
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-271	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__35
	LD	B,1
	JR	L__36
L__35:
	LD	B,0
L__36:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-265	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__38
	LD	B,1
	JR	L__39
L__38:
	LD	B,0
L__39:
;  274	
;  275					sprintf(str, "Choose Squirtle as your starter?");
	LD	DE,_str
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-262	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-265	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-262	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	OR	A,A
	SBC	HL,BC
	LD	BC,-271	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	BC,L__40
	PUSH	BC
	PUSH	DE
	CALL	_sprintf
	POP	BC
	POP	BC
;  276					if (currentTypeMap[tilePos + 1] == 0x45) {
	LD	HL,(IX+-38)
	INC	HL
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_40
;  277						starter = 0;
	LD	(IX+-25),0
;  278						sprintf(str, "Choose Bulbasaur as your starter?");
	LD	BC,L__42
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  279						if (currentTypeMap[tilePos - 1] == 0x45) {
	LD	HL,(IX+-38)
	DEC	HL
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_40
;  280							starter = 1;
	LD	(IX+-25),1
;  281							sprintf(str, "Choose Charmander as your starter?");
	LD	BC,L__44
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  282						}
;  283					}
L_40:
;  284	
;  285					
;  286					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  287					if (text_AskQuestion2("Yes", "No", false) == 1) {
	LD	BC,0
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	LD	BC,L__46
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_42
;  288						currentSave.party[0] = stats_NewCharacter((1 + (starter) * 3), 5);
	LD	B,3
	LD	DE,5
	PUSH	DE
	LD	C,(IX+-25)
	MLT	BC
	INC	C
	LD	B,0
	PUSH	BC
	LD	HL,IX
	LD	BC,-136
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_currentSave+10
	LD	BC,34
	LDIR	
;  289						currentTileMap[tilePos - tilemap.width]-=3;
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-38)
	OR	A,A
	SBC	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	IY,HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-38)
	OR	A,A
	SBC	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(IY)
	SUB	A,3
	LD	(HL),A
;  290						currentSave.newGame = false;
	XOR	A,A
;  291						currentSave.defeatedTrainers[0][15] = true;
	LD	HL,_currentSave+1443
	LD	(_currentSave),A
	LD	(HL),1
;  292						currentSave.rivalPokemon = (starter + 1) % 3;
	LD	A,(IX+-25)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,3
	CALL	__irems
	LD	A,L
	LD	(_currentSave+1),A
;  293					}
L_42:
;  294					map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  295				}
;  296				else {
	JR	L_135
L_44:
;  297					text_Display("You already chose a Pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  298				}
;  299			}
;  300			else if (nextTile == 0x46) {
	JR	L_135
L_121:
	LD	A,(_nextTile)
	CP	A,70
	JR	NZ,L_119
;  301				int partyIndex, moveIndex;
;  302				bool hasUser = false;
	LD	(IX+-47),0
;  303				int oldTile;
;  304				int tempTile;
;  305				int newTile = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  306				oldTile = tx + ty * OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	(IX+-24),HL
	LD	(IX+-81),HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-24)
	ADD	HL,BC
	LD	(IX+-12),HL
;  307				if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_47
;  308					oldTile = (tx + 1) + (ty)* OUTDOORWIDTH;
	LD	BC,(IX+-24)
	LD	(IX+-81),BC
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,(IX+-24)
	ADD	HL,BC
	LD	(IX+-12),HL
;  309					newTile = (tx + 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	LD	BC,(IX+-24)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	ADD	HL,BC
	LD	(IX+-6),HL
;  310				}
L_47:
;  311				if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_49
;  312					oldTile = (tx - 1) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	BC,(IX+-81)
	LD	L,A
	DEC	HL
	ADD	HL,BC
	LD	(IX+-12),HL
;  313					newTile = (tx - 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	ADD	HL,BC
	LD	(IX+-6),HL
;  314				}
L_49:
;  315				if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_51
;  316					oldTile = (tx)+(ty + 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
;  317					newTile = (tx)+(ty + 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-6),HL
;  318				}
L_51:
;  319				if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_61
;  320					oldTile = (tx)+(ty - 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
;  321					newTile = (tx)+(ty - 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-6),HL
;  322				}
L_61:
;  323				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_60
L_58:
;  324					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-28),BC
	JR	L_57
L_55:
;  325						if (currentSave.party[partyIndex].moves[moveIndex] == 133) {
	LD	HL,(IX+-9)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-56),HL
	LD	IY,(IX+-56)
	LEA	HL,IY+1
	LD	BC,(IX+-28)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,133
	SBC	HL,BC
	JR	NZ,L_56
;  326							hasUser = true;
	LD	(IX+-47),1
;  327							sprintf(str, "%s used Strength", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-56)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__55
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  328							partyIndex = 6;
	LD	BC,6
	LD	(IX+-9),BC
;  329						}
;  330					}
L_56:
	LD	BC,(IX+-28)
	INC	BC
	LD	(IX+-28),BC
L_57:
	LD	BC,4
	LD	HL,(IX+-28)
	OR	A,A
	SBC	HL,BC
	JP	M,L_55
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  331				}
L_60:
	LD	BC,6
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_58
;  332				if (hasUser && currentTypeMap[newTile] == 0) {
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_65
	LD	BC,(IX+-6)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IX+-42),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_65
;  333					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  334					tempTile = currentTileMap[oldTile];
	LD	BC,(IX+-12)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-17),HL
	LD	HL,(IY+-17)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-53),HL
;  335					currentTileMap[oldTile] = currentTileMap[newTile];
	LD	BC,(IX+-6)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LD	(IY+-14),HL
	LD	HL,(IY+-14)
	LD	IY,(IY+-17)
	LD	A,(HL)
	LD	(IY),A
;  336					currentTileMap[newTile] = tempTile;
	LD	A,(IX+-53)
	LEA	IY,IX+-128
	LD	HL,(IY+-14)
	LD	(HL),A
;  337					tempTile = currentTypeMap[oldTile];
	LD	BC,(IX+-12)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IY+-11),HL
	LD	HL,(IY+-11)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-53),HL
;  338					currentTypeMap[oldTile] = currentTypeMap[newTile];
	LD	HL,(IX+-42)
	LD	IY,(IY+-11)
	LD	A,(HL)
	LD	(IY),A
;  339					currentTypeMap[newTile] = tempTile;
	LD	A,(IX+-53)
	LD	HL,(IX+-42)
	LD	(HL),A
;  340				}
;  341				else if (currentTypeMap[newTile] == 0) {
	JR	L_135
L_65:
	LD	BC,_currentTypeMap
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_135
;  342					text_Display("This boulder could be moved by a strong Pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__61
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  343				}
;  344			}
;  345			else if (nextTile == 0x47) {
	JR	L_135
L_119:
	LD	A,(_nextTile)
	CP	A,71
	JR	NZ,L_117
;  346				int partyIndex, moveIndex;
;  347				bool hasUser = false;
	LD	(IX+-35),0
;  348				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-18),BC
	JR	L_75
L_73:
;  349					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-34),BC
	JR	L_72
L_70:
;  350						if (currentSave.party[partyIndex].moves[moveIndex] == 26) {
	LD	HL,(IX+-18)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-62),HL
	LD	IY,(IX+-62)
	LEA	HL,IY+1
	LD	BC,(IX+-34)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JR	NZ,L_71
;  351							hasUser = true;
	LD	(IX+-35),1
;  352							sprintf(str, "%s used Cut", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-62)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  353							partyIndex = 6;
	LD	BC,6
	LD	(IX+-18),BC
;  354						}
;  355					}
L_71:
	LD	BC,(IX+-34)
	INC	BC
	LD	(IX+-34),BC
L_72:
	LD	BC,4
	LD	HL,(IX+-34)
	OR	A,A
	SBC	HL,BC
	JP	M,L_70
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  356				}
L_75:
	LD	BC,6
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_73
;  357				if (hasUser) {
	LD	A,(IX+-35)
	OR	A,A
	JR	Z,L_84
;  358					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  359					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_78
;  360						currentTypeMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  361						currentTileMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  362					}
L_78:
;  363					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_80
;  364						currentTypeMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  365						currentTileMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  366					}
L_80:
;  367					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_82
;  368						currentTypeMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  369						currentTileMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  370					}
L_82:
;  371					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_135
;  372						currentTypeMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  373						currentTileMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  374					}
;  375				}
;  376				else {
	JR	L_135
L_84:
;  377					text_Display("This tree could be cut down", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  378				}
;  379			}
;  380			
;  381			else if (nextTile >= 0x50 && nextTile < 0x60) {
	JR	L_135
L_117:
	LD	A,(_nextTile)
	CP	A,80
	JR	C,L_115
	LD	A,(_nextTile)
	CP	A,96
	JR	NC,L_115
;  382				EnterDoor(nextTile - 80);
	LD	A,(_nextTile)
	SUB	A,80
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  383			}
;  384			else if (nextTile >= 0x60 && nextTile < 0x70) {
	JR	L_135
L_115:
	LD	A,(_nextTile)
	CP	A,96
	JR	C,L_113
	LD	A,(_nextTile)
	CP	A,112
	JR	NC,L_113
;  385				if (FightTrainer(nextTile - 96)) {
	LD	A,(_nextTile)
	SUB	A,96
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_135
;  386					return 1;
	LD	HL,1
	JR	L_243
;  387				}
;  388			}
;  389			else if (nextTile >= 0x70 && nextTile < 0x80) {
L_113:
	LD	A,(_nextTile)
	CP	A,112
	JR	C,L_111
	LD	A,(_nextTile)
	CP	A,128
	JR	NC,L_111
;  390				ReadText(nextTile - 0x70);
	LD	A,(_nextTile)
	SUB	A,112
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ReadText
	POP	BC
;  391			}
;  392			else if (nextTile >= 0x80 && nextTile < 0x90) {
	JR	L_135
L_111:
	LD	A,(_nextTile)
	CP	A,128
	JR	C,L_109
	LD	A,(_nextTile)
	CP	A,144
	JR	NC,L_109
;  393				if (!currentSave.takenGroundGifts[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][nextTile - 0x80]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_92
	LD	BC,1
	LD	(IX+-78),BC
	JR	L_93
L_92:
	LD	BC,0
	LD	(IX+-78),BC
L_93:
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	IY,IY+-128
	LD	(IX+-45),IY
	LD	BC,_currentSave+2452
	LD	(IX+-99),BC
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,8
	CALL	__ishl_b
	LD	BC,(IX+-99)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-78)
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-128),HL
	POP	IY
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-259	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),HL
	POP	IY
	LD	BC,-259	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	POP	IY
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-128)
	POP	IY
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-45)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_135
;  394					currentSave.takenGroundGifts[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][nextTile - 0x80] = true;
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_96
	LD	BC,1
	LD	(IX+-84),BC
	JR	L_97
L_96:
	LD	BC,0
	LD	(IX+-84),BC
L_97:
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,8
	CALL	__ishl_b
	LD	BC,(IX+-99)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-84)
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-116),HL
	POP	IY
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-119),HL
	POP	IY
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),HL
	LD	BC,(IY+-119)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	POP	IY
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-116)
	POP	IY
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-45)
	ADD	HL,BC
	LD	(HL),1
;  395					currentSave.playerItems[currentZoneData.grounditems[nextTile - 0x80] - 1]++;
	LD	BC,_currentSave+1243
	LEA	IY,IX+-128
	LD	(IY+-26),BC
	LD	BC,_currentZoneData+672
	LD	(IX+-66),BC
	LD	BC,(IX+-45)
	LD	HL,(IX+-66)
	ADD	HL,BC
	LD	(IY+-23),HL
	LD	HL,(IY+-23)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,IX
	LD	IY,-154
	ADD	IY,BC
	LD	BC,HL
	LD	DE,BC
	LD	HL,(IY)
	ADD	HL,DE
	LEA	IY,IX+-128
	LD	(IY+-20),HL
	LD	HL,(IY+-20)
	LD	DE,IX
;  396					items_IndexToName(str1, currentZoneData.grounditems[nextTile - 0x80] - 1);
	PUSH	IY
	LD	(IY+-122),HL
	POP	IY
	LD	HL,_str1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-125),HL	; unspill
	LD	HL,(IY+-122)
	POP	IY
	LD	A,(HL)
	LD	HL,-154
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	INC	A
	LD	(HL),A
	LD	IY,(IY+-23)
	LD	C,(IY)
	DEC	C
	LD	B,0
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-125)
	POP	IY
	PUSH	HL
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  397					if (currentZoneData.grounditems[nextTile - 0x80] - 1 >= 20) {
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-128
	LD	HL,(IX+-66)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_101
;  398						sprintf(str, "Found the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__86
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  399					}
;  400					else {
	JR	L_102
L_101:
;  401						sprintf(str, "Found a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__87
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  402					}
L_102:
;  403					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_text_Display
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  404					currentTileMap[ShiftTile(tx + tilemap.width*ty, moveDir, 1)] = 0;
	LD	A,(_moveDir)
	LD	C,A
	LD	A,(_tilemap+13)
	LD	DE,1
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	DE,BC
	LD	A,(_ty)
	LD	C,A
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tx)
	LD	C,A
	LD	B,0
	ADD.SIS	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_ShiftTile
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  405					currentTypeMap[ShiftTile(tx + tilemap.width*ty, moveDir, 1)] = 0;
	LD	A,(_moveDir)
	LD	C,A
	LD	A,(_tilemap+13)
	LD	DE,1
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	DE,BC
	LD	A,(_ty)
	LD	C,A
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tx)
	LD	C,A
	LD	B,0
	ADD.SIS	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_ShiftTile
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	(HL),0
;  406					currentSave.foundItemsPos[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][nextTile - 0x80] = ShiftTile(tx + tilemap.width*ty, moveDir, 1);
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_104
	LD	BC,1
	LD	(IX+-90),BC
	JR	L_105
L_104:
	LD	BC,0
	LD	(IX+-90),BC
L_105:
	LD	A,(_moveDir)
	LD	C,A
	LD	A,(_tilemap+13)
	LD	DE,1
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	DE,BC
	LD	A,(_ty)
	LD	C,A
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tx)
	LD	C,A
	LD	B,0
	ADD.SIS	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-277
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_ShiftTile
	PUSH	BC
	LD	BC,-277
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	DE,HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__ishl_b
	LD	BC,_currentSave+2964
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-107),HL
	POP	IY
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-90)
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-110),HL
	POP	IY
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),HL
	POP	IY
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),HL
	LD	BC,(IY+-113)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	POP	IY
	CALL	__imuls
	LD	A,(_nextTile)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),DE
	LD	BC,(IY+-110)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	POP	IY
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),BC
	LD	BC,(IY+-107)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	POP	IY
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-128
	ADD	HL,HL
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  407				}
;  408			}
;  409			else {
	JR	L_135
L_109:
;  410				awaitSecond = false;
	LD	(IX+-46),0
;  411			}
L_135:
;  412			if (awaitSecond) {
	LD	A,(IX+-46)
	OR	A,A
	JR	NZ,L_132
	JR	L_237
;  413				while ((kb_Data[1] & kb_2nd))
L_133:
;  414				{
;  415					kb_Scan();
	CALL	_kb_Scan
;  416				}
L_132:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_133
;  417			}
;  418		}
L_237:
;  419		/* If moving */
;  420		if (moveState > 0) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_236
;  421			Wait(1);
	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;  422			moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  423			if (jumpState) {
	LD	A,(_jumpState)
	OR	A,A
	JR	Z,L_145
;  424				jumpState--;
	LD	A,(_jumpState)
	DEC	A
	LD	(_jumpState),A
;  425			}
L_145:
;  426			if (running) {
	LD	A,(_running)
	OR	A,A
	JR	Z,L_147
;  427				Wait(1);
	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;  428				moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  429				if (jumpState) {
	LD	A,(_jumpState)
	OR	A,A
	JR	Z,L_147
;  430					jumpState--;
	LD	A,(_jumpState)
	DEC	A
	LD	(_jumpState),A
;  431				}
;  432			}
L_147:
;  433			if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_149
;  434				currentSave.playerX += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  435			}
L_149:
;  436			if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_151
;  437				currentSave.playerX -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  438			}
L_151:
;  439			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_153
;  440				currentSave.playerY += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  441			}
L_153:
;  442			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_169
;  443				currentSave.playerY -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  444			}
L_169:
;  445			if (currentSave.surfing) {
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	Z,L_168
;  446				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_155
;  447					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  448				}
;  449				else {
	JR	L_211
L_155:
;  450					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  451				}
;  452			}
;  453			else if (running){
	JR	L_211
L_168:
	LD	A,(_running)
	OR	A,A
	JR	Z,L_166
;  454				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_157
;  455					playerState = 1 + currentRun;
	LD	A,(_currentRun)
	INC	A
	LD	(_playerState),A
;  456				}
;  457				else {
	JR	L_211
L_157:
;  458					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  459				}
;  460	
;  461			}
;  462			else {
	JR	L_211
L_166:
;  463				if (moveState > 5) {
	LD	A,5
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_164
;  464					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  465				}
;  466				else if (moveState > 3) {
	JR	L_211
L_164:
	LD	A,3
	CP	A,(HL)
	JR	NC,L_162
;  467					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  468				}
;  469				else if (moveState > 1) {
	JR	L_211
L_162:
	LD	A,1
	CP	A,(HL)
	JR	NC,L_160
;  470					playerState = 2;
	LD	A,2
	LD	(_playerState),A
;  471				}
;  472				else if (moveState > 0) {
	JR	L_211
L_160:
	XOR	A,A
	CP	A,(HL)
	JR	NC,L_211
;  473					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  474				}
;  475			}
L_211:
;  476	
;  477			if (moveState == 0) {
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_238
;  478				currentRun = !currentRun;
	LD	A,(_currentRun)
	OR	A,A
	JR	NZ,L_171
	LD	BC,1
	LD	(IX+-93),BC
	JR	L_172
L_171:
	LD	BC,0
	LD	(IX+-93),BC
L_172:
	LD	A,(IX+-93)
	LD	(_currentRun),A
;  479				playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  480				/* Arrive At Tile*/
;  481				tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  482				ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  483				nextTile = GetTypeMapData(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
;  484				if (nextTile >= 0x10 && nextTile < 0x20) {
	CP	A,16
	LD	(_nextTile),A
	JR	C,L_209
	LD	A,(_nextTile)
	CP	A,32
	JR	NC,L_209
;  485					/* Grass */
;  486					if ((rand() % 100) < battlechance) {
	CALL	_rand
	LD	BC,100
	CALL	__irems
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JP	P,L_238
;  487						uint8_t wildSpawn;
;  488						map_Draw();
	CALL	_map_Draw
;  489						gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  490						wildSpawn = rand() % 5;
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	(IX+-63),L
;  491						battle_SpawnWild(currentZoneData.spawnids[wildSpawn][nextTile -16], currentZoneData.spawnminlevels[wildSpawn][nextTile - 16], currentZoneData.spawnmaxlevels[wildSpawn][nextTile - 16]);
	LD	A,(IX+-63)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-16
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-47),HL
	POP	IY
	LD	HL,DE
	LD	BC,_currentZoneData+160
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-44),HL
	LD	HL,(IY+-47)
	LD	BC,(IY+-44)
	POP	IY
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-86),DE
	POP	IY
	LD	DE,_currentZoneData+80
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-89),DE	; unspill
	LD	DE,(IY+-86)
	LD	(IY+-86),DE
	LD	DE,(IY+-89)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-86)
	LD	(IY+-44),HL
	LD	HL,(IY+-47)
	LD	(IY+-92),DE
	LD	(IY+-95),HL	; unspill
	LD	DE,(IY+-92)
	LD	HL,(IY+-44)
	LD	(IY+-92),DE
	LD	DE,(IY+-95)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-92)
	LD	(IY+-98),BC
	POP	IY
	LD	BC,_currentZoneData
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-101),BC	; unspill
	LD	BC,(IY+-98)
	LD	(IY+-44),HL
	LD	HL,(IY+-47)
	LD	(IY+-98),BC
	LD	(IY+-104),HL	; unspill
	LD	BC,(IY+-98)
	LD	HL,(IY+-44)
	POP	IY
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),BC
	LD	BC,(IY+-101)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	LD	(IY+-98),BC
	LD	BC,(IY+-104)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-98)
	POP	IY
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	PUSH	BC
	CALL	_battle_SpawnWild
	POP	BC
	POP	BC
	POP	BC
;  492						return 1;
	LD	HL,1
	JR	L_243
;  493					}
;  494				}
;  495				else if (nextTile != 0) {
L_209:
	LD	A,(_nextTile)
	OR	A,A
	JR	Z,L_238
;  496					map_Draw();
	CALL	_map_Draw
;  497					gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  498					if (nextTile == 0x01) {
	LD	A,(_nextTile)
	CP	A,1
	JR	NZ,L_206
;  499						ExitBuilding();
	CALL	_ExitBuilding
;  500					}
;  501					else if (nextTile == 0x02) {
	JR	L_238
L_206:
	LD	A,(_nextTile)
	CP	A,2
	JR	NZ,L_204
;  502						if (((currentSave.indoors && !currentSave.defeatedTrainersIndoors[currentSave.currentZone][15]) || (!currentSave.indoors && !currentSave.defeatedTrainers[currentSave.currentZone][15])) && currentZoneData.trainerdir[15] != 0) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_178
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_179
L_178:
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_238
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_238
L_179:
	LD	BC,_currentZoneData+576
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_238
;  503							if (currentZoneData.trainerx[15] == 255) {
	LD	HL,_currentZoneData+559
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_189
;  504								int walkState, xloc, yloc;
;  505	
;  506								xloc = (16 * (tx - (11 * ((currentZoneData.trainerdir[15] == 1) - (currentZoneData.trainerdir[15] == 2))))) - screenX - 8;
	LD	BC,(IX+-3)
	LD	(IX+-87),BC
	LD	IY,(IX+-3)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-29),BC
	LD	A,(_tx)
	UEXT	HL
	LD	IY,(IY+-29)
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-83),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,1
	SBC	HL,DE
	JR	NZ,L__122
	LD	B,1
	JR	L__123
L__122:
	LD	B,0
L__123:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-29)
	LD	L,B
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__125
	LD	B,1
	JR	L__126
L__125:
	LD	B,0
L__126:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	A,11
	CALL	__imul_b
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-80),HL
	LD	BC,(IY+-83)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-80)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+-8
	LD	(IX+-72),BC
;  507								yloc = (16 * (ty - (7 * ((currentZoneData.trainerdir[15] == 3) - (currentZoneData.trainerdir[15] == 4))))) - screenY + 1;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LEA	IY,IX+-128
	LD	IY,(IY+-29)
	LD	A,(IY)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-77),HL
	POP	IY
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,3
	SBC	HL,DE
	JR	NZ,L__128
	LD	B,1
	JR	L__129
L__128:
	LD	B,0
L__129:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-29)
	LD	L,B
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__131
	LD	B,1
	JR	L__132
L__131:
	LD	B,0
L__132:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	A,7
	CALL	__imul_b
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-74),HL
	LD	BC,(IY+-77)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-74)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	INC	HL
	LD	(IX+-75),HL
;  508	
;  509								if (currentZoneData.trainerdir[15] <= 2) {
	LEA	IY,IX+-128
	LD	HL,(IY+-29)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	JP	M,L_181
;  510									walkState = 10 * 16;
	LD	BC,160
	LD	(IX+-21),BC
;  511								}
;  512								else {
	JR	L_183
L_181:
;  513									walkState = 6 * 16;
	LD	BC,96
	LD	(IX+-21),BC
;  514								}
;  515								while (walkState > 0)
	JR	L_183
L_184:
;  516								{
;  517									map_Draw();
	CALL	_map_Draw
;  518									xloc += ((currentZoneData.trainerdir[15] == 1) - (currentZoneData.trainerdir[15] == 2));
	LD	BC,(IX+-3)
	LD	(IX+-87),BC
	LD	IY,(IX+-3)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-32),BC
	LD	HL,(IY+-32)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__135
	LD	B,1
	JR	L__136
L__135:
	LD	B,0
L__136:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-32)
	LD	L,B
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__138
	LD	B,1
	JR	L__139
L__138:
	LD	B,0
L__139:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-72)
	ADD	HL,BC
	LD	(IX+-72),HL
;  519									yloc += ((currentZoneData.trainerdir[15] == 3) - (currentZoneData.trainerdir[15] == 4));
	LEA	IY,IX+-128
	LD	HL,(IY+-32)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__141
	LD	B,1
	JR	L__142
L__141:
	LD	B,0
L__142:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-32)
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-71),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__144
	LD	B,1
	JR	L__145
L__144:
	LD	B,0
L__145:
;  520	
;  521									gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[(currentZoneData.trainerskin[15] * 12) + ((currentZoneData.trainerdir[15] - 1) * 3) + ((walkState % 16) / 4 == 1) + 2 * ((walkState % 16) / 4 == 3)], xloc, yloc);
	LD	DE,1
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-68),HL
	LD	BC,(IY+-71)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-68)
	POP	IY
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-75)
	ADD	HL,BC
	LD	(IX+-75),HL
	LD	HL,(IX+-21)
	LD	BC,(IX+-75)
	PUSH	BC
	LD	BC,(IX+-72)
	PUSH	BC
	LD	BC,16
	CALL	__irems
	LD	BC,4
	CALL	__idivs
	LD	BC,HL
	LD	HL,_currentZoneData+607
	LD	IY,(IX+-3)
	LEA	IY,IY+15
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-50),BC
	LD	(IY+-53),HL	; unspill
	LD	BC,(IY+-50)
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	DEC	HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-56),BC
	LD	(IY+-59),HL	; unspill
	LD	BC,(IY+-56)
	POP	IY
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-56),BC
	LD	BC,(IY+-59)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-56)
	LD	(IY+-50),BC
	LD	BC,(IY+-53)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-50)
	LD	(IY+-62),BC
	LD	(IY+-65),HL	; unspill
	LD	BC,(IY+-62)
	POP	IY
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L__147
	LD	D,1
	JR	L__148
L__147:
	LD	D,0
L__148:
	LD	A,D
	SEXT	HL
	LD	L,D
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-62),BC
	LD	BC,(IY+-65)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-62)
	POP	IY
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__150
	LD	B,1
	JR	L__151
L__150:
	LD	B,0
L__151:
	LD	A,B
	SEXT	HL
	LD	L,B
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  522	
;  523									gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  524	
;  525									walkState--;
	LD	BC,(IX+-21)
	DEC	BC
	LD	(IX+-21),BC
;  526								}
L_183:
	LD	BC,(IX+-21)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_184
;  527								currentZoneData.trainerx[15] = tx + ((0 - currentZoneData.trainerdir[15] == 1) + (currentZoneData.trainerdir[15] == 2));
	LD	BC,IX
	LD	DE,(IX+-87)
	LEA	IY,IX+-128
	LD	(IY+-41),DE
	LD	HL,-169
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-38),BC
	LD	HL,(IY+-38)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__ineg
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__154
	LD	C,1
	JR	L__155
L__154:
	LD	C,0
L__155:
	LEA	IY,IX+-128
	LD	HL,(IY+-38)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,2
	SBC	HL,DE
	JR	NZ,L__157
	LD	B,1
	JR	L__158
L__157:
	LD	B,0
L__158:
	LD	A,C
	ADD	A,B
	LD	IY,_currentZoneData+544
	LD	BC,(_tx)
	ADD	A,C
;  528								currentZoneData.trainery[15] = ty + ((0 - currentZoneData.trainerdir[15] == 3) + (currentZoneData.trainerdir[15] == 4));
	LD	HL,-169
	LD	BC,IX
	ADD	HL,BC
	LD	(IY+15),A
	LD	IY,(HL)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-35),BC
	LD	HL,(IY+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__ineg
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__160
	LD	D,1
	JR	L__161
L__160:
	LD	D,0
L__161:
	LEA	IY,IX+-128
	LD	HL,(IY+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__163
	LD	E,1
	JR	L__164
L__163:
	LD	E,0
L__164:
	LD	BC,(_ty)
	LD	A,D
	ADD	A,E
	ADD	A,C
	LD	HL,_currentZoneData+575
	LD	(HL),A
;  529	
;  530	
;  531							}
L_189:
;  532							if (FightTrainer(15)) {
	LD	BC,15
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_238
;  533								currentZoneData.trainerx[15] = 255;
	LD	HL,_currentZoneData+559
	LD	A,255
	LD	(HL),A
;  534								currentZoneData.trainery[15] = 255;
	LD	HL,_currentZoneData+575
	LD	(HL),A
;  535								return 1;
	LD	HL,1
	JR	L_243
;  536							}
;  537						}
;  538					}
;  539					else if (currentSave.surfing && !(nextTile >= 0x1A && nextTile < 0x20)) {
L_204:
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	Z,L_202
	LD	A,(_nextTile)
	CP	A,26
	JR	C,L_201
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_202
L_201:
;  540						currentSave.surfing = false;
	XOR	A,A
	LD	(_currentSave+1237),A
;  541					}
;  542					else if (nextTile >= 0x20 && nextTile < 0x30) {
	JR	L_238
L_202:
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_200
	LD	A,(_nextTile)
	CP	A,48
	JR	NC,L_200
;  543						ExitZone(nextTile - 32);
	LD	A,(_nextTile)
	SUB	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ExitZone
	POP	BC
;  544					}
;  545					else if (nextTile >= 0x30 && nextTile < 0x40) {
	JR	L_238
L_200:
	LD	A,(_nextTile)
	CP	A,48
	JR	C,L_198
	LD	A,(_nextTile)
	CP	A,64
	JR	NC,L_198
;  546						if (FightTrainer(nextTile - 48)) {
	LD	A,(_nextTile)
	SUB	A,48
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_238
;  547							return 1;
	LD	HL,1
	JR	L_243
;  548						}
;  549					}
;  550					else if (nextTile == 0x48) {
L_198:
	LD	A,(_nextTile)
	CP	A,72
	JR	NZ,L_238
;  551						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  552					}
;  553				}
;  554			}
;  555		}
;  556	
;  557		/* If not moving */
;  558		else {
	JR	L_238
L_236:
;  559			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_218
;  560				moveDir = 1;
	LD	A,1
	LD	(_moveDir),A
;  561			}
;  562			else if (kb_Data[7] & kb_Left) {
	JR	L_227
L_218:
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_216
;  563				moveDir = 2;
	LD	A,2
	LD	(_moveDir),A
;  564			}
;  565			else if (kb_Data[7] & kb_Down) {
	JR	L_227
L_216:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_214
;  566				moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  567	
;  568			}
;  569			else if (kb_Data[7] & kb_Up) {
	JR	L_227
L_214:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_227
;  570				moveDir = 4;
	LD	A,4
	LD	(_moveDir),A
;  571			}
L_227:
;  572			
;  573			if (kb_Data[7]) {
	LD	A,(16056350)
	OR	A,A
	JR	Z,L_234
;  574				if (GetNextTile(tx, ty, tilemap.width) < 64 && !(!currentSave.surfing && GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) < 0x20)) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_225
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	NZ,L_224
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_224
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_225
L_224:
;  575					moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  576				}
;  577				else if (GetNextTile(tx, ty, tilemap.width) == 0x48 && moveDir == 3) {
	JR	L_234
L_225:
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,72
	SBC	HL,BC
	JR	NZ,L_234
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_234
;  578					moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  579					jumpState = 16;
	LD	A,16
	LD	(_jumpState),A
;  580				}
;  581			}
L_234:
;  582			running = ((kb_Data[2] & kb_Alpha) && moveState > 0 && !currentSave.surfing);
	LD	A,(16056340)
	AND	A,128
	JR	Z,L_231
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_231
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	NZ,L_231
	LD	BC,1
	LD	(IX+-96),BC
	JR	L_232
L_231:
	LD	BC,0
	LD	(IX+-96),BC
L_232:
	LD	A,(IX+-96)
	LD	(_running),A
;  583		}
L_238:
;  584	
;  585		map_Draw();
	CALL	_map_Draw
;  586		playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  587	
;  588		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  589	
;  590		if (npcToFight != 16) {
	LD	BC,16
	LD	HL,(_npcToFight)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_242
;  591			if (FightTrainer(npcToFight)) {
	LD	A,(_npcToFight)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_240
;  592				npcToFight = 16;
	LD	BC,16
	LD	(_npcToFight),BC
;  593				return 1;
	LD	HL,1
	JR	L_243
;  594			}
L_240:
;  595			npcToFight = 16;
	LD	BC,16
	LD	(_npcToFight),BC
;  596		}
L_242:
	OR	A,A
;  597	
;  598		return 0;
	SBC	HL,HL
;  599	}
L_243:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Loop ***************************
;Name                         Addr/Register   Size   Type
;_npcToFight                         STATIC      3   variable
;_ExitZone                           IMPORT  -----   function
;_PKMNSD7                            IMPORT    132   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_ExitBuilding                       IMPORT  -----   function
;_battle_SpawnWild                   IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_GetTypeMapData                     IMPORT  -----   function
;_currentRun                         STATIC      1   variable
;_playerState                        STATIC      1   variable
;_running                            STATIC      1   variable
;_jumpState                          STATIC      1   variable
;_moveState                          STATIC      1   variable
;_ShiftTile                          IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_currentZoneData                    STATIC    688   variable
;_ReadText                           IMPORT  -----   function
;_FightTrainer                       IMPORT  -----   function
;_currentTileMap                     STATIC   1920   variable
;_stats_NewCharacter                 IMPORT  -----   function
;_text_AskQuestion2                  IMPORT  -----   function
;_currentTypeMap                     STATIC   1920   variable
;_EnterDoor                          IMPORT  -----   function
;_OpenBox                            IMPORT  -----   function
;_menu_ItemShop                      IMPORT  -----   function
;_shop_compressed                    IMPORT     98   variable
;_HealParty                          IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_currentSave                        IMPORT   4140   variable
;_nextTile                           STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_GetNextTile                        IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_free                               IMPORT  -----   function
;_menu_Menu                          IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_PKMNSD4                            IMPORT     21   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;menuReturn                          IX-102      3   variable
;G_10                                 IX-99      3   variable
;temp233                              IX-96      3   variable
;temp173                              IX-93      3   variable
;temp106                              IX-90      3   variable
;G_14                                 IX-87      3   variable
;temp98                               IX-84      3   variable
;G_3                                  IX-81      3   variable
;temp94                               IX-78      3   variable
;yloc                                 IX-75      3   variable
;xloc                                 IX-72      3   variable
;shopSpriteOriginal                   IX-69      3   variable
;G_11                                 IX-66      3   variable
;wildSpawn                            IX-63      1   variable
;G_7                                  IX-62      3   variable
;pauseMenuSprite                      IX-59      3   variable
;G_4                                  IX-56      3   variable
;tempTile                             IX-53      3   variable
;G_0                                  IX-50      3   variable
;hasUser                              IX-47      1   variable
;awaitSecond                          IX-46      1   variable
;G_9                                  IX-45      3   variable
;G_6                                  IX-42      3   variable
;hasUser                              IX-39      1   variable
;tilePos                              IX-38      3   variable
;hasUser                              IX-35      1   variable
;moveIndex                            IX-34      3   variable
;moveIndex                            IX-31      3   variable
;moveIndex                            IX-28      3   variable
;starter                              IX-25      1   variable
;G_2                                  IX-24      3   variable
;walkState                            IX-21      3   variable
;partyIndex                           IX-18      3   variable
;partyIndex                           IX-15      3   variable
;oldTile                              IX-12      3   variable
;partyIndex                            IX-9      3   variable
;newTile                               IX-6      3   variable
;G_12                                  IX-3      3   variable


; Stack Frame Size: 283 (bytes)
;       Spill Code: -44 (instruction)


	SEGMENT STRSECT
L__12:
	DB	"%s used Surf"
	DB	0
L__20:
	DB	"A Pokemon with Surf could bring you across this water"
	DB	0
L__40:
	DB	"Choose Squirtle as your starter?"
	DB	0
L__42:
	DB	"Choose Bulbasaur as your starter?"
	DB	0
L__44:
	DB	"Choose Charmander as your starter?"
	DB	0
L__45:
	DB	"No"
	DB	0
L__46:
	DB	"Yes"
	DB	0
L__48:
	DB	"You already chose a Pokemon"
	DB	0
L__55:
	DB	"%s used Strength"
	DB	0
L__61:
	DB	"This boulder could be moved by a strong Pokemon"
	DB	0
L__64:
	DB	"%s used Cut"
	DB	0
L__72:
	DB	"This tree could be cut down"
	DB	0
L__86:
	DB	"Found the TM for %s"
	DB	0
L__87:
	DB	"Found a %s"
	DB	0
	SEGMENT CODE
;  600	void map_End(void) {
_map_End:
	LD	HL,-3
	CALL	__frameset
;  601		int tileIndex = 0;
;  602		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_247
L_245:
;  603			free(mapTiles[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  604		}
L_247:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_245
;  605		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_251
L_249:
;  606			free(pokeballSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  607		}
L_251:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_249
;  608		
;  609	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_End ***************************
;Name                         Addr/Register   Size   Type
;_pokeballSprites                    STATIC      9   variable
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -44 (instruction)


;  610	
;  611	void map_Draw(void) {
_map_Draw:
;  612		/* Move Screen and Redraw */
;  613		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_255
;  614			screenX = 0;
;  615			screenY = 0;
;  616	
;  617			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	LD	BC,0
	LD	(_screenX),BC
	XOR	A,A
	LD	(_screenX+3),A
	LD	(_screenY),BC
	XOR	A,A
	LD	(_screenY+3),A
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  618	
;  619			DrawPlayer();
	CALL	_DrawPlayer
;  620		}
;  621		else {
	JR	L_256
L_255:
;  622			/* Animate Water Every 20 Frames */
;  623			/*if (data_tileSets[currentSave.currentZone] == 0) {
;  624				if (currentWater == 20) {
;  625					memcpy(mapTiles[29], animatedwater1, 258);
;  626				}
;  627				if (currentWater == 0) {
;  628					memcpy(mapTiles[29], animatedwater2, 258);
;  629				}
;  630				currentWater++;
;  631				if (currentWater == 40) {
;  632					currentWater = 0;
;  633				}
;  634			}*/
;  635	
;  636			screenX = Clamp(currentSave.playerX - 160, 0, MAX_X);
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777056
	LD	A,255
	CALL	__ladd
	LD	BC,432
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenX),HL
	LD	A,E
	LD	(_screenX+3),A
;  637			screenY = Clamp(currentSave.playerY - 112, 0, MAX_Y);
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777104
	LD	A,255
	CALL	__ladd
	LD	BC,400
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenY),HL
	LD	A,E
	LD	(_screenY+3),A
;  638	
;  639			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,(_screenY)
	PUSH	BC
	LD	BC,(_screenX)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  640	
;  641			DrawPlayer();
	CALL	_DrawPlayer
;  642			
;  643	
;  644		}
L_256:
;  645		ProcessNpcs();
	CALL	_ProcessNpcs
;  646		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;  647	}
	RET	


;**************************** _map_Draw ***************************
;Name                         Addr/Register   Size   Type
;_map_DrawInformationBar             IMPORT  -----   function
;_ProcessNpcs                        IMPORT  -----   function
;_Clamp                              IMPORT  -----   function
;_DrawPlayer                         IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_currentSave                        IMPORT   4140   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -44 (instruction)


;  648	void DrawPlayer(void) {
_DrawPlayer:
	LD	HL,-15
	CALL	__frameset
;  649		GrassAnimation(0);
	LD	BC,0
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  650	
;  651		gfx_TransparentSprite_NoClip((gfx_sprite_t*)PKMNSD8[(24 * currentSave.surfing) + (12 * running) + (moveDir - 1) * (3 - currentSave.surfing) + playerState], currentSave.playerX - screenX - 8, currentSave.playerY - screenY + 4 - jumpHeights[16-jumpState]);
	LD	A,(_currentSave+4)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,4
	LD	B,A
	LD	A,(_jumpState)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,16
	OR	A,A
	SBC	HL,DE
	LD	DE,_jumpHeights
	ADD	HL,DE
	LD	A,B
	SUB	A,(HL)
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	C,A
	LD	A,(_currentSave+1237)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	UEXT	HL
	LD	L,A
	LD	A,24
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_currentSave+1237)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	LD	(IX+-15),HL
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	HL,(IX+-15)
	CALL	__imuls
	ADD	HL,DE
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD8
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  652	
;  653		/* Draw overlay if player is in grass */
;  654		if (currentTileMap[tx + (moveDir == 1) - (moveDir == 2) + (ty + (moveDir == 3) - (moveDir == 4)) * tilemap.width] == 2 && !currentSave.indoors) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	A,(_moveDir)
	CP	A,3
	LD	(IX+-12),HL
	JR	NZ,L__198
	LD	B,1
	JR	L__199
L__198:
	LD	B,0
L__199:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__201
	LD	B,1
	JR	L__202
L__201:
	LD	B,0
L__202:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-12)
	CALL	__imuls
	LD	(IX+-9),HL	; spill
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__204
	LD	B,1
	JR	L__205
L__204:
	LD	B,0
L__205:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__207
	LD	B,1
	JR	L__208
L__207:
	LD	B,0
L__208:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	DE,(IX+-9)	; unspill
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_281
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_281
;  655			/* Always draw grass overlay if moving sideways*/
;  656			if (moveDir <= 2 && moveState > 0) {
	LD	A,2
	LD	HL,_moveDir
	CP	A,(HL)
	JR	C,L_276
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_276
;  657				gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__214
	LD	A,1
	JR	L__215
L__214:
	XOR	A,A
L__215:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__217
	LD	B,1
	JR	L__218
L__217:
	LD	B,0
L__218:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__220
	LD	B,1
	JR	L__221
L__220:
L__221:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__223
	LD	B,1
	JR	L__224
L__223:
	LD	B,0
L__224:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  658			}
L_276:
;  659			if ((moveDir == 1 && moveState == 1 + running) || (moveDir == 2 && moveState == 1 + running) || (moveDir == 3 && moveState == 3 + running) || (moveDir == 4 && moveState == 1 + running)) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_263
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_275
L_263:
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_265
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_275
L_265:
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_267
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IY+3
	OR	A,A
	SBC	HL,BC
	JR	Z,L_275
L_267:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_281
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_moveState)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_281
L_275:
;  660				if (grassAnimNext) {
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	Z,L_269
;  661					grassAnimState1 = 10;
	LD	BC,10
	LD	(_grassAnimState1),BC
;  662					grassAnimX1 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__235
	LD	B,1
	JR	L__236
L__235:
	LD	B,0
L__236:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__238
	LD	B,1
	JR	L__239
L__238:
	LD	B,0
L__239:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX1),HL
;  663					grassAnimY1 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__241
	LD	B,1
	JR	L__242
L__241:
	LD	B,0
L__242:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__244
	LD	B,1
	JR	L__245
L__244:
	LD	B,0
L__245:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY1),HL
;  664				}
;  665				else {
	JR	L_274
L_269:
;  666					grassAnimState2 = 10;
	LD	BC,10
	LD	(_grassAnimState2),BC
;  667					grassAnimX2 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__247
	LD	B,1
	JR	L__248
L__247:
	LD	B,0
L__248:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__250
	LD	B,1
	JR	L__251
L__250:
	LD	B,0
L__251:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX2),HL
;  668					grassAnimY2 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__253
	LD	B,1
	JR	L__254
L__253:
	LD	B,0
L__254:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__256
	LD	B,1
	JR	L__257
L__256:
	LD	B,0
L__257:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY2),HL
;  669				}
L_274:
;  670				grassAnimNext = !grassAnimNext;
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	NZ,L_271
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_272
L_271:
	LD	BC,0
	LD	(IX+-3),BC
L_272:
	LD	A,(IX+-3)
	LD	(_grassAnimNext),A
;  671			}
;  672		}
L_281:
;  673		if (!(moveDir == 3 && moveState != 0) && currentTileMap[tx + ty * tilemap.width] == 2) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_279
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_282
L_279:
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_282
;  674			gfx_TransparentSprite_NoClip(grassoverlay1, tx * 16 - screenX - 8, ty * 16 - screenY + 18);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  675		}
L_282:
;  676	
;  677		GrassAnimation(1);
	LD	BC,1
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  678	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawPlayer ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimY2                        STATIC      3   variable
;_grassAnimX2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassAnimY1                        STATIC      3   variable
;_grassAnimX1                        STATIC      3   variable
;_grassAnimState1                    STATIC      3   variable
;_grassAnimNext                      STATIC      1   variable
;_grassoverlay1_data                 IMPORT     98   variable
;_moveState                          STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_playerState                        STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_running                            STATIC      1   variable
;_PKMNSD8                            IMPORT     96   variable
;_screenX                            STATIC      4   variable
;_jumpState                          STATIC      1   variable
;_jumpHeights                        STATIC     17   variable
;_screenY                            STATIC      4   variable
;_currentSave                        IMPORT   4140   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_GrassAnimation                     IMPORT  -----   function
;temp273                               IX-3      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: -44 (instruction)


;  679	void GrassAnimation(bool part) {
_GrassAnimation:
	LD	HL,-6
	CALL	__frameset
;  680		if (grassAnimState1 > 0) {
	LD	BC,(_grassAnimState1)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_312
;  681			if (part != ((moveDir == 3 && (currentSave.playerY + 16 > grassAnimY1 + 16) && (currentSave.playerY - 4 < grassAnimY1 + 10)) || (moveDir == 4 && ty != (grassAnimY1 / 16)))) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_287
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	IY,HL
	LEA	BC,IY+16
	LD	IY,(_grassAnimY1)
	LEA	HL,IY+16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_287
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	OR	A,A
	LD	IY,(_grassAnimY1)
	LEA	BC,IY+10
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_288
L_287:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_289
	LD	HL,(_grassAnimY1)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_289
L_288:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_290
L_289:
	LD	BC,0
	LD	(IX+-3),BC
L_290:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	JR	Z,L_296
;  682				if (grassAnimState1 > 5) {
	LD	BC,(_grassAnimState1)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_293
;  683					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 13);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  684				}
;  685				else {
	JR	L_296
L_293:
;  686					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 14);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  687				}
;  688			}
L_296:
;  689			grassAnimState1--;
	LD	BC,(_grassAnimState1)
	DEC	BC
	LD	(_grassAnimState1),BC
;  690		}
L_312:
;  691		if (grassAnimState2 > 0) {
	LD	BC,(_grassAnimState2)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_313
;  692			if (part != ((moveDir == 3 && (currentSave.playerY + 16 > grassAnimY2 + 16) && (currentSave.playerY - 4 < grassAnimY2 + 10)) || (moveDir == 4 && ty != (grassAnimY2 / 16)))) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_301
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	IY,HL
	LEA	BC,IY+16
	LD	IY,(_grassAnimY2)
	LEA	HL,IY+16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_301
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	OR	A,A
	LD	IY,(_grassAnimY2)
	LEA	BC,IY+10
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_302
L_301:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_303
	LD	HL,(_grassAnimY2)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_303
L_302:
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_304
L_303:
	LD	BC,0
	LD	(IX+-6),BC
L_304:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-6)
	SBC	HL,BC
	JR	Z,L_310
;  693				if (grassAnimState2 > 5) {
	LD	BC,(_grassAnimState2)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_307
;  694					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 13);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  695				}
;  696				else {
	JR	L_310
L_307:
;  697					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 14);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  698				}
;  699			}
L_310:
;  700			grassAnimState2--;
	LD	BC,(_grassAnimState2)
	DEC	BC
	LD	(_grassAnimState2),BC
;  701		}
;  702	}
L_313:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GrassAnimation ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimX2                        STATIC      3   variable
;_grassAnimY2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_screenX                            STATIC      4   variable
;_grassAnimX1                        STATIC      3   variable
;_screenY                            STATIC      4   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_grassAnimY1                        STATIC      3   variable
;_currentSave                        IMPORT   4140   variable
;_moveDir                            STATIC      1   variable
;_grassAnimState1                    STATIC      3   variable
;temp305                               IX-6      3   variable
;temp291                               IX-3      3   variable
;part                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -44 (instruction)


;  703	
;  704	
;  705	void HealParty(void) {
_HealParty:
	LD	HL,-45
	CALL	__frameset
;  706		int pokemonIndex, moveIndex;
;  707		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_321
L_319:
;  708			currentSave.party[pokemonIndex].currenthealth = stats_CalculateStats(currentSave.party[pokemonIndex]).health;
	LD	BC,_currentSave+10
	LD	(IX+-6),BC
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-39),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-33
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	(IX+-45),HL	; spill
	ADD	IY,SP
	LD	SP,IY
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-45)	; unspill
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
;  709			currentSave.party[pokemonIndex].currentstatus = 0;
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+15),0
;  710			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-15),HL
	JR	L_318
L_316:
;  711				currentSave.party[pokemonIndex].pp[moveIndex] = data_moves[currentSave.party[pokemonIndex].moves[moveIndex]].uses;
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	IY,(IX+-36)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  712			}
L_318:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_316
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  713		}
L_321:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_319
;  714		text_Display("Your currentSave.party has been healed", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__282
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  715		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  716	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealParty ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_currentSave                        IMPORT   4140   variable
;O_39                                 IX-21      3   variable
;O_38                                 IX-18      3   variable
;O_40                                 IX-15      3   variable
;G_16                                 IX-12      3   variable
;moveIndex                             IX-9      3   variable
;G_15                                  IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 51 (bytes)
;       Spill Code: -45 (instruction)


	SEGMENT STRSECT
L__282:
	DB	"Your currentSave.party has been healed"
	DB	0
	SEGMENT CODE
;  717	void OpenBox(void) {
_OpenBox:
;  718		map_End();
	CALL	_map_End
;  719		
;  720		menu_Box();
	CALL	_menu_Box
;  721	
;  722		map_SetupGfx();
	CALL	_map_SetupGfx
;  723		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  724	}
	RET	


;**************************** _OpenBox ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Box                           IMPORT  -----   function
;_map_End                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -45 (instruction)


;  725	void ReadText(uint8_t index) {
_ReadText:
	CALL	__frameset0
;  726		LoadText(currentZoneData.textIds[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+336
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  727		text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  728	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ReadText ***************************
;Name                         Addr/Register   Size   Type
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_currentZoneData                    STATIC    688   variable
;_LoadText                           IMPORT  -----   function
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -45 (instruction)


;  729	void EnterDoor(uint8_t index) {
_EnterDoor:
	CALL	__frameset0
;  730		int tileIndex;
;  731		currentSave.lastPlayerX = currentSave.playerX;
	LD	BC,(_currentSave+2)
	LD	HL,_currentSave+6
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  732		currentSave.lastPlayerY = currentSave.playerY;
	LD	BC,(_currentSave+4)
	LD	HL,_currentSave+8
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  733		currentSave.indoors = true;
	LD	A,1
	LD	(_currentSave+1236),A
;  734		currentSave.currentBuilding = currentZoneData.doorzones[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	DE,_currentZoneData+288
;  735		LoadTileset(true);
	LD	BC,1
	PUSH	BC
	ADD	HL,DE
	LD	A,(HL)
	LD	(_currentSave+1238),A
	CALL	_LoadTileset
	POP	BC
;  736		tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  737		tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  738		currentSave.playerX = currentZoneData.doorx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+304
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  739		currentSave.playerY = currentZoneData.doory[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+320
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  740		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  741		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  742		LoadMap();
	CALL	_LoadMap
;  743	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _EnterDoor ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_LoadTileset                        IMPORT  -----   function
;_currentZoneData                    STATIC    688   variable
;_currentSave                        IMPORT   4140   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -45 (instruction)


;  744	void ExitBuilding(void) {
_ExitBuilding:
;  745		int tileIndex;
;  746		currentSave.playerX = currentSave.lastPlayerX;
	LD	BC,(_currentSave+6)
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  747		currentSave.playerY = currentSave.lastPlayerY;
	LD	BC,(_currentSave+8)
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  748		currentSave.indoors = false;
	XOR	A,A
	LD	(_currentSave+1236),A
;  749		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  750		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  751		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  752		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
;  753		LoadTileset(true);
	LD	DE,1
	PUSH	DE
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
	CALL	_LoadTileset
	POP	BC
;  754		LoadMap();
	CALL	_LoadMap
;  755	}
	RET	


;**************************** _ExitBuilding ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_currentSave                        IMPORT   4140   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -45 (instruction)


;  756	void ExitZone(uint8_t index) {
_ExitZone:
	CALL	__frameset0
;  757		currentSave.playerX = currentZoneData.exitx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+256
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  758		currentSave.playerY = currentZoneData.exity[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+272
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  759		currentSave.currentZone = currentZoneData.exitzone[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+240
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_currentSave+1234
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  760		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  761		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  762		LoadTileset(true);
	LD	BC,1
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  763		LoadMap();
	CALL	_LoadMap
;  764	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitZone ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   4140   variable
;_currentZoneData                    STATIC    688   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -45 (instruction)


;  765	bool FightTrainer(uint8_t index) {
_FightTrainer:
	LD	HL,-15
	CALL	__frameset
;  766		if (currentZoneData.trainertype[index] <=1) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+608
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,1
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_356
;  767			currentTrainer = index;
	LD	A,(IX+6)
	LD	(_currentTrainer),A
;  768			if (currentSave.indoors && !currentSave.defeatedTrainersIndoors[currentSave.currentBuilding][currentTrainer]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_333
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_333
;  769				lastTextIndex = 0;
	LD	HL,_lastTextIndex
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  770				lastTextID = currentZoneData.trainertext[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_lastTextID
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  771				LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  772				text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  773				battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+448
	PUSH	BC
	LD	BC,_currentZoneData+352
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  774				return true;
	LD	A,1
	JR	L_358
;  775			}
;  776			else if (!currentSave.indoors && !currentSave.defeatedTrainers[currentSave.currentZone][currentTrainer]) {
L_333:
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_357
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_357
;  777				lastTextIndex = 0;
	LD	HL,_lastTextIndex
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  778				lastTextID = currentZoneData.trainertext[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_lastTextID
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  779				LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  780				text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  781				battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+448
	PUSH	BC
	LD	BC,_currentZoneData+352
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  782				return true;
	LD	A,1
	JR	L_358
;  783			}
;  784			
;  785		}
;  786		else if (currentZoneData.trainertype[index] <= 3) {
L_356:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	JP	M,L_354
;  787			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  788			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  789		}
;  790		else if (currentZoneData.trainertype[index] == 4 && moveState == 0) {
	JR	L_357
L_354:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_352
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_352
;  791			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  792			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  793			moveDir = moveDir + 1 - 2 * !(moveDir % 2);
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_336
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_337
L_336:
	LD	BC,0
	LD	(IX+-6),BC
L_337:
	LD	A,(_moveDir)
	LD	B,A
	INC	B
	LD	A,(IX+-6)
	ADD	A,A
	LD	C,A
	LD	A,B
	SUB	A,C
	LD	(_moveDir),A
;  794			moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  795		}
;  796		else if (currentZoneData.trainertype[index] == 5 && moveState == 0) {
	JR	L_357
L_352:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_350
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_350
;  797			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  798			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  799			moveDir = moveDir + 1 - 2 * !(moveDir % 2);
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_341
	LD	BC,1
	LD	(IX+-9),BC
	JR	L_342
L_341:
	LD	BC,0
	LD	(IX+-9),BC
L_342:
	LD	A,(_moveDir)
	LD	B,A
	INC	B
	LD	A,(IX+-9)
	ADD	A,A
	LD	C,A
	LD	A,B
	SUB	A,C
	LD	(_moveDir),A
;  800			moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  801		}
;  802		else if (currentZoneData.trainertype[index] == 6) {
	JR	L_357
L_350:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	NZ,L_357
;  803			if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_347
;  804				text_Display("Professor Spruce was looking for you\nHe is in his Laboratory", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__303
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  805			}
;  806			else {
	JR	L_357
L_347:
;  807				if (!currentSave.takenGiftsIndoors[currentSave.currentBuilding][index]) {
	LD	BC,_currentSave+2196
	LD	(IX+-12),BC
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_345
;  808					text_Display("You can use these to catch\nmore Pokemon\n\n\nRecieved 5 pokeballs", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__305
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  809					currentSave.playerItems[0] += 5;
	LD	BC,_currentSave+1243
	LD	(IX+-15),BC
	LD	HL,BC
	LD	A,(HL)
	ADD	A,5
	LD	HL,(IX+-15)
	LD	(HL),A
;  810					currentSave.takenGiftsIndoors[currentSave.currentBuilding][index] = true;
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	A,(IX+6)
	LD	BC,(IX+-12)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  811				}
;  812				else {
	JR	L_357
L_345:
;  813					text_Display("Good luck on your adventure!", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__306
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  814				}
;  815			}
;  816		}
L_357:
;  817		return false;
	XOR	A,A
;  818	}
L_358:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FightTrainer ***************************
;Name                         Addr/Register   Size   Type
;_moveDir                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_battle_SpawnTrainer                IMPORT  -----   function
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_LoadText                           IMPORT  -----   function
;_lastTextID                         IMPORT      2   variable
;_lastTextIndex                      IMPORT      2   variable
;_currentSave                        IMPORT   4140   variable
;_currentTrainer                     STATIC      1   variable
;_currentZoneData                    STATIC    688   variable
;G_25                                 IX-12      3   variable
;temp343                               IX-9      3   variable
;temp338                               IX-6      3   variable
;G_18                                  IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: -45 (instruction)


	SEGMENT STRSECT
L__303:
	DB	"Professor Spruce was looking for you"
	DB	10
	DB	"He is in his Laboratory"
	DB	0
L__305:
	DB	"You can use these to catch"
	DB	10
	DB	"more Pokemon"
	DB	10,10,10
	DB	"Recieved 5 pokeballs"
	DB	0
L__306:
	DB	"Good luck on your adventure!"
	DB	0
	SEGMENT CODE
;  819	
;  820	void map_LoadPokeballs(void) {
_map_LoadPokeballs:
	LD	HL,-6
	CALL	__frameset
;  821		int pokemonIndex;
;  822		/* Generate pokemon info To Display At Top of Screen */
;  823		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_366
L_364:
;  824			if (currentSave.party[pokemonIndex].id == 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_363
;  825				pokeballdata[pokemonIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),2
;  826			}
;  827			else {
	JR	L_365
L_363:
;  828				if (currentSave.party[pokemonIndex].currenthealth > 0) {
	LD	IY,(IX+-6)
	LD	BC,(IY+13)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_361
;  829					pokeballdata[pokemonIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),0
;  830				}
;  831				else {
	JR	L_365
L_361:
;  832					pokeballdata[pokemonIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),1
;  833				}
;  834			}
;  835		}
L_365:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_366:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_364
;  836	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoadPokeballs ***************************
;Name                         Addr/Register   Size   Type
;_pokeballdata                       STATIC      6   variable
;_currentSave                        IMPORT   4140   variable
;G_26                                  IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -45 (instruction)


;  837	void LoadMap(void) {
_LoadMap:
	LD	HL,-59
	CALL	__frameset
;  838		int i, j;
;  839		int npcIndex;
;  840		ti_var_t mapAV;
;  841		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_369
;  842			mapAV = ti_Open("PKMNMD1", "r");
	LD	BC,L__313
	PUSH	BC
	LD	BC,L__314
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;  843			ti_Seek(((int)currentSave.currentBuilding) * 1318, 0, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,1318
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  844			ti_Read(&currentTileMap, 315, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  845			ti_Read(&currentTypeMap, 315, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  846			ti_Read(&currentZoneData, sizeof(currentZoneData), 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,688
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  847		}
;  848		else {
	JR	L_370
L_369:
;  849			mapAV = ti_Open("PKMNMD0", "r");
	LD	BC,L__315
	PUSH	BC
	LD	BC,L__316
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;  850			ti_Seek(((int)currentSave.currentZone) * 4528, 0, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,4528
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  851			ti_Read(&currentTileMap, 1920, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  852			ti_Read(&currentTypeMap, 1920, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  853			ti_Read(&currentZoneData, sizeof(currentZoneData), 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,688
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  854		}
L_370:
;  855		ti_CloseAll();
	CALL	_ti_CloseAll
;  856		for (npcIndex = 0; npcIndex < 16; npcIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_395
L_393:
;  857			if (currentZoneData.trainertype[npcIndex] == 4) {
	LD	BC,_currentZoneData+608
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_379
;  858				bool canPass = true;
	LD	(IX+-5),1
;  859				if (currentSave.newGame && currentZoneData.spawnids[0][npcIndex] == 0) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_375
	LD	BC,_currentZoneData
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_375
;  860					canPass = false;
	LD	(IX+-5),0
;  861				}
L_375:
;  862				if (currentZoneData.spawnids[0][npcIndex] > playerState) {
	LD	BC,_currentZoneData
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(_playerState)
	CP	A,(HL)
	JR	NC,L_377
;  863					canPass = false;
	LD	(IX+-5),0
;  864				}
L_377:
;  865				if (canPass) {
	LD	A,(IX+-5)
	OR	A,A
	JR	Z,L_379
;  866					currentZoneData.trainerdir[npcIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),0
;  867				}
;  868			}
L_379:
;  869	
;  870	
;  871			npcMoveState[npcIndex] = 0;
	LD	BC,_npcMoveState
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),0
;  872			npcGrassAnimState[npcIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_npcGrassAnimState
	ADD	HL,BC
	LD	(HL),0
;  873			npcOldTiles[npcIndex] = currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])];
	LD	BC,_currentZoneData+544
	LD	(IX+-32),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-32)
	ADD	HL,BC
	LD	(IX+-29),HL
	LD	BC,_currentZoneData+560
	LD	(IX+-26),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-26)
	ADD	HL,BC
	LD	(IX+-23),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,(IX+-23)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	HL,(IX+-29)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	A,(IY)
	LD	BC,_npcOldTiles
	ADD	HL,BC
	LD	(HL),A
;  874			currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])] = 96 + npcIndex;
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-23)
	LD	A,(IY)
	LD	IY,(IX+-29)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	LD	A,(IX+-3)
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	ADD	A,96
	LD	(HL),A
;  875			npcSaidMessage[npcIndex] = false;
	LD	HL,(IX+-3)
	LD	BC,_npcSaidMessage
	ADD	HL,BC
	LD	(HL),0
;  876	
;  877			if (currentSave.takenGroundGifts[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][npcIndex]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_381
	LD	BC,1
	LD	(IX+-20),BC
	JR	L_382
L_381:
	LD	BC,0
	LD	(IX+-20),BC
L_382:
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,8
	CALL	__ishl_b
	LD	BC,_currentSave+2452
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-20)
	CALL	__imuls
	LD	(IX+-56),HL	; spill
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	(IX+-59),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-59)
	CALL	__imuls
	LD	BC,(IX+-56)	; unspill
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_394
;  878				currentTileMap[currentSave.foundItemsPos[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][npcIndex]] = 0;
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_385
	LD	BC,1
	LD	(IX+-8),BC
	JR	L_386
L_385:
	LD	BC,0
	LD	(IX+-8),BC
L_386:
	LD	BC,_currentSave+2964
	LD	(IX+-17),BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	(IX+-14),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__ishl_b
	LD	BC,(IX+-17)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-8)
	CALL	__imuls
	LD	(IX+-50),HL	; spill
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	(IX+-53),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-53)
	CALL	__imuls
	LD	BC,(IX+-50)	; unspill
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-14)
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  879				currentTypeMap[currentSave.foundItemsPos[currentSave.indoors][(currentSave.currentZone * !currentSave.indoors) + (currentSave.currentBuilding * currentSave.indoors)][npcIndex]] = 0;
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_389
	LD	BC,1
	LD	(IX+-11),BC
	JR	L_390
L_389:
	LD	BC,0
	LD	(IX+-11),BC
L_390:
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__ishl_b
	LD	BC,(IX+-17)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,(IX+-11)
	CALL	__imuls
	LD	(IX+-38),HL	; spill
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	(IX+-41),HL
	LD	A,(_currentSave+1236)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-41)
	CALL	__imuls
	LD	(IX+-44),BC	; spill
	LD	BC,(IX+-14)
	LD	(IX+-47),BC	; spill
	LD	BC,(IX+-38)	; unspill
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,(IX+-47)	; unspill
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	(HL),0
;  880			}
;  881		}
L_394:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_395:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_393
;  882		
;  883	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadMap ***************************
;Name                         Addr/Register   Size   Type
;_npcSaidMessage                     STATIC     16   variable
;_npcOldTiles                        STATIC     16   variable
;_tilemap                            STATIC     18   variable
;_npcGrassAnimState                  STATIC     16   variable
;_npcMoveState                       STATIC     16   variable
;_playerState                        STATIC      1   variable
;_ti_CloseAll                        IMPORT  -----   function
;_currentZoneData                    STATIC    688   variable
;_currentTypeMap                     STATIC   1920   variable
;_currentTileMap                     STATIC   1920   variable
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_currentSave                        IMPORT   4140   variable
;temp383                              IX-20      3   variable
;G_28                                 IX-17      3   variable
;G_29                                 IX-14      3   variable
;temp391                              IX-11      3   variable
;temp387                               IX-8      3   variable
;canPass                               IX-5      1   variable
;mapAV                                 IX-4      1   variable
;npcIndex                              IX-3      3   variable


; Stack Frame Size: 65 (bytes)
;       Spill Code: -46 (instruction)


	SEGMENT STRSECT
L__313:
	DB	"r"
	DB	0
L__314:
	DB	"PKMNMD1"
	DB	0
L__315:
	DB	"r"
	DB	0
L__316:
	DB	"PKMNMD0"
	DB	0
	SEGMENT CODE
;  884	
;  885	int32_t Clamp(int32_t number, int min, int max) {
_Clamp:
	CALL	__frameset0
;  886		if (number < min) {
	LD	BC,(IX+12)
	CALL	__itol
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_399
;  887			number = min;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  888		}
L_399:
;  889		if (number > max) {
	LD	BC,(IX+15)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_400
;  890			number = max;
	LD	BC,(IX+15)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  891		}
L_400:
;  892		return number;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  893	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Clamp ***************************
;Name                         Addr/Register   Size   Type
;max                                  IX+15      3   parameter
;min                                  IX+12      3   parameter
;number                                IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -46 (instruction)


;  894	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width) {
_GetNextTile:
	CALL	__frameset0
;  895	
;  896		switch (moveDir) {
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__331:
	DW	4
	DW	1
	DB	0
	DW24	L_402	

	DW24	L_403	

	DW24	L_404	

	DW24	L_405	

	DW24	L_406	

;  897		case 1:
L_402:
;  898			return(GetTypeMapData(tx + 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	INC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_407
;  899		case 2:
L_403:
;  900			return(GetTypeMapData(tx - 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	DEC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_407
;  901		case 3:
L_404:
;  902			return(GetTypeMapData(tx, ty + 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	INC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_407
;  903		case 4:
L_405:
;  904			return(GetTypeMapData(tx, ty - 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_407
;  905		}
L_406:
;  906		return 0;
	XOR	A,A
;  907	}
L_407:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetNextTile ***************************
;Name                         Addr/Register   Size   Type
;_GetTypeMapData                     IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -46 (instruction)


;  908	
;  909	uint16_t ShiftTile(uint16_t value, uint8_t direction, uint8_t amount) {
_ShiftTile:
	LD	HL,-9
	CALL	__frameset
;  910		return (value + ((direction == 1) * amount) - ((direction == 2) * amount) + ((direction == 3) * tilemap.width * amount) - ((direction == 4) * tilemap.width * amount));
	LD	A,(IX+9)
	CP	A,1
	JR	NZ,L__334
	LD	A,1
	JR	L__335
L__334:
	XOR	A,A
L__335:
	LD	B,A
	SEXT	HL
	LD	A,(IX+9)
	CP	A,2
	LD	L,B
	LD	DE,HL
	LD	C,(IX+12)
	LD	B,0
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	BC,(IX+6)
	ADD.SIS	HL,BC
	LD	(IX+-9),HL
	JR	NZ,L__337
	LD	A,1
	JR	L__338
L__337:
	XOR	A,A
L__338:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	C,(IX+12)
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	DE,HL
	LD	A,(_tilemap+13)
	LD	C,A
	LD	HL,(IX+-9)
	OR	A,A
	SBC.SIS	HL,DE
	LD	A,(IX+9)
	CP	A,3
	LD	(IX+-6),HL
	LD	B,0
	LD	DE,BC
	JR	NZ,L__340
	LD	A,1
	JR	L__341
L__340:
	XOR	A,A
L__341:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,DE
	CALL	__smulu
	LD	C,(IX+12)
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	A,(_tilemap+13)
	LD	C,A
	LD	A,(IX+9)
	CP	A,4
	LD	DE,HL
	LD	HL,(IX+-6)
	ADD.SIS	HL,DE
	LD	(IX+-3),HL
	LD	B,0
	LD	DE,BC
	JR	NZ,L__343
	LD	A,1
	JR	L__344
L__343:
	XOR	A,A
L__344:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,DE
	CALL	__smulu
	LD	C,(IX+12)
	OR	A,A
	LD	B,0
	LD	DE,HL
	LD	HL,BC
	LD	BC,DE
	CALL	__smulu
	LD	BC,HL
	LD	HL,(IX+-3)
	SBC.SIS	HL,BC
;  911	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ShiftTile ***************************
;Name                         Addr/Register   Size   Type
;_tilemap                            STATIC     18   variable
;amount                               IX+12      1   parameter
;direction                             IX+9      1   parameter
;value                                 IX+6      2   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: -46 (instruction)


;  912	
;  913	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width) {
_GetTypeMapData:
	CALL	__frameset0
;  914		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_410
;  915			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	JR	L_411
;  916		}
;  917		else {
L_410:
;  918			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
;  919		}
;  920	}
L_411:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetTypeMapData ***************************
;Name                         Addr/Register   Size   Type
;_currentTypeMap                     STATIC   1920   variable
;_currentSave                        IMPORT   4140   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -46 (instruction)


;  921	
;  922	void ProcessNpcs(void) {
_ProcessNpcs:
	LD	HL,-288
	CALL	__frameset
;  923		int npcIndex, tileIndex, xloc, yloc, xlocMod, ylocMod;
;  924		for (npcIndex = 0; npcIndex < 16; npcIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_532
L_530:
;  925			if (currentZoneData.trainerdir[npcIndex] != 0) {
	LD	BC,IX
	LD	DE,_currentZoneData+576
	LEA	IY,IX+-128
	LD	(IY+-50),DE
	LD	DE,(IX+-3)
	LD	HL,-178
	ADD	HL,BC
	LD	HL,(HL)
	ADD	HL,DE
	LD	(IY+-41),HL
	LD	HL,(IY+-41)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_531
;  926				xloc = currentZoneData.trainerx[npcIndex] * 16 - screenX;
	LD	BC,_currentZoneData+544
	LD	(IX+-127),BC
	LD	(IX+-106),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-127)
	ADD	HL,BC
	LD	(IX+-85),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	(IX+-45),HL
;  927				yloc = currentZoneData.trainery[npcIndex] * 16 - screenY;
	LD	BC,_currentZoneData+560
	LD	(IX+-124),BC
	LD	(IX+-103),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-124)
	ADD	HL,BC
	LD	(IX+-94),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	LD	(IX+-48),HL
;  928				xlocMod = 0;
;  929				ylocMod = 0;
;  930	
;  931				if (xloc < 336 && yloc < 240 && xloc >= 0 && yloc >= 0) {
	OR	A,A
	LD	BC,0
	LD	(IX+-69),BC
	LD	(IX+-78),BC
	LD	HL,(IX+-45)
	LD	BC,336
	SBC	HL,BC
	JP	P,L_531
	LD	BC,240
	LD	HL,(IX+-48)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_531
	LD	HL,(IX+-45)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_531
	LD	HL,(IX+-48)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_531
;  932					bool canMove;
;  933					int trainerDir = currentZoneData.trainerdir[npcIndex];
	LEA	IY,IX+-128
	LD	HL,(IY+-41)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-6),HL
;  934					canMove = true;
	LD	(IX+-49),1
;  935					for (tileIndex = 1; tileIndex < 5; tileIndex++) {
	LD	BC,1
	LD	(IX+-42),BC
	JR	L_439
L_437:
;  936						if (currentTypeMap[(currentZoneData.trainerx[npcIndex] + (trainerDir == 1)*tileIndex - (trainerDir == 2)*tileIndex) + tilemap.width * (currentZoneData.trainery[npcIndex] + (trainerDir == 3) * tileIndex - (trainerDir == 4) * tileIndex)] >= 64) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__354
	LD	B,1
	JR	L__355
L__354:
	LD	B,0
L__355:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-14),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__357
	LD	B,1
	JR	L__358
L__357:
	LD	B,0
L__358:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-8),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__360
	LD	B,1
	JR	L__361
L__360:
	LD	B,0
L__361:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-5),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__363
	LD	B,1
	JR	L__364
L__363:
	LD	B,0
L__364:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-2),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-94)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-5)
	LD	L,A
	ADD	HL,BC
	LD	BC,(IY+-2)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	IY,(IX+-85)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LEA	IY,IX+-128
	LD	DE,(IY+-14)
	LD	L,A
	ADD	HL,DE
	LD	DE,(IY+-8)
	OR	A,A
	SBC	HL,DE
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_436
;  937							if (tileIndex == 1 && (npcMoveState[npcIndex] % 16 == 0) && npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4) {
	LD	BC,1
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_442
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-32),HL
	LD	HL,(IY+-32)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_442
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,_npcPatterns
	LD	BC,16
	ADD	HL,DE
	LD	DE,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),BC
	POP	IY
	LD	BC,4
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-288	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	LEA	IY,IX+-128
	LD	HL,(IY+-32)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,-288	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	SBC	HL,BC
	JR	NZ,L_442
;  938								canMove = false;
	LD	(IX+-49),0
;  939							}
;  940							break;
	JR	L_442
;  941						}
L_436:
;  942						if ((currentZoneData.trainerx[npcIndex] + (trainerDir == 1)*tileIndex - (trainerDir == 2)*tileIndex) == tx && (currentZoneData.trainery[npcIndex] + (trainerDir == 3) * tileIndex - (trainerDir == 4) * tileIndex) == ty) {
	LD	BC,(IX+-3)
	LD	HL,(IX+-106)
	ADD	HL,BC
	LD	(IX+-85),HL
	LD	A,(HL)
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-14)
	LD	L,A
	ADD	HL,BC
	LD	BC,(IY+-8)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_438
	LD	BC,(IX+-3)
	LD	HL,(IX+-103)
	ADD	HL,BC
	LD	(IX+-94),HL
	LD	A,(HL)
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-5)
	LD	L,A
	ADD	HL,BC
	LD	BC,(IY+-2)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_438
;  943							if (tileIndex == 1 && (npcMoveState[npcIndex] % 16 == 0) && npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4) {
	LD	BC,1
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_433
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-38),HL
	LD	HL,(IY+-38)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_433
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,_npcPatterns
	LD	BC,16
	ADD	HL,DE
	LD	DE,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),BC
	POP	IY
	LD	BC,4
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-285	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	LEA	IY,IX+-128
	LD	HL,(IY+-38)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,-285	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	SBC	HL,BC
	JR	NZ,L_433
;  944								canMove = false;
	LD	(IX+-49),0
;  945							}
L_433:
;  946							if (currentZoneData.trainertype[npcIndex] == 0 || (currentZoneData.trainertype[npcIndex] == 2 && !npcSaidMessage[npcIndex]) || currentZoneData.trainertype[npcIndex] == 4 || (currentZoneData.trainertype[npcIndex] == 6 && !npcSaidMessage[npcIndex] && currentSave.newGame)) {
	LD	BC,_currentZoneData+608
	LD	(IX+-100),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-100)
	ADD	HL,BC
	LD	(IX+-66),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_432
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_428
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_432
L_428:
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_432
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	NZ,L_442
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_442
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_442
L_432:
;  947								npcSaidMessage[npcIndex] = true;
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),1
;  948								npcToFight = npcIndex;
	LD	BC,(IX+-3)
	LD	(_npcToFight),BC
;  949							}
;  950							break;
	JR	L_442
;  951						}
;  952					}
L_438:
	LD	BC,(IX+-42)
	INC	BC
	LD	(IX+-42),BC
L_439:
	LD	BC,5
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JP	M,L_437
L_442:
;  953					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 1 && npcMoveState[npcIndex] % 16 == 8) {
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	(IX+-109),HL
	LD	(IX+-12),HL
	LD	(IX+-15),HL
	LD	(IX+-52),HL
	LD	(IX+-61),HL
	LD	(IX+-58),HL
	LD	(IX+-55),HL
	LD	(IX+-30),HL
	LD	(IX+-27),HL
	LD	(IX+-24),HL
	LD	(IX+-21),HL
	LD	(IX+-39),HL
	LD	(IX+-36),HL
	LD	(IX+-33),HL
	LD	(IX+-18),HL
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	LD	(IX+-82),HL
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_452
	LD	BC,(IX+-9)
	LD	(IX+-109),BC
	LD	BC,(IX+-9)
	LD	(IX+-12),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	(IX+-52),BC
	LD	BC,(IX+-9)
	LD	(IX+-61),BC
	LD	BC,(IX+-9)
	LD	(IX+-58),BC
	LD	BC,(IX+-9)
	LD	(IX+-55),BC
	LD	BC,(IX+-9)
	LD	(IX+-30),BC
	LD	BC,(IX+-9)
	LD	(IX+-27),BC
	LD	BC,(IX+-9)
	LD	(IX+-24),BC
	LD	BC,(IX+-9)
	LD	(IX+-21),BC
	LD	BC,(IX+-9)
	LD	(IX+-39),BC
	LD	BC,(IX+-9)
	LD	(IX+-36),BC
	LD	BC,(IX+-9)
	LD	(IX+-33),BC
	LD	BC,(IX+-9)
	LD	(IX+-18),BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_452
;  954						currentZoneData.trainerdir[npcIndex] = 5 - trainerDir;
	LD	B,(IX+-6)
	LD	HL,(IX+-3)
	LD	DE,_currentZoneData+576
	ADD	HL,DE
	LD	A,5
	SUB	A,B
	LD	(HL),A
;  955					}
L_452:
;  956					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 2 && npcMoveState[npcIndex] % 16 == 8) {
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-47),HL
	LD	HL,(IY+-47)
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	(IX+-118),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_462
	LD	BC,(IX+-109)
	LD	(IX+-12),BC
	LD	(IX+-15),BC
	LD	BC,(IX+-12)
	LD	(IX+-52),BC
	LD	BC,(IX+-12)
	LD	(IX+-61),BC
	LD	BC,(IX+-12)
	LD	(IX+-58),BC
	LD	BC,(IX+-12)
	LD	(IX+-55),BC
	LD	BC,(IX+-12)
	LD	(IX+-30),BC
	LD	BC,(IX+-12)
	LD	(IX+-27),BC
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	(IX+-39),BC
	LD	BC,(IX+-12)
	LD	(IX+-36),BC
	LD	BC,(IX+-12)
	LD	(IX+-33),BC
	LD	BC,(IX+-12)
	LD	(IX+-18),BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_462
;  957						if (trainerDir == 1 || trainerDir == 3) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_446
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_450
L_446:
;  958							currentZoneData.trainerdir[npcIndex]++;
	LD	BC,_currentZoneData+576
	LEA	IY,IX+-128
	LD	HL,-184
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-56),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-53),HL
	LD	HL,(IY+-53)
	LD	BC,(IX+-3)
	LD	A,(HL)
	LD	DE,IX
	LD	HL,-184
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	INC	A
	LD	(HL),A
;  959						}
L_450:
;  960						if (trainerDir == 2 || trainerDir == 4) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_449
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_462
L_449:
;  961							currentZoneData.trainerdir[npcIndex]--;
	LD	BC,_currentZoneData+576
	LEA	IY,IX+-128
	LD	HL,-190
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-62),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-59),HL
	LD	HL,(IY+-59)
	LD	BC,(IX+-3)
	LD	A,(HL)
	LD	DE,IX
	LD	HL,-190
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	DEC	A
	LD	(HL),A
;  962						}
;  963					}
L_462:
;  964					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 1 && npcMoveState[npcIndex] % 16 == 8) {
	LD	HL,(IX+-118)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_476
	LD	BC,(IX+-12)
	LD	(IX+-15),BC
	LD	(IX+-52),BC
	LD	BC,(IX+-15)
	LD	(IX+-61),BC
	LD	BC,(IX+-15)
	LD	(IX+-58),BC
	LD	BC,(IX+-15)
	LD	(IX+-55),BC
	LD	BC,(IX+-15)
	LD	(IX+-30),BC
	LD	BC,(IX+-15)
	LD	(IX+-27),BC
	LD	BC,(IX+-15)
	LD	(IX+-24),BC
	LD	BC,(IX+-15)
	LD	(IX+-21),BC
	LD	BC,(IX+-15)
	LD	(IX+-39),BC
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	BC,(IX+-15)
	LD	(IX+-33),BC
	LD	BC,(IX+-15)
	LD	(IX+-18),BC
	LD	HL,(IX+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_476
;  965						if (trainerDir == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_456
;  966							currentZoneData.trainerdir[npcIndex] = 3;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),3
;  967						}
L_456:
;  968						if (trainerDir == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_458
;  969							currentZoneData.trainerdir[npcIndex] = 4;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),4
;  970						}
L_458:
;  971						if (trainerDir == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_460
;  972							currentZoneData.trainerdir[npcIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),1
;  973						}
L_460:
;  974						if (trainerDir == 4) {
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_476
;  975							currentZoneData.trainerdir[npcIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),2
;  976						}
;  977					}
L_476:
;  978	
;  979					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove) {
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LD	(IX+-72),HL
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	(IX+-97),HL
	LD	(IX+-121),HL
	LD	HL,(IX+-97)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L__397
	LD	A,1
	JR	L__398
L__397:
	XOR	A,A
L__398:
	LD	(IX+-62),A
	LD	(IX+-79),A
	LD	A,(IX+-62)
	LD	(IX+-63),A
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_491
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_491
;  980						if (trainerDir == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_466
;  981							xlocMod += (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-15)
	LD	(IX+-52),BC
	LD	(IX+-61),BC
	LD	BC,(IX+-52)
	LD	(IX+-58),BC
	LD	BC,(IX+-52)
	LD	(IX+-55),BC
	LD	HL,(IX+-52)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-69),HL
;  982						}
L_466:
;  983						if (trainerDir == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_468
;  984							xlocMod -= (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-52)
	LD	(IX+-61),BC
	LD	(IX+-58),BC
	LD	BC,(IX+-61)
	LD	(IX+-55),BC
	LD	HL,(IX+-61)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,(IX+-69)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-69),HL
;  985						}
L_468:
;  986						if (trainerDir == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_470
;  987							ylocMod += (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-61)
	LD	(IX+-58),BC
	LD	(IX+-55),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-78),HL
;  988						}
L_470:
;  989						if (trainerDir == 4) {
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_472
;  990							ylocMod -= (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-58)
	LD	(IX+-55),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,(IX+-78)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-78),HL
;  991						}
L_472:
;  992						if (npcMoveState[npcIndex] % 16 == 0) {
	LD	BC,(IX+-55)
	LD	(IX+-30),BC
	LD	(IX+-27),BC
	LD	BC,(IX+-30)
	LD	(IX+-24),BC
	LD	BC,(IX+-30)
	LD	(IX+-21),BC
	LD	BC,(IX+-30)
	LD	(IX+-39),BC
	LD	BC,(IX+-30)
	LD	(IX+-36),BC
	LD	BC,(IX+-30)
	LD	(IX+-33),BC
	LD	BC,(IX+-30)
	LD	(IX+-18),BC
	LD	HL,(IX+-30)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LEA	IY,IX+-128
	LD	(IY+-11),HL
	LD	HL,(IY+-11)
	CALL	__icmpzero
	JR	NZ,L_474
;  993							currentTypeMap[(currentZoneData.trainerx[npcIndex] + ((trainerDir == 1) - (trainerDir == 2))) + (tilemap.width * (currentZoneData.trainery[npcIndex] + ((trainerDir == 3) - (trainerDir == 4))))] = 96 + npcIndex;
	LD	BC,_currentZoneData+544
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	BC,1
	LD	L,A
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-277	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-280	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-277	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	H,(IX+-3)
	PUSH	IY
	PUSH	BC
	LD	IY,-282	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	JR	NZ,L__407
	LD	B,1
	JR	L__408
L__407:
	LD	B,0
L__408:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-274	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,2
	SBC	HL,DE
	JR	NZ,L__410
	LD	B,1
	JR	L__411
L__410:
	LD	B,0
L__411:
	LD	DE,3
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-271	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-274	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-271	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	OR	A,A
	SBC	HL,BC
	LD	BC,-280	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-128),BC
	POP	IY
	LD	HL,(IX+-3)
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-259	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,_currentZoneData+560
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-262	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-259	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-262	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-265	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-268	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-265	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L__413
	LD	B,1
	JR	L__414
L__413:
	LD	B,0
L__414:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-125),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__416
	LD	B,1
	JR	L__417
L__416:
	LD	B,0
L__417:
	LD	A,B
	LD	DE,_currentTypeMap
	SEXT	HL
	LD	A,(_tilemap+13)
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-122),HL
	LD	BC,(IY+-125)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-122)
	POP	IY
	OR	A,A
	SBC	HL,BC
	LD	BC,-268	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-119),BC
	POP	IY
	UEXT	HL
	LD	L,A
	PUSH	IY
	PUSH	BC
	LD	IY,-281	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-282	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-281	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),HL
	LD	BC,(IY+-119)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-128)
	POP	IY
	ADD	HL,BC
	ADD	HL,DE
	ADD	A,96
	LD	(HL),A
;  994						}
L_474:
;  995						if (npcMoveState[npcIndex] % 16 == 15) {
	LEA	IY,IX+-128
	LD	HL,(IY+-11)
	LD	BC,15
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_491
;  996							currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])] = 0;
	LD	BC,_currentZoneData+544
	LEA	IY,IX+-128
	LD	HL,-202
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-74),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-71),HL
	LD	BC,_currentZoneData+560
	LD	HL,-196
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-68),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-65),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	IY,(IY+-65)
	LD	L,A
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LEA	IY,IX+-128
	LD	IY,(IY+-71)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	(HL),0
;  997							currentZoneData.trainerx[npcIndex] += ((trainerDir == 1) - (trainerDir == 2));
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__420
	LD	A,1
	JR	L__421
L__420:
	XOR	A,A
L__421:
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__423
	LD	B,1
	JR	L__424
L__423:
	LD	B,0
L__424:
	SUB	A,B
	LEA	IY,IX+-128
	LD	HL,-202
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(IY+-71)
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
;  998							currentZoneData.trainery[npcIndex] += ((trainerDir == 3) - (trainerDir == 4));
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__426
	LD	A,1
	JR	L__427
L__426:
	XOR	A,A
L__427:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__429
	LD	B,1
	JR	L__430
L__429:
	LD	B,0
L__430:
	SUB	A,B
	LEA	IY,IX+-128
	LD	HL,-196
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(IY+-65)
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
;  999						}
; 1000					}
L_491:
; 1001	
; 1002	
; 1003					if (currentZoneData.trainerskin[npcIndex] < 128) {
	LD	BC,_currentZoneData+592
	LEA	IY,IX+-128
	LD	HL,-145
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-17),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IX+-88),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,128
	SBC	HL,BC
	JP	P,L_490
; 1004						gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[(currentZoneData.trainerskin[npcIndex] * 12) + ((trainerDir - 1) * 3) + ((npcMoveState[npcIndex] % 16) / 4 == 1 && (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove)) + 2 * ((npcMoveState[npcIndex] % 16) / 4 == 3 && (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove))], xloc + xlocMod - 8, yloc + ylocMod + 3);
	LD	BC,(IX+-30)
	LD	(IX+-27),BC
	LD	(IX+-24),BC
	LD	BC,(IX+-27)
	LD	(IX+-21),BC
	LD	BC,(IX+-27)
	LD	(IX+-39),BC
	LD	BC,(IX+-27)
	LD	(IX+-36),BC
	LD	BC,(IX+-27)
	LD	(IX+-33),BC
	LD	BC,(IX+-27)
	LD	(IX+-18),BC
	LD	HL,(IX+-27)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LEA	IY,IX+-128
	LD	BC,16
	CALL	__irems
	LD	BC,4
	CALL	__idivs
	LD	(IY+-20),HL
	LD	HL,(IY+-20)
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_480
	LD	A,(IX+-62)
	LD	(IX+-79),A
	LD	A,(IX+-62)
	LD	(IX+-63),A
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_480
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_480
	LD	(IX+-112),BC
	JR	L_481
L_480:
	LD	BC,0
	LD	(IX+-112),BC
L_481:
	LEA	IY,IX+-128
	LD	HL,(IY+-20)
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_486
	LD	A,(IX+-79)
	LD	(IX+-63),A
	OR	A,A
	JR	NZ,L_486
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_486
	LD	BC,1
	LD	(IX+-115),BC
	JR	L_487
L_486:
	LD	BC,0
	LD	(IX+-115),BC
L_487:
	LD	BC,(IX+-78)
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+-69)
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-88)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,HL
	LD	HL,(IX+-6)
	DEC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IX+-112)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-115)
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1005					}
; 1006					else {
	JR	L_520
L_490:
; 1007						gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[36 + ((currentZoneData.trainerskin[npcIndex]-128) * 4) + (trainerDir - 1)], xloc + xlocMod - 8, yloc + ylocMod + 3);
	LD	BC,(IX+-78)
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+-69)
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-88)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-128
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LD	BC,(IX+-6)
	DEC	BC
	LEA	HL,IY+36
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1008					}
L_520:
; 1009					
; 1010					/* Grass */
; 1011					if (currentTileMap[currentZoneData.trainerx[npcIndex] + tilemap.width * currentZoneData.trainery[npcIndex]] == 2 && !currentSave.indoors) {
	LD	BC,_currentZoneData+560
	LEA	IY,IX+-128
	LD	HL,-172
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-44),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-23),HL
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+544
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	IY,(IY+-23)
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-116),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),HL
	LD	BC,(IY+-116)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	CALL	__imuls
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_523
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_523
; 1012						if (trainerDir != 3 || npcMoveState[npcIndex] % 16 <= 1 || !canMove || npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] != 4) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_502
	LD	BC,(IX+-27)
	LD	(IX+-24),BC
	LD	(IX+-21),BC
	LD	BC,(IX+-24)
	LD	(IX+-39),BC
	LD	BC,(IX+-24)
	LD	(IX+-36),BC
	LD	BC,(IX+-24)
	LD	(IX+-33),BC
	LD	BC,(IX+-24)
	LD	(IX+-18),BC
	LD	HL,(IX+-24)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,1
	OR	A,A
	SBC	HL,BC
	JP	P,L_502
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_502
	LD	BC,(IX+-97)
	LD	(IX+-121),BC
	LD	HL,(IX+-97)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_515
L_502:
; 1013							if (npcGrassAnimState[npcIndex] > 5 && npcMoveState[npcIndex] % 16 < 14) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-26),HL
	LD	HL,(IY+-26)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_501
	LD	BC,(IX+-24)
	LD	(IX+-21),BC
	LD	(IX+-39),BC
	LD	BC,(IX+-21)
	LD	(IX+-36),BC
	LD	BC,(IX+-21)
	LD	(IX+-33),BC
	LD	BC,(IX+-21)
	LD	(IX+-18),BC
	LD	HL,(IX+-21)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_501
; 1014								gfx_TransparentSprite(grassoverlay3, xloc - 8, yloc + 13);
	LD	IY,(IX+-48)
	LEA	BC,IY+13
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1015							}
; 1016							else if (npcGrassAnimState[npcIndex] > 0 && npcMoveState[npcIndex] % 16 < 14) {
	JR	L_515
L_501:
	LEA	IY,IX+-128
	LD	HL,(IY+-26)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_499
	LD	BC,(IX+-21)
	LD	(IX+-39),BC
	LD	(IX+-36),BC
	LD	BC,(IX+-39)
	LD	(IX+-33),BC
	LD	BC,(IX+-39)
	LD	(IX+-18),BC
	LD	HL,(IX+-39)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_499
; 1017								gfx_TransparentSprite(grassoverlay2, xloc - 8, yloc + 14);
	LD	IY,(IX+-48)
	LEA	BC,IY+14
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1018							}
; 1019							else {
	JR	L_515
L_499:
; 1020								gfx_TransparentSprite(grassoverlay1, xloc - 8, yloc + 18);
	LD	IY,(IX+-48)
	LEA	BC,IY+18
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1021							}
; 1022						}
L_515:
; 1023						if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove && (trainerDir != 4 || npcMoveState[npcIndex] % 16 >= 14)) {
	LD	A,(IX+-63)
	OR	A,A
	JR	NZ,L_518
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_518
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_514
	LD	BC,(IX+-39)
	LD	(IX+-36),BC
	LD	(IX+-33),BC
	LD	BC,(IX+-36)
	LD	(IX+-18),BC
	LD	HL,(IX+-36)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,14
	SBC	HL,BC
	JP	M,L_518
L_514:
; 1024							if (npcMoveState[npcIndex] % 16 == 14) {
	LD	BC,(IX+-36)
	LD	(IX+-33),BC
	LD	(IX+-18),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-91),HL
	LEA	IY,IX+-128
	LD	(IY+-29),HL
	LD	HL,(IX+-91)
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	JR	NZ,L_513
; 1025								npcGrassAnimState[npcIndex] = 10;
	LD	HL,(IX+-3)
	LD	BC,_npcGrassAnimState
	ADD	HL,BC
	LD	(HL),10
; 1026							}
L_513:
; 1027							if (npcGrassAnimState[npcIndex] > 5 && npcMoveState[npcIndex] % 16 >= 14) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-35),HL
	LD	HL,(IY+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_512
	LD	BC,(IX+-91)
	LEA	IY,IX+-128
	LD	(IY+-29),BC
	LD	HL,(IX+-91)
	LD	BC,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_512
; 1028								gfx_TransparentSprite(grassoverlay3, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 13 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__456
	LD	B,1
	JR	L__457
L__456:
	LD	B,0
L__457:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-110),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__459
	LD	B,1
	JR	L__460
L__459:
	LD	B,0
L__460:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-101),DE
	POP	IY
	LEA	DE,IY+13
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-104),DE	; unspill
	LD	DE,(IY+-101)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-107),HL
	LD	BC,(IY+-110)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-107)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-101),DE
	LD	DE,(IY+-104)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-101)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__462
	LD	B,1
	JR	L__463
L__462:
	LD	B,0
L__463:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__465
	LD	B,1
	JR	L__466
L__465:
	LD	B,0
L__466:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1029							}
; 1030							else if (npcGrassAnimState[npcIndex] > 0 && npcMoveState[npcIndex] % 16 >= 14) {
	JR	L_518
L_512:
	LEA	IY,IX+-128
	LD	HL,(IY+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_510
	LEA	IY,IX+-128
	LD	HL,(IY+-29)
	LD	BC,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_510
; 1031								gfx_TransparentSprite(grassoverlay2, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 14 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__470
	LD	B,1
	JR	L__471
L__470:
	LD	B,0
L__471:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__473
	LD	B,1
	JR	L__474
L__473:
	LD	B,0
L__474:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-89),DE
	POP	IY
	LEA	DE,IY+14
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-92),DE	; unspill
	LD	DE,(IY+-89)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-95),HL
	LD	BC,(IY+-98)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-95)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-89),DE
	LD	DE,(IY+-92)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-89)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__476
	LD	B,1
	JR	L__477
L__476:
	LD	B,0
L__477:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__479
	LD	B,1
	JR	L__480
L__479:
	LD	B,0
L__480:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1032							}
; 1033							else {
	JR	L_518
L_510:
; 1034								gfx_TransparentSprite(grassoverlay1, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 18 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__482
	LD	B,1
	JR	L__483
L__482:
	LD	B,0
L__483:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-86),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__485
	LD	B,1
	JR	L__486
L__485:
	LD	B,0
L__486:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-77),DE
	POP	IY
	LEA	DE,IY+18
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-80),DE	; unspill
	LD	DE,(IY+-77)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-83),HL
	LD	BC,(IY+-86)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-83)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-77),DE
	LD	DE,(IY+-80)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-77)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__488
	LD	B,1
	JR	L__489
L__488:
	LD	B,0
L__489:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__491
	LD	B,1
	JR	L__492
L__491:
	LD	B,0
L__492:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1035							}
; 1036						}
L_518:
; 1037						if (npcGrassAnimState[npcIndex] > 0) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LD	(IX+-75),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_523
; 1038							npcGrassAnimState[npcIndex]--;
	LD	HL,(IX+-75)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-75)
	LD	(HL),A
; 1039						}
; 1040	
; 1041						
; 1042					}
L_523:
; 1043	
; 1044					if (canMove) {
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_525
; 1045						npcMoveState[npcIndex]++;
	LD	BC,(IX+-33)
	LD	(IX+-18),BC
	LD	HL,BC
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-18)
	LD	(HL),A
; 1046					}
L_525:
; 1047	
; 1048	
; 1049					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 5) {
	LD	HL,(IX+-121)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_527
; 1050						npcMoveState[npcIndex] = 0;
	LD	HL,(IX+-18)
	LD	(HL),0
; 1051					}
L_527:
; 1052	
; 1053					if (ty - 1 == currentZoneData.trainery[npcIndex]) {
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LEA	IY,IX+-128
	LD	IY,(IY+-23)
	LD	BC,HL
	DEC	BC
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_531
; 1054						DrawPlayer();
	CALL	_DrawPlayer
; 1055					}
; 1056	
; 1057				}
; 1058			}
; 1059	
; 1060		}
L_531:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_532:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_530
; 1061	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ProcessNpcs ***************************
;Name                         Addr/Register   Size   Type
;_DrawPlayer                         IMPORT  -----   function
;_grassoverlay1_data                 IMPORT     98   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_npcGrassAnimState                  STATIC     16   variable
;_currentTileMap                     STATIC   1920   variable
;_PKMNSD7                            IMPORT    132   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_npcToFight                         STATIC      3   variable
;_currentSave                        IMPORT   4140   variable
;_npcSaidMessage                     STATIC     16   variable
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_npcPatterns                        STATIC    128   variable
;_npcMoveState                       STATIC     16   variable
;_tilemap                            STATIC     18   variable
;_currentTypeMap                     STATIC   1920   variable
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_currentZoneData                    STATIC    688   variable
;G_30                                IX-178      3   variable
;G_53                                IX-175      3   variable
;G_91                                IX-172      3   variable
;G_31                                IX-169      3   variable
;G_43                                IX-166      3   variable
;G_84                                IX-163      3   variable
;G_36                                IX-160      3   variable
;G_85                                IX-157      3   variable
;G_77                                IX-154      3   variable
;G_92                                IX-151      3   variable
;G_66                                IX-148      3   variable
;G_69                                IX-145      3   variable
;G_38                                IX-142      3   variable
;G_62                                IX-139      3   variable
;G_39                                IX-136      3   variable
;G_41                                IX-133      3   variable
;G_42                                IX-130      3   variable
;G_32                                IX-127      3   variable
;G_33                                IX-124      3   variable
;G_89                                IX-121      3   variable
;G_54                                IX-118      3   variable
;temp488                             IX-115      3   variable
;temp482                             IX-112      3   variable
;G_52                                IX-109      3   variable
;G_37                                IX-106      3   variable
;G_40                                IX-103      3   variable
;G_44                                IX-100      3   variable
;G_75                                 IX-97      3   variable
;G_35                                 IX-94      3   variable
;G_83                                 IX-91      3   variable
;G_70                                 IX-88      3   variable
;G_34                                 IX-85      3   variable
;G_51                                 IX-82      3   variable
;G_68                                 IX-79      1   variable
;ylocMod                              IX-78      3   variable
;G_86                                 IX-75      3   variable
;G_64                                 IX-72      3   variable
;xlocMod                              IX-69      3   variable
;G_45                                 IX-66      3   variable
;G_80                                 IX-63      1   variable
;G_65                                 IX-62      1   variable
;G_59                                 IX-61      3   variable
;G_60                                 IX-58      3   variable
;G_61                                 IX-55      3   variable
;G_58                                 IX-52      3   variable
;canMove                              IX-49      1   variable
;yloc                                 IX-48      3   variable
;xloc                                 IX-45      3   variable
;tileIndex                            IX-42      3   variable
;G_81                                 IX-39      3   variable
;G_82                                 IX-36      3   variable
;G_87                                 IX-33      3   variable
;G_63                                 IX-30      3   variable
;G_73                                 IX-27      3   variable
;G_76                                 IX-24      3   variable
;G_78                                 IX-21      3   variable
;G_90                                 IX-18      3   variable
;G_57                                 IX-15      3   variable
;G_55                                 IX-12      3   variable
;G_50                                  IX-9      3   variable
;trainerDir                            IX-6      3   variable
;npcIndex                              IX-3      3   variable


; Stack Frame Size: 294 (bytes)
;       Spill Code: -58 (instruction)


; 1062	
; 1063	void map_DrawInformationBar(void) {
_map_DrawInformationBar:
	LD	HL,-3
	CALL	__frameset
; 1064		int pokemonIndex;
; 1065		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
; 1066		gfx_FillRectangle(0, 0, 320, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1067		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_537
L_535:
; 1068			gfx_TransparentSprite_NoClip(pokeballSprites[pokeballdata[pokemonIndex]], 16 * pokemonIndex, 0);
	LD	BC,_pokeballdata
	LD	DE,0
	PUSH	DE
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
; 1069		}
L_537:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_535
; 1070		sprintf(str, "%u$", currentSave.playerMoney);
	LD	A,(_currentSave+1242)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+1239)
	PUSH	BC
	LD	BC,L__500
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1071		gfx_PrintStringXY(str, 100, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1072	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_DrawInformationBar ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_currentSave                        IMPORT   4140   variable
;_sprintf                            IMPORT  -----   function
;_pokeballdata                       STATIC      6   variable
;_pokeballSprites                    STATIC      9   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -58 (instruction)


	SEGMENT STRSECT
L__500:
	DB	"%u$"
	DB	0
	SEGMENT CODE
; 1073	
; 1074	void map_LoseFight(void) {
_map_LoseFight:
	LD	HL,-45
	CALL	__frameset
; 1075		int tileIndex, partyIndex, moveIndex;
; 1076		text_Display("All your pokemon have fainted", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__502
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1077		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_547
L_545:
; 1078			currentSave.party[partyIndex].currenthealth = stats_CalculateStats(currentSave.party[partyIndex]).health;
	LD	BC,_currentSave+10
	LD	(IX+-6),BC
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-39),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-33
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	(IX+-45),HL	; spill
	ADD	IY,SP
	LD	SP,IY
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-45)	; unspill
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
; 1079			currentSave.party[partyIndex].currentstatus = 0;
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+15),0
; 1080			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-15),HL
	JR	L_544
L_542:
; 1081				currentSave.party[partyIndex].pp[moveIndex] = data_moves[currentSave.party[partyIndex].moves[moveIndex]].uses;
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	IY,(IX+-36)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
; 1082			}
L_544:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_542
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
; 1083		}
L_547:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_545
; 1084		currentSave.playerX = 16*16;
	LD	HL,_currentSave+2
	LD	(HL),0
	INC	HL
	LD	(HL),1
; 1085		currentSave.playerY = 20*16;
	LD	HL,_currentSave+4
	LD	(HL),64
	INC	HL
	LD	(HL),1
; 1086		currentSave.indoors = false;
	XOR	A,A
	LD	(_currentSave+1236),A
; 1087		currentSave.currentZone = 0;
	LD	HL,_currentSave+1234
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1088		moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
; 1089		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
; 1090		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
; 1091		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
; 1092		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
; 1093		LoadMap();
	CALL	_LoadMap
; 1094	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoseFight ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_moveDir                            STATIC      1   variable
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_currentSave                        IMPORT   4140   variable
;_text_Display                       IMPORT  -----   function
;O_64                                 IX-21      3   variable
;O_63                                 IX-18      3   variable
;O_65                                 IX-15      3   variable
;G_94                                 IX-12      3   variable
;moveIndex                             IX-9      3   variable
;G_93                                  IX-6      3   variable
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 51 (bytes)
;       Spill Code: -59 (instruction)


	SEGMENT STRSECT
L__502:
	DB	"All your pokemon have fainted"
	DB	0
	SEGMENT CODE
; 1095	
; 1096	void map_WinFight(bool wild, uint16_t rewardMoney) {
_map_WinFight:
	LD	HL,-43
	CALL	__frameset
; 1097		char str1[16];
; 1098		if (!wild) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_568
; 1099			if (lastTextIndex > 0) {
	LD	BC,(_lastTextIndex)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_551
; 1100				map_Draw();
	CALL	_map_Draw
; 1101				LoadText(lastTextID);
	LD	BC,(_lastTextID)
	CALL	__stoiu
	PUSH	HL
	CALL	_LoadText
	POP	BC
; 1102				text_Display(loadedText + lastTextIndex , true);
	LD	BC,(_lastTextIndex)
	CALL	__stoiu
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
; 1103			}
L_551:
; 1104			currentSave.playerMoney += rewardMoney;
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	A,(_currentSave+1242)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_currentSave+1239)
	CALL	__ladd
	LD	(_currentSave+1239),HL
	LD	A,E
	LD	(_currentSave+1242),A
; 1105			if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_566
; 1106				currentSave.defeatedTrainersIndoors[currentSave.currentBuilding][currentTrainer] = true;
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,(_currentTrainer)
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
; 1107				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	BC,_currentZoneData+656
	LD	(IX+-3),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_568
; 1108					if (currentZoneData.trainerreward[currentTrainer] == 255) {
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_557
; 1109						currentSave.badgeCount++;
; 1110						sprintf(str, "Recieved a badge");
	LD	BC,L__511
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	A,(_currentSave+3988)
	INC	A
	LD	(_currentSave+3988),A
	CALL	_sprintf
	POP	BC
	POP	BC
; 1111					}
; 1112					else {
	JR	L_558
L_557:
; 1113						currentSave.playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	BC,_currentSave+1243
	LD	(IX+-34),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-31),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	LD	DE,BC
	LD	HL,(IX+-34)
	ADD	HL,DE
	LD	(IX+-28),HL
	LD	IY,(IX+-28)
	LD	HL,(IX+-34)
	ADD	HL,BC
	LD	A,(IY)
	INC	A
	LD	(HL),A
; 1114						items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	HL,(IX+-31)
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-25
	CALL	_items_IndexToName
	POP	BC
	POP	BC
; 1115						if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_555
; 1116							sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-25
	LD	BC,L__513
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1117						}
; 1118						else {
	JR	L_558
L_555:
; 1119							sprintf(str, "Recieved a %s", str1);
	PEA	IX+-25
	LD	BC,L__514
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1120						}
; 1121					}
L_558:
; 1122					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1123				}
; 1124			}
; 1125			else {
	JR	L_568
L_566:
; 1126				currentSave.defeatedTrainers[currentSave.currentZone][currentTrainer] = true;
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
; 1127				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	BC,_currentZoneData+656
	LD	(IX+-6),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_568
; 1128					currentSave.playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	BC,_currentSave+1243
	LD	(IX+-43),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-40),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	LD	DE,BC
	LD	HL,(IX+-43)
	ADD	HL,DE
	LD	(IX+-37),HL
	LD	IY,(IX+-37)
	LD	HL,(IX+-43)
	ADD	HL,BC
	LD	A,(IY)
	INC	A
	LD	(HL),A
; 1129					items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	HL,(IX+-40)
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-25
	CALL	_items_IndexToName
	POP	BC
	POP	BC
; 1130					if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_562
; 1131						sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-25
	LD	BC,L__517
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1132					}
; 1133					else {
	JR	L_563
L_562:
; 1134						sprintf(str, "Recieved a %s", str1);
	PEA	IX+-25
	LD	BC,L__518
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1135					}
L_563:
; 1136					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1137				}
; 1138			}
; 1139		}
; 1140	}
L_568:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_WinFight ***************************
;Name                         Addr/Register   Size   Type
;_items_IndexToName                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentZoneData                    STATIC    688   variable
;_currentTrainer                     STATIC      1   variable
;_currentSave                        IMPORT   4140   variable
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_lastTextID                         IMPORT      2   variable
;_LoadText                           IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_lastTextIndex                      IMPORT      2   variable
;str1                                 IX-25     16   variable
;G_96                                  IX-9      3   variable
;G_99                                  IX-6      3   variable
;G_95                                  IX-3      3   variable
;rewardMoney                           IX+9      2   parameter
;wild                                  IX+6      1   parameter


; Stack Frame Size: 55 (bytes)
;       Spill Code: -59 (instruction)


	SEGMENT STRSECT
L__511:
	DB	"Recieved a badge"
	DB	0
L__513:
	DB	"Recieved the TM for %s"
	DB	0
L__514:
	DB	"Recieved a %s"
	DB	0
L__517:
	DB	"Recieved the TM for %s"
	DB	0
L__518:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
; 1141	void LoadTileset(bool freeOld) {
_LoadTileset:
	LD	HL,-6
	CALL	__frameset
; 1142		int tileIndex = 0;
; 1143		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_580
L_578:
; 1144			if (freeOld) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_571
; 1145				free(mapTiles[tileIndex]);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
; 1146			}
L_571:
; 1147			mapTiles[tileIndex] = gfx_MallocSprite(16, 16);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,_mapTiles
	ADD	HL,DE
	LD	(HL),BC
; 1148			if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_577
; 1149				zx7_Decompress(mapTiles[tileIndex], indoortileset0_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset0_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1150			}
; 1151			else {
	JR	L_579
L_577:
; 1152				if (data_tileSets[currentSave.currentZone] == 0) {
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_575
; 1153					zx7_Decompress(mapTiles[tileIndex], outdoortileset0_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset0_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1154				}
; 1155				else if (data_tileSets[currentSave.currentZone] == 1) {
	JR	L_579
L_575:
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_573
; 1156					zx7_Decompress(mapTiles[tileIndex], outdoortileset1_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset1_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1157				}
; 1158				else {
	JR	L_579
L_573:
; 1159					zx7_Decompress(mapTiles[tileIndex], outdoortileset2_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset2_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1160				}
; 1161			}
; 1162		}
L_579:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_580:
	LD	BC,128
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_578
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadTileset ***************************
;Name                         Addr/Register   Size   Type
;_outdoortileset2_tiles_compressed      IMPORT    384   variable
;_outdoortileset1_tiles_compressed      IMPORT    384   variable
;_outdoortileset0_tiles_compressed      IMPORT    384   variable
;_data_tileSets                      IMPORT     32   variable
;_indoortileset0_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_currentSave                        IMPORT   4140   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-6      3   variable
;G_101                                 IX-3      3   variable
;freeOld                               IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -59 (instruction)


	XREF _PKMNSD8_init:ROM
	XREF _PKMNSD8:ROM
	XREF _PKMNSD7_init:ROM
	XREF _PKMNSD7:ROM
	XREF _PKMNSD4_init:ROM
	XREF _pokeball_tiles_compressed:ROM
	XREF _outdoortileset2_tiles_compressed:ROM
	XREF _outdoortileset1_tiles_compressed:ROM
	XREF _outdoortileset0_tiles_compressed:ROM
	XREF _indoortileset0_tiles_compressed:ROM
	XREF _PKMNSD4:ROM
	XREF _shop_compressed:ROM
	XREF _grassoverlay3_data:ROM
	XREF _grassoverlay2_data:ROM
	XREF _grassoverlay1_data:ROM
	XREF _stats_NewCharacter:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_SelectSave:ROM
	XREF _save_Load:ROM
	XREF _currentSave:ROM
	XREF _lastTextID:ROM
	XREF _lastTextIndex:ROM
	XREF _textBoxType:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _items_IndexToName:ROM
	XREF _colors:ROM
	XREF _str:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _menu_ItemShop:ROM
	XREF _menu_Box:ROM
	XREF _menu_Menu:ROM
	XREF _battle_SpawnTrainer:ROM
	XREF _battle_SpawnWild:ROM
	XREF _data_tileSets:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _loadedText:ROM
	XREF _LoadText:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _sprintf:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmps:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __ineg:ROM
	XREF __smulu:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XREF __ishl_b:ROM
	XDEF _LoadTileset
	XDEF _map_WinFight
	XDEF _map_LoseFight
	XDEF _map_DrawInformationBar
	XDEF _ProcessNpcs
	XDEF _GetTypeMapData
	XDEF _ShiftTile
	XDEF _GetNextTile
	XDEF _Clamp
	XDEF _LoadMap
	XDEF _map_LoadPokeballs
	XDEF _FightTrainer
	XDEF _ExitZone
	XDEF _ExitBuilding
	XDEF _EnterDoor
	XDEF _ReadText
	XDEF _OpenBox
	XDEF _HealParty
	XDEF _GrassAnimation
	XDEF _DrawPlayer
	XDEF _map_Draw
	XDEF _map_End
	XDEF _map_Loop
	XDEF _map_SetupGfx
	XDEF _map_Setup
	XDEF _map_Initialize
	XDEF _str1
	XDEF _clearcharacter2
	XDEF _tempcharacter2
	XDEF _currentTrainer
	XDEF _currentZoneData
	XDEF _currentTypeMap
	XDEF _currentTileMap
	XDEF _pokeballSprites
	XDEF _mapTiles
	XDEF _tilemap
	XDEF _jumpHeights
	XDEF _jumpState
	XDEF _playerState
	XDEF _moveDir
	XDEF _moveState
	XDEF _nextTile
	XDEF _npcPatterns
	XDEF _npcSaidMessage
	XDEF _npcGrassAnimState
	XDEF _npcToFight
	XDEF _npcOldTiles
	XDEF _npcMoveState
	XDEF _grassAnimY2
	XDEF _grassAnimX2
	XDEF _grassAnimY1
	XDEF _grassAnimX1
	XDEF _grassAnimState2
	XDEF _grassAnimState1
	XDEF _grassAnimNext
	XDEF _currentWater
	XDEF _currentRun
	XDEF _running
	XDEF _ty
	XDEF _tx
	XDEF _screenY
	XDEF _screenX
	XDEF _pokeballdata
	XDEF _battlechance
	END
