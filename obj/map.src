; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAP.C"
	.assume ADL=1
	SEGMENT TEXT
_battlechance:
	DW	10
	DB	0
	SEGMENT DATA
_pokeballdata:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_screenX:
	DL	0
_screenY:
	DL	0
	SEGMENT BSS
_tx:
	DS	1
_ty:
	DS	1
_nextTile:
	DS	1
	SEGMENT DATA
_moveState:
	DB	0
_moveDir:
	DB	3
_playerState:
	DB	0
	SEGMENT BSS
_tilemap:
	DS	18
_mapTiles:
	DS	384
_playerSprites:
	DS	36
_enemySprites:
	DS	12
_pokeballSprites:
	DS	9
_pauseMenuSprite:
	DS	3
_currentTileMap:
	DS	1920
_currentTypeMap:
	DS	1920
_currentZoneData:
	DS	640
_npc1:
	DS	1
_npc2:
	DS	1
	SEGMENT DATA
_currentTrainer:
	DB	0
	SEGMENT BSS
_tempcharacter2:
	DS	34
	SEGMENT TEXT
_clearcharacter2:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_str1:
	DS	20
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <debug.h>
;   12	#include <compression.h>
;   13	#include <fileioc.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "items.h"
;   21	#include "text.h"
;   22	#include "savegame.h"
;   23	#include "stats.h"
;   24	#include "gfx/map_gfx.h"
;   25	#include "items.h"
;   26	
;   27	#include "gfx/PKMNSD4.h"
;   28	
;   29	#define OUTDOORWIDTH 48
;   30	#define OUTDOORHEIGHT 40
;   31	#define MAX_X ((OUTDOORWIDTH - 21)*16)
;   32	#define MAX_Y ((OUTDOORHEIGHT - 15)*16)
;   33	
;   34	void HealParty(void);
;   35	void OpenBox(void);
;   36	void TalkToNpc1(void);
;   37	void TalkToNpc2(void);
;   38	void EnterDoor(uint8_t index);
;   39	void ExitBuilding(void);
;   40	void ExitZone(uint8_t index);
;   41	bool FightTrainer(uint8_t index);
;   42	
;   43	int32_t Clamp(int32_t number, int min, int max);
;   44	/* Gets the tile the player is facing*/
;   45	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width);
;   46	/* Gets the typemap at a specific tile */
;   47	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width);
;   48	/* Draw 16 enemy trainers */
;   49	void DrawEnemies(void);
;   50	/* Loads the tilemap, typemap ,and zonedata for current area */
;   51	void LoadMap(void);
;   52	
;   53	const int battlechance = 10; /* Chance for enemy to spawn out of 100 */
;   54	
;   55	
;   56	uint8_t pokeballdata[] = {
;   57		0,0,0,0,0,0
;   58	};
;   59	
;   60	int32_t screenX = 0;
;   61	int32_t screenY = 0;
;   62	
;   63	uint8_t tx; /* x tile */
;   64	uint8_t ty; /* y tile */
;   65	
;   66	uint8_t nextTile;
;   67	uint8_t moveState = 0;
;   68	uint8_t moveDir = 3;
;   69	uint8_t playerState = 0;
;   70	
;   71	gfx_tilemap_t tilemap;
;   72	
;   73	gfx_sprite_t *mapTiles[128];
;   74	gfx_sprite_t *playerSprites[12];
;   75	gfx_sprite_t *enemySprites[4];
;   76	gfx_sprite_t *pokeballSprites[3];
;   77	gfx_sprite_t *pauseMenuSprite;
;   78	
;   79	uint8_t currentTileMap[1920];
;   80	uint8_t currentTypeMap[1920];
;   81	struct zoneData currentZoneData;
;   82	/* zoneData is in header file because battle.c needs it*/
;   83	
;   84	uint8_t npc1;
;   85	uint8_t npc2;
;   86	
;   87	uint8_t currentTrainer = 0; /* 0-15 */
;   88	struct pokemonData tempcharacter2;
;   89	const struct pokemonData clearcharacter2 = {0};
;   90	
;   91	char str1[20];
	SEGMENT CODE
;   92	
;   93	void map_Initialize(void) {
_map_Initialize:
;   94		PKMNSD4_init();
	CALL	_PKMNSD4_init
;   95	
;   96		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD4+66
	LD	BC,426
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   97		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;   98		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   99		zx7_Decompress(textBoxSprite1, maptextbox1_compressed);
	LD	HL,_PKMNSD4+48
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  100		zx7_Decompress(textBoxSprite2, maptextbox2_compressed);
	LD	HL,_PKMNSD4+51
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  101		save_SelectSave();
	CALL	_save_SelectSave
;  102		save_Load();
	CALL	_save_Load
;  103	
;  104		/* Initialize the tilemap */
;  105		tilemap.map = currentTileMap;
	LD	BC,_currentTileMap
	LD	(_tilemap),BC
;  106		tilemap.tiles = mapTiles;
	LD	BC,_mapTiles
	LD	(_tilemap+3),BC
;  107		tilemap.type_width = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  108		tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  109		tilemap.tile_height = 16;
	LD	A,16
	LD	(_tilemap+6),A
;  110		tilemap.tile_width = 16;
	LD	(_tilemap+7),A
;  111		tilemap.draw_height = 15;
	LD	A,15
	LD	(_tilemap+8),A
;  112		tilemap.draw_width = 21;
	LD	A,21
	LD	(_tilemap+9),A
;  113		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  114		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  115		tilemap.y_loc = 8;
	LD	A,8
	LD	(_tilemap+14),A
;  116		tilemap.x_loc = -8;
	LD	BC,16777208
	LD	(_tilemap+15),BC
;  117	
;  118		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_1
;  119			tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  120			tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  121		}
L_1:
;  122	
;  123		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  124		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  125		LoadMap();
	CALL	_LoadMap
;  126	}
	RET	


;**************************** _map_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_save_Load                          IMPORT  -----   function
;_save_SelectSave                    IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_zx7_Decompress                     IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT     69   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_PKMNSD4_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  127	void map_Setup(void) {
_map_Setup:
;  128		map_SetupGfx();
	CALL	_map_SetupGfx
;  129	
;  130		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  131		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  132	}
	RET	


;**************************** _map_Setup ***************************
;Name                         Addr/Register   Size   Type
;_ty                                 STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_tx                                 STATIC      1   variable
;_playerX                            IMPORT      2   variable
;_map_SetupGfx                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  133	
;  134	void map_SetupGfx(void) {
_map_SetupGfx:
	LD	HL,-6
	CALL	__frameset
;  135		int tileIndex = 0;
;  136		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_9
L_7:
;  137			mapTiles[tileIndex] = gfx_MallocSprite(16, 16);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,_mapTiles
	ADD	HL,DE
	LD	(HL),BC
;  138			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_6
;  139				zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  140			}
;  141			else {
	JR	L_8
L_6:
;  142				zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset_tiles_compressed
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  143			}
;  144		}
L_8:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_9:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_7
;  145		for (tileIndex = 0; tileIndex < 12; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
;  146			playerSprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_playerSprites
	ADD	HL,DE
	LD	(HL),BC
;  147			zx7_Decompress(playerSprites[tileIndex], PKMNSD4[0 + tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_PKMNSD4
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  148		}
L_13:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_11
;  149		for (tileIndex = 0; tileIndex < 4; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_18
L_16:
;  150			enemySprites[tileIndex] = gfx_MallocSprite(16, 20);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_enemySprites
	ADD	HL,DE
	LD	(HL),BC
;  151			zx7_Decompress(enemySprites[tileIndex], PKMNSD4[12 + tileIndex]);
	LD	IY,(IX+-3)
	LEA	HL,IY+12
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD4
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  152		}
L_18:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_16
;  153		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_23
L_21:
;  154			pokeballSprites[tileIndex] = gfx_MallocSprite(16, 16);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_pokeballSprites
	ADD	HL,DE
	LD	(HL),BC
;  155			zx7_Decompress(pokeballSprites[tileIndex], pokeball_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_pokeball_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  156		}
L_23:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_21
;  157		pauseMenuSprite = gfx_MallocSprite(112, 96);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,112
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  158		zx7_Decompress(pauseMenuSprite, pausemenu_compressed);
	LD	IY,_PKMNSD4
	LD	(_pauseMenuSprite),HL
	LD	BC,(IY+54)
	PUSH	BC
	LD	BC,(_pauseMenuSprite)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  159		zx7_Decompress(textBoxSprite1, maptextbox1_compressed);
	LD	HL,_PKMNSD4+48
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  160		zx7_Decompress(textBoxSprite2, maptextbox2_compressed);
	LD	HL,_PKMNSD4+51
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  161		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD4+66
	LD	BC,426
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  162		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  163		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  164		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  165		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  166	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_SetupGfx ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_pauseMenuSprite                    STATIC      3   variable
;_pokeball_tiles_compressed          IMPORT      9   variable
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     12   variable
;_PKMNSD4                            IMPORT     69   variable
;_playerSprites                      STATIC     36   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_mapTiles                           STATIC    384   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_0                                   IX-6      3   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  167	
;  168	int map_Loop(void) {
_map_Loop:
	LD	HL,-25
	CALL	__frameset
;  169		/* Open Menu */
;  170		if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_49
;  171			int menuReturn;
;  172			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  173			gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  174			gfx_Sprite(pauseMenuSprite, 195, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,195
	PUSH	BC
	LD	BC,(_pauseMenuSprite)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  175			map_End();
	CALL	_map_End
;  176	
;  177			menuReturn = menu_Menu();
	CALL	_menu_Menu
	UEXT	HL
	LD	L,A
	LD	(IX+-4),HL
;  178			map_SetupGfx();
	CALL	_map_SetupGfx
;  179			map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  180			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_28
L_29:
	CALL	_kb_Scan
L_28:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_29
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_29
;  181			return menuReturn;
	LD	HL,(IX+-4)
	JR	L_99
;  182		}
L_49:
;  183		/* If player presses 2nd */
;  184		if ((kb_Data[1] & kb_2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_97
;  185			nextTile = GetNextTile(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
;  186			if (nextTile == 0x41) {
	CP	A,65
	LD	(_nextTile),A
	JR	NZ,L_47
;  187				HealParty();
	CALL	_HealParty
;  188			}
;  189			else if (nextTile == 0x42) {
	JR	L_97
L_47:
	LD	A,(_nextTile)
	CP	A,66
	JR	NZ,L_45
;  190				items_ItemShop();
	CALL	_items_ItemShop
;  191			}
;  192			else if (nextTile == 0x43) {
	JR	L_97
L_45:
	LD	A,(_nextTile)
	CP	A,67
	JR	NZ,L_43
;  193				OpenBox();
	CALL	_OpenBox
;  194			}
;  195			else if (nextTile == 0x44) {
	JR	L_97
L_43:
	LD	A,(_nextTile)
	CP	A,68
	JR	NZ,L_41
;  196				TalkToNpc1();
	CALL	_TalkToNpc1
;  197			}
;  198			else if (nextTile == 0x45) {
	JR	L_97
L_41:
	LD	A,(_nextTile)
	CP	A,69
	JR	NZ,L_39
;  199				TalkToNpc2();
	CALL	_TalkToNpc2
;  200			}
;  201			else if (nextTile >= 0x50 && nextTile < 0x60) {
	JR	L_97
L_39:
	LD	A,(_nextTile)
	CP	A,80
	JR	C,L_37
	LD	A,(_nextTile)
	CP	A,96
	JR	NC,L_37
;  202				EnterDoor(nextTile - 80);
	LD	A,(_nextTile)
	SUB	A,80
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  203			}
;  204			else if (nextTile >= 0x60 && nextTile < 0x70) {
	JR	L_97
L_37:
	LD	A,(_nextTile)
	CP	A,96
	JR	C,L_97
	LD	A,(_nextTile)
	CP	A,112
	JR	NC,L_97
;  205				if (FightTrainer(nextTile - 96)) {
	LD	A,(_nextTile)
	SUB	A,96
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_97
;  206					return 1;
	LD	HL,1
	JR	L_99
;  207				}
;  208			}
;  209		}
L_97:
;  210		/* If moving */
;  211		if (moveState > 0) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_96
;  212			moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  213			//Wait(1);
;  214			if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_53
;  215				playerX += 2;
	LD	BC,(_playerX)
	INC	BC
	INC	BC
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  216			}
L_53:
;  217			if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_55
;  218				playerX -= 2;
	LD	IY,(_playerX)
	LEA	BC,IY+-2
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  219			}
L_55:
;  220			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_57
;  221				playerY += 2;
	LD	BC,(_playerY)
	INC	BC
	INC	BC
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  222			}
L_57:
;  223			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_65
;  224				playerY -= 2;
	LD	IY,(_playerY)
	LEA	BC,IY+-2
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  225			}
L_65:
;  226	
;  227			if (moveState > 5) {
	LD	A,5
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_64
;  228				playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  229			}
;  230			else if (moveState > 3) {
	JR	L_79
L_64:
	LD	A,3
	CP	A,(HL)
	JR	NC,L_62
;  231				playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  232			}
;  233			else if (moveState > 1) {
	JR	L_79
L_62:
	LD	A,1
	CP	A,(HL)
	JR	NC,L_60
;  234				playerState = 2;
	LD	A,2
	LD	(_playerState),A
;  235			}
;  236			else if (moveState > 0) {
	JR	L_79
L_60:
	XOR	A,A
	CP	A,(HL)
	JR	NC,L_79
;  237				playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  238			}
L_79:
;  239	
;  240			if (moveState == 0) {
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_98
;  241				/* Arrive At Tile*/
;  242				tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  243				ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  244				nextTile = GetTypeMapData(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
;  245				if (nextTile >= 0x10 && nextTile < 0x20) {
	CP	A,16
	LD	(_nextTile),A
	JR	C,L_77
	LD	A,(_nextTile)
	CP	A,32
	JR	NC,L_77
;  246					/* Grass */
;  247					if ((rand() % 100) <= battlechance) {
	CALL	_rand
	LD	BC,100
	CALL	__irems
	LD	BC,HL
	LD	HL,10
	OR	A,A
	SBC	HL,BC
	JP	M,L_98
;  248						uint8_t wildSpawn;
;  249						wildSpawn = rand() % 5;
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	(IX+-1),L
;  250						battle_SpawnWild(currentZoneData.spawnids[wildSpawn][nextTile -16], currentZoneData.spawnminlevels[wildSpawn][nextTile - 16], currentZoneData.spawnmaxlevels[wildSpawn][nextTile - 16]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-7),HL
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	DE,IY+-16
	LD	HL,(IX+-7)
	LD	BC,_currentZoneData+160
	ADD	HL,BC
	LD	BC,DE
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,(IX+-7)
	LD	(IX+-10),DE	; spill
	LD	DE,_currentZoneData+80
	LD	(IX+-13),DE	; spill
	LD	DE,(IX+-10)	; unspill
	LD	(IX+-10),DE	; spill
	LD	DE,(IX+-13)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-10)	; unspill
	LD	(IX+-16),DE	; spill
	LD	(IX+-19),DE	; spill
	LD	DE,(IX+-16)	; unspill
	LD	(IX+-16),DE	; spill
	LD	DE,(IX+-19)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-16)	; unspill
	LD	(IX+-22),BC	; spill
	LD	BC,_currentZoneData
	LD	(IX+-25),BC	; spill
	LD	BC,(IX+-22)	; unspill
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	LD	HL,(IX+-7)
	LD	(IX+-22),BC	; spill
	LD	BC,(IX+-25)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-22)	; unspill
	ADD	HL,DE
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	PUSH	BC
	CALL	_battle_SpawnWild
	POP	BC
	POP	BC
	POP	BC
;  251						return 1;
	LD	HL,1
	JR	L_99
;  252					}
;  253				}
;  254				else if (nextTile == 0x01) {
L_77:
	LD	A,(_nextTile)
	CP	A,1
	JR	NZ,L_75
;  255					ExitBuilding();
	CALL	_ExitBuilding
;  256				}
;  257				else if (nextTile >= 0x20 && nextTile < 0x30) {
	JR	L_98
L_75:
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_73
	LD	A,(_nextTile)
	CP	A,48
	JR	NC,L_73
;  258					ExitZone(nextTile - 32);
	LD	A,(_nextTile)
	SUB	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ExitZone
	POP	BC
;  259				}
;  260				else if (nextTile >= 0x30 && nextTile < 0x40) {
	JR	L_98
L_73:
	LD	A,(_nextTile)
	CP	A,48
	JR	C,L_98
	LD	A,(_nextTile)
	CP	A,64
	JR	NC,L_98
;  261					if (FightTrainer(nextTile - 48)) {
	LD	A,(_nextTile)
	SUB	A,48
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_98
;  262						return 1;
	LD	HL,1
	JR	L_99
;  263					}
;  264				}
;  265			}
;  266		}
;  267	
;  268		/* If not moving */
;  269		else {
L_96:
;  270			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_86
;  271				moveDir = 1;
	LD	A,1
	LD	(_moveDir),A
;  272			}
;  273			else if (kb_Data[7] & kb_Left) {
	JR	L_94
L_86:
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_84
;  274				moveDir = 2;
	LD	A,2
	LD	(_moveDir),A
;  275			}
;  276			else if (kb_Data[7] & kb_Down) {
	JR	L_94
L_84:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_82
;  277				moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  278	
;  279			}
;  280			else if (kb_Data[7] & kb_Up) {
	JR	L_94
L_82:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_94
;  281				moveDir = 4;
	LD	A,4
	LD	(_moveDir),A
;  282			}
L_94:
;  283			if (kb_Data[7]) {
	LD	A,(16056350)
	OR	A,A
	JR	Z,L_98
;  284				if (GetNextTile(tx, ty, tilemap.width) < 64) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_92
;  285					moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  286				}
L_92:
;  287				if (GetNextTile(tx, ty, tilemap.width) >= 112 && GetNextTile(tx, ty, tilemap.width) < 120) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,112
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_98
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_98
;  288					if (GetNextTile(tx, ty, tilemap.width) - 111 > badgeCount) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LD	A,(_badgeCount)
	UEXT	HL
	LD	L,A
	OR	A,A
	LEA	BC,IY+-111
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_90
;  289						sprintf(str, "You need %u badges to pass", (GetNextTile(tx, ty, tilemap.width) - 111));
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-111
	PUSH	BC
	LD	BC,L__51
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  290						text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  291					}
;  292					else {
	JR	L_98
L_90:
;  293						moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  294					}
;  295				}
;  296			}
;  297		}
L_98:
;  298	
;  299		map_Draw();
	CALL	_map_Draw
;  300	
;  301		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	OR	A,A
;  302		return 0;
	SBC	HL,HL
;  303	}
L_99:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Loop ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_ExitZone                           IMPORT  -----   function
;_ExitBuilding                       IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_battle_SpawnWild                   IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_GetTypeMapData                     IMPORT  -----   function
;_playerState                        STATIC      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_moveDir                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_FightTrainer                       IMPORT  -----   function
;_EnterDoor                          IMPORT  -----   function
;_TalkToNpc2                         IMPORT  -----   function
;_TalkToNpc1                         IMPORT  -----   function
;_OpenBox                            IMPORT  -----   function
;_items_ItemShop                     IMPORT  -----   function
;_HealParty                          IMPORT  -----   function
;_nextTile                           STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_GetNextTile                        IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Menu                          IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_pauseMenuSprite                    STATIC      3   variable
;_gfx_Sprite                         IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;menuReturn                            IX-4      3   variable
;wildSpawn                             IX-1      1   variable


; Stack Frame Size: 31 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__51:
	DB	"You need %u badges to pass"
	DB	0
	SEGMENT CODE
;  304	void map_End(void) {
_map_End:
	LD	HL,-3
	CALL	__frameset
;  305		int tileIndex = 0;
;  306		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_103
L_101:
;  307			free(mapTiles[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  308		}
L_103:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_101
;  309		for (tileIndex = 0; tileIndex < 12; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_107
L_105:
;  310			free(playerSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  311		}
L_107:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_105
;  312		for (tileIndex = 0; tileIndex < 4; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_112
L_110:
;  313			free(enemySprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  314		}
L_112:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_110
;  315		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_117
L_115:
;  316			free(pokeballSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  317		}
L_117:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_115
;  318		free(pauseMenuSprite);
	LD	BC,(_pauseMenuSprite)
	PUSH	BC
	CALL	_free
	POP	BC
;  319	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_End ***************************
;Name                         Addr/Register   Size   Type
;_pauseMenuSprite                    STATIC      3   variable
;_pokeballSprites                    STATIC      9   variable
;_enemySprites                       STATIC     12   variable
;_playerSprites                      STATIC     36   variable
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  320	
;  321	void map_Draw(void) {
_map_Draw:
;  322		/* Move Screen and Redraw */
;  323		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_122
;  324			screenX = 0;
;  325			screenY = 0;
;  326	
;  327			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	LD	BC,0
	LD	(_screenX),BC
	XOR	A,A
	LD	(_screenX+3),A
	LD	(_screenY),BC
	XOR	A,A
	LD	(_screenY+3),A
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  328	
;  329			gfx_TransparentSprite_NoClip(playerSprites[moveDir * 3 + playerState - 3], playerX - 8, playerY + 4);
	LD	A,(_playerY)
	ADD	A,4
	LD	C,A
	LD	A,(_moveDir)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	DEC	HL
	DEC	HL
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  330		}
;  331		else {
	JR	L_123
L_122:
;  332			screenX = Clamp(playerX - 160, 0, MAX_X);
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777056
	LD	A,255
	CALL	__ladd
	LD	BC,432
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenX),HL
	LD	A,E
	LD	(_screenX+3),A
;  333			screenY = Clamp(playerY - 112, 0, MAX_Y);
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777104
	LD	A,255
	CALL	__ladd
	LD	BC,400
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenY),HL
	LD	A,E
	LD	(_screenY+3),A
;  334	
;  335			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,(_screenY)
	PUSH	BC
	LD	BC,(_screenX)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  336			
;  337			gfx_TransparentSprite_NoClip(playerSprites[moveDir * 3 + playerState - 3], playerX - screenX - 8, playerY - screenY + 4);
	LD	A,(_playerY)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,4
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	C,A
	LD	A,(_moveDir)
	LD	B,0
	PUSH	BC
	LD	BC,(_playerX)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	DEC	HL
	DEC	HL
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_playerSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  338		}
L_123:
;  339		DrawEnemies();
	CALL	_DrawEnemies
;  340		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;  341	}
	RET	


;**************************** _map_Draw ***************************
;Name                         Addr/Register   Size   Type
;_map_DrawInformationBar             IMPORT  -----   function
;_DrawEnemies                        IMPORT  -----   function
;_Clamp                              IMPORT  -----   function
;_playerState                        STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_playerSprites                      STATIC     36   variable
;_playerX                            IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_indoors                            IMPORT      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  342	
;  343	void HealParty(void) {
_HealParty:
	LD	HL,-18
	CALL	__frameset
;  344		int pokemonIndex;
;  345		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_128
L_126:
;  346			party[pokemonIndex].currenthealth = stats_CalculateStats(party[pokemonIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-18
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-6)
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
;  347			party[pokemonIndex].currentstatus = 0;
	LD	(IY+15),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  348		}
L_128:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_126
;  349		text_Display("Your party has been healed", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__61
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  350		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  351	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealParty ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__61:
	DB	"Your party has been healed"
	DB	0
	SEGMENT CODE
;  352	void OpenBox(void) {
_OpenBox:
	LD	HL,-19
	CALL	__frameset
;  353		uint8_t boxMode;
;  354		boxMode = text_AskQuestion2("Box", "Delete Save", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__63
	PUSH	BC
	LD	BC,L__64
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-10),L
;  355		if (boxMode == 2) {
	LD	A,(IX+-10)
	CP	A,2
	JR	NZ,L_174
;  356			text_Display("Are You Sure?", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__66
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  357			if (text_AskQuestion2("Yes", "No", false) == 1) {
	LD	BC,0
	PUSH	BC
	LD	BC,L__67
	PUSH	BC
	LD	BC,L__68
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_175
;  358				ti_Delete(appVarName);
	LD	BC,_appVarName
	PUSH	BC
	CALL	_ti_Delete
	POP	BC
;  359			}
;  360		}
;  361		else if (boxMode == 1) {
	JR	L_175
L_174:
	LD	A,(IX+-10)
	CP	A,1
	JR	NZ,L_175
;  362			uint8_t lastSelection = 255;
	LD	(IX+-3),255
;  363			uint8_t boxPage = 0;
	LD	(IX+-2),0
;  364			uint8_t boxCurrent = 0;
	LD	(IX+-1),0
;  365			int boxIndex;
;  366	
;  367		redrawbox:
L_132:
;  368			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  369			gfx_FillRectangle(20, 20, 280, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,280
	PUSH	BC
	LD	BC,20
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  370			gfx_SetColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  371			gfx_Rectangle(20, 20, 280, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,280
	PUSH	BC
	LD	BC,20
	PUSH	BC
	PUSH	BC
	CALL	_gfx_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  372			gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  373	
;  374			gfx_PrintStringXY(">", 25, 25 + 20 * (boxCurrent));
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,L__71
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  375			for (boxIndex = 0; boxIndex < 10 && boxIndex + boxPage < 36; boxIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_138
L_136:
;  376				if (party[boxIndex + boxPage].id > 0) {
	LD	HL,34
	LD	BC,(IX+-9)
	CALL	__imulu
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	XOR	A,A
	CP	A,(IY+0)
	JR	NC,L_137
;  377					sprintf(str, "LV%u %s", party[boxIndex + boxPage].level, data_pokemon[party[boxIndex + boxPage].id].name);
	LD	HL,34
	LD	BC,(IX+-9)
	CALL	__imulu
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	IY,(IX+-13)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	IY,(IX+-13)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__73
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  378					gfx_PrintStringXY(str, 35, 25 + boxIndex * 20);
	LD	HL,(IX+-6)
	LD	A,20
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+25
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  379				}
;  380			}
L_137:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_138:
	LD	BC,10
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_139
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-9),HL
	OR	A,A
	LD	BC,36
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_136
L_139:
;  381			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  382			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  383	
;  384			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_141
L_142:
	CALL	_kb_Scan
L_141:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_142
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_142
;  385			kb_Scan();
	CALL	_kb_Scan
;  386			while (!(kb_Data[6] & kb_Clear)) {
	JR	L_170
L_171:
;  387				kb_Scan();
	CALL	_kb_Scan
;  388				if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_151
;  389					if (lastSelection == 255) {
	LD	A,(IX+-3)
	CP	A,255
	JR	NZ,L_145
;  390						lastSelection = boxCurrent + boxPage;
	LD	A,(IX+-1)
	ADD	A,(IX+-2)
	LD	(IX+-3),A
;  391					}
;  392					else {
	JR	L_132
L_145:
;  393						tempcharacter2 = party[lastSelection];
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	A,34
	CALL	__imul_b
	LD	(IX+-19),HL
	LD	BC,_party
	ADD	HL,BC
	LD	DE,_tempcharacter2
	LD	BC,34
	LDIR	
;  394						party[lastSelection] = party[boxCurrent + boxPage];
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,34
	CALL	__imulu
	LD	(IX+-16),HL
	LD	BC,_party
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-19)
	LD	DE,_party
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,34
	LDIR	
;  395						party[boxCurrent + boxPage] = tempcharacter2;
	LD	HL,(IX+-16)
	LD	BC,_party
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_tempcharacter2
	LD	BC,34
	LDIR	
;  396						lastSelection = 255;
	LD	(IX+-3),255
;  397					}
;  398					goto redrawbox;
	JR	L_132
;  399				}
L_151:
;  400				if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_160
;  401					text_Display("Release Pokemon?", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__81
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  402					if (text_AskQuestion2("Yes", "No", false) == 1) {
	LD	BC,0
	PUSH	BC
	LD	BC,L__82
	PUSH	BC
	LD	BC,L__83
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_132
;  403						party[boxCurrent + boxPage] = clearcharacter2;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_clearcharacter2
	LD	BC,34
	LDIR	
;  404					}
;  405					goto redrawbox;
	JR	L_132
;  406				}
L_160:
;  407				if ((kb_Data[7] & kb_Down) && boxCurrent + boxPage < 36) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_169
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	OR	A,A
	LD	BC,36
	SBC	HL,BC
	JP	P,L_169
;  408					boxCurrent++;
	INC	(IX+-1)
;  409					if (boxCurrent == 6 && boxPage < 26) {
	LD	A,(IX+-1)
	CP	A,6
	JR	NZ,L_132
	LD	A,(IX+-2)
	CP	A,26
	JR	NC,L_132
;  410						boxPage++;
	INC	(IX+-2)
;  411						boxCurrent--;
	DEC	(IX+-1)
;  412					}
;  413					goto redrawbox;
	JR	L_132
;  414				}
L_169:
;  415				if ((kb_Data[7] & kb_Up) && boxCurrent != 0) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_170
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_170
;  416					boxCurrent--;
	DEC	(IX+-1)
;  417					if (boxCurrent == 4 && boxPage > 0) {
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_132
	XOR	A,A
	CP	A,(IX+-2)
	JR	NC,L_132
;  418						boxPage--;
	DEC	(IX+-2)
;  419						boxCurrent++;
	INC	(IX+-1)
;  420					}
;  421					goto redrawbox;
	JR	L_132
;  422				}
;  423			}
L_170:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_171
;  424		}
L_175:
;  425		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  426	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpenBox ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_clearcharacter2                    STATIC     34   variable
;_tempcharacter2                     STATIC     34   variable
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Rectangle                      IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;_appVarName                         IMPORT  unknown variable
;_ti_Delete                          IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_text_AskQuestion2                  IMPORT  -----   function
;boxMode                              IX-10      1   variable
;G_2                                   IX-9      3   variable
;boxIndex                              IX-6      3   variable
;lastSelection                         IX-3      1   variable
;boxPage                               IX-2      1   variable
;boxCurrent                            IX-1      1   variable


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__63:
	DB	"Delete Save"
	DB	0
L__64:
	DB	"Box"
	DB	0
L__66:
	DB	"Are You Sure?"
	DB	0
L__67:
	DB	"No"
	DB	0
L__68:
	DB	"Yes"
	DB	0
L__71:
	DB	">"
	DB	0
L__73:
	DB	"LV%u %s"
	DB	0
L__81:
	DB	"Release Pokemon?"
	DB	0
L__82:
	DB	"No"
	DB	0
L__83:
	DB	"Yes"
	DB	0
	SEGMENT CODE
;  427	void TalkToNpc1(void) {
_TalkToNpc1:
	LD	HL,-6
	CALL	__frameset
;  428		text_Display(data_npcText[npc1], false);
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  429		if (!takenGifts[npc1] && data_npcReward[npc1] > 0) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_183
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_183
;  430			playerItems[data_npcReward[npc1] - 1]++;
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-6)
	LD	(HL),A
;  431			items_IndexToName(str1, data_npcReward[npc1] - 1);
	LD	HL,(IX+-3)
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  432			if (data_npcReward[npc1] - 1 >= 20) {
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_180
;  433				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__98
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  434			}
;  435			else {
	JR	L_181
L_180:
;  436				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__99
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  437			}
L_181:
;  438			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  439			takenGifts[npc1] = true;
	LD	A,(_npc1)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  440		}
;  441	}
L_183:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc1 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc1                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;G_4                                   IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__98:
	DB	"Recieved the TM for %s"
	DB	0
L__99:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  442	void TalkToNpc2(void) {
_TalkToNpc2:
	LD	HL,-3
	CALL	__frameset
;  443		text_Display(data_npcText[npc2], false);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,0
	PUSH	BC
	LD	BC,_data_npcText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  444		if (!takenGifts[npc2]) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_189
;  445			playerItems[data_npcReward[npc2] - 1]++;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-3)
	LD	(HL),A
;  446			items_IndexToName(str1, data_npcReward[npc2] - 1);
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,_str1
	PUSH	BC
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  447			if (data_npcReward[npc2] - 1 >= 20) {
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_data_npcReward
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_186
;  448				sprintf(str, "Recieved the TM for %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__103
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  449			}
;  450			else {
	JR	L_187
L_186:
;  451				sprintf(str, "Recieved a %s", str1);
	LD	BC,_str1
	PUSH	BC
	LD	BC,L__104
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  452			}
L_187:
;  453			text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  454			takenGifts[npc2] = true;
	LD	A,(_npc2)
	UEXT	HL
	LD	L,A
	LD	BC,_takenGifts
	ADD	HL,BC
	LD	(HL),1
;  455		}
;  456	}
L_189:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _TalkToNpc2 ***************************
;Name                         Addr/Register   Size   Type
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_str1                               STATIC     20   variable
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_data_npcReward                     IMPORT  unknown variable
;_takenGifts                         IMPORT  unknown variable
;_npc2                               STATIC      1   variable
;_data_npcText                       IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__103:
	DB	"Recieved the TM for %s"
	DB	0
L__104:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
;  457	void EnterDoor(uint8_t index) {
_EnterDoor:
	LD	HL,-3
	CALL	__frameset
;  458		int tileIndex;
;  459		lastPlayerX = playerX;
	LD	BC,(_playerX)
	LD	HL,_lastPlayerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  460		lastPlayerY = playerY;
	LD	BC,(_playerY)
	LD	HL,_lastPlayerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  461		indoors = true;
	LD	A,1
	LD	(_indoors),A
;  462		currentBuilding = currentZoneData.doorzones[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+288
	ADD	HL,BC
	LD	A,(HL)
	LD	(_currentBuilding),A
;  463	
;  464		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_193
L_191:
;  465			zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_indoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  466		}
L_193:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_191
;  467		tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  468		tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  469		playerX = currentZoneData.doorx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+304
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  470		playerY = currentZoneData.doory[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+320
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  471		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  472		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  473		npc1 = currentZoneData.doornpc1[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+336
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc1),A
;  474		npc2 = currentZoneData.doornpc2[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+352
	ADD	HL,BC
	LD	A,(HL)
	LD	(_npc2),A
;  475		LoadMap();
	CALL	_LoadMap
;  476	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _EnterDoor ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_npc2                               STATIC      1   variable
;_npc1                               STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;tileIndex                             IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  477	void ExitBuilding(void) {
_ExitBuilding:
	LD	HL,-3
	CALL	__frameset
;  478		int tileIndex;
;  479		playerX = lastPlayerX;
	LD	BC,(_lastPlayerX)
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  480		playerY = lastPlayerY;
	LD	BC,(_lastPlayerY)
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  481		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  482		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_199
L_197:
;  483			zx7_Decompress(mapTiles[tileIndex], outdoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_outdoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  484		}
L_199:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_197
;  485		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  486		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  487		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  488		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  489		LoadMap();
	CALL	_LoadMap
;  490	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitBuilding ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_outdoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_lastPlayerY                        IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_lastPlayerX                        IMPORT      2   variable
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  491	void ExitZone(uint8_t index) {
_ExitZone:
	CALL	__frameset0
;  492		playerX = currentZoneData.exitx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+256
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerX
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  493		playerY = currentZoneData.exity[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+272
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_playerY
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  494		currentZone = currentZoneData.exitzone[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+240
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_currentZone
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  495		tx = playerX / 16;
	LD	BC,(_playerX)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  496		ty = playerY / 16;
	LD	BC,(_playerY)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  497		LoadMap();
	CALL	_LoadMap
;  498	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitZone ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  499	bool FightTrainer(uint8_t index) {
_FightTrainer:
	CALL	__frameset0
;  500		currentTrainer = index;
	LD	A,(IX+6)
	LD	(_currentTrainer),A
;  501		if (indoors && !defeatedTrainersIndoors[currentBuilding][currentTrainer]) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_207
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_207
;  502			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  503			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  504			return true;
	LD	A,1
	JR	L_209
;  505		}
;  506		else if (!indoors && !defeatedTrainers[currentZone][currentTrainer]) {
L_207:
	LD	A,(_indoors)
	OR	A,A
	JR	NZ,L_208
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_208
;  507			text_Display(data_trainerText[currentZoneData.data_trainerText[index]], true);
	LD	BC,_currentZoneData+608
	LD	DE,1
	PUSH	DE
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_data_trainerText
	ADD	HL,BC
	PUSH	HL
	CALL	_text_Display
	POP	BC
	POP	BC
;  508			battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+464
	PUSH	BC
	LD	BC,_currentZoneData+368
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  509			return true;
	LD	A,1
	JR	L_209
;  510		}
L_208:
;  511		return false;
	XOR	A,A
;  512	}
L_209:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FightTrainer ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_battle_SpawnTrainer                IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_data_trainerText                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_currentTrainer                     STATIC      1   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  513	
;  514	void map_LoadPokeballs(void) {
_map_LoadPokeballs:
	LD	HL,-6
	CALL	__frameset
;  515		int pokemonIndex;
;  516		/* Generate pokemon info To Display At Top of Screen */
;  517		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_217
L_215:
;  518			if (party[pokemonIndex].id == 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_214
;  519				pokeballdata[pokemonIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),2
;  520			}
;  521			else {
	JR	L_216
L_214:
;  522				if (party[pokemonIndex].currenthealth > 0) {
	LD	IY,(IX+-6)
	LD	BC,(IY+13)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_212
;  523					pokeballdata[pokemonIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),0
;  524				}
;  525				else {
	JR	L_216
L_212:
;  526					pokeballdata[pokemonIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),1
;  527				}
;  528			}
;  529		}
L_216:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_217:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_215
;  530	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoadPokeballs ***************************
;Name                         Addr/Register   Size   Type
;_pokeballdata                       STATIC      6   variable
;_party                              IMPORT   1224   variable
;G_5                                   IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  531	void LoadMap(void) {
_LoadMap:
	LD	HL,-1
	CALL	__frameset
;  532		ti_var_t mapAV;
;  533		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_220
;  534			mapAV = ti_Open("PKMNMD1", "r");
	LD	BC,L__121
	PUSH	BC
	LD	BC,L__122
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  535			ti_Seek(((int)currentBuilding) * 1270, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	LD	BC,1270
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  536			ti_Read(&currentTileMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  537			ti_Read(&currentTypeMap, 315, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  538			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  539		}
;  540		else {
	JR	L_221
L_220:
;  541			mapAV = ti_Open("PKMNMD0", "r");
	LD	BC,L__123
	PUSH	BC
	LD	BC,L__124
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  542			ti_Seek(((int)currentZone) * 4480, 0, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentZone)
	CALL	__stoiu
	LD	BC,4480
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  543			ti_Read(&currentTileMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  544			ti_Read(&currentTypeMap, 1920, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  545			ti_Read(&currentZoneData, 640, 1, mapAV);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,640
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  546		}
L_221:
;  547		ti_CloseAll();
	CALL	_ti_CloseAll
;  548	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadMap ***************************
;Name                         Addr/Register   Size   Type
;_ti_CloseAll                        IMPORT  -----   function
;_currentZone                        IMPORT      2   variable
;_currentZoneData                    STATIC    640   variable
;_currentTypeMap                     STATIC   1920   variable
;_currentTileMap                     STATIC   1920   variable
;_ti_Read                            IMPORT  -----   function
;_currentBuilding                    IMPORT      1   variable
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_indoors                            IMPORT      1   variable
;mapAV                                 IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__121:
	DB	"r"
	DB	0
L__122:
	DB	"PKMNMD1"
	DB	0
L__123:
	DB	"r"
	DB	0
L__124:
	DB	"PKMNMD0"
	DB	0
	SEGMENT CODE
;  549	
;  550	int32_t Clamp(int32_t number, int min, int max) {
_Clamp:
	CALL	__frameset0
;  551		if (number < min) {
	LD	BC,(IX+12)
	CALL	__itol
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmps
	JP	P,L_225
;  552			number = min;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  553		}
L_225:
;  554		if (number > max) {
	LD	BC,(IX+15)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_226
;  555			number = max;
	LD	BC,(IX+15)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  556		}
L_226:
;  557		return number;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  558	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Clamp ***************************
;Name                         Addr/Register   Size   Type
;max                                  IX+15      3   parameter
;min                                  IX+12      3   parameter
;number                                IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  559	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width) {
_GetNextTile:
	CALL	__frameset0
;  560	
;  561		switch (moveDir) {
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__129:
	DW	4
	DW	1
	DB	0
	DW24	L_228	

	DW24	L_229	

	DW24	L_230	

	DW24	L_231	

	DW24	L_232	

;  562		case 1:
L_228:
;  563			return(GetTypeMapData(tx + 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	INC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_233
;  564		case 2:
L_229:
;  565			return(GetTypeMapData(tx - 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	DEC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_233
;  566		case 3:
L_230:
;  567			return(GetTypeMapData(tx, ty + 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	INC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_233
;  568		case 4:
L_231:
;  569			return(GetTypeMapData(tx, ty - 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_233
;  570		}
L_232:
;  571		return 0;
	XOR	A,A
;  572	}
L_233:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetNextTile ***************************
;Name                         Addr/Register   Size   Type
;_GetTypeMapData                     IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  573	
;  574	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width) {
_GetTypeMapData:
	CALL	__frameset0
;  575		if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_235
;  576			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	JR	L_236
;  577		}
;  578		else {
L_235:
;  579			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
;  580		}
;  581	}
L_236:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetTypeMapData ***************************
;Name                         Addr/Register   Size   Type
;_currentTypeMap                     STATIC   1920   variable
;_indoors                            IMPORT      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  582	
;  583	void DrawEnemies(void) {
_DrawEnemies:
	LD	HL,-12
	CALL	__frameset
;  584		int xloc = 0;
;  585		int yloc = 0;
;  586		for (i = 0; i < 16; i++) {
	LD	HL,_i
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_248
L_246:
;  587			if (indoors){
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_245
;  588				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_247
;  589					xloc = currentZoneData.trainerx[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-3),HL
;  590					yloc = currentZoneData.trainery[i] * 16;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-6),HL
;  591					gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  592				}
;  593			}
;  594			else {
	JR	L_247
L_245:
;  595				if (currentZoneData.trainerdir[i] != 0) {
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+592
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_247
;  596					xloc = currentZoneData.trainerx[i] * 16 - screenX;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,_currentZoneData+560
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(_screenX)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
;  597					yloc = currentZoneData.trainery[i] * 16 - screenY;
	LD	BC,(_i)
	CALL	__stoiu
	LD	BC,(_screenY)
	LD	DE,_currentZoneData+576
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
;  598					if (xloc < 336 && yloc < 240 && xloc >= 0 && yloc >= 0) {
	OR	A,A
	LD	(IX+-6),HL
	LD	HL,(IX+-3)
	LD	BC,336
	SBC	HL,BC
	JP	P,L_247
	LD	BC,240
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_247
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_247
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_247
;  599						gfx_TransparentSprite(enemySprites[currentZoneData.trainerdir[i] - 1], xloc - 8, yloc + 4);
	LD	IY,(IX+-6)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemySprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  600					}
;  601				}
;  602			}
;  603			
;  604		}
L_247:
	LD	BC,(_i)
	INC	BC
	LD	HL,_i
	LD	(HL),C
	INC	HL
	LD	(HL),B
L_248:
	LD.LIS	BC,16
	LD	HL,(_i)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_246
;  605	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawEnemies ***************************
;Name                         Addr/Register   Size   Type
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_enemySprites                       STATIC     12   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_currentZoneData                    STATIC    640   variable
;_indoors                            IMPORT      1   variable
;_i                                  IMPORT      2   variable
;G_10                                 IX-12      3   variable
;G_8                                   IX-9      3   variable
;yloc                                  IX-6      3   variable
;xloc                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  606	
;  607	void map_DrawInformationBar(void) {
_map_DrawInformationBar:
	LD	HL,-3
	CALL	__frameset
;  608		int pokemonIndex;
;  609		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  610		gfx_FillRectangle(0, 0, 320, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  611		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_253
L_251:
;  612			gfx_TransparentSprite_NoClip(pokeballSprites[pokeballdata[pokemonIndex]], 16 * pokemonIndex, 0);
	LD	BC,_pokeballdata
	LD	DE,0
	PUSH	DE
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  613		}
L_253:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_251
;  614		sprintf(str, "%u$", playerMoney);
	LD	A,(_playerMoney+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_playerMoney)
	PUSH	BC
	LD	BC,L__143
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  615		gfx_PrintStringXY(str, 100, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  616	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_DrawInformationBar ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_playerMoney                        IMPORT      4   variable
;_sprintf                            IMPORT  -----   function
;_pokeballdata                       STATIC      6   variable
;_pokeballSprites                    STATIC      9   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__143:
	DB	"%u$"
	DB	0
	SEGMENT CODE
;  617	
;  618	void map_LoseFight(void) {
_map_LoseFight:
	LD	HL,-18
	CALL	__frameset
;  619		int tileIndex, partyIndex;
;  620		text_Display("All your pokemon have fainted", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__145
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  621		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_259
L_257:
;  622			party[partyIndex].currenthealth = stats_CalculateStats(party[partyIndex]).health;
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-18
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,(IX+-6)
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
;  623			party[partyIndex].currentstatus = 0;
	LD	(IY+15),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  624		}
L_259:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_257
;  625		playerX = 5*16;
	LD	HL,_playerX
	LD	(HL),80
	INC	HL
	LD	(HL),0
;  626		playerY = 7*16;
	LD	HL,_playerY
	LD	(HL),112
	INC	HL
	LD	(HL),0
;  627		indoors = false;
	XOR	A,A
	LD	(_indoors),A
;  628		currentZone = 0;
	LD	HL,_currentZone
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  629		moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  630		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  631		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  632		tx = playerX / 16;
	LD	A,5
	LD	(_tx),A
;  633		ty = playerY / 16;
	LD	A,7
	LD	(_ty),A
;  634		LoadMap();
	CALL	_LoadMap
;  635	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoseFight ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_moveDir                            STATIC      1   variable
;_currentZone                        IMPORT      2   variable
;_indoors                            IMPORT      1   variable
;_playerY                            IMPORT      2   variable
;_playerX                            IMPORT      2   variable
;_stats_CalculateStats               IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_text_Display                       IMPORT  -----   function
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__145:
	DB	"All your pokemon have fainted"
	DB	0
	SEGMENT CODE
;  636	
;  637	void map_WinFight(bool wild, uint16_t rewardMoney) {
_map_WinFight:
	LD	HL,-28
	CALL	__frameset
;  638		char str1[16];
;  639		if (!wild) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_278
;  640			playerMoney += rewardMoney;
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	A,(_playerMoney+3)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_playerMoney)
	CALL	__ladd
	LD	(_playerMoney),HL
	LD	A,E
	LD	(_playerMoney+3),A
;  641			if (indoors) {
	LD	A,(_indoors)
	OR	A,A
	JR	Z,L_276
;  642				defeatedTrainersIndoors[currentBuilding][currentTrainer] = true;
	LD	A,(_currentBuilding)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainersIndoors
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  643				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_278
;  644					if (currentZoneData.trainerreward[currentTrainer] == 255) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_267
;  645						badgeCount++;
;  646						sprintf(str, "Recieved a badge");
	LD	BC,L__152
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	A,(_badgeCount)
	INC	A
	LD	(_badgeCount),A
	CALL	_sprintf
	POP	BC
	POP	BC
;  647					}
;  648					else {
	JR	L_268
L_267:
;  649						playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-25)
	LD	(HL),A
;  650						items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  651						if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_265
;  652							sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__154
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  653						}
;  654						else {
	JR	L_268
L_265:
;  655							sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__155
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  656						}
;  657					}
L_268:
;  658					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  659				}
;  660			}
;  661			else {
	JR	L_278
L_276:
;  662				defeatedTrainers[currentZone][currentTrainer] = true;
	LD	BC,(_currentZone)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_defeatedTrainers
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
;  663				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_278
;  664					playerItems[currentZoneData.trainerreward[currentTrainer]-1]++;
	LD	(IX+-3),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,_playerItems
	ADD	HL,BC
	LD	(IX+-28),HL
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-28)
	LD	(HL),A
;  665					items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
;  666					if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_272
;  667						sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__158
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  668					}
;  669					else {
	JR	L_273
L_272:
;  670						sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__159
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  671					}
L_273:
;  672					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  673				}
;  674			}
;  675		}
L_278:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_WinFight ***************************
;Name                         Addr/Register   Size   Type
;_currentZone                        IMPORT      2   variable
;_defeatedTrainers                   IMPORT  unknown variable
;_text_Display                       IMPORT  -----   function
;_items_IndexToName                  IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_badgeCount                         IMPORT      1   variable
;_currentZoneData                    STATIC    640   variable
;_currentTrainer                     STATIC      1   variable
;_currentBuilding                    IMPORT      1   variable
;_defeatedTrainersIndoors            IMPORT  unknown variable
;_indoors                            IMPORT      1   variable
;_playerMoney                        IMPORT      4   variable
;str1                                 IX-22     16   variable
;G_12                                  IX-6      3   variable
;G_16                                  IX-3      3   variable
;rewardMoney                           IX+9      2   parameter
;wild                                  IX+6      1   parameter


; Stack Frame Size: 40 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__152:
	DB	"Recieved a badge"
	DB	0
L__154:
	DB	"Recieved the TM for %s"
	DB	0
L__155:
	DB	"Recieved a %s"
	DB	0
L__158:
	DB	"Recieved the TM for %s"
	DB	0
L__159:
	DB	"Recieved a %s"
	DB	0
	XREF _PKMNSD4_init:ROM
	XREF _indoortileset_tiles_compressed:ROM
	XREF _outdoortileset_tiles_compressed:ROM
	XREF _pokeball_tiles_compressed:ROM
	XREF _PKMNSD4:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_SelectSave:ROM
	XREF _save_Load:ROM
	XREF _badgeCount:ROM
	XREF _takenGifts:ROM
	XREF _defeatedTrainersIndoors:ROM
	XREF _defeatedTrainers:ROM
	XREF _playerItems:ROM
	XREF _playerMoney:ROM
	XREF _currentBuilding:ROM
	XREF _indoors:ROM
	XREF _currentZone:ROM
	XREF _party:ROM
	XREF _lastPlayerY:ROM
	XREF _lastPlayerX:ROM
	XREF _playerY:ROM
	XREF _playerX:ROM
	XREF _appVarName:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _items_ItemShop:ROM
	XREF _items_IndexToName:ROM
	XREF _colors:ROM
	XREF _i:ROM
	XREF _str:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _menu_Menu:ROM
	XREF _battle_SpawnTrainer:ROM
	XREF _battle_SpawnWild:ROM
	XREF _data_npcReward:ROM
	XREF _data_npcText:ROM
	XREF _data_trainerText:ROM
	XREF _data_pokemon:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _sprintf:ROM
	XREF _ti_Delete:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmps:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __imulu:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _map_WinFight
	XDEF _map_LoseFight
	XDEF _map_DrawInformationBar
	XDEF _DrawEnemies
	XDEF _GetTypeMapData
	XDEF _GetNextTile
	XDEF _Clamp
	XDEF _LoadMap
	XDEF _map_LoadPokeballs
	XDEF _FightTrainer
	XDEF _ExitZone
	XDEF _ExitBuilding
	XDEF _EnterDoor
	XDEF _TalkToNpc2
	XDEF _TalkToNpc1
	XDEF _OpenBox
	XDEF _HealParty
	XDEF _map_Draw
	XDEF _map_End
	XDEF _map_Loop
	XDEF _map_SetupGfx
	XDEF _map_Setup
	XDEF _map_Initialize
	XDEF _str1
	XDEF _clearcharacter2
	XDEF _tempcharacter2
	XDEF _currentTrainer
	XDEF _npc2
	XDEF _npc1
	XDEF _currentZoneData
	XDEF _currentTypeMap
	XDEF _currentTileMap
	XDEF _pauseMenuSprite
	XDEF _pokeballSprites
	XDEF _enemySprites
	XDEF _playerSprites
	XDEF _mapTiles
	XDEF _tilemap
	XDEF _playerState
	XDEF _moveDir
	XDEF _moveState
	XDEF _nextTile
	XDEF _ty
	XDEF _tx
	XDEF _screenY
	XDEF _screenX
	XDEF _pokeballdata
	XDEF _battlechance
	END
