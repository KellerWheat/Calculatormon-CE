; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAP.C"
	.assume ADL=1
	SEGMENT TEXT
_battlechance:
	DW	10
	DB	0
	SEGMENT DATA
_pokeballdata:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_screenX:
	DL	0
_screenY:
	DL	0
	SEGMENT BSS
_tx:
	DS	1
_ty:
	DS	1
	SEGMENT DATA
_running:
	DB	0
_currentRun:
	DB	0
_currentWater:
	DW	0
	DB	0
_grassAnimNext:
	DB	0
_grassAnimState1:
	DW	0
	DB	0
_grassAnimState2:
	DW	0
	DB	0
_grassAnimX1:
	DW	0
	DB	0
_grassAnimY1:
	DW	0
	DB	0
_grassAnimX2:
	DW	0
	DB	0
_grassAnimY2:
	DW	0
	DB	0
	SEGMENT BSS
_npcMoveState:
	DS	16
_npcOldTiles:
	DS	16
	SEGMENT DATA
_npcToFight:
	DW	16
	DB	0
	SEGMENT BSS
_npcGrassAnimState:
	DS	16
_npcSaidMessage:
	DS	16
	SEGMENT DATA
_npcPatterns:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	2
	DB	5
	DB	5
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT BSS
_nextTile:
	DS	1
	SEGMENT DATA
_moveState:
	DB	0
_moveDir:
	DB	3
_playerState:
	DB	0
	SEGMENT BSS
_tilemap:
	DS	18
_mapTiles:
	DS	384
_pokeballSprites:
	DS	9
_currentTileMap:
	DS	1920
_currentTypeMap:
	DS	1920
_currentZoneData:
	DS	672
	SEGMENT DATA
_currentTrainer:
	DB	0
	SEGMENT BSS
_tempcharacter2:
	DS	34
	SEGMENT TEXT
_clearcharacter2:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	DW	0
	SEGMENT BSS
_str1:
	DS	20
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <debug.h>
;   12	#include <compression.h>
;   13	#include <fileioc.h>
;   14	
;   15	#include "map.h"
;   16	#include "battle.h"
;   17	#include "menu.h"
;   18	#include "misc.h"
;   19	#include "data.h"
;   20	#include "items.h"
;   21	#include "text.h"
;   22	#include "savegame.h"
;   23	#include "stats.h"
;   24	#include "gfx/map_gfx.h"
;   25	#include "gfx/test_gfx.h"
;   26	#include "items.h"
;   27	
;   28	#include "gfx/PKMNSD4.h"
;   29	#include "gfx/PKMNSD7.h"
;   30	#include "gfx/PKMNSD8.h"
;   31	
;   32	#define OUTDOORWIDTH 48
;   33	#define OUTDOORHEIGHT 40
;   34	#define MAX_X ((OUTDOORWIDTH - 21)*16)
;   35	#define MAX_Y ((OUTDOORHEIGHT - 15)*16)
;   36	
;   37	void HealParty(void);
;   38	void OpenBox(void);
;   39	void ReadText(uint8_t index);
;   40	void EnterDoor(uint8_t index);
;   41	void ExitBuilding(void);
;   42	void ExitZone(uint8_t index);
;   43	bool FightTrainer(uint8_t index);
;   44	
;   45	int32_t Clamp(int32_t number, int min, int max);
;   46	/* Gets the tile the player is facing*/
;   47	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width);
;   48	/* Gets the typemap at a specific tile */
;   49	uint16_t ShiftTile(uint16_t value, uint8_t direction, uint8_t amount);
;   50	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width);
;   51	void DrawPlayer(void);
;   52	/* Draw 16 npcs */
;   53	void ProcessNpcs(void);
;   54	/* Loads the tilemap, typemap ,and zonedata for current area */
;   55	void LoadMap(void);
;   56	void LoadTileset(bool freeOld);
;   57	
;   58	void GrassAnimation(bool part);
;   59	
;   60	
;   61	
;   62	const int battlechance = 10; /* Chance for enemy to spawn out of 100 */
;   63	
;   64	
;   65	uint8_t pokeballdata[] = {
;   66		0,0,0,0,0,0
;   67	};
;   68	
;   69	int32_t screenX = 0;
;   70	int32_t screenY = 0;
;   71	
;   72	uint8_t tx; /* x tile */
;   73	uint8_t ty; /* y tile */
;   74	bool running = false;
;   75	bool currentRun = 0;
;   76	int currentWater = 0;
;   77	
;   78	/* Variables for the leaves that appear when walking through grass */
;   79	bool grassAnimNext = 0;
;   80	int grassAnimState1 = 0;
;   81	int grassAnimState2 = 0;
;   82	int grassAnimX1 = 0;
;   83	int grassAnimY1 = 0;
;   84	int grassAnimX2 = 0;
;   85	int grassAnimY2 = 0;
;   86	
;   87	uint8_t npcMoveState[16];
;   88	uint8_t npcOldTiles[16];
;   89	int npcToFight = 16;
;   90	uint8_t npcGrassAnimState[16];
;   91	bool npcSaidMessage[16];
;   92	
;   93	uint8_t npcPatterns[8][16] = {
;   94		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   95		{0,4,4,4,2,5,5,0,0,0,0,0,0,0,0,0},
;   96		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   97		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   98		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;   99		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  100		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  101		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
;  102	};
;  103	
;  104	uint8_t nextTile;
;  105	/* Set to 8 when anything is pressed and decreases each frame until 0 */
;  106	uint8_t moveState = 0;
;  107	/* Direction Player is facing */
;  108	uint8_t moveDir = 3;
;  109	uint8_t playerState = 0;
;  110	
;  111	gfx_tilemap_t tilemap;
;  112	
;  113	gfx_sprite_t *mapTiles[128];
;  114	gfx_sprite_t *pokeballSprites[3];
;  115	
;  116	uint8_t currentTileMap[1920];
;  117	uint8_t currentTypeMap[1920];
;  118	struct zoneData currentZoneData;
;  119	
;  120	uint8_t currentTrainer = 0; /* 0-15 */
;  121	struct pokemonData tempcharacter2;
;  122	const struct pokemonData clearcharacter2 = {0};
;  123	
;  124	char str1[20];
	SEGMENT CODE
;  125	
;  126	void map_Initialize(void) {
_map_Initialize:
;  127		PKMNSD4_init();
	CALL	_PKMNSD4_init
;  128		PKMNSD7_init();
	CALL	_PKMNSD7_init
;  129		PKMNSD8_init();
	CALL	_PKMNSD8_init
;  130	
;  131		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD4+18
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  132		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  133		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  134		textBoxType = 0;	
	LD	BC,0
	LD	(_textBoxType),BC
;  135		save_SelectSave();
	CALL	_save_SelectSave
;  136		save_Load();
	CALL	_save_Load
;  137	
;  138		/* Initialize the tilemap */
;  139		tilemap.map = currentTileMap;
	LD	BC,_currentTileMap
	LD	(_tilemap),BC
;  140		tilemap.tiles = mapTiles;
	LD	BC,_mapTiles
	LD	(_tilemap+3),BC
;  141		tilemap.type_width = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  142		tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  143		tilemap.tile_height = 16;
	LD	A,16
	LD	(_tilemap+6),A
;  144		tilemap.tile_width = 16;
	LD	(_tilemap+7),A
;  145		tilemap.draw_height = 16;
	LD	(_tilemap+8),A
;  146		tilemap.draw_width = 22;
	LD	A,22
	LD	(_tilemap+9),A
;  147		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  148		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  149		tilemap.y_loc = 8;
	LD	A,8
	LD	(_tilemap+14),A
;  150		tilemap.x_loc = -8;
	LD	BC,16777208
	LD	(_tilemap+15),BC
;  151	
;  152		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_1
;  153			tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  154			tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  155		}
L_1:
;  156	
;  157		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  158		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  159		LoadMap();
	CALL	_LoadMap
;  160	}
	RET	


;**************************** _map_Initialize ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   2604   variable
;_mapTiles                           STATIC    384   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_save_Load                          IMPORT  -----   function
;_save_SelectSave                    IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT     21   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_PKMNSD8_init                       IMPORT  -----   function
;_PKMNSD7_init                       IMPORT  -----   function
;_PKMNSD4_init                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  161	void map_Setup(void) {
_map_Setup:
;  162		map_SetupGfx();
	CALL	_map_SetupGfx
;  163	
;  164		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  165		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  166	}
	RET	


;**************************** _map_Setup ***************************
;Name                         Addr/Register   Size   Type
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   2604   variable
;_map_SetupGfx                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  167	
;  168	void map_SetupGfx(void) {
_map_SetupGfx:
	LD	HL,-3
	CALL	__frameset
;  169		int tileIndex = 0;
;  170		LoadTileset(false);
	LD	BC,0
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  171		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_7
L_5:
;  172			pokeballSprites[tileIndex] = gfx_MallocSprite(16, 16);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_pokeballSprites
	ADD	HL,DE
	LD	(HL),BC
;  173			zx7_Decompress(pokeballSprites[tileIndex], pokeball_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_pokeball_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  174		}
L_7:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_5
;  175		textBoxType = 0;
	LD	BC,0
;  176		gfx_SetPalette(map_gfx_pal, sizeof_map_gfx_pal, 0);
	LD	DE,0
	PUSH	DE
	LD	HL,_PKMNSD4+18
	LD	(_textBoxType),BC
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  177		SetColors(0);
	LD	BC,0
	PUSH	BC
	CALL	_SetColors
	POP	BC
;  178		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  179		gfx_SetTextFGColor(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  180		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  181	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_SetupGfx ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_PKMNSD4                            IMPORT     21   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxType                        IMPORT      3   variable
;_pokeball_tiles_compressed          IMPORT      9   variable
;_zx7_Decompress                     IMPORT  -----   function
;_pokeballSprites                    STATIC      9   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  182	
;  183	int map_Loop(void) {
_map_Loop:
	LD	HL,-223
	CALL	__frameset
;  184		
;  185		/* Open Menu */
;  186		if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_117
;  187			int menuReturn;
;  188			gfx_sprite_t *pauseMenuSprite;
;  189			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  190			gfx_Blit(gfx_screen);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  191			map_End();
	CALL	_map_End
;  192			pauseMenuSprite = gfx_MallocSprite(112, 96);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,112
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-59),HL
;  193			zx7_Decompress(pauseMenuSprite, pausemenu_compressed);
	LD	BC,(_PKMNSD4)
	PUSH	BC
	LD	BC,(IX+-59)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  194			gfx_Sprite(pauseMenuSprite, 195, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,195
	PUSH	BC
	LD	BC,(IX+-59)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  195	
;  196			menuReturn = menu_Menu();
	CALL	_menu_Menu
	UEXT	HL
	LD	L,A
	LD	(IX+-84),HL
;  197			free(pauseMenuSprite);
	LD	BC,(IX+-59)
	PUSH	BC
	CALL	_free
	POP	BC
;  198			map_SetupGfx();
	CALL	_map_SetupGfx
;  199			map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  200			while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_11
L_12:
	CALL	_kb_Scan
L_11:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_12
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_12
;  201			return menuReturn;
	LD	HL,(IX+-84)
	JR	L_212
;  202		}
L_117:
;  203		/* If player presses 2nd */
;  204		if ((kb_Data[1] & kb_2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_206
;  205			bool awaitSecond = true;
	LD	(IX+-43),1
;  206			nextTile = GetNextTile(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-223
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-223
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_nextTile),A
;  207			if (GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) <= 0x20) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-223
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-223
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_111
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-223
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_GetNextTile
	PUSH	BC
	LD	BC,-223
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_111
;  208				int partyIndex, moveIndex;
;  209				bool hasUser = false;
	LD	(IX+-39),0
;  210				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-15),BC
	JR	L_24
L_22:
;  211					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-31),BC
	JR	L_21
L_19:
;  212						if (currentSave.party[partyIndex].moves[moveIndex] == 141) {
	LD	HL,(IX+-15)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-50),HL
	LD	IY,(IX+-50)
	LEA	HL,IY+1
	LD	BC,(IX+-31)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,141
	SBC	HL,BC
	JR	NZ,L_20
;  213							hasUser = true;
	LD	(IX+-39),1
;  214							sprintf(str, "%s used Surf", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-50)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__12
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  215							partyIndex = 6;
	LD	BC,6
	LD	(IX+-15),BC
;  216						}
;  217					}
L_20:
	LD	BC,(IX+-31)
	INC	BC
	LD	(IX+-31),BC
L_21:
	LD	BC,4
	LD	HL,(IX+-31)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_19
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  218				}
L_24:
	LD	BC,6
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_22
;  219				if (hasUser) {
	LD	A,(IX+-39)
	OR	A,A
	JR	Z,L_34
;  220					text_Display(str,true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  221					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_27
;  222						currentSave.playerX += 16;
	LD	IY,(_currentSave+2)
	LEA	BC,IY+16
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  223					}
L_27:
;  224					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_29
;  225						currentSave.playerX -= 16;
	LD	IY,(_currentSave+2)
	LEA	BC,IY+-16
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  226					}
L_29:
;  227					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_31
;  228						currentSave.playerY += 16;
	LD	IY,(_currentSave+4)
	LEA	BC,IY+16
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  229					}
L_31:
;  230					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_32
;  231						currentSave.playerY -= 16;
	LD	IY,(_currentSave+4)
	LEA	BC,IY+-16
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  232					}
L_32:
;  233					currentSave.surfing = true;
	LD	A,1
	LD	(_currentSave+1237),A
;  234					tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  235					ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  236				}
;  237				else {
	JR	L_115
L_34:
;  238					text_Display("A Pokemon with Surf could bring you across this water", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__20
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  239				}
;  240			}
;  241			else if (nextTile == 0x41) {
	JR	L_115
L_111:
	LD	A,(_nextTile)
	CP	A,65
	JR	NZ,L_109
;  242				HealParty();
	CALL	_HealParty
;  243			}
;  244			else if (nextTile == 0x42) {
	JR	L_115
L_109:
	LD	A,(_nextTile)
	CP	A,66
	JR	NZ,L_107
;  245				gfx_sprite_t *shopSpriteOriginal;
;  246				map_End();
	CALL	_map_End
;  247	
;  248				shopSpriteOriginal = gfx_MallocSprite(134, 84);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,84
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-66),HL
;  249				zx7_Decompress(shopSpriteOriginal, shop_compressed);
	LD	BC,_shop_compressed
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  250	
;  251				menu_ItemShop(shopSpriteOriginal);
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_menu_ItemShop
	POP	BC
;  252	
;  253				free(shopSpriteOriginal);
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_free
	POP	BC
;  254				map_SetupGfx();
	CALL	_map_SetupGfx
;  255			}
;  256			else if (nextTile == 0x43) {
	JR	L_115
L_107:
	LD	A,(_nextTile)
	CP	A,67
	JR	NZ,L_105
;  257				OpenBox();
	CALL	_OpenBox
;  258			}
;  259			else if (nextTile == 0x44) {
	JR	L_115
L_105:
	LD	A,(_nextTile)
	CP	A,68
	JR	NZ,L_103
;  260				if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_37
;  261					EnterDoor(15);
	LD	BC,15
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  262				}
;  263				else {
	JR	L_115
L_37:
;  264					EnterDoor(0);
	LD	BC,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  265				}
;  266			}
;  267			else if (nextTile == 0x45) {
	JR	L_115
L_103:
	LD	A,(_nextTile)
	CP	A,69
	JR	NZ,L_101
;  268				if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_44
;  269					uint8_t starter = 2;
	LD	(IX+-25),2
;  270					int tilePos = tx + (moveDir == 1) - (moveDir == 2) + ((ty + (moveDir == 3) - (moveDir == 4)) * tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	A,(_moveDir)
	CP	A,3
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-92),HL
	POP	IY
	JR	NZ,L__29
	LD	B,1
	JR	L__30
L__29:
	LD	B,0
L__30:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__32
	LD	B,1
	JR	L__33
L__32:
	LD	B,0
L__33:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-71),HL
	LD	BC,(IY+-92)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-71)
	POP	IY
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-89),HL
	POP	IY
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__35
	LD	B,1
	JR	L__36
L__35:
	LD	B,0
L__36:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-83),HL
	POP	IY
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__38
	LD	B,1
	JR	L__39
L__38:
	LD	B,0
L__39:
;  271	
;  272					sprintf(str, "Choose Squirtle as your starter?");
	LD	DE,_str
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-80),HL
	LD	BC,(IY+-83)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-80)
	POP	IY
	OR	A,A
	SBC	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-89)
	POP	IY
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	BC,L__40
	PUSH	BC
	PUSH	DE
	CALL	_sprintf
	POP	BC
	POP	BC
;  273					if (currentTypeMap[tilePos + 1] == 0x45) {
	LD	HL,(IX+-38)
	INC	HL
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_40
;  274						starter = 0;
	LD	(IX+-25),0
;  275						sprintf(str, "Choose Bulbasaur as your starter?");
	LD	BC,L__42
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  276						if (currentTypeMap[tilePos - 1] == 0x45) {
	LD	HL,(IX+-38)
	DEC	HL
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_40
;  277							starter = 1;
	LD	(IX+-25),1
;  278							sprintf(str, "Choose Charmander as your starter?");
	LD	BC,L__44
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  279						}
;  280					}
L_40:
;  281	
;  282					
;  283					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  284					if (text_AskQuestion2("Yes", "No", false) == 1) {
	LD	BC,0
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	LD	BC,L__46
	PUSH	BC
	CALL	_text_AskQuestion2
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_42
;  285						currentSave.party[0] = stats_NewCharacter((1 + (starter) * 3), 5);
	LD	B,3
	LD	DE,5
	PUSH	DE
	LD	C,(IX+-25)
	MLT	BC
	INC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-118
	CALL	_stats_NewCharacter
	POP	BC
	POP	BC
	POP	BC
	LD	DE,_currentSave+10
	LD	BC,34
	LDIR	
;  286						currentTileMap[tilePos - tilemap.width]-=3;
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-38)
	OR	A,A
	SBC	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	IY,HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-38)
	OR	A,A
	SBC	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(IY)
	SUB	A,3
	LD	(HL),A
;  287						currentSave.newGame = false;
	XOR	A,A
	LD	(_currentSave),A
;  288						currentSave.rivalPokemon = (starter + 1) % 3;
	LD	A,(IX+-25)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,3
	CALL	__irems
	LD	A,L
	LD	(_currentSave+1),A
;  289					}
L_42:
;  290					map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  291				}
;  292				else {
	JR	L_115
L_44:
;  293					text_Display("You already got a Pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  294				}
;  295			}
;  296			else if (nextTile == 0x46) {
	JR	L_115
L_101:
	LD	A,(_nextTile)
	CP	A,70
	JR	NZ,L_99
;  297				int partyIndex, moveIndex;
;  298				bool hasUser = false;
	LD	(IX+-44),0
;  299				int oldTile;
;  300				int tempTile;
;  301				int newTile = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  302				oldTile = tx + ty * OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	(IX+-24),HL
	LD	(IX+-72),HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-24)
	ADD	HL,BC
	LD	(IX+-12),HL
;  303				if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_47
;  304					oldTile = (tx + 1) + (ty)* OUTDOORWIDTH;
	LD	BC,(IX+-24)
	LD	(IX+-72),BC
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,(IX+-24)
	ADD	HL,BC
	LD	(IX+-12),HL
;  305					newTile = (tx + 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	LD	BC,(IX+-24)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	ADD	HL,BC
	LD	(IX+-6),HL
;  306				}
L_47:
;  307				if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_49
;  308					oldTile = (tx - 1) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	BC,(IX+-72)
	LD	L,A
	DEC	HL
	LD	DE,BC
	ADD	HL,DE
	LD	(IX+-12),HL
;  309					newTile = (tx - 2) + (ty)* OUTDOORWIDTH;
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	ADD	HL,BC
	LD	(IX+-6),HL
;  310				}
L_49:
;  311				if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_51
;  312					oldTile = (tx)+(ty + 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
;  313					newTile = (tx)+(ty + 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-6),HL
;  314				}
L_51:
;  315				if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_61
;  316					oldTile = (tx)+(ty - 1)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-12),HL
;  317					newTile = (tx)+(ty - 2)* OUTDOORWIDTH;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-6),HL
;  318				}
L_61:
;  319				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_60
L_58:
;  320					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-28),BC
	JR	L_57
L_55:
;  321						if (currentSave.party[partyIndex].moves[moveIndex] == 133) {
	LD	HL,(IX+-9)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-56),HL
	LD	IY,(IX+-56)
	LEA	HL,IY+1
	LD	BC,(IX+-28)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,133
	SBC	HL,BC
	JR	NZ,L_56
;  322							hasUser = true;
	LD	(IX+-44),1
;  323							sprintf(str, "%s used Strength", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-56)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__55
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  324							partyIndex = 6;
	LD	BC,6
	LD	(IX+-9),BC
;  325						}
;  326					}
L_56:
	LD	BC,(IX+-28)
	INC	BC
	LD	(IX+-28),BC
L_57:
	LD	BC,4
	LD	HL,(IX+-28)
	OR	A,A
	SBC	HL,BC
	JP	M,L_55
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  327				}
L_60:
	LD	BC,6
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_58
;  328				if (hasUser && currentTypeMap[newTile] == 0) {
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_65
	LD	BC,(IX+-6)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IX+-42),HL
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_65
;  329					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  330					tempTile = currentTileMap[oldTile];
	LD	BC,(IX+-12)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LD	(IX+-127),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-53),HL
;  331					currentTileMap[oldTile] = currentTileMap[newTile];
	LD	BC,(IX+-6)
	LD	HL,_currentTileMap
	ADD	HL,BC
	LD	(IX+-124),HL
	LD	A,(HL)
	LD	HL,(IX+-127)
	LD	(HL),A
;  332					currentTileMap[newTile] = tempTile;
	LD	A,(IX+-53)
	LD	HL,(IX+-124)
	LD	(HL),A
;  333					tempTile = currentTypeMap[oldTile];
	LD	BC,(IX+-12)
	LD	HL,_currentTypeMap
	ADD	HL,BC
	LD	(IX+-121),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-53),HL
;  334					currentTypeMap[oldTile] = currentTypeMap[newTile];
	LD	HL,(IX+-42)
	LD	A,(HL)
	LD	HL,(IX+-121)
	LD	(HL),A
;  335					currentTypeMap[newTile] = tempTile;
	LD	A,(IX+-53)
	LD	HL,(IX+-42)
	LD	(HL),A
;  336				}
;  337				else if (currentTypeMap[newTile] == 0) {
	JR	L_115
L_65:
	LD	BC,_currentTypeMap
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_115
;  338					text_Display("This boulder could be moved by a strong Pokemon", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__61
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  339				}
;  340			}
;  341			else if (nextTile == 0x47) {
	JR	L_115
L_99:
	LD	A,(_nextTile)
	CP	A,71
	JR	NZ,L_97
;  342				int partyIndex, moveIndex;
;  343				bool hasUser = false;
	LD	(IX+-35),0
;  344				for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-18),BC
	JR	L_75
L_73:
;  345					for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-34),BC
	JR	L_72
L_70:
;  346						if (currentSave.party[partyIndex].moves[moveIndex] == 26) {
	LD	HL,(IX+-18)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-62),HL
	LD	IY,(IX+-62)
	LEA	HL,IY+1
	LD	BC,(IX+-34)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JR	NZ,L_71
;  347							hasUser = true;
	LD	(IX+-35),1
;  348							sprintf(str, "%s used Cut", data_pokemon[currentSave.party[partyIndex].id].name);
	LD	IY,(IX+-62)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,L__64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  349							partyIndex = 6;
	LD	BC,6
	LD	(IX+-18),BC
;  350						}
;  351					}
L_71:
	LD	BC,(IX+-34)
	INC	BC
	LD	(IX+-34),BC
L_72:
	LD	BC,4
	LD	HL,(IX+-34)
	OR	A,A
	SBC	HL,BC
	JP	M,L_70
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  352				}
L_75:
	LD	BC,6
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_73
;  353				if (hasUser) {
	LD	A,(IX+-35)
	OR	A,A
	JR	Z,L_84
;  354					text_Display(str, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  355					if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_78
;  356						currentTypeMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	INC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  357						currentTileMap[(tx + 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  358					}
L_78:
;  359					if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_80
;  360						currentTypeMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	DEC	HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  361						currentTileMap[(tx - 1) + (ty)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  362					}
L_80:
;  363					if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_82
;  364						currentTypeMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	INC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  365						currentTileMap[(tx)+(ty + 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  366					}
L_82:
;  367					if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_115
;  368						currentTypeMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	A,48
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentTypeMap
	ADD	HL,DE
	LD	(HL),0
;  369						currentTileMap[(tx)+(ty - 1)* OUTDOORWIDTH] = 0;
	LD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	(HL),0
;  370					}
;  371				}
;  372				else {
	JR	L_115
L_84:
;  373					text_Display("This tree could be cut down", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  374				}
;  375			}
;  376			
;  377			else if (nextTile >= 0x50 && nextTile < 0x60) {
	JR	L_115
L_97:
	LD	A,(_nextTile)
	CP	A,80
	JR	C,L_95
	LD	A,(_nextTile)
	CP	A,96
	JR	NC,L_95
;  378				EnterDoor(nextTile - 80);
	LD	A,(_nextTile)
	SUB	A,80
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_EnterDoor
	POP	BC
;  379			}
;  380			else if (nextTile >= 0x60 && nextTile < 0x70) {
	JR	L_115
L_95:
	LD	A,(_nextTile)
	CP	A,96
	JR	C,L_93
	LD	A,(_nextTile)
	CP	A,112
	JR	NC,L_93
;  381				if (FightTrainer(nextTile - 96)) {
	LD	A,(_nextTile)
	SUB	A,96
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_115
;  382					return 1;
	LD	HL,1
	JR	L_212
;  383				}
;  384			}
;  385			else if (nextTile >= 0x70 && nextTile < 0x80) {
L_93:
	LD	A,(_nextTile)
	CP	A,112
	JR	C,L_91
	LD	A,(_nextTile)
	CP	A,128
	JR	NC,L_91
;  386				ReadText(nextTile - 0x70);
	LD	A,(_nextTile)
	SUB	A,112
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ReadText
	POP	BC
;  387			}
;  388			else {
	JR	L_115
L_91:
;  389				awaitSecond = false;
	LD	(IX+-43),0
;  390			}
L_115:
;  391			if (awaitSecond) {
	LD	A,(IX+-43)
	OR	A,A
	JR	NZ,L_112
	JR	L_206
;  392				while ((kb_Data[1] & kb_2nd))
L_113:
;  393				{
;  394					kb_Scan();
	CALL	_kb_Scan
;  395				}
L_112:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_113
;  396			}
;  397		}
L_206:
;  398		/* If moving */
;  399		if (moveState > 0) {
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_205
;  400			Wait(1);
	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;  401			moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  402			if (running) {
	LD	A,(_running)
	OR	A,A
	JR	Z,L_122
;  403				Wait(1);
	LD	BC,1
	PUSH	BC
	CALL	_Wait
	POP	BC
;  404				moveState--;
	LD	A,(_moveState)
	DEC	A
	LD	(_moveState),A
;  405			}
L_122:
;  406			if (moveDir == 1) {
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L_124
;  407				currentSave.playerX += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  408			}
L_124:
;  409			if (moveDir == 2) {
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L_126
;  410				currentSave.playerX -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+2)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  411			}
L_126:
;  412			if (moveDir == 3) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_128
;  413				currentSave.playerY += 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	ADD.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  414			}
L_128:
;  415			if (moveDir == 4) {
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_144
;  416				currentSave.playerY -= 2 * (1 + running);
	LD	A,(_running)
	LD	C,A
	LD	B,0
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(_currentSave+4)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  417			}
L_144:
;  418			if (currentSave.surfing) {
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	Z,L_143
;  419				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_130
;  420					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  421				}
;  422				else {
	JR	L_183
L_130:
;  423					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  424				}
;  425			}
;  426			else if (running){
	JR	L_183
L_143:
	LD	A,(_running)
	OR	A,A
	JR	Z,L_141
;  427				if (moveState > 3) {
	LD	A,3
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_132
;  428					playerState = 1 + currentRun;
	LD	A,(_currentRun)
	INC	A
	LD	(_playerState),A
;  429				}
;  430				else {
	JR	L_183
L_132:
;  431					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  432				}
;  433	
;  434			}
;  435			else {
	JR	L_183
L_141:
;  436				if (moveState > 5) {
	LD	A,5
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_139
;  437					playerState = 1;
	LD	A,1
	LD	(_playerState),A
;  438				}
;  439				else if (moveState > 3) {
	JR	L_183
L_139:
	LD	A,3
	CP	A,(HL)
	JR	NC,L_137
;  440					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  441				}
;  442				else if (moveState > 1) {
	JR	L_183
L_137:
	LD	A,1
	CP	A,(HL)
	JR	NC,L_135
;  443					playerState = 2;
	LD	A,2
	LD	(_playerState),A
;  444				}
;  445				else if (moveState > 0) {
	JR	L_183
L_135:
	XOR	A,A
	CP	A,(HL)
	JR	NC,L_183
;  446					playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  447				}
;  448			}
L_183:
;  449	
;  450			if (moveState == 0) {
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_207
;  451				currentRun = !currentRun;
	LD	A,(_currentRun)
	OR	A,A
	JR	NZ,L_146
	LD	BC,1
	LD	(IX+-78),BC
	JR	L_147
L_146:
	LD	BC,0
	LD	(IX+-78),BC
L_147:
	LD	A,(IX+-78)
	LD	(_currentRun),A
;  452				/* Arrive At Tile*/
;  453				tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  454				ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  455				nextTile = GetTypeMapData(tx, ty, tilemap.width);
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
;  456				if (nextTile >= 0x10 && nextTile < 0x20) {
	CP	A,16
	LD	(_nextTile),A
	JR	C,L_181
	LD	A,(_nextTile)
	CP	A,32
	JR	NC,L_181
;  457					/* Grass */
;  458					if ((rand() % 100) < battlechance) {
	CALL	_rand
	LD	BC,100
	CALL	__irems
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JP	P,L_207
;  459						uint8_t wildSpawn;
;  460						wildSpawn = rand() % 5;
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	(IX+-63),L
;  461						battle_SpawnWild(currentZoneData.spawnids[wildSpawn][nextTile -16], currentZoneData.spawnminlevels[wildSpawn][nextTile - 16], currentZoneData.spawnmaxlevels[wildSpawn][nextTile - 16]);
	LD	A,(IX+-63)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	A,(_nextTile)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-16
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-20),HL
	POP	IY
	LD	HL,DE
	LD	BC,_currentZoneData+160
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-17),HL
	LD	HL,(IY+-20)
	LD	BC,(IY+-17)
	POP	IY
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-59),DE
	POP	IY
	LD	DE,_currentZoneData+80
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-62),DE	; unspill
	LD	DE,(IY+-59)
	LD	(IY+-59),DE
	LD	DE,(IY+-62)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-59)
	LD	(IY+-17),HL
	LD	HL,(IY+-20)
	LD	(IY+-65),DE
	LD	(IY+-68),HL	; unspill
	LD	DE,(IY+-65)
	LD	HL,(IY+-17)
	LD	(IY+-65),DE
	LD	DE,(IY+-68)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-65)
	LD	(IY+-71),BC
	POP	IY
	LD	BC,_currentZoneData
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-74),BC	; unspill
	LD	BC,(IY+-71)
	LD	(IY+-17),HL
	LD	HL,(IY+-20)
	LD	(IY+-71),BC
	LD	(IY+-77),HL	; unspill
	LD	BC,(IY+-71)
	LD	HL,(IY+-17)
	POP	IY
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-71),BC
	LD	BC,(IY+-74)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-71)
	LD	(IY+-71),BC
	LD	BC,(IY+-77)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-71)
	POP	IY
	LD	B,0
	PUSH	BC
	LD	C,(HL)
	PUSH	BC
	CALL	_battle_SpawnWild
	POP	BC
	POP	BC
	POP	BC
;  462						return 1;
	LD	HL,1
	JR	L_212
;  463					}
;  464				}
;  465				else if (nextTile == 0x01) {
L_181:
	LD	A,(_nextTile)
	CP	A,1
	JR	NZ,L_179
;  466					ExitBuilding();
	CALL	_ExitBuilding
;  467				}
;  468				else if (nextTile == 0x02) {
	JR	L_207
L_179:
	LD	A,(_nextTile)
	CP	A,2
	JR	NZ,L_177
;  469					if (((currentSave.indoors && !currentSave.defeatedTrainersIndoors[currentSave.currentZone][15]) || (!currentSave.indoors && !currentSave.defeatedTrainers[currentSave.currentZone][15])) && currentZoneData.trainerdir[15] != 0) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_153
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_154
L_153:
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_207
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_207
L_154:
	LD	BC,_currentZoneData+576
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	A,(IY+15)
	OR	A,A
	JR	Z,L_207
;  470						if (currentZoneData.trainerx[15] == 255) {
	LD	HL,_currentZoneData+559
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_164
;  471							int walkState, xloc, yloc;
;  472	
;  473							xloc = (16 * (tx - (11 * ((currentZoneData.trainerdir[15] == 1) - (currentZoneData.trainerdir[15] == 2))))) - screenX - 8;
	LD	BC,(IX+-3)
	LD	(IX+-81),BC
	LD	IY,(IX+-3)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-2),BC
	LD	A,(_tx)
	UEXT	HL
	LD	IY,(IY+-2)
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-56),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,1
	SBC	HL,DE
	JR	NZ,L__110
	LD	B,1
	JR	L__111
L__110:
	LD	B,0
L__111:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-2)
	LD	L,B
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__113
	LD	B,1
	JR	L__114
L__113:
	LD	B,0
L__114:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	A,11
	CALL	__imul_b
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-53),HL
	LD	BC,(IY+-56)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-53)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+-8
	LD	(IX+-69),BC
;  474							yloc = (16 * (ty - (7 * ((currentZoneData.trainerdir[15] == 3) - (currentZoneData.trainerdir[15] == 4))))) - screenY + 1;
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LEA	IY,IX+-128
	LD	IY,(IY+-2)
	LD	A,(IY)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-50),HL
	POP	IY
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,3
	SBC	HL,DE
	JR	NZ,L__116
	LD	B,1
	JR	L__117
L__116:
	LD	B,0
L__117:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-2)
	LD	L,B
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__119
	LD	B,1
	JR	L__120
L__119:
	LD	B,0
L__120:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	A,7
	CALL	__imul_b
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-47),HL
	LD	BC,(IY+-50)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-47)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	INC	HL
	LD	(IX+-47),HL
;  475							//xloc = (16 * tx) - screenX;
;  476							//yloc = (16 * ty) - screenY;
;  477	
;  478							if (currentZoneData.trainerdir[15] <= 2) {
	LEA	IY,IX+-128
	LD	HL,(IY+-2)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	JP	M,L_156
;  479								walkState = 10 * 16;
	LD	BC,160
	LD	(IX+-21),BC
;  480							}
;  481							else {
	JR	L_158
L_156:
;  482								walkState = 6 * 16;
	LD	BC,96
	LD	(IX+-21),BC
;  483							}
;  484							while (walkState > 0)
	JR	L_158
L_159:
;  485							{
;  486								map_Draw();
	CALL	_map_Draw
;  487								xloc += ((currentZoneData.trainerdir[15] == 1) - (currentZoneData.trainerdir[15] == 2));
	LD	BC,(IX+-3)
	LD	(IX+-81),BC
	LD	IY,(IX+-3)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-5),BC
	LD	HL,(IY+-5)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__123
	LD	B,1
	JR	L__124
L__123:
	LD	B,0
L__124:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-5)
	LD	L,B
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__126
	LD	B,1
	JR	L__127
L__126:
	LD	B,0
L__127:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-69)
	ADD	HL,BC
	LD	(IX+-69),HL
;  488								yloc += ((currentZoneData.trainerdir[15] == 3) - (currentZoneData.trainerdir[15] == 4));
	LEA	IY,IX+-128
	LD	HL,(IY+-5)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__129
	LD	B,1
	JR	L__130
L__129:
	LD	B,0
L__130:
	LD	A,B
	SEXT	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-5)
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-44),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__132
	LD	B,1
	JR	L__133
L__132:
	LD	B,0
L__133:
;  489	
;  490								gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[(currentZoneData.trainerskin[15] * 12) + ((currentZoneData.trainerdir[15] - 1) * 3) + ((walkState % 16) / 4 == 1) + 2 * ((walkState % 16) / 4 == 3)], xloc, yloc);
	LD	DE,1
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-41),HL
	LD	BC,(IY+-44)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-41)
	POP	IY
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-47)
	ADD	HL,BC
	LD	(IX+-47),HL
	LD	HL,(IX+-21)
	LD	BC,(IX+-47)
	PUSH	BC
	LD	BC,(IX+-69)
	PUSH	BC
	LD	BC,16
	CALL	__irems
	LD	BC,4
	CALL	__idivs
	LD	BC,HL
	LD	HL,_currentZoneData+607
	LD	IY,(IX+-3)
	LEA	IY,IY+15
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-23),BC
	LD	(IY+-26),HL	; unspill
	LD	BC,(IY+-23)
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	DEC	HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-29),BC
	LD	(IY+-32),HL	; unspill
	LD	BC,(IY+-29)
	POP	IY
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-29),BC
	LD	BC,(IY+-32)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-29)
	LD	(IY+-23),BC
	LD	BC,(IY+-26)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-23)
	LD	(IY+-35),BC
	LD	(IY+-38),HL	; unspill
	LD	BC,(IY+-35)
	POP	IY
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L__135
	LD	D,1
	JR	L__136
L__135:
	LD	D,0
L__136:
	LD	A,D
	SEXT	HL
	LD	L,D
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-35),BC
	LD	BC,(IY+-38)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-35)
	POP	IY
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__138
	LD	B,1
	JR	L__139
L__138:
	LD	B,0
L__139:
	LD	A,B
	SEXT	HL
	LD	L,B
	ADD	HL,HL
	ADD	HL,DE
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  491	
;  492								gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  493	
;  494								walkState--;
	LD	BC,(IX+-21)
	DEC	BC
	LD	(IX+-21),BC
;  495							}
L_158:
	LD	BC,(IX+-21)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_159
;  496							currentZoneData.trainerx[15] = tx + ((0-currentZoneData.trainerdir[15] == 1) + (currentZoneData.trainerdir[15] == 2));
	LD	BC,IX
	LD	DE,(IX+-81)
	LEA	IY,IX+-128
	LD	(IY+-14),DE
	LD	HL,-142
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-11),BC
	LD	HL,(IY+-11)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__ineg
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__142
	LD	C,1
	JR	L__143
L__142:
	LD	C,0
L__143:
	LEA	IY,IX+-128
	LD	HL,(IY+-11)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	DE,2
	SBC	HL,DE
	JR	NZ,L__145
	LD	B,1
	JR	L__146
L__145:
	LD	B,0
L__146:
	LD	A,C
	ADD	A,B
	LD	IY,_currentZoneData+544
	LD	BC,(_tx)
	ADD	A,C
;  497							currentZoneData.trainery[15] = ty + ((0-currentZoneData.trainerdir[15] == 3) + (currentZoneData.trainerdir[15] == 4));
	LD	HL,-142
	LD	BC,IX
	ADD	HL,BC
	LD	(IY+15),A
	LD	IY,(HL)
	LEA	BC,IY+15
	LEA	IY,IX+-128
	LD	(IY+-8),BC
	LD	HL,(IY+-8)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__ineg
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__148
	LD	D,1
	JR	L__149
L__148:
	LD	D,0
L__149:
	LEA	IY,IX+-128
	LD	HL,(IY+-8)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__151
	LD	E,1
	JR	L__152
L__151:
	LD	E,0
L__152:
	LD	BC,(_ty)
	LD	A,D
	ADD	A,E
	ADD	A,C
	LD	HL,_currentZoneData+575
	LD	(HL),A
;  498	
;  499	
;  500						}
L_164:
;  501						if (FightTrainer(15)) {
	LD	BC,15
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_207
;  502							currentZoneData.trainerx[15] = 255;
	LD	HL,_currentZoneData+559
	LD	A,255
	LD	(HL),A
;  503							currentZoneData.trainery[15] = 255;
	LD	HL,_currentZoneData+575
	LD	(HL),A
;  504							return 1;
	LD	HL,1
	JR	L_212
;  505						}
;  506					}
;  507				}
;  508				else if (currentSave.surfing && !(nextTile >= 0x1A && nextTile < 0x20)) {
L_177:
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	Z,L_175
	LD	A,(_nextTile)
	CP	A,26
	JR	C,L_174
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_175
L_174:
;  509					currentSave.surfing = false;
	XOR	A,A
	LD	(_currentSave+1237),A
;  510				}
;  511				else if (nextTile >= 0x20 && nextTile < 0x30) {
	JR	L_207
L_175:
	LD	A,(_nextTile)
	CP	A,32
	JR	C,L_173
	LD	A,(_nextTile)
	CP	A,48
	JR	NC,L_173
;  512					ExitZone(nextTile - 32);
	LD	A,(_nextTile)
	SUB	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ExitZone
	POP	BC
;  513				}
;  514				else if (nextTile >= 0x30 && nextTile < 0x40) {
	JR	L_207
L_173:
	LD	A,(_nextTile)
	CP	A,48
	JR	C,L_207
	LD	A,(_nextTile)
	CP	A,64
	JR	NC,L_207
;  515					if (FightTrainer(nextTile - 48)) {
	LD	A,(_nextTile)
	SUB	A,48
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_207
;  516						return 1;
	LD	HL,1
	JR	L_212
;  517					}
;  518				}
;  519	
;  520			}
;  521		}
;  522	
;  523		/* If not moving */
;  524		else {
L_205:
;  525			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_190
;  526				moveDir = 1;
	LD	A,1
	LD	(_moveDir),A
;  527			}
;  528			else if (kb_Data[7] & kb_Left) {
	JR	L_196
L_190:
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_188
;  529				moveDir = 2;
	LD	A,2
	LD	(_moveDir),A
;  530			}
;  531			else if (kb_Data[7] & kb_Down) {
	JR	L_196
L_188:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_186
;  532				moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
;  533	
;  534			}
;  535			else if (kb_Data[7] & kb_Up) {
	JR	L_196
L_186:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_196
;  536				moveDir = 4;
	LD	A,4
	LD	(_moveDir),A
;  537			}
L_196:
;  538			
;  539			if (kb_Data[7]) {
	LD	A,(16056350)
	OR	A,A
	JR	Z,L_203
;  540				if (GetNextTile(tx, ty, tilemap.width) < 64 && !(!currentSave.surfing && GetNextTile(tx, ty, tilemap.width) >= 0x1A && GetNextTile(tx, ty, tilemap.width) < 0x20)) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_203
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	NZ,L_194
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,26
	SBC	HL,BC
	JP	M,L_194
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(_ty)
	LD	C,A
	LD	A,(_tx)
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_GetNextTile
	POP	BC
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_203
L_194:
;  541					moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  542				}
;  543			}
L_203:
;  544			running = ((kb_Data[2] & kb_Alpha) && moveState > 0 && !currentSave.surfing);
	LD	A,(16056340)
	AND	A,128
	JR	Z,L_200
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_200
	LD	A,(_currentSave+1237)
	OR	A,A
	JR	NZ,L_200
	LD	BC,1
	LD	(IX+-75),BC
	JR	L_201
L_200:
	LD	BC,0
	LD	(IX+-75),BC
L_201:
	LD	A,(IX+-75)
	LD	(_running),A
;  545		}
L_207:
;  546	
;  547		map_Draw();
	CALL	_map_Draw
;  548		playerState = 0;
	XOR	A,A
	LD	(_playerState),A
;  549	
;  550		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  551	
;  552		if (npcToFight != 16) {
	LD	BC,16
	LD	HL,(_npcToFight)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_211
;  553			if (FightTrainer(npcToFight)) {
	LD	A,(_npcToFight)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_FightTrainer
	POP	BC
	OR	A,A
	JR	Z,L_209
;  554				npcToFight = 16;
	LD	BC,16
	LD	(_npcToFight),BC
;  555				return 1;
	LD	HL,1
	JR	L_212
;  556			}
L_209:
;  557			npcToFight = 16;
	LD	BC,16
	LD	(_npcToFight),BC
;  558		}
L_211:
	OR	A,A
;  559	
;  560		return 0;
	SBC	HL,HL
;  561	}
L_212:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_Loop ***************************
;Name                         Addr/Register   Size   Type
;_npcToFight                         STATIC      3   variable
;_ExitZone                           IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_PKMNSD7                            IMPORT    132   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_map_Draw                           IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_ExitBuilding                       IMPORT  -----   function
;_currentZoneData                    STATIC    672   variable
;_battle_SpawnWild                   IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_GetTypeMapData                     IMPORT  -----   function
;_currentRun                         STATIC      1   variable
;_playerState                        STATIC      1   variable
;_running                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_ReadText                           IMPORT  -----   function
;_FightTrainer                       IMPORT  -----   function
;_currentTileMap                     STATIC   1920   variable
;_stats_NewCharacter                 IMPORT  -----   function
;_text_AskQuestion2                  IMPORT  -----   function
;_currentTypeMap                     STATIC   1920   variable
;_EnterDoor                          IMPORT  -----   function
;_OpenBox                            IMPORT  -----   function
;_menu_ItemShop                      IMPORT  -----   function
;_shop_compressed                    IMPORT     98   variable
;_HealParty                          IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;_text_Display                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_data_pokemon                       IMPORT  unknown variable
;_sprintf                            IMPORT  -----   function
;_currentSave                        IMPORT   2604   variable
;_nextTile                           STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_GetNextTile                        IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_free                               IMPORT  -----   function
;_menu_Menu                          IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_PKMNSD4                            IMPORT     21   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_map_End                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;menuReturn                           IX-84      3   variable
;G_11                                 IX-81      3   variable
;temp148                              IX-78      3   variable
;temp202                              IX-75      3   variable
;G_3                                  IX-72      3   variable
;xloc                                 IX-69      3   variable
;shopSpriteOriginal                   IX-66      3   variable
;wildSpawn                            IX-63      1   variable
;G_7                                  IX-62      3   variable
;pauseMenuSprite                      IX-59      3   variable
;G_4                                  IX-56      3   variable
;tempTile                             IX-53      3   variable
;G_0                                  IX-50      3   variable
;yloc                                 IX-47      3   variable
;hasUser                              IX-44      1   variable
;awaitSecond                          IX-43      1   variable
;G_6                                  IX-42      3   variable
;hasUser                              IX-39      1   variable
;tilePos                              IX-38      3   variable
;hasUser                              IX-35      1   variable
;moveIndex                            IX-34      3   variable
;moveIndex                            IX-31      3   variable
;moveIndex                            IX-28      3   variable
;starter                              IX-25      1   variable
;G_2                                  IX-24      3   variable
;walkState                            IX-21      3   variable
;partyIndex                           IX-18      3   variable
;partyIndex                           IX-15      3   variable
;oldTile                              IX-12      3   variable
;partyIndex                            IX-9      3   variable
;newTile                               IX-6      3   variable
;G_9                                   IX-3      3   variable


; Stack Frame Size: 229 (bytes)
;       Spill Code: -40 (instruction)


	SEGMENT STRSECT
L__12:
	DB	"%s used Surf"
	DB	0
L__20:
	DB	"A Pokemon with Surf could bring you across this water"
	DB	0
L__40:
	DB	"Choose Squirtle as your starter?"
	DB	0
L__42:
	DB	"Choose Bulbasaur as your starter?"
	DB	0
L__44:
	DB	"Choose Charmander as your starter?"
	DB	0
L__45:
	DB	"No"
	DB	0
L__46:
	DB	"Yes"
	DB	0
L__48:
	DB	"You already got a Pokemon"
	DB	0
L__55:
	DB	"%s used Strength"
	DB	0
L__61:
	DB	"This boulder could be moved by a strong Pokemon"
	DB	0
L__64:
	DB	"%s used Cut"
	DB	0
L__72:
	DB	"This tree could be cut down"
	DB	0
	SEGMENT CODE
;  562	void map_End(void) {
_map_End:
	LD	HL,-3
	CALL	__frameset
;  563		int tileIndex = 0;
;  564		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_216
L_214:
;  565			free(mapTiles[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  566		}
L_216:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_214
;  567		for (tileIndex = 0; tileIndex < 3; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_220
L_218:
;  568			free(pokeballSprites[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  569		}
L_220:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_218
;  570		
;  571	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_End ***************************
;Name                         Addr/Register   Size   Type
;_pokeballSprites                    STATIC      9   variable
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -40 (instruction)


;  572	
;  573	void map_Draw(void) {
_map_Draw:
;  574		/* Move Screen and Redraw */
;  575		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_224
;  576			screenX = 0;
;  577			screenY = 0;
;  578	
;  579			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	LD	BC,0
	LD	(_screenX),BC
	XOR	A,A
	LD	(_screenX+3),A
	LD	(_screenY),BC
	XOR	A,A
	LD	(_screenY+3),A
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  580	
;  581			DrawPlayer();
	CALL	_DrawPlayer
;  582		}
;  583		else {
	JR	L_225
L_224:
;  584			/* Animate Water Every 20 Frames */
;  585			/*if (data_tileSets[currentSave.currentZone] == 0) {
;  586				if (currentWater == 20) {
;  587					memcpy(mapTiles[29], animatedwater1, 258);
;  588				}
;  589				if (currentWater == 0) {
;  590					memcpy(mapTiles[29], animatedwater2, 258);
;  591				}
;  592				currentWater++;
;  593				if (currentWater == 40) {
;  594					currentWater = 0;
;  595				}
;  596			}*/
;  597	
;  598			screenX = Clamp(currentSave.playerX - 160, 0, MAX_X);
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777056
	LD	A,255
	CALL	__ladd
	LD	BC,432
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenX),HL
	LD	A,E
	LD	(_screenX+3),A
;  599			screenY = Clamp(currentSave.playerY - 112, 0, MAX_Y);
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777104
	LD	A,255
	CALL	__ladd
	LD	BC,400
	PUSH	BC
	LD	C,E
	LD	DE,0
	PUSH	DE
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_Clamp
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(_screenY),HL
	LD	A,E
	LD	(_screenY+3),A
;  600	
;  601			gfx_Tilemap(&tilemap, screenX, screenY);
	LD	BC,(_screenY)
	PUSH	BC
	LD	BC,(_screenX)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  602	
;  603			DrawPlayer();
	CALL	_DrawPlayer
;  604			
;  605	
;  606		}
L_225:
;  607		ProcessNpcs();
	CALL	_ProcessNpcs
;  608		map_DrawInformationBar();
	CALL	_map_DrawInformationBar
;  609	}
	RET	


;**************************** _map_Draw ***************************
;Name                         Addr/Register   Size   Type
;_map_DrawInformationBar             IMPORT  -----   function
;_ProcessNpcs                        IMPORT  -----   function
;_Clamp                              IMPORT  -----   function
;_DrawPlayer                         IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_currentSave                        IMPORT   2604   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -40 (instruction)


;  610	void DrawPlayer(void) {
_DrawPlayer:
	LD	HL,-15
	CALL	__frameset
;  611		GrassAnimation(0);
	LD	BC,0
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  612	
;  613	
;  614		gfx_TransparentSprite_NoClip((gfx_sprite_t*)PKMNSD8[(24 * currentSave.surfing) + (12 * running) + (moveDir - 1) * (3 - currentSave.surfing) + playerState], currentSave.playerX - screenX - 8, currentSave.playerY - screenY + 4);
	LD	A,(_currentSave+4)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,4
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	C,A
	LD	A,(_currentSave+1237)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	UEXT	HL
	LD	L,A
	LD	A,24
	CALL	__imul_b
	LD	BC,HL
	LD	A,(_running)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_currentSave+1237)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	LD	(IX+-15),HL
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	HL,(IX+-15)
	CALL	__imuls
	ADD	HL,DE
	LD	BC,HL
	LD	A,(_playerState)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD8
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  615	
;  616		/* Draw overlay if player is in grass */
;  617		if (currentTileMap[tx + (moveDir == 1) - (moveDir == 2) + (ty + (moveDir == 3) - (moveDir == 4)) * tilemap.width] == 2 && !currentSave.indoors) {
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	A,(_moveDir)
	CP	A,3
	LD	(IX+-12),HL
	JR	NZ,L__183
	LD	B,1
	JR	L__184
L__183:
	LD	B,0
L__184:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__186
	LD	B,1
	JR	L__187
L__186:
	LD	B,0
L__187:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-12)
	CALL	__imuls
	LD	(IX+-9),HL	; spill
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__189
	LD	B,1
	JR	L__190
L__189:
	LD	B,0
L__190:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__192
	LD	B,1
	JR	L__193
L__192:
	LD	B,0
L__193:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	DE,(IX+-9)	; unspill
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_245
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_245
;  618			/* Always draw grass overlay if moving sideways*/
;  619			if (moveDir <= 2 && moveState > 0) {
	LD	A,2
	LD	HL,_moveDir
	CP	A,(HL)
	JR	C,L_240
	XOR	A,A
	LD	HL,_moveState
	CP	A,(HL)
	JR	NC,L_240
;  620				gfx_TransparentSprite_NoClip(grassoverlay1, (tx + (moveDir == 1) - (moveDir == 2)) * 16 - screenX - 8, (ty + (moveDir == 3) - (moveDir == 4)) * 16 - screenY + 18);
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__199
	LD	A,1
	JR	L__200
L__199:
	XOR	A,A
L__200:
	LD	BC,(_ty)
	ADD	A,C
	LD	C,A
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__202
	LD	B,1
	JR	L__203
L__202:
	LD	B,0
L__203:
	LD	A,C
	SUB	A,B
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_moveDir)
	CP	A,1
	LD	B,0
	PUSH	BC
	JR	NZ,L__205
	LD	B,1
	JR	L__206
L__205:
L__206:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__208
	LD	B,1
	JR	L__209
L__208:
	LD	B,0
L__209:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	BC,IY+8
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  621			}
L_240:
;  622			if (moveState == 1 || running && moveState == 2) {
	LD	A,(_moveState)
	CP	A,1
	JR	Z,L_239
	LD	A,(_running)
	OR	A,A
	JR	Z,L_245
	LD	A,(_moveState)
	CP	A,2
	JR	NZ,L_245
L_239:
;  623				if (grassAnimNext) {
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	Z,L_233
;  624					grassAnimState1 = 10;
	LD	BC,10
	LD	(_grassAnimState1),BC
;  625					grassAnimX1 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__215
	LD	B,1
	JR	L__216
L__215:
	LD	B,0
L__216:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__218
	LD	B,1
	JR	L__219
L__218:
	LD	B,0
L__219:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX1),HL
;  626					grassAnimY1 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__221
	LD	B,1
	JR	L__222
L__221:
	LD	B,0
L__222:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__224
	LD	B,1
	JR	L__225
L__224:
	LD	B,0
L__225:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY1),HL
;  627				}
;  628				else {
	JR	L_238
L_233:
;  629					grassAnimState2 = 10;
	LD	BC,10
	LD	(_grassAnimState2),BC
;  630					grassAnimX2 = (tx + (moveDir == 1) - (moveDir == 2)) * 16;
	LD	A,(_moveDir)
	CP	A,1
	JR	NZ,L__227
	LD	B,1
	JR	L__228
L__227:
	LD	B,0
L__228:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,2
	JR	NZ,L__230
	LD	B,1
	JR	L__231
L__230:
	LD	B,0
L__231:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimX2),HL
;  631					grassAnimY2 = (ty + (moveDir == 3) - (moveDir == 4)) * 16;
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L__233
	LD	B,1
	JR	L__234
L__233:
	LD	B,0
L__234:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	DE,HL
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L__236
	LD	B,1
	JR	L__237
L__236:
	LD	B,0
L__237:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(_grassAnimY2),HL
;  632				}
L_238:
;  633				grassAnimNext = !grassAnimNext;
	LD	A,(_grassAnimNext)
	OR	A,A
	JR	NZ,L_235
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_236
L_235:
	LD	BC,0
	LD	(IX+-3),BC
L_236:
	LD	A,(IX+-3)
	LD	(_grassAnimNext),A
;  634			}
;  635		}
L_245:
;  636		if (!(moveDir == 3 && moveState != 0) && currentTileMap[tx + ty * tilemap.width] == 2) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_243
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_246
L_243:
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_246
;  637			gfx_TransparentSprite_NoClip(grassoverlay1, tx * 16 - screenX - 8, ty * 16 - screenY + 18);
	LD	A,(_ty)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,18
	LD	C,A
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(_screenX)
	LEA	DE,IY+8
	OR	A,A
	LD	B,0
	PUSH	BC
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  638		}
L_246:
;  639		GrassAnimation(1);
	LD	BC,1
	PUSH	BC
	CALL	_GrassAnimation
	POP	BC
;  640	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawPlayer ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimY2                        STATIC      3   variable
;_grassAnimX2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassAnimY1                        STATIC      3   variable
;_grassAnimX1                        STATIC      3   variable
;_grassAnimState1                    STATIC      3   variable
;_grassAnimNext                      STATIC      1   variable
;_grassoverlay1_data                 IMPORT     98   variable
;_moveState                          STATIC      1   variable
;_tx                                 STATIC      1   variable
;_ty                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_currentTileMap                     STATIC   1920   variable
;_playerState                        STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_running                            STATIC      1   variable
;_PKMNSD8                            IMPORT     96   variable
;_screenX                            STATIC      4   variable
;_screenY                            STATIC      4   variable
;_currentSave                        IMPORT   2604   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_GrassAnimation                     IMPORT  -----   function
;temp237                               IX-3      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: -40 (instruction)


;  641	void GrassAnimation(bool part) {
_GrassAnimation:
	LD	HL,-6
	CALL	__frameset
;  642		if (grassAnimState1 > 0) {
	LD	BC,(_grassAnimState1)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_278
;  643			if ((moveDir == 3 && moveState != 0 && ty == grassAnimY1 / 16) || (moveDir == 4 && (moveState == 1 || moveState == 2)) != part) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_256
	LD	A,(_moveState)
	OR	A,A
	JR	Z,L_256
	LD	HL,(_grassAnimY1)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_259
L_256:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_253
	LD	A,(_moveState)
	CP	A,1
	JR	Z,L_252
	LD	A,(_moveState)
	CP	A,2
	JR	NZ,L_253
L_252:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_254
L_253:
	LD	BC,0
	LD	(IX+-3),BC
L_254:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	JR	Z,L_261
L_259:
;  644				if (grassAnimState1 > 5) {
	LD	BC,(_grassAnimState1)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_258
;  645					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 13);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  646				}
;  647				else {
	JR	L_261
L_258:
;  648					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX1 - screenX - 8, grassAnimY1 - screenY + 14);
	LD	A,(_grassAnimY1)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX1)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  649				}
;  650			}
L_261:
;  651			grassAnimState1--;
	LD	BC,(_grassAnimState1)
	DEC	BC
	LD	(_grassAnimState1),BC
;  652		}
L_278:
;  653		if (grassAnimState2 > 0) {
	LD	BC,(_grassAnimState2)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_279
;  654			if ((moveDir == 3 && moveState != 0 && ty == grassAnimY2 / 16) || (moveDir == 4 && (moveState == 1 || moveState == 2)) != part) {
	LD	A,(_moveDir)
	CP	A,3
	JR	NZ,L_271
	LD	A,(_moveState)
	OR	A,A
	JR	Z,L_271
	LD	HL,(_grassAnimY2)
	LD	BC,16
	CALL	__idivs
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_274
L_271:
	LD	A,(_moveDir)
	CP	A,4
	JR	NZ,L_268
	LD	A,(_moveState)
	CP	A,1
	JR	Z,L_267
	LD	A,(_moveState)
	CP	A,2
	JR	NZ,L_268
L_267:
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_269
L_268:
	LD	BC,0
	LD	(IX+-6),BC
L_269:
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-6)
	SBC	HL,BC
	JR	Z,L_276
L_274:
;  655				if (grassAnimState2 > 5) {
	LD	BC,(_grassAnimState2)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_273
;  656					gfx_TransparentSprite_NoClip(grassoverlay3, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 13);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,13
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  657				}
;  658				else {
	JR	L_276
L_273:
;  659					gfx_TransparentSprite_NoClip(grassoverlay2, grassAnimX2 - screenX - 8, grassAnimY2 - screenY + 14);
	LD	A,(_grassAnimY2)
	LD	B,A
	LD	A,(_screenY)
	LD	C,A
	LD	A,B
	SUB	A,C
	ADD	A,14
	LD	C,A
	LD	IY,(_screenX)
	LEA	DE,IY+8
	LD	B,0
	PUSH	BC
	OR	A,A
	LD	HL,(_grassAnimX2)
	SBC	HL,DE
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  660				}
;  661			}
L_276:
;  662			grassAnimState2--;
	LD	BC,(_grassAnimState2)
	DEC	BC
	LD	(_grassAnimState2),BC
;  663		}
;  664	}
L_279:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GrassAnimation ***************************
;Name                         Addr/Register   Size   Type
;_grassAnimX2                        STATIC      3   variable
;_grassAnimY2                        STATIC      3   variable
;_grassAnimState2                    STATIC      3   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_screenX                            STATIC      4   variable
;_grassAnimX1                        STATIC      3   variable
;_screenY                            STATIC      4   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_grassAnimY1                        STATIC      3   variable
;_moveState                          STATIC      1   variable
;_moveDir                            STATIC      1   variable
;_grassAnimState1                    STATIC      3   variable
;temp270                               IX-6      3   variable
;temp255                               IX-3      3   variable
;part                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -40 (instruction)


;  665	
;  666	
;  667	void HealParty(void) {
_HealParty:
	LD	HL,-45
	CALL	__frameset
;  668		int pokemonIndex, moveIndex;
;  669		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_287
L_285:
;  670			currentSave.party[pokemonIndex].currenthealth = stats_CalculateStats(currentSave.party[pokemonIndex]).health;
	LD	BC,_currentSave+10
	LD	(IX+-6),BC
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-39),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-33
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	(IX+-45),HL	; spill
	ADD	IY,SP
	LD	SP,IY
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-45)	; unspill
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
;  671			currentSave.party[pokemonIndex].currentstatus = 0;
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+15),0
;  672			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-15),HL
	JR	L_284
L_282:
;  673				currentSave.party[pokemonIndex].pp[moveIndex] = data_moves[currentSave.party[pokemonIndex].moves[moveIndex]].uses;
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	IY,(IX+-36)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  674			}
L_284:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_282
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  675		}
L_287:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_285
;  676		text_Display("Your currentSave.party has been healed", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__264
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  677		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  678	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HealParty ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_text_Display                       IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_currentSave                        IMPORT   2604   variable
;O_33                                 IX-21      3   variable
;O_32                                 IX-18      3   variable
;O_34                                 IX-15      3   variable
;G_13                                 IX-12      3   variable
;moveIndex                             IX-9      3   variable
;G_12                                  IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 51 (bytes)
;       Spill Code: -41 (instruction)


	SEGMENT STRSECT
L__264:
	DB	"Your currentSave.party has been healed"
	DB	0
	SEGMENT CODE
;  679	void OpenBox(void) {
_OpenBox:
;  680		map_End();
	CALL	_map_End
;  681		
;  682		menu_Box();
	CALL	_menu_Box
;  683	
;  684		map_SetupGfx();
	CALL	_map_SetupGfx
;  685		map_LoadPokeballs();
	CALL	_map_LoadPokeballs
;  686	}
	RET	


;**************************** _OpenBox ***************************
;Name                         Addr/Register   Size   Type
;_map_LoadPokeballs                  IMPORT  -----   function
;_map_SetupGfx                       IMPORT  -----   function
;_menu_Box                           IMPORT  -----   function
;_map_End                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -41 (instruction)


;  687	void ReadText(uint8_t index) {
_ReadText:
	CALL	__frameset0
;  688		LoadText(currentZoneData.textIds[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+336
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  689		text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  690	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ReadText ***************************
;Name                         Addr/Register   Size   Type
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_currentZoneData                    STATIC    672   variable
;_LoadText                           IMPORT  -----   function
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -41 (instruction)


;  691	void EnterDoor(uint8_t index) {
_EnterDoor:
	LD	HL,-3
	CALL	__frameset
;  692		int tileIndex;
;  693		currentSave.lastPlayerX = currentSave.playerX;
	LD	BC,(_currentSave+2)
	LD	HL,_currentSave+6
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  694		currentSave.lastPlayerY = currentSave.playerY;
	LD	BC,(_currentSave+4)
	LD	HL,_currentSave+8
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  695		currentSave.indoors = true;
	LD	A,1
	LD	(_currentSave+1236),A
;  696		currentSave.currentBuilding = currentZoneData.doorzones[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+288
	ADD	HL,BC
	LD	A,(HL)
	LD	(_currentSave+1238),A
;  697	
;  698		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_295
L_293:
;  699			zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_indoortileset_tiles_compressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  700		}
L_295:
	LD	BC,128
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_293
;  701		tilemap.width = 21;
	LD	A,21
	LD	(_tilemap+13),A
;  702		tilemap.height = 15;
	LD	A,15
	LD	(_tilemap+12),A
;  703		currentSave.playerX = currentZoneData.doorx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+304
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  704		currentSave.playerY = currentZoneData.doory[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+320
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  705		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  706		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  707		LoadMap();
	CALL	_LoadMap
;  708	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _EnterDoor ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_mapTiles                           STATIC    384   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_currentZoneData                    STATIC    672   variable
;_currentSave                        IMPORT   2604   variable
;tileIndex                             IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -41 (instruction)


;  709	void ExitBuilding(void) {
_ExitBuilding:
;  710		int tileIndex;
;  711		currentSave.playerX = currentSave.lastPlayerX;
	LD	BC,(_currentSave+6)
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  712		currentSave.playerY = currentSave.lastPlayerY;
	LD	BC,(_currentSave+8)
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  713		currentSave.indoors = false;
	XOR	A,A
	LD	(_currentSave+1236),A
;  714		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
;  715		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
;  716		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  717		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
;  718		LoadTileset(true);
	LD	DE,1
	PUSH	DE
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
	CALL	_LoadTileset
	POP	BC
;  719		LoadMap();
	CALL	_LoadMap
;  720	}
	RET	


;**************************** _ExitBuilding ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_currentSave                        IMPORT   2604   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -41 (instruction)


;  721	void ExitZone(uint8_t index) {
_ExitZone:
	CALL	__frameset0
;  722		currentSave.playerX = currentZoneData.exitx[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+256
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  723		currentSave.playerY = currentZoneData.exity[index] * 16;
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+272
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,_currentSave+4
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  724		currentSave.currentZone = currentZoneData.exitzone[index];
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+240
	ADD	HL,BC
	LD	C,(HL)
	LD	HL,_currentSave+1234
	LD	(HL),C
	INC	HL
	LD	(HL),0
;  725		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
;  726		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
;  727		LoadTileset(true);
	LD	BC,1
	PUSH	BC
	CALL	_LoadTileset
	POP	BC
;  728		LoadMap();
	CALL	_LoadMap
;  729	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ExitZone ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_LoadTileset                        IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_currentSave                        IMPORT   2604   variable
;_currentZoneData                    STATIC    672   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -41 (instruction)


;  730	bool FightTrainer(uint8_t index) {
_FightTrainer:
	LD	HL,-9
	CALL	__frameset
;  731		if (currentZoneData.trainertype[index] <=1) {
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+608
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,1
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_325
;  732			currentTrainer = index;
	LD	A,(IX+6)
	LD	(_currentTrainer),A
;  733			if (currentSave.indoors && !currentSave.defeatedTrainersIndoors[currentSave.currentBuilding][currentTrainer]) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_304
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_304
;  734				LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  735				text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  736				battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+448
	PUSH	BC
	LD	BC,_currentZoneData+352
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  737				return true;
	LD	A,1
	JR	L_327
;  738			}
;  739			else if (!currentSave.indoors && !currentSave.defeatedTrainers[currentSave.currentZone][currentTrainer]) {
L_304:
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_326
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_326
;  740				LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  741				text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  742				battle_SpawnTrainer(currentZoneData.trainerspawnids, currentZoneData.trainerspawnlevels, index);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	BC,_currentZoneData+448
	PUSH	BC
	LD	BC,_currentZoneData+352
	PUSH	BC
	CALL	_battle_SpawnTrainer
	POP	BC
	POP	BC
	POP	BC
;  743				return true;
	LD	A,1
	JR	L_327
;  744			}
;  745			
;  746		}
;  747		else if (currentZoneData.trainertype[index] <= 3) {
L_325:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	JP	M,L_323
;  748			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  749			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  750		}
;  751		else if (currentZoneData.trainertype[index] == 4 && moveState == 0) {
	JR	L_326
L_323:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_321
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_321
;  752			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  753			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  754			moveDir = moveDir + 1 - 2 * !(moveDir % 2);
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_307
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_308
L_307:
	LD	BC,0
	LD	(IX+-6),BC
L_308:
	LD	A,(_moveDir)
	LD	B,A
	INC	B
	LD	A,(IX+-6)
	ADD	A,A
	LD	C,A
	LD	A,B
	SUB	A,C
	LD	(_moveDir),A
;  755			moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  756		}
;  757		else if (currentZoneData.trainertype[index] == 5 && moveState == 0) {
	JR	L_326
L_321:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_319
	LD	A,(_moveState)
	OR	A,A
	JR	NZ,L_319
;  758			LoadText(currentZoneData.trainertext[index]);
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+640
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_LoadText
	POP	BC
;  759			text_Display(loadedText, true);
	LD	BC,1
	PUSH	BC
	LD	BC,_loadedText
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  760			moveDir = moveDir + 1 - 2 * !(moveDir % 2);
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_312
	LD	BC,1
	LD	(IX+-9),BC
	JR	L_313
L_312:
	LD	BC,0
	LD	(IX+-9),BC
L_313:
	LD	A,(_moveDir)
	LD	B,A
	INC	B
	LD	A,(IX+-9)
	ADD	A,A
	LD	C,A
	LD	A,B
	SUB	A,C
	LD	(_moveDir),A
;  761			moveState = 8;
	LD	A,8
	LD	(_moveState),A
;  762		}
;  763		else if (currentZoneData.trainertype[index] == 6) {
	JR	L_326
L_319:
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	NZ,L_326
;  764			if (currentSave.newGame) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_316
;  765				text_Display("Professor Weed was looking for you\n He is in his Laboratory", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__286
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  766			}
;  767			else {
	JR	L_326
L_316:
;  768				text_Display("Good luck on your adventure!", true);
	LD	BC,1
	PUSH	BC
	LD	BC,L__287
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
;  769			}
;  770		}
L_326:
;  771		return false;
	XOR	A,A
;  772	}
L_327:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FightTrainer ***************************
;Name                         Addr/Register   Size   Type
;_moveDir                            STATIC      1   variable
;_moveState                          STATIC      1   variable
;_battle_SpawnTrainer                IMPORT  -----   function
;_loadedText                         IMPORT    256   variable
;_text_Display                       IMPORT  -----   function
;_LoadText                           IMPORT  -----   function
;_currentSave                        IMPORT   2604   variable
;_currentTrainer                     STATIC      1   variable
;_currentZoneData                    STATIC    672   variable
;temp314                               IX-9      3   variable
;temp309                               IX-6      3   variable
;G_15                                  IX-3      3   variable
;index                                 IX+6      1   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -41 (instruction)


	SEGMENT STRSECT
L__286:
	DB	"Professor Weed was looking for you"
	DB	10
	DB	" He is in his Laboratory"
	DB	0
L__287:
	DB	"Good luck on your adventure!"
	DB	0
	SEGMENT CODE
;  773	
;  774	void map_LoadPokeballs(void) {
_map_LoadPokeballs:
	LD	HL,-6
	CALL	__frameset
;  775		int pokemonIndex;
;  776		/* Generate pokemon info To Display At Top of Screen */
;  777		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_335
L_333:
;  778			if (currentSave.party[pokemonIndex].id == 0) {
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_currentSave+10
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_332
;  779				pokeballdata[pokemonIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),2
;  780			}
;  781			else {
	JR	L_334
L_332:
;  782				if (currentSave.party[pokemonIndex].currenthealth > 0) {
	LD	IY,(IX+-6)
	LD	BC,(IY+13)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_330
;  783					pokeballdata[pokemonIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),0
;  784				}
;  785				else {
	JR	L_334
L_330:
;  786					pokeballdata[pokemonIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_pokeballdata
	ADD	HL,BC
	LD	(HL),1
;  787				}
;  788			}
;  789		}
L_334:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_335:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_333
;  790	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoadPokeballs ***************************
;Name                         Addr/Register   Size   Type
;_pokeballdata                       STATIC      6   variable
;_currentSave                        IMPORT   2604   variable
;G_22                                  IX-6      3   variable
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: -41 (instruction)


;  791	void LoadMap(void) {
_LoadMap:
	LD	HL,-17
	CALL	__frameset
;  792		int i, j;
;  793		int npcIndex;
;  794		ti_var_t mapAV;
;  795		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_338
;  796			mapAV = ti_Open("PKMNMD1", "r");
	LD	BC,L__294
	PUSH	BC
	LD	BC,L__295
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;  797			ti_Seek(((int)currentSave.currentBuilding) * 1302, 0, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	LD	BC,1302
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  798			ti_Read(&currentTileMap, 315, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  799			ti_Read(&currentTypeMap, 315, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,315
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  800			ti_Read(&currentZoneData, sizeof(currentZoneData), 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,672
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  801		}
;  802		else {
	JR	L_339
L_338:
;  803			mapAV = ti_Open("PKMNMD0", "r");
	LD	BC,L__296
	PUSH	BC
	LD	BC,L__297
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;  804			ti_Seek(((int)currentSave.currentZone) * 4512, 0, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,4512
	LD	DE,0
	PUSH	DE
	CALL	__imuls
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  805			ti_Read(&currentTileMap, 1920, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTileMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  806			ti_Read(&currentTypeMap, 1920, 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,1920
	PUSH	BC
	LD	BC,_currentTypeMap
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  807			ti_Read(&currentZoneData, sizeof(currentZoneData), 1, mapAV);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,672
	PUSH	BC
	LD	BC,_currentZoneData
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  808		}
L_339:
;  809		ti_CloseAll();
	CALL	_ti_CloseAll
;  810		for (npcIndex = 0; npcIndex < 16; npcIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_351
L_349:
;  811			if (currentZoneData.trainertype[npcIndex] == 4) {
	LD	BC,_currentZoneData+608
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_348
;  812				bool canPass = true;
	LD	(IX+-5),1
;  813				if (currentSave.newGame && currentZoneData.spawnids[0][npcIndex] == 0) {
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_344
	LD	BC,_currentZoneData
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_344
;  814					canPass = false;
	LD	(IX+-5),0
;  815				}
L_344:
;  816				if (currentZoneData.spawnids[0][npcIndex] > playerState) {
	LD	BC,_currentZoneData
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(_playerState)
	CP	A,(HL)
	JR	NC,L_346
;  817					canPass = false;
	LD	(IX+-5),0
;  818				}
L_346:
;  819				if (canPass) {
	LD	A,(IX+-5)
	OR	A,A
	JR	Z,L_348
;  820					currentZoneData.trainerdir[npcIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),0
;  821				}
;  822			}
L_348:
;  823	
;  824	
;  825			npcMoveState[npcIndex] = 0;
	LD	BC,_npcMoveState
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),0
;  826			npcGrassAnimState[npcIndex] = 0;
	LD	HL,(IX+-3)
	LD	BC,_npcGrassAnimState
	ADD	HL,BC
	LD	(HL),0
;  827			npcOldTiles[npcIndex] = currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])];
	LD	BC,_currentZoneData+544
	LD	(IX+-17),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-17)
	ADD	HL,BC
	LD	(IX+-14),HL
	LD	BC,_currentZoneData+560
	LD	(IX+-11),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-11)
	ADD	HL,BC
	LD	(IX+-8),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-8)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	IY,(IX+-14)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,_npcOldTiles
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
;  828			currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])] = 96 + npcIndex;
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-8)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	IY,(IX+-14)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(IX+-3)
	ADD	A,96
	LD	(HL),A
;  829			npcSaidMessage[npcIndex] = false;
	LD	HL,(IX+-3)
	LD	BC,_npcSaidMessage
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  830			
;  831		}
L_351:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_349
;  832	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadMap ***************************
;Name                         Addr/Register   Size   Type
;_npcSaidMessage                     STATIC     16   variable
;_npcOldTiles                        STATIC     16   variable
;_tilemap                            STATIC     18   variable
;_npcGrassAnimState                  STATIC     16   variable
;_npcMoveState                       STATIC     16   variable
;_playerState                        STATIC      1   variable
;_ti_CloseAll                        IMPORT  -----   function
;_currentZoneData                    STATIC    672   variable
;_currentTypeMap                     STATIC   1920   variable
;_currentTileMap                     STATIC   1920   variable
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_currentSave                        IMPORT   2604   variable
;canPass                               IX-5      1   variable
;mapAV                                 IX-4      1   variable
;npcIndex                              IX-3      3   variable


; Stack Frame Size: 23 (bytes)
;       Spill Code: -41 (instruction)


	SEGMENT STRSECT
L__294:
	DB	"r"
	DB	0
L__295:
	DB	"PKMNMD1"
	DB	0
L__296:
	DB	"r"
	DB	0
L__297:
	DB	"PKMNMD0"
	DB	0
	SEGMENT CODE
;  833	
;  834	int32_t Clamp(int32_t number, int min, int max) {
_Clamp:
	CALL	__frameset0
;  835		if (number < min) {
	LD	BC,(IX+12)
	CALL	__itol
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_355
;  836			number = min;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  837		}
L_355:
;  838		if (number > max) {
	LD	BC,(IX+15)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmps
	CALL	__setflag
	JP	P,L_356
;  839			number = max;
	LD	BC,(IX+15)
	CALL	__itol
	LD	(IX+6),BC
	LD	(IX+9),A
;  840		}
L_356:
;  841		return number;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  842	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Clamp ***************************
;Name                         Addr/Register   Size   Type
;max                                  IX+15      3   parameter
;min                                  IX+12      3   parameter
;number                                IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -41 (instruction)


;  843	uint8_t GetNextTile(uint8_t tx, uint8_t ty, int width) {
_GetNextTile:
	CALL	__frameset0
;  844	
;  845		switch (moveDir) {
	LD	A,(_moveDir)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__308:
	DW	4
	DW	1
	DB	0
	DW24	L_358	

	DW24	L_359	

	DW24	L_360	

	DW24	L_361	

	DW24	L_362	

;  846		case 1:
L_358:
;  847			return(GetTypeMapData(tx + 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	INC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_363
;  848		case 2:
L_359:
;  849			return(GetTypeMapData(tx - 1, ty, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	DEC	C
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_363
;  850		case 3:
L_360:
;  851			return(GetTypeMapData(tx, ty + 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	INC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_363
;  852		case 4:
L_361:
;  853			return(GetTypeMapData(tx, ty - 1, width));
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_GetTypeMapData
	POP	BC
	POP	BC
	POP	BC
	JR	L_363
;  854		}
L_362:
;  855		return 0;
	XOR	A,A
;  856	}
L_363:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetNextTile ***************************
;Name                         Addr/Register   Size   Type
;_GetTypeMapData                     IMPORT  -----   function
;_moveDir                            STATIC      1   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -41 (instruction)


;  857	
;  858	uint16_t ShiftTile(uint16_t value, uint8_t direction, uint8_t amount) {
_ShiftTile:
	LD	HL,-18
	CALL	__frameset
;  859		return (value + (direction == 1 * amount) - (direction == 2 * amount) + (direction == 3 * tilemap.width * amount) - (direction == 4 * tilemap.width * amount));
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L__311
	LD	A,1
	JR	L__312
L__311:
	XOR	A,A
L__312:
	LD	B,A
	SEXT	HL
	LD	A,(IX+9)
	CP	A,(IX+12)
	LD	L,B
	LD	(IX+-18),HL
	JR	NZ,L__314
	LD	A,1
	JR	L__315
L__314:
	XOR	A,A
L__315:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,(IX+6)
	ADD.SIS	HL,BC
	LD	DE,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	(IX+-12),BC	; spill
	LD	(IX+-15),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-15)	; unspill
	SBC	HL,BC
	JR	NZ,L__317
	LD	A,1
	JR	L__318
L__317:
	XOR	A,A
L__318:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,(IX+-18)
	ADD.SIS	HL,BC
	LD	DE,HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-3),HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	(IX+-6),BC	; spill
	LD	(IX+-9),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-9)	; unspill
	SBC	HL,BC
	JR	NZ,L__320
	LD	A,1
	JR	L__321
L__320:
	XOR	A,A
L__321:
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC.SIS	HL,BC
;  860	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ShiftTile ***************************
;Name                         Addr/Register   Size   Type
;_tilemap                            STATIC     18   variable
;amount                               IX+12      1   parameter
;direction                             IX+9      1   parameter
;value                                 IX+6      2   parameter


; Stack Frame Size: 33 (bytes)
;       Spill Code: -43 (instruction)


;  861	
;  862	uint8_t GetTypeMapData(uint8_t tx, uint8_t ty, int width) {
_GetTypeMapData:
	CALL	__frameset0
;  863		if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_366
;  864			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	JR	L_367
;  865		}
;  866		else {
L_366:
;  867			return (currentTypeMap[(tx)+(ty)* width]);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+12)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
;  868		}
;  869	}
L_367:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetTypeMapData ***************************
;Name                         Addr/Register   Size   Type
;_currentTypeMap                     STATIC   1920   variable
;_currentSave                        IMPORT   2604   variable
;width                                IX+12      3   parameter
;ty                                    IX+9      1   parameter
;tx                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -43 (instruction)


;  870	
;  871	void ProcessNpcs(void) {
_ProcessNpcs:
	LD	HL,-288
	CALL	__frameset
;  872		int npcIndex, tileIndex, xloc, yloc, xlocMod, ylocMod;
;  873		for (npcIndex = 0; npcIndex < 16; npcIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_488
L_486:
;  874			if (currentZoneData.trainerdir[npcIndex] != 0) {
	LD	BC,IX
	LD	DE,_currentZoneData+576
	LEA	IY,IX+-128
	LD	(IY+-50),DE
	LD	DE,(IX+-3)
	LD	HL,-178
	ADD	HL,BC
	LD	HL,(HL)
	ADD	HL,DE
	LD	(IY+-41),HL
	LD	HL,(IY+-41)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_487
;  875				xloc = currentZoneData.trainerx[npcIndex] * 16 - screenX;
	LD	BC,_currentZoneData+544
	LD	(IX+-127),BC
	LD	(IX+-106),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-127)
	ADD	HL,BC
	LD	(IX+-85),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenX)
	SBC	HL,BC
	LD	(IX+-45),HL
;  876				yloc = currentZoneData.trainery[npcIndex] * 16 - screenY;
	LD	BC,_currentZoneData+560
	LD	(IX+-124),BC
	LD	(IX+-103),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-124)
	ADD	HL,BC
	LD	(IX+-94),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_screenY)
	SBC	HL,BC
	LD	(IX+-48),HL
;  877				xlocMod = 0;
;  878				ylocMod = 0;
;  879	
;  880				if (xloc < 336 && yloc < 240 && xloc >= 0 && yloc >= 0) {
	OR	A,A
	LD	BC,0
	LD	(IX+-69),BC
	LD	(IX+-78),BC
	LD	HL,(IX+-45)
	LD	BC,336
	SBC	HL,BC
	JP	P,L_487
	LD	BC,240
	LD	HL,(IX+-48)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_487
	LD	HL,(IX+-45)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_487
	LD	HL,(IX+-48)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_487
;  881					bool canMove;
;  882					int trainerDir = currentZoneData.trainerdir[npcIndex];
	LEA	IY,IX+-128
	LD	HL,(IY+-41)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-6),HL
;  883					canMove = true;
	LD	(IX+-49),1
;  884					for (tileIndex = 1; tileIndex < 5; tileIndex++) {
	LD	BC,1
	LD	(IX+-42),BC
	JR	L_395
L_393:
;  885						if (currentTypeMap[(currentZoneData.trainerx[npcIndex] + (trainerDir == 1)*tileIndex - (trainerDir == 2)*tileIndex) + tilemap.width * (currentZoneData.trainery[npcIndex] + (trainerDir == 3) * tileIndex - (trainerDir == 4) * tileIndex)] >= 64) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__331
	LD	B,1
	JR	L__332
L__331:
	LD	B,0
L__332:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-14),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__334
	LD	B,1
	JR	L__335
L__334:
	LD	B,0
L__335:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-8),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__337
	LD	B,1
	JR	L__338
L__337:
	LD	B,0
L__338:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-5),HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L__340
	LD	B,1
	JR	L__341
L__340:
	LD	B,0
L__341:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,(IX+-42)
	CALL	__imuls
	LEA	IY,IX+-128
	LD	(IY+-2),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-94)
	LD	A,(IY)
	LD	DE,HL
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-5)
	LD	L,A
	ADD	HL,BC
	LD	BC,(IY+-2)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	IY,(IX+-85)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LEA	IY,IX+-128
	LD	DE,(IY+-14)
	LD	L,A
	ADD	HL,DE
	LD	DE,(IY+-8)
	OR	A,A
	SBC	HL,DE
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_392
;  886							if (tileIndex == 1 && (npcMoveState[npcIndex] % 16 == 0) && npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4) {
	LD	BC,1
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_398
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-32),HL
	LD	HL,(IY+-32)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_398
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,_npcPatterns
	LD	BC,16
	ADD	HL,DE
	LD	DE,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),BC
	POP	IY
	LD	BC,4
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-288	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	LEA	IY,IX+-128
	LD	HL,(IY+-32)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,-288	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	SBC	HL,BC
	JR	NZ,L_398
;  887								canMove = false;
	LD	(IX+-49),0
;  888							}
;  889							break;
	JR	L_398
;  890						}
L_392:
;  891						if ((currentZoneData.trainerx[npcIndex] + (trainerDir == 1)*tileIndex - (trainerDir == 2)*tileIndex) == tx && (currentZoneData.trainery[npcIndex] + (trainerDir == 3) * tileIndex - (trainerDir == 4) * tileIndex) == ty) {
	LD	BC,(IX+-3)
	LD	HL,(IX+-106)
	ADD	HL,BC
	LD	(IX+-85),HL
	LD	A,(HL)
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-14)
	LD	L,A
	ADD	HL,BC
	LD	BC,(IY+-8)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	A,(_tx)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_394
	LD	BC,(IX+-3)
	LD	HL,(IX+-103)
	ADD	HL,BC
	LD	(IX+-94),HL
	LD	A,(HL)
	UEXT	HL
	LEA	IY,IX+-128
	LD	BC,(IY+-5)
	LD	L,A
	ADD	HL,BC
	LD	BC,(IY+-2)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_394
;  892							if (tileIndex == 1 && (npcMoveState[npcIndex] % 16 == 0) && npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4) {
	LD	BC,1
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_389
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-38),HL
	LD	HL,(IY+-38)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_389
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,_npcPatterns
	LD	BC,16
	ADD	HL,DE
	LD	DE,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),BC
	POP	IY
	LD	BC,4
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-285	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	LEA	IY,IX+-128
	LD	HL,(IY+-38)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,-285	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	SBC	HL,BC
	JR	NZ,L_389
;  893								canMove = false;
	LD	(IX+-49),0
;  894							}
L_389:
;  895							if (currentZoneData.trainertype[npcIndex] == 0 || (currentZoneData.trainertype[npcIndex] == 2 && !npcSaidMessage[npcIndex]) || currentZoneData.trainertype[npcIndex] == 4 || (currentZoneData.trainertype[npcIndex] == 6 && !npcSaidMessage[npcIndex] && currentSave.newGame)) {
	LD	BC,_currentZoneData+608
	LD	(IX+-100),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-100)
	ADD	HL,BC
	LD	(IX+-66),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_388
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_384
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_388
L_384:
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_388
	LD	HL,(IX+-66)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	NZ,L_398
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_398
	LD	A,(_currentSave)
	OR	A,A
	JR	Z,L_398
L_388:
;  896								npcSaidMessage[npcIndex] = true;
	LD	BC,_npcSaidMessage
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),1
;  897								npcToFight = npcIndex;
	LD	BC,(IX+-3)
	LD	(_npcToFight),BC
;  898							}
;  899							break;
	JR	L_398
;  900						}
;  901					}
L_394:
	LD	BC,(IX+-42)
	INC	BC
	LD	(IX+-42),BC
L_395:
	LD	BC,5
	LD	HL,(IX+-42)
	OR	A,A
	SBC	HL,BC
	JP	M,L_393
L_398:
;  902					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 1 && npcMoveState[npcIndex] % 16 == 8) {
	LD	BC,(IX+-3)
	LD	HL,_npcMoveState
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	(IX+-109),HL
	LD	(IX+-12),HL
	LD	(IX+-15),HL
	LD	(IX+-52),HL
	LD	(IX+-61),HL
	LD	(IX+-58),HL
	LD	(IX+-55),HL
	LD	(IX+-30),HL
	LD	(IX+-27),HL
	LD	(IX+-24),HL
	LD	(IX+-21),HL
	LD	(IX+-39),HL
	LD	(IX+-36),HL
	LD	(IX+-33),HL
	LD	(IX+-18),HL
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	LD	(IX+-82),HL
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+624
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_408
	LD	BC,(IX+-9)
	LD	(IX+-109),BC
	LD	BC,(IX+-9)
	LD	(IX+-12),BC
	LD	BC,(IX+-9)
	LD	(IX+-15),BC
	LD	BC,(IX+-9)
	LD	(IX+-52),BC
	LD	BC,(IX+-9)
	LD	(IX+-61),BC
	LD	BC,(IX+-9)
	LD	(IX+-58),BC
	LD	BC,(IX+-9)
	LD	(IX+-55),BC
	LD	BC,(IX+-9)
	LD	(IX+-30),BC
	LD	BC,(IX+-9)
	LD	(IX+-27),BC
	LD	BC,(IX+-9)
	LD	(IX+-24),BC
	LD	BC,(IX+-9)
	LD	(IX+-21),BC
	LD	BC,(IX+-9)
	LD	(IX+-39),BC
	LD	BC,(IX+-9)
	LD	(IX+-36),BC
	LD	BC,(IX+-9)
	LD	(IX+-33),BC
	LD	BC,(IX+-9)
	LD	(IX+-18),BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_408
;  903						currentZoneData.trainerdir[npcIndex] = 5 - trainerDir;
	LD	B,(IX+-6)
	LD	HL,(IX+-3)
	LD	DE,_currentZoneData+576
	ADD	HL,DE
	LD	A,5
	SUB	A,B
	LD	(HL),A
;  904					}
L_408:
;  905					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 2 && npcMoveState[npcIndex] % 16 == 8) {
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-47),HL
	LD	HL,(IY+-47)
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	(IX+-118),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_418
	LD	BC,(IX+-109)
	LD	(IX+-12),BC
	LD	(IX+-15),BC
	LD	BC,(IX+-12)
	LD	(IX+-52),BC
	LD	BC,(IX+-12)
	LD	(IX+-61),BC
	LD	BC,(IX+-12)
	LD	(IX+-58),BC
	LD	BC,(IX+-12)
	LD	(IX+-55),BC
	LD	BC,(IX+-12)
	LD	(IX+-30),BC
	LD	BC,(IX+-12)
	LD	(IX+-27),BC
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	(IX+-39),BC
	LD	BC,(IX+-12)
	LD	(IX+-36),BC
	LD	BC,(IX+-12)
	LD	(IX+-33),BC
	LD	BC,(IX+-12)
	LD	(IX+-18),BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_418
;  906						if (trainerDir == 1 || trainerDir == 3) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_402
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_406
L_402:
;  907							currentZoneData.trainerdir[npcIndex]++;
	LD	BC,_currentZoneData+576
	LEA	IY,IX+-128
	LD	HL,-184
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-56),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-53),HL
	LD	HL,(IY+-53)
	LD	BC,(IX+-3)
	LD	A,(HL)
	LD	DE,IX
	LD	HL,-184
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	INC	A
	LD	(HL),A
;  908						}
L_406:
;  909						if (trainerDir == 2 || trainerDir == 4) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_405
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_418
L_405:
;  910							currentZoneData.trainerdir[npcIndex]--;
	LD	BC,_currentZoneData+576
	LEA	IY,IX+-128
	LD	HL,-190
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-62),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-59),HL
	LD	HL,(IY+-59)
	LD	BC,(IX+-3)
	LD	A,(HL)
	LD	DE,IX
	LD	HL,-190
	ADD	HL,DE
	LD	HL,(HL)
	ADD	HL,BC
	DEC	A
	LD	(HL),A
;  911						}
;  912					}
L_418:
;  913					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 1 && npcMoveState[npcIndex] % 16 == 8) {
	LD	HL,(IX+-118)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_432
	LD	BC,(IX+-12)
	LD	(IX+-15),BC
	LD	(IX+-52),BC
	LD	BC,(IX+-15)
	LD	(IX+-61),BC
	LD	BC,(IX+-15)
	LD	(IX+-58),BC
	LD	BC,(IX+-15)
	LD	(IX+-55),BC
	LD	BC,(IX+-15)
	LD	(IX+-30),BC
	LD	BC,(IX+-15)
	LD	(IX+-27),BC
	LD	BC,(IX+-15)
	LD	(IX+-24),BC
	LD	BC,(IX+-15)
	LD	(IX+-21),BC
	LD	BC,(IX+-15)
	LD	(IX+-39),BC
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	BC,(IX+-15)
	LD	(IX+-33),BC
	LD	BC,(IX+-15)
	LD	(IX+-18),BC
	LD	HL,(IX+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_432
;  914						if (trainerDir == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_412
;  915							currentZoneData.trainerdir[npcIndex] = 3;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),3
;  916						}
L_412:
;  917						if (trainerDir == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_414
;  918							currentZoneData.trainerdir[npcIndex] = 4;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),4
;  919						}
L_414:
;  920						if (trainerDir == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_416
;  921							currentZoneData.trainerdir[npcIndex] = 1;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),1
;  922						}
L_416:
;  923						if (trainerDir == 4) {
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_432
;  924							currentZoneData.trainerdir[npcIndex] = 2;
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+576
	ADD	HL,BC
	LD	(HL),2
;  925						}
;  926					}
L_432:
;  927	
;  928					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove) {
	LD	BC,_currentZoneData+624
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_npcPatterns
	ADD	HL,BC
	LD	(IX+-72),HL
	LD	BC,(IX+-82)
	ADD	HL,BC
	LD	(IX+-97),HL
	LD	(IX+-121),HL
	LD	HL,(IX+-97)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L__374
	LD	A,1
	JR	L__375
L__374:
	XOR	A,A
L__375:
	LD	(IX+-62),A
	LD	(IX+-79),A
	LD	A,(IX+-62)
	LD	(IX+-63),A
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_447
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_447
;  929						if (trainerDir == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_422
;  930							xlocMod += (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-15)
	LD	(IX+-52),BC
	LD	(IX+-61),BC
	LD	BC,(IX+-52)
	LD	(IX+-58),BC
	LD	BC,(IX+-52)
	LD	(IX+-55),BC
	LD	HL,(IX+-52)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-69),HL
;  931						}
L_422:
;  932						if (trainerDir == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_424
;  933							xlocMod -= (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-52)
	LD	(IX+-61),BC
	LD	(IX+-58),BC
	LD	BC,(IX+-61)
	LD	(IX+-55),BC
	LD	HL,(IX+-61)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,(IX+-69)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-69),HL
;  934						}
L_424:
;  935						if (trainerDir == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_426
;  936							ylocMod += (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-61)
	LD	(IX+-58),BC
	LD	(IX+-55),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-78),HL
;  937						}
L_426:
;  938						if (trainerDir == 4) {
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_428
;  939							ylocMod -= (npcMoveState[npcIndex] % 16);
	LD	BC,(IX+-58)
	LD	(IX+-55),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,(IX+-78)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-78),HL
;  940						}
L_428:
;  941						if (npcMoveState[npcIndex] % 16 == 0) {
	LD	BC,(IX+-55)
	LD	(IX+-30),BC
	LD	(IX+-27),BC
	LD	BC,(IX+-30)
	LD	(IX+-24),BC
	LD	BC,(IX+-30)
	LD	(IX+-21),BC
	LD	BC,(IX+-30)
	LD	(IX+-39),BC
	LD	BC,(IX+-30)
	LD	(IX+-36),BC
	LD	BC,(IX+-30)
	LD	(IX+-33),BC
	LD	BC,(IX+-30)
	LD	(IX+-18),BC
	LD	HL,(IX+-30)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LEA	IY,IX+-128
	LD	(IY+-11),HL
	LD	HL,(IY+-11)
	CALL	__icmpzero
	JR	NZ,L_430
;  942							currentTypeMap[(currentZoneData.trainerx[npcIndex] + ((trainerDir == 1) - (trainerDir == 2))) + (tilemap.width * (currentZoneData.trainery[npcIndex] + ((trainerDir == 3) - (trainerDir == 4))))] = 96 + npcIndex;
	LD	BC,_currentZoneData+544
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	BC,1
	LD	L,A
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-277	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-280	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-277	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	H,(IX+-3)
	PUSH	IY
	PUSH	BC
	LD	IY,-282	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	JR	NZ,L__384
	LD	B,1
	JR	L__385
L__384:
	LD	B,0
L__385:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-274	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,2
	SBC	HL,DE
	JR	NZ,L__387
	LD	B,1
	JR	L__388
L__387:
	LD	B,0
L__388:
	LD	DE,3
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-271	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-274	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,BC
	LD	BC,-271	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	OR	A,A
	SBC	HL,BC
	LD	BC,-280	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-128),BC
	POP	IY
	LD	HL,(IX+-3)
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-259	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,_currentZoneData+560
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-262	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-259	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-262	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-265	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-268	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-265	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L__390
	LD	B,1
	JR	L__391
L__390:
	LD	B,0
L__391:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-125),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__393
	LD	B,1
	JR	L__394
L__393:
	LD	B,0
L__394:
	LD	A,B
	LD	DE,_currentTypeMap
	SEXT	HL
	LD	A,(_tilemap+13)
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-122),HL
	LD	BC,(IY+-125)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-122)
	POP	IY
	OR	A,A
	SBC	HL,BC
	LD	BC,-268	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-119),BC
	POP	IY
	UEXT	HL
	LD	L,A
	PUSH	IY
	PUSH	BC
	LD	IY,-281	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-282	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-281	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),HL
	LD	BC,(IY+-119)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	CALL	__imuls
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-128)
	POP	IY
	ADD	HL,BC
	ADD	HL,DE
	ADD	A,96
	LD	(HL),A
;  943						}
L_430:
;  944						if (npcMoveState[npcIndex] % 16 == 15) {
	LEA	IY,IX+-128
	LD	HL,(IY+-11)
	LD	BC,15
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_447
;  945							currentTypeMap[(currentZoneData.trainerx[npcIndex]) + (tilemap.width * currentZoneData.trainery[npcIndex])] = 0;
	LD	BC,_currentZoneData+544
	LEA	IY,IX+-128
	LD	HL,-202
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-74),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-71),HL
	LD	BC,_currentZoneData+560
	LD	HL,-196
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-68),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-65),HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	IY,(IY+-65)
	LD	L,A
	LD	DE,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LEA	IY,IX+-128
	LD	IY,(IY+-71)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,_currentTypeMap
	ADD	HL,BC
	LD	(HL),0
;  946							currentZoneData.trainerx[npcIndex] += ((trainerDir == 1) - (trainerDir == 2));
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L__397
	LD	A,1
	JR	L__398
L__397:
	XOR	A,A
L__398:
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__400
	LD	B,1
	JR	L__401
L__400:
	LD	B,0
L__401:
	SUB	A,B
	LEA	IY,IX+-128
	LD	HL,-202
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(IY+-71)
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
;  947							currentZoneData.trainery[npcIndex] += ((trainerDir == 3) - (trainerDir == 4));
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L__403
	LD	A,1
	JR	L__404
L__403:
	XOR	A,A
L__404:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__406
	LD	B,1
	JR	L__407
L__406:
	LD	B,0
L__407:
	SUB	A,B
	LEA	IY,IX+-128
	LD	HL,-196
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(IY+-65)
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
;  948						}
;  949					}
L_447:
;  950	
;  951	
;  952					if (currentZoneData.trainerskin[npcIndex] < 128) {
	LD	BC,_currentZoneData+592
	LEA	IY,IX+-128
	LD	HL,-145
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-17),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IX+-88),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,128
	SBC	HL,BC
	JP	P,L_446
;  953						gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[(currentZoneData.trainerskin[npcIndex] * 12) + ((trainerDir - 1) * 3) + ((npcMoveState[npcIndex] % 16) / 4 == 1 && (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove)) + 2 * ((npcMoveState[npcIndex] % 16) / 4 == 3 && (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove))], xloc + xlocMod - 8, yloc + ylocMod + 3);
	LD	BC,(IX+-30)
	LD	(IX+-27),BC
	LD	(IX+-24),BC
	LD	BC,(IX+-27)
	LD	(IX+-21),BC
	LD	BC,(IX+-27)
	LD	(IX+-39),BC
	LD	BC,(IX+-27)
	LD	(IX+-36),BC
	LD	BC,(IX+-27)
	LD	(IX+-33),BC
	LD	BC,(IX+-27)
	LD	(IX+-18),BC
	LD	HL,(IX+-27)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LEA	IY,IX+-128
	LD	BC,16
	CALL	__irems
	LD	BC,4
	CALL	__idivs
	LD	(IY+-20),HL
	LD	HL,(IY+-20)
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_436
	LD	A,(IX+-62)
	LD	(IX+-79),A
	LD	A,(IX+-62)
	LD	(IX+-63),A
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_436
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_436
	LD	(IX+-112),BC
	JR	L_437
L_436:
	LD	BC,0
	LD	(IX+-112),BC
L_437:
	LEA	IY,IX+-128
	LD	HL,(IY+-20)
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_442
	LD	A,(IX+-79)
	LD	(IX+-63),A
	OR	A,A
	JR	NZ,L_442
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_442
	LD	BC,1
	LD	(IX+-115),BC
	JR	L_443
L_442:
	LD	BC,0
	LD	(IX+-115),BC
L_443:
	LD	BC,(IX+-78)
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+-69)
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-88)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,12
	CALL	__imul_b
	LD	BC,HL
	LD	HL,(IX+-6)
	DEC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IX+-112)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-115)
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  954					}
;  955					else {
	JR	L_476
L_446:
;  956						gfx_TransparentSprite((gfx_sprite_t*)PKMNSD7[36 + ((currentZoneData.trainerskin[npcIndex]-128) * 4) + (trainerDir - 1)], xloc + xlocMod - 8, yloc + ylocMod + 3);
	LD	BC,(IX+-78)
	LD	HL,(IX+-48)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+-69)
	LD	HL,(IX+-45)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+-8
	PUSH	BC
	LD	HL,(IX+-88)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	BC,IY+-128
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LD	BC,(IX+-6)
	DEC	BC
	LEA	HL,IY+36
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD7
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  957					}
L_476:
;  958					
;  959					/* Grass */
;  960					if (currentTileMap[currentZoneData.trainerx[npcIndex] + tilemap.width * currentZoneData.trainery[npcIndex]] == 2 && !currentSave.indoors) {
	LD	BC,_currentZoneData+560
	LEA	IY,IX+-128
	LD	HL,-172
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-44),BC
	LD	BC,(IX+-3)
	LD	HL,(HL)
	ADD	HL,BC
	LD	(IY+-23),HL
	LD	HL,(IX+-3)
	LD	BC,_currentZoneData+544
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(_tilemap+13)
	UEXT	HL
	LD	IY,(IY+-23)
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-116),HL
	POP	IY
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-113),HL
	LD	BC,(IY+-116)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-113)
	POP	IY
	CALL	__imuls
	ADD	HL,DE
	LD	BC,_currentTileMap
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_479
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	NZ,L_479
;  961						if (trainerDir != 3 || npcMoveState[npcIndex] % 16 <= 1 || !canMove || npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] != 4) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_458
	LD	BC,(IX+-27)
	LD	(IX+-24),BC
	LD	(IX+-21),BC
	LD	BC,(IX+-24)
	LD	(IX+-39),BC
	LD	BC,(IX+-24)
	LD	(IX+-36),BC
	LD	BC,(IX+-24)
	LD	(IX+-33),BC
	LD	BC,(IX+-24)
	LD	(IX+-18),BC
	LD	HL,(IX+-24)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,HL
	LD	HL,1
	OR	A,A
	SBC	HL,BC
	JP	P,L_458
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_458
	LD	BC,(IX+-97)
	LD	(IX+-121),BC
	LD	HL,(IX+-97)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	Z,L_471
L_458:
;  962							if (npcGrassAnimState[npcIndex] > 5 && npcMoveState[npcIndex] % 16 < 14) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-26),HL
	LD	HL,(IY+-26)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_457
	LD	BC,(IX+-24)
	LD	(IX+-21),BC
	LD	(IX+-39),BC
	LD	BC,(IX+-21)
	LD	(IX+-36),BC
	LD	BC,(IX+-21)
	LD	(IX+-33),BC
	LD	BC,(IX+-21)
	LD	(IX+-18),BC
	LD	HL,(IX+-21)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_457
;  963								gfx_TransparentSprite(grassoverlay3, xloc - 8, yloc + 13);
	LD	IY,(IX+-48)
	LEA	BC,IY+13
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  964							}
;  965							else if (npcGrassAnimState[npcIndex] > 0 && npcMoveState[npcIndex] % 16 < 14) {
	JR	L_471
L_457:
	LEA	IY,IX+-128
	LD	HL,(IY+-26)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_455
	LD	BC,(IX+-21)
	LD	(IX+-39),BC
	LD	(IX+-36),BC
	LD	BC,(IX+-39)
	LD	(IX+-33),BC
	LD	BC,(IX+-39)
	LD	(IX+-18),BC
	LD	HL,(IX+-39)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_455
;  966								gfx_TransparentSprite(grassoverlay2, xloc - 8, yloc + 14);
	LD	IY,(IX+-48)
	LEA	BC,IY+14
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  967							}
;  968							else {
	JR	L_471
L_455:
;  969								gfx_TransparentSprite(grassoverlay1, xloc - 8, yloc + 18);
	LD	IY,(IX+-48)
	LEA	BC,IY+18
	PUSH	BC
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	PUSH	BC
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  970							}
;  971						}
L_471:
;  972						if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 4 && canMove && (trainerDir != 4 || npcMoveState[npcIndex] % 16 >= 14)) {
	LD	A,(IX+-63)
	OR	A,A
	JR	NZ,L_474
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_474
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_470
	LD	BC,(IX+-39)
	LD	(IX+-36),BC
	LD	(IX+-33),BC
	LD	BC,(IX+-36)
	LD	(IX+-18),BC
	LD	HL,(IX+-36)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,16
	CALL	__irems
	LD	BC,14
	SBC	HL,BC
	JP	M,L_474
L_470:
;  973							if (npcMoveState[npcIndex] % 16 == 14) {
	LD	BC,(IX+-36)
	LD	(IX+-33),BC
	LD	(IX+-18),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-91),HL
	LEA	IY,IX+-128
	LD	(IY+-29),HL
	LD	HL,(IX+-91)
	OR	A,A
	LD	BC,14
	SBC	HL,BC
	JR	NZ,L_469
;  974								npcGrassAnimState[npcIndex] = 10;
	LD	HL,(IX+-3)
	LD	BC,_npcGrassAnimState
	ADD	HL,BC
	LD	(HL),10
;  975							}
L_469:
;  976							if (npcGrassAnimState[npcIndex] > 5 && npcMoveState[npcIndex] % 16 >= 14) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-35),HL
	LD	HL,(IY+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_468
	LD	BC,(IX+-91)
	LEA	IY,IX+-128
	LD	(IY+-29),BC
	LD	HL,(IX+-91)
	LD	BC,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_468
;  977								gfx_TransparentSprite(grassoverlay3, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 13 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__433
	LD	B,1
	JR	L__434
L__433:
	LD	B,0
L__434:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-110),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__436
	LD	B,1
	JR	L__437
L__436:
	LD	B,0
L__437:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-101),DE
	POP	IY
	LEA	DE,IY+13
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-104),DE	; unspill
	LD	DE,(IY+-101)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-107),HL
	LD	BC,(IY+-110)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-107)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-101),DE
	LD	DE,(IY+-104)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-101)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__439
	LD	B,1
	JR	L__440
L__439:
	LD	B,0
L__440:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__442
	LD	B,1
	JR	L__443
L__442:
	LD	B,0
L__443:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  978							}
;  979							else if (npcGrassAnimState[npcIndex] > 0 && npcMoveState[npcIndex] % 16 >= 14) {
	JR	L_474
L_468:
	LEA	IY,IX+-128
	LD	HL,(IY+-35)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_466
	LEA	IY,IX+-128
	LD	HL,(IY+-29)
	LD	BC,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_466
;  980								gfx_TransparentSprite(grassoverlay2, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 14 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__447
	LD	B,1
	JR	L__448
L__447:
	LD	B,0
L__448:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-98),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__450
	LD	B,1
	JR	L__451
L__450:
	LD	B,0
L__451:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-89),DE
	POP	IY
	LEA	DE,IY+14
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-92),DE	; unspill
	LD	DE,(IY+-89)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-95),HL
	LD	BC,(IY+-98)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-95)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-89),DE
	LD	DE,(IY+-92)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-89)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__453
	LD	B,1
	JR	L__454
L__453:
	LD	B,0
L__454:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__456
	LD	B,1
	JR	L__457
L__456:
	LD	B,0
L__457:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  981							}
;  982							else {
	JR	L_474
L_466:
;  983								gfx_TransparentSprite(grassoverlay1, xloc - 8 + 16 * ((trainerDir == 1) - (trainerDir == 2)), yloc + 18 + 16 * ((trainerDir == 3) - (trainerDir == 4)));
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__459
	LD	B,1
	JR	L__460
L__459:
	LD	B,0
L__460:
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-86),HL
	POP	IY
	LD	HL,(IX+-6)
	OR	A,A
	LD	DE,4
	SBC	HL,DE
	JR	NZ,L__462
	LD	B,1
	JR	L__463
L__462:
	LD	B,0
L__463:
	LD	IY,(IX+-48)
	LD	DE,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-77),DE
	POP	IY
	LEA	DE,IY+18
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-80),DE	; unspill
	LD	DE,(IY+-77)
	POP	IY
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-83),HL
	LD	BC,(IY+-86)
	POP	IY
	LD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-83)
	POP	IY
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-77),DE
	LD	DE,(IY+-80)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-77)
	POP	IY
	PUSH	HL
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,DE
	JR	NZ,L__465
	LD	B,1
	JR	L__466
L__465:
	LD	B,0
L__466:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	DE,HL
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L__468
	LD	B,1
	JR	L__469
L__468:
	LD	B,0
L__469:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,(IX+-45)
	LEA	BC,IY+-8
	ADD	HL,HL
	ADD	HL,BC
	PUSH	HL
	LD	BC,_grassoverlay1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  984							}
;  985						}
L_474:
;  986						if (npcGrassAnimState[npcIndex] > 0) {
	LD	BC,(IX+-3)
	LD	HL,_npcGrassAnimState
	ADD	HL,BC
	LD	(IX+-75),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_479
;  987							npcGrassAnimState[npcIndex]--;
	LD	HL,(IX+-75)
	LD	A,(HL)
	DEC	A
	LD	HL,(IX+-75)
	LD	(HL),A
;  988						}
;  989	
;  990						
;  991					}
L_479:
;  992	
;  993					if (canMove) {
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_481
;  994						npcMoveState[npcIndex]++;
	LD	BC,(IX+-33)
	LD	(IX+-18),BC
	LD	HL,BC
	LD	A,(HL)
	INC	A
	LD	HL,(IX+-18)
	LD	(HL),A
;  995					}
L_481:
;  996	
;  997	
;  998					if (npcPatterns[currentZoneData.trainermovement[npcIndex]][npcMoveState[npcIndex] / 16] == 5) {
	LD	HL,(IX+-121)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,5
	SBC	HL,BC
	JR	NZ,L_483
;  999						npcMoveState[npcIndex] = 0;
	LD	HL,(IX+-18)
	LD	(HL),0
; 1000					}
L_483:
; 1001	
; 1002					if (ty - 1 == currentZoneData.trainery[npcIndex]) {
	LD	A,(_ty)
	UEXT	HL
	LD	L,A
	LEA	IY,IX+-128
	LD	IY,(IY+-23)
	LD	BC,HL
	DEC	BC
	LD	A,(IY)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_487
; 1003						DrawPlayer();
	CALL	_DrawPlayer
; 1004					}
; 1005	
; 1006				}
; 1007			}
; 1008	
; 1009		}
L_487:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_488:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_486
; 1010	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ProcessNpcs ***************************
;Name                         Addr/Register   Size   Type
;_DrawPlayer                         IMPORT  -----   function
;_grassoverlay1_data                 IMPORT     98   variable
;_grassoverlay2_data                 IMPORT    162   variable
;_grassoverlay3_data                 IMPORT    178   variable
;_npcGrassAnimState                  STATIC     16   variable
;_currentTileMap                     STATIC   1920   variable
;_PKMNSD7                            IMPORT    132   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_npcToFight                         STATIC      3   variable
;_currentSave                        IMPORT   2604   variable
;_npcSaidMessage                     STATIC     16   variable
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_npcPatterns                        STATIC    128   variable
;_npcMoveState                       STATIC     16   variable
;_tilemap                            STATIC     18   variable
;_currentTypeMap                     STATIC   1920   variable
;_screenY                            STATIC      4   variable
;_screenX                            STATIC      4   variable
;_currentZoneData                    STATIC    672   variable
;G_24                                IX-178      3   variable
;G_47                                IX-175      3   variable
;G_85                                IX-172      3   variable
;G_25                                IX-169      3   variable
;G_37                                IX-166      3   variable
;G_78                                IX-163      3   variable
;G_30                                IX-160      3   variable
;G_79                                IX-157      3   variable
;G_71                                IX-154      3   variable
;G_86                                IX-151      3   variable
;G_60                                IX-148      3   variable
;G_63                                IX-145      3   variable
;G_32                                IX-142      3   variable
;G_56                                IX-139      3   variable
;G_33                                IX-136      3   variable
;G_35                                IX-133      3   variable
;G_36                                IX-130      3   variable
;G_26                                IX-127      3   variable
;G_27                                IX-124      3   variable
;G_83                                IX-121      3   variable
;G_48                                IX-118      3   variable
;temp444                             IX-115      3   variable
;temp438                             IX-112      3   variable
;G_46                                IX-109      3   variable
;G_31                                IX-106      3   variable
;G_34                                IX-103      3   variable
;G_38                                IX-100      3   variable
;G_69                                 IX-97      3   variable
;G_29                                 IX-94      3   variable
;G_77                                 IX-91      3   variable
;G_64                                 IX-88      3   variable
;G_28                                 IX-85      3   variable
;G_45                                 IX-82      3   variable
;G_62                                 IX-79      1   variable
;ylocMod                              IX-78      3   variable
;G_80                                 IX-75      3   variable
;G_58                                 IX-72      3   variable
;xlocMod                              IX-69      3   variable
;G_39                                 IX-66      3   variable
;G_74                                 IX-63      1   variable
;G_59                                 IX-62      1   variable
;G_53                                 IX-61      3   variable
;G_54                                 IX-58      3   variable
;G_55                                 IX-55      3   variable
;G_52                                 IX-52      3   variable
;canMove                              IX-49      1   variable
;yloc                                 IX-48      3   variable
;xloc                                 IX-45      3   variable
;tileIndex                            IX-42      3   variable
;G_75                                 IX-39      3   variable
;G_76                                 IX-36      3   variable
;G_81                                 IX-33      3   variable
;G_57                                 IX-30      3   variable
;G_67                                 IX-27      3   variable
;G_70                                 IX-24      3   variable
;G_72                                 IX-21      3   variable
;G_84                                 IX-18      3   variable
;G_51                                 IX-15      3   variable
;G_49                                 IX-12      3   variable
;G_44                                  IX-9      3   variable
;trainerDir                            IX-6      3   variable
;npcIndex                              IX-3      3   variable


; Stack Frame Size: 294 (bytes)
;       Spill Code: -55 (instruction)


; 1011	
; 1012	void map_DrawInformationBar(void) {
_map_DrawInformationBar:
	LD	HL,-3
	CALL	__frameset
; 1013		int pokemonIndex;
; 1014		gfx_SetColor(colors[0]);
	LD	A,(_colors)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
; 1015		gfx_FillRectangle(0, 0, 320, 16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1016		for (pokemonIndex = 0; pokemonIndex < 6; pokemonIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_493
L_491:
; 1017			gfx_TransparentSprite_NoClip(pokeballSprites[pokeballdata[pokemonIndex]], 16 * pokemonIndex, 0);
	LD	BC,_pokeballdata
	LD	DE,0
	PUSH	DE
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_pokeballSprites
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
; 1018		}
L_493:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_491
; 1019		sprintf(str, "%u$", currentSave.playerMoney);
	LD	A,(_currentSave+1242)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_currentSave+1239)
	PUSH	BC
	LD	BC,L__477
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1020		gfx_PrintStringXY(str, 100, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1021	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_DrawInformationBar ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_currentSave                        IMPORT   2604   variable
;_sprintf                            IMPORT  -----   function
;_pokeballdata                       STATIC      6   variable
;_pokeballSprites                    STATIC      9   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_SetColor                       IMPORT  -----   function
;pokemonIndex                          IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: -55 (instruction)


	SEGMENT STRSECT
L__477:
	DB	"%u$"
	DB	0
	SEGMENT CODE
; 1022	
; 1023	void map_LoseFight(void) {
_map_LoseFight:
	LD	HL,-45
	CALL	__frameset
; 1024		int tileIndex, partyIndex, moveIndex;
; 1025		text_Display("All your pokemon have fainted", false);
	LD	BC,0
	PUSH	BC
	LD	BC,L__479
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1026		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_503
L_501:
; 1027			currentSave.party[partyIndex].currenthealth = stats_CalculateStats(currentSave.party[partyIndex]).health;
	LD	BC,_currentSave+10
	LD	(IX+-6),BC
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-39),HL
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-33
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	LD	(IX+-45),HL	; spill
	ADD	IY,SP
	LD	SP,IY
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-45)	; unspill
	LD	BC,(HL)
	LD	(IY+13),C
	LD	(IY+14),B
; 1028			currentSave.party[partyIndex].currentstatus = 0;
	LD	HL,(IX+-6)
	LD	BC,(IX+-39)
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+15),0
; 1029			for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	BC,(IX+-12)
	LD	(IX+-21),BC
	LD	BC,(IX+-12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-15),HL
	JR	L_500
L_498:
; 1030				currentSave.party[partyIndex].pp[moveIndex] = data_moves[currentSave.party[partyIndex].moves[moveIndex]].uses;
	LD	BC,(IX+-15)
	LD	(IX+-36),BC
	LD	IY,(IX+-36)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	LD	BC,(IX+-9)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	DE,_data_moves
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+5
	ADD	HL,BC
	LD	IY,DE
	LD	A,(IY+18)
	LD	(HL),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
; 1031			}
L_500:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_498
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
; 1032		}
L_503:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_501
; 1033		currentSave.playerX = 14*16;
	LD	HL,_currentSave+2
	LD	(HL),224
	INC	HL
	LD	(HL),0
; 1034		currentSave.playerY = 20*16;
	LD	HL,_currentSave+4
	LD	(HL),64
	INC	HL
	LD	(HL),1
; 1035		currentSave.indoors = false;
	XOR	A,A
	LD	(_currentSave+1236),A
; 1036		currentSave.currentZone = 0;
	LD	HL,_currentSave+1234
	LD	(HL),0
	INC	HL
	LD	(HL),0
; 1037		moveDir = 3;
	LD	A,3
	LD	(_moveDir),A
; 1038		tilemap.width = OUTDOORWIDTH;
	LD	A,48
	LD	(_tilemap+13),A
; 1039		tilemap.height = OUTDOORHEIGHT;
	LD	A,40
	LD	(_tilemap+12),A
; 1040		tx = currentSave.playerX / 16;
	LD	BC,(_currentSave+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_tx),A
; 1041		ty = currentSave.playerY / 16;
	LD	BC,(_currentSave+4)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	LD	A,L
	LD	(_ty),A
; 1042		LoadMap();
	CALL	_LoadMap
; 1043	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_LoseFight ***************************
;Name                         Addr/Register   Size   Type
;_LoadMap                            IMPORT  -----   function
;_ty                                 STATIC      1   variable
;_tx                                 STATIC      1   variable
;_tilemap                            STATIC     18   variable
;_moveDir                            STATIC      1   variable
;_data_moves                         IMPORT  unknown variable
;_stats_CalculateStats               IMPORT  -----   function
;_currentSave                        IMPORT   2604   variable
;_text_Display                       IMPORT  -----   function
;O_54                                 IX-21      3   variable
;O_53                                 IX-18      3   variable
;O_55                                 IX-15      3   variable
;G_88                                 IX-12      3   variable
;moveIndex                             IX-9      3   variable
;G_87                                  IX-6      3   variable
;partyIndex                            IX-3      3   variable


; Stack Frame Size: 51 (bytes)
;       Spill Code: -56 (instruction)


	SEGMENT STRSECT
L__479:
	DB	"All your pokemon have fainted"
	DB	0
	SEGMENT CODE
; 1044	
; 1045	void map_WinFight(bool wild, uint16_t rewardMoney) {
_map_WinFight:
	LD	HL,-22
	CALL	__frameset
; 1046		char str1[16];
; 1047		if (!wild) {
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_522
; 1048			currentSave.playerMoney += rewardMoney;
	LD	BC,(IX+9)
	CALL	__stoiu
	LD	A,(_currentSave+1242)
	LD	E,A
	LD	BC,HL
	XOR	A,A
	LD	HL,(_currentSave+1239)
	CALL	__ladd
	LD	(_currentSave+1239),HL
	LD	A,E
	LD	(_currentSave+1242),A
; 1049			if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_520
; 1050				currentSave.defeatedTrainersIndoors[currentSave.currentBuilding][currentTrainer] = true;
	LD	A,(_currentSave+1238)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,(_currentTrainer)
	LD	BC,_currentSave+1684
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
; 1051				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_522
; 1052					if (currentZoneData.trainerreward[currentTrainer] == 255) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_511
; 1053						currentSave.badgeCount++;
; 1054						sprintf(str, "Recieved a badge");
	LD	BC,L__487
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	LD	A,(_currentSave+2452)
	INC	A
	LD	(_currentSave+2452),A
	CALL	_sprintf
	POP	BC
	POP	BC
; 1055					}
; 1056					else {
	JR	L_512
L_511:
; 1057						currentSave.playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentSave+1243
	ADD	HL,DE
	LD	IY,HL
	LD	HL,BC
	LD	BC,_currentSave+1243
	ADD	HL,BC
	LD	A,(IY)
	INC	A
	LD	(HL),A
; 1058						items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
; 1059						if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_509
; 1060							sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__489
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1061						}
; 1062						else {
	JR	L_512
L_509:
; 1063							sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__490
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1064						}
; 1065					}
L_512:
; 1066					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1067				}
; 1068			}
; 1069			else {
	JR	L_522
L_520:
; 1070				currentSave.defeatedTrainers[currentSave.currentZone][currentTrainer] = true;
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_currentSave+1428
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),1
; 1071				if (currentZoneData.trainerreward[currentTrainer] != 0) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_522
; 1072					currentSave.playerItems[currentZoneData.trainerreward[currentTrainer] - 1]++;
	LD	(IX+-3),BC
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	LD	HL,BC
	LD	DE,_currentSave+1243
	ADD	HL,DE
	LD	IY,HL
	LD	HL,BC
	LD	BC,_currentSave+1243
	ADD	HL,BC
	LD	A,(IY)
	INC	A
	LD	(HL),A
; 1073					items_IndexToName(str1, currentZoneData.trainerreward[currentTrainer] - 1);
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,_currentZoneData+656
	ADD	HL,BC
	LD	C,(HL)
	DEC	C
	LD	B,0
	PUSH	BC
	PEA	IX+-22
	CALL	_items_IndexToName
	POP	BC
	POP	BC
; 1074					if (currentZoneData.trainerreward[currentTrainer] - 1 >= 20) {
	LD	A,(_currentTrainer)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,20
	SBC	HL,BC
	JP	M,L_516
; 1075						sprintf(str, "Recieved the TM for %s", str1);
	PEA	IX+-22
	LD	BC,L__493
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1076					}
; 1077					else {
	JR	L_517
L_516:
; 1078						sprintf(str, "Recieved a %s", str1);
	PEA	IX+-22
	LD	BC,L__494
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
; 1079					}
L_517:
; 1080					text_Display(str, false);
	LD	BC,0
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_text_Display
	POP	BC
	POP	BC
; 1081				}
; 1082			}
; 1083		}
; 1084	}
L_522:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _map_WinFight ***************************
;Name                         Addr/Register   Size   Type
;_text_Display                       IMPORT  -----   function
;_items_IndexToName                  IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_currentZoneData                    STATIC    672   variable
;_currentTrainer                     STATIC      1   variable
;_currentSave                        IMPORT   2604   variable
;str1                                 IX-22     16   variable
;G_90                                  IX-6      3   variable
;G_94                                  IX-3      3   variable
;rewardMoney                           IX+9      2   parameter
;wild                                  IX+6      1   parameter


; Stack Frame Size: 34 (bytes)
;       Spill Code: -56 (instruction)


	SEGMENT STRSECT
L__487:
	DB	"Recieved a badge"
	DB	0
L__489:
	DB	"Recieved the TM for %s"
	DB	0
L__490:
	DB	"Recieved a %s"
	DB	0
L__493:
	DB	"Recieved the TM for %s"
	DB	0
L__494:
	DB	"Recieved a %s"
	DB	0
	SEGMENT CODE
; 1085	void LoadTileset(bool freeOld) {
_LoadTileset:
	LD	HL,-6
	CALL	__frameset
; 1086		int tileIndex = 0;
; 1087		for (tileIndex = 0; tileIndex < 128; tileIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_534
L_532:
; 1088			if (freeOld) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_525
; 1089				free(mapTiles[tileIndex]);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
; 1090			}
L_525:
; 1091			mapTiles[tileIndex] = gfx_MallocSprite(16, 16);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,_malloc
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,_mapTiles
	ADD	HL,DE
	LD	(HL),BC
; 1092			if (currentSave.indoors) {
	LD	A,(_currentSave+1236)
	OR	A,A
	JR	Z,L_531
; 1093				zx7_Decompress(mapTiles[tileIndex], indoortileset_tiles_compressed[tileIndex]);
	LD	BC,_indoortileset_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1094			}
; 1095			else {
	JR	L_533
L_531:
; 1096				if (data_tileSets[currentSave.currentZone] == 0) {
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_529
; 1097					zx7_Decompress(mapTiles[tileIndex], outdoortileset0_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset0_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1098				}
; 1099				else if (data_tileSets[currentSave.currentZone] == 1) {
	JR	L_533
L_529:
	LD	BC,(_currentSave+1234)
	CALL	__stoiu
	LD	BC,_data_tileSets
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_527
; 1100					zx7_Decompress(mapTiles[tileIndex], outdoortileset1_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset1_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1101				}
; 1102				else {
	JR	L_533
L_527:
; 1103					zx7_Decompress(mapTiles[tileIndex], outdoortileset2_tiles_compressed[tileIndex]);
	LD	BC,_outdoortileset2_tiles_compressed
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_mapTiles
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
; 1104				}
; 1105			}
; 1106		}
L_533:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_534:
	LD	BC,128
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_532
	LD	SP,IX
	POP	IX
	RET	


;**************************** _LoadTileset ***************************
;Name                         Addr/Register   Size   Type
;_outdoortileset2_tiles_compressed      IMPORT    384   variable
;_outdoortileset1_tiles_compressed      IMPORT    384   variable
;_outdoortileset0_tiles_compressed      IMPORT    384   variable
;_data_tileSets                      IMPORT     32   variable
;_indoortileset_tiles_compressed      IMPORT    384   variable
;_zx7_Decompress                     IMPORT  -----   function
;_currentSave                        IMPORT   2604   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_mapTiles                           STATIC    384   variable
;_free                               IMPORT  -----   function
;tileIndex                             IX-6      3   variable
;G_95                                  IX-3      3   variable
;freeOld                               IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -56 (instruction)


	XREF _PKMNSD8_init:ROM
	XREF _PKMNSD8:ROM
	XREF _PKMNSD7_init:ROM
	XREF _PKMNSD7:ROM
	XREF _PKMNSD4_init:ROM
	XREF _indoortileset_tiles_compressed:ROM
	XREF _outdoortileset2_tiles_compressed:ROM
	XREF _outdoortileset1_tiles_compressed:ROM
	XREF _outdoortileset0_tiles_compressed:ROM
	XREF _pokeball_tiles_compressed:ROM
	XREF _PKMNSD4:ROM
	XREF _shop_compressed:ROM
	XREF _grassoverlay3_data:ROM
	XREF _grassoverlay2_data:ROM
	XREF _grassoverlay1_data:ROM
	XREF _stats_NewCharacter:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_SelectSave:ROM
	XREF _save_Load:ROM
	XREF _currentSave:ROM
	XREF _textBoxType:ROM
	XREF _text_AskQuestion2:ROM
	XREF _text_Display:ROM
	XREF _items_IndexToName:ROM
	XREF _colors:ROM
	XREF _str:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _menu_ItemShop:ROM
	XREF _menu_Box:ROM
	XREF _menu_Menu:ROM
	XREF _battle_SpawnTrainer:ROM
	XREF _battle_SpawnWild:ROM
	XREF _data_tileSets:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _loadedText:ROM
	XREF _LoadText:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _sprintf:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __lcmps:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __ineg:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _LoadTileset
	XDEF _map_WinFight
	XDEF _map_LoseFight
	XDEF _map_DrawInformationBar
	XDEF _ProcessNpcs
	XDEF _GetTypeMapData
	XDEF _ShiftTile
	XDEF _GetNextTile
	XDEF _Clamp
	XDEF _LoadMap
	XDEF _map_LoadPokeballs
	XDEF _FightTrainer
	XDEF _ExitZone
	XDEF _ExitBuilding
	XDEF _EnterDoor
	XDEF _ReadText
	XDEF _OpenBox
	XDEF _HealParty
	XDEF _GrassAnimation
	XDEF _DrawPlayer
	XDEF _map_Draw
	XDEF _map_End
	XDEF _map_Loop
	XDEF _map_SetupGfx
	XDEF _map_Setup
	XDEF _map_Initialize
	XDEF _str1
	XDEF _clearcharacter2
	XDEF _tempcharacter2
	XDEF _currentTrainer
	XDEF _currentZoneData
	XDEF _currentTypeMap
	XDEF _currentTileMap
	XDEF _pokeballSprites
	XDEF _mapTiles
	XDEF _tilemap
	XDEF _playerState
	XDEF _moveDir
	XDEF _moveState
	XDEF _nextTile
	XDEF _npcPatterns
	XDEF _npcSaidMessage
	XDEF _npcGrassAnimState
	XDEF _npcToFight
	XDEF _npcOldTiles
	XDEF _npcMoveState
	XDEF _grassAnimY2
	XDEF _grassAnimX2
	XDEF _grassAnimY1
	XDEF _grassAnimX1
	XDEF _grassAnimState2
	XDEF _grassAnimState1
	XDEF _grassAnimNext
	XDEF _currentWater
	XDEF _currentRun
	XDEF _running
	XDEF _ty
	XDEF _tx
	XDEF _screenY
	XDEF _screenX
	XDEF _pokeballdata
	XDEF _battlechance
	END
