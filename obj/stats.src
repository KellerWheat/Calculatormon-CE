; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\STATS.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <math.h>
;    2	
;    3	#include "stats.h"
;    4	
;    5	unsigned long isqrt(unsigned long x);
;    6	
;    7	struct pokemonStats stats_CalculateStats(struct pokemonData c) {
_stats_CalculateStats:
	LD	HL,-57
	CALL	__frameset
;    8		struct pokemonStats newstats;
;    9		newstats.health = ((((data_pokemon[c.id].basehealth + c.healthIV) * 2 + (isqrt(c.healthEV) / 4))*c.level) / 100) + c.level + 10;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+25)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-16),A
	LD	(IX+-15),BC
	LD	BC,(IX+31)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-15)
	LD	E,(IX+-16)
	CALL	__ladd
	LD	(IX+-26),HL
	UEXT	HL
	LD	L,(IX+18)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-26)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-23),HL
	UEXT	HL
	LD	L,(IX+18)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-23)
	CALL	__ladd
	LD	A,10
	CALL	__ladd_b
	LD	(IX+-12),L
	LD	(IX+-11),H
;   10		newstats.attack = ((((data_pokemon[c.id].baseattack + c.attackIV) * 2 + (isqrt(c.attackEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+26)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-20),A
	LD	(IX+-19),BC
	LD	BC,(IX+33)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-19)
	LD	E,(IX+-20)
	CALL	__ladd
	LD	(IX+-33),HL
	UEXT	HL
	LD	L,(IX+18)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-33)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-10),L
	LD	(IX+-9),H
;   11		newstats.defence = ((((data_pokemon[c.id].basedefence + c.defenceIV) * 2 + (isqrt(c.defenceEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+20)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+27)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-30),A
	LD	(IX+-29),BC
	LD	BC,(IX+35)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-29)
	LD	E,(IX+-30)
	CALL	__ladd
	LD	(IX+-40),HL
	UEXT	HL
	LD	L,(IX+18)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-40)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-8),L
	LD	(IX+-7),H
;   12		newstats.specialattack = ((((data_pokemon[c.id].basespecialattack + c.specialattackIV) * 2 + (isqrt(c.specialattackEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+21)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+28)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-37),A
	LD	(IX+-36),BC
	LD	BC,(IX+37)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-36)
	LD	E,(IX+-37)
	CALL	__ladd
	LD	(IX+-47),HL
	UEXT	HL
	LD	L,(IX+18)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-47)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-6),L
	LD	(IX+-5),H
;   13		newstats.specialdefence = ((((data_pokemon[c.id].basespecialdefence + c.specialdefenceIV) * 2 + (isqrt(c.specialdefenceEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+22)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+29)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-44),A
	LD	(IX+-43),BC
	LD	BC,(IX+39)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-43)
	LD	E,(IX+-44)
	CALL	__ladd
	LD	(IX+-54),HL
	UEXT	HL
	LD	L,(IX+18)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-54)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-4),L
	LD	(IX+-3),H
;   14		newstats.speed = ((((data_pokemon[c.id].basespeed + c.speedIV) * 2 + (isqrt(c.speedEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+30)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-51),A
	LD	(IX+-50),BC
	LD	BC,(IX+41)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	POP	BC
	POP	BC
	LD	BC,HL
	LD	L,2
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-50)
	LD	E,(IX+-51)
	CALL	__ladd
	LD	(IX+-57),HL
	UEXT	HL
	LD	L,(IX+18)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-57)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-2),L
	LD	(IX+-1),H
;   15		return newstats;
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IX+-12
	LD	BC,12
	LDIR	
	LD	HL,(IX+6)	; spill
;   16	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _stats_CalculateStats ***************************
;Name                         Addr/Register   Size   Type
;_isqrt                              IMPORT  -----   function
;_data_pokemon                       IMPORT  unknown variable
;newstats                             IX-12     12   variable
;c                                     IX+9     34   parameter


; Stack Frame Size: 102 (bytes)
;       Spill Code: 0 (instruction)


;   17	struct pokemonData stats_NewCharacter(uint8_t id, uint8_t level) {
_stats_NewCharacter:
	LD	HL,-127
	CALL	__frameset
;   18		uint8_t parent1id = data_pokemon[id].evolvesfrom;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+46)
	LD	(IX+-71),A
;   19		uint8_t parent2id = data_pokemon[parent1id].evolvesfrom;
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+46)
	LD	(IX+-78),A
;   20		int moveSlot, moveIndex;
;   21		struct pokemonData newch;
;   22		newch.id = id;
	LD	A,(IX+9)
	LD	(IX+-43),A
;   23		newch.level = level;
	LD	A,(IX+12)
	LD	(IX+-34),A
;   24		newch.xp = xpPerLevel[data_pokemon[newch.id].xptype][newch.level];
	LD	A,(IX+-43)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-34)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-33),BC
;   25	
;   26		newch.moves[0] = 0;
	LEA	BC,IX+-42
	LD	(IX+-3),BC
	LD	(IX+-42),0
;   27		newch.moves[1] = 0;
	LD	HL,BC
	INC	HL
	LD	(HL),0
;   28		newch.moves[2] = 0;
	LD	IY,(IX+-3)
	LEA	HL,IY+2
	LD	(HL),0
;   29		newch.moves[3] = 0;
	LEA	HL,IY+3
	LD	(HL),0
;   30		moveSlot = 0;
	LD	BC,0
	LD	(IX+-6),BC
;   31		for (moveIndex = 0; moveIndex < 10; moveIndex++) {
	LD	(IX+-9),BC
	JR	L_17
L_15:
;   32			if (data_pokemon[parent2id].movelevels[moveIndex] <= newch.level && data_pokemon[parent2id].movelevels[moveIndex] <= data_pokemon[parent2id].evolvelevel &&  data_pokemon[parent2id].moveids[moveIndex] != 0) {
	LD	A,(IX+-78)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	(IX+-74),HL
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-96),HL
	LD	IY,(IX+-96)
	LEA	HL,IY+24
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(IX+-34)
	CP	A,(HL)
	JR	C,L_16
	LD	BC,_data_pokemon
	LD	HL,(IX+-74)
	ADD	HL,BC
	LD	(IX+-99),HL
	LD	IY,(IX+-99)
	LEA	HL,IY+24
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(IY+44)
	CP	A,(HL)
	JR	C,L_16
	LD	IY,(IX+-96)
	LEA	HL,IY+34
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-46),HL
	LD	(IX+-90),HL
	LD	(IX+-70),HL
	LD	(IX+-61),HL
	LD	HL,(IX+-46)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_16
;   33				if (moveSlot == 0) {
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JR	NZ,L_6
;   34					newch.moves[0] = data_pokemon[parent2id].moveids[moveIndex];
	LD	BC,(IX+-46)
	LD	(IX+-90),BC
	LD	BC,(IX+-46)
	LD	(IX+-70),BC
	LD	BC,(IX+-46)
	LD	(IX+-61),BC
	LD	HL,(IX+-46)
	LD	A,(HL)
	LD	(IX+-42),A
;   35				}
L_6:
;   36				if (moveSlot == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_8
;   37					newch.moves[1] = data_pokemon[parent2id].moveids[moveIndex];
	LD	BC,(IX+-90)
	LD	(IX+-70),BC
	LD	(IX+-61),BC
	LD	IY,(IX+-70)
	LEA	HL,IX+-42
	INC	HL
	LD	A,(IY)
	LD	(HL),A
;   38				}
L_8:
;   39				if (moveSlot == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
;   40					newch.moves[2] = data_pokemon[parent2id].moveids[moveIndex];
	LD	BC,(IX+-70)
	LD	(IX+-61),BC
	LD	HL,BC
	LEA	IY,IX+-42
	LD	A,(HL)
	LD	(IY+2),A
;   41				}
L_10:
;   42				if (moveSlot == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
;   43					newch.moves[3] = data_pokemon[parent2id].moveids[moveIndex];
	LD	HL,(IX+-61)
	LD	A,(HL)
	LEA	HL,IX+-39
	LD	(HL),A
;   44				}
L_12:
;   45				moveSlot++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;   46				if (moveSlot == 4) {
	LD	HL,BC
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_16
;   47					moveSlot = 0;
	LD	BC,0
	LD	(IX+-6),BC
;   48				}
;   49			}
;   50		}
L_16:
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_17:
	LD	BC,10
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_15
;   51		for (moveIndex = 0; moveIndex < 10; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_34
L_32:
;   52			if (data_pokemon[parent1id].movelevels[moveIndex] <= newch.level && data_pokemon[parent1id].movelevels[moveIndex] <= data_pokemon[parent1id].evolvelevel && data_pokemon[parent1id].moveids[moveIndex] != 0) {
	LD	A,(IX+-71)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	(IX+-77),HL
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-84),HL
	LD	IY,(IX+-84)
	LEA	HL,IY+24
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(IX+-34)
	CP	A,(HL)
	JR	C,L_33
	LD	BC,_data_pokemon
	LD	HL,(IX+-77)
	ADD	HL,BC
	LD	(IX+-102),HL
	LD	IY,(IX+-102)
	LEA	HL,IY+24
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(IY+44)
	CP	A,(HL)
	JR	C,L_33
	LD	IY,(IX+-84)
	LEA	HL,IY+34
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-49),HL
	LD	(IX+-81),HL
	LD	(IX+-67),HL
	LD	(IX+-64),HL
	LD	HL,(IX+-49)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_33
;   53				if (moveSlot == 0) {
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JR	NZ,L_23
;   54					newch.moves[0] = data_pokemon[parent1id].moveids[moveIndex];
	LD	BC,(IX+-49)
	LD	(IX+-81),BC
	LD	BC,(IX+-49)
	LD	(IX+-67),BC
	LD	BC,(IX+-49)
	LD	(IX+-64),BC
	LD	HL,(IX+-49)
	LD	A,(HL)
	LD	(IX+-42),A
;   55				}
L_23:
;   56				if (moveSlot == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_25
;   57					newch.moves[1] = data_pokemon[parent1id].moveids[moveIndex];
	LD	BC,(IX+-81)
	LD	(IX+-67),BC
	LD	(IX+-64),BC
	LD	IY,(IX+-67)
	LEA	HL,IX+-42
	INC	HL
	LD	A,(IY)
	LD	(HL),A
;   58				}
L_25:
;   59				if (moveSlot == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_27
;   60					newch.moves[2] = data_pokemon[parent1id].moveids[moveIndex];
	LD	BC,(IX+-67)
	LD	(IX+-64),BC
	LD	HL,BC
	LEA	IY,IX+-42
	LD	A,(HL)
	LD	(IY+2),A
;   61				}
L_27:
;   62				if (moveSlot == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_29
;   63					newch.moves[3] = data_pokemon[parent1id].moveids[moveIndex];
	LD	HL,(IX+-64)
	LD	A,(HL)
	LEA	HL,IX+-39
	LD	(HL),A
;   64				}
L_29:
;   65				moveSlot++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;   66				if (moveSlot == 4) {
	LD	HL,BC
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_33
;   67					moveSlot = 0;
	LD	BC,0
	LD	(IX+-6),BC
;   68				}
;   69			}
;   70		}
L_33:
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_34:
	LD	BC,10
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_32
;   71		for (moveIndex = 0; moveIndex < 10; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_51
L_49:
;   72			if (data_pokemon[id].movelevels[moveIndex] <= newch.level && data_pokemon[id].moveids[moveIndex] != 0) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-87),HL
	LD	IY,(IX+-87)
	LEA	HL,IY+24
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(IX+-34)
	CP	A,(HL)
	JR	C,L_50
	LD	IY,(IX+-87)
	LEA	HL,IY+34
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-52),HL
	LD	(IX+-93),HL
	LD	(IX+-58),HL
	LD	(IX+-55),HL
	LD	HL,(IX+-52)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_50
;   73				if (moveSlot == 0) {
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JR	NZ,L_40
;   74					newch.moves[0] = data_pokemon[id].moveids[moveIndex];
	LD	BC,(IX+-52)
	LD	(IX+-93),BC
	LD	BC,(IX+-52)
	LD	(IX+-58),BC
	LD	BC,(IX+-52)
	LD	(IX+-55),BC
	LD	HL,(IX+-52)
	LD	A,(HL)
	LD	(IX+-42),A
;   75				}
L_40:
;   76				if (moveSlot == 1) {
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_42
;   77					newch.moves[1] = data_pokemon[id].moveids[moveIndex];
	LD	BC,(IX+-93)
	LD	(IX+-58),BC
	LD	(IX+-55),BC
	LD	IY,(IX+-58)
	LEA	HL,IX+-42
	INC	HL
	LD	A,(IY)
	LD	(HL),A
;   78				}
L_42:
;   79				if (moveSlot == 2) {
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_44
;   80					newch.moves[2] = data_pokemon[id].moveids[moveIndex];
	LD	BC,(IX+-58)
	LD	(IX+-55),BC
	LD	HL,BC
	LEA	IY,IX+-42
	LD	A,(HL)
	LD	(IY+2),A
;   81				}
L_44:
;   82				if (moveSlot == 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_46
;   83					newch.moves[3] = data_pokemon[id].moveids[moveIndex];
	LD	HL,(IX+-55)
	LD	A,(HL)
	LEA	HL,IX+-39
	LD	(HL),A
;   84				}
L_46:
;   85				moveSlot++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;   86				if (moveSlot == 4) {
	LD	HL,BC
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_50
;   87					moveSlot = 0;
	LD	BC,0
	LD	(IX+-6),BC
;   88				}
;   89			}
;   90		}
L_50:
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_51:
	LD	BC,10
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_49
;   91		newch.pp[0] = data_moves[newch.moves[0]].uses;
	LEA	BC,IX+-42
	LD	(IX+-108),BC
	LEA	BC,IX+-38
	LD	(IX+-105),BC
	LD	A,(IX+-42)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	LD	(IX+-38),A
;   92		newch.pp[1] = data_moves[newch.moves[1]].uses;
	LD	HL,(IX+-108)
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-105)
	INC	HL
	LD	A,(IY+18)
	LD	(HL),A
;   93		newch.pp[2] = data_moves[newch.moves[2]].uses;
	LD	IY,(IX+-108)
	LEA	HL,IY+2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	IY,(IX+-105)
	ADD	HL,BC
	LD	(IX+-121),IY	; spill
	LEA	IY,IY+2
	LD	(IX+-124),IY	; spill
	LD	IY,HL
	LD	A,(IY+18)
	LD	IY,(IX+-124)	; unspill
	LD	(IY),A
;   94		newch.pp[3] = data_moves[newch.moves[3]].uses;
	LD	IY,(IX+-108)
	LEA	HL,IY+3
	LD	IY,(IX+-105)
	LEA	IY,IY+3
	LD	(IX+-127),IY	; spill
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	LD	IY,(IX+-127)	; unspill
	LD	(IY),A
;   95	
;   96		newch.currentstatus = 0;
	LD	(IX+-28),0
;   97	
;   98		newch.healthIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-27),L
;   99		newch.attackIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-26),L
;  100		newch.defenceIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-25),L
;  101		newch.specialattackIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-24),L
;  102		newch.specialdefenceIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-23),L
;  103		newch.speedIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-22),L
;  104		newch.healthEV = 0;
	LD	(IX+-21),0
	LD	(IX+-20),0
;  105		newch.attackEV = 0;
	LD	(IX+-19),0
	LD	(IX+-18),0
;  106		newch.defenceEV = 0;
	LD	(IX+-17),0
	LD	(IX+-16),0
;  107		newch.specialattackEV = 0;
	LD	(IX+-15),0
	LD	(IX+-14),0
;  108		newch.specialdefenceEV = 0;
	LD	(IX+-13),0
	LD	(IX+-12),0
;  109		newch.speedEV = 0;
	LD	(IX+-11),0
	LD	(IX+-10),0
;  110	
;  111		newch.currenthealth = ((((data_pokemon[newch.id].basehealth + newch.healthIV) * 2 + (isqrt(newch.healthEV) / 4))*newch.level) / 100) + newch.level + 10;
	LD	A,(IX+-43)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-27)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-112),A
	LD	(IX+-111),BC
	LD	BC,(IX+-21)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	POP	BC
	POP	BC
	LD	BC,HL
	LD	L,2
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-111)
	LD	E,(IX+-112)
	CALL	__ladd
	LD	(IX+-118),HL
	UEXT	HL
	LD	L,(IX+-34)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-118)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-115),HL
	UEXT	HL
	LD	L,(IX+-34)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-115)
	CALL	__ladd
	LD	A,10
	CALL	__ladd_b
	LD	(IX+-30),L
	LD	(IX+-29),H
;  112	
;  113		return newch;
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IX+-43
	LD	BC,34
	LDIR	
	LD	HL,(IX+6)	; spill
;  114	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _stats_NewCharacter ***************************
;Name                         Addr/Register   Size   Type
;_isqrt                              IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_xpPerLevel                         IMPORT   1212   variable
;_data_pokemon                       IMPORT  unknown variable
;G_1                                  IX-96      3   variable
;G_14                                 IX-93      3   variable
;G_3                                  IX-90      3   variable
;G_12                                 IX-87      3   variable
;G_7                                  IX-84      3   variable
;G_9                                  IX-81      3   variable
;parent2id                            IX-78      1   variable
;G_6                                  IX-77      3   variable
;G_0                                  IX-74      3   variable
;parent1id                            IX-71      1   variable
;G_4                                  IX-70      3   variable
;G_10                                 IX-67      3   variable
;G_11                                 IX-64      3   variable
;G_5                                  IX-61      3   variable
;G_15                                 IX-58      3   variable
;G_16                                 IX-55      3   variable
;G_13                                 IX-52      3   variable
;G_8                                  IX-49      3   variable
;G_2                                  IX-46      3   variable
;newch                                IX-43     34   variable
;moveIndex                             IX-9      3   variable
;moveSlot                              IX-6      3   variable
;level                                IX+12      1   parameter
;id                                    IX+9      1   parameter


; Stack Frame Size: 142 (bytes)
;       Spill Code: -1 (instruction)


;  115	
;  116	/* NOTE: I have no idea how this works */
;  117	unsigned long isqrt(unsigned long x)
;  118	{
_isqrt:
	LD	HL,-16
	CALL	__frameset
;  119		
;  120		register unsigned long op, res, one;
;  121	
;  122		op = x;
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(IX+-12),BC
	LD	(IX+-9),A
;  123		res = 0;
	LD	BC,0
	LD	(IX+-8),BC
	XOR	A,A
	LD	(IX+-5),A
;  124	
;  125		/* "one" starts at the highest power of four <= than the argument. */
;  126		one = 1 << 30;  /* second-to-top bit set */
	LD	(IX+-4),BC
	XOR	A,A
	LD	(IX+-1),A
;  127		while (one > op) one >>= 2;
	JR	L_55
L_56:
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	L,2
	CALL	__lshru
	LD	(IX+-4),BC
	LD	(IX+-1),A
L_55:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__lcmpu
	JR	C,L_56
;  128	
;  129		while (one != 0) {
	JR	L_59
L_60:
;  130			if (op >= res + one) {
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__ladd
	LD	(IX+-16),HL
	LD	(IX+-13),E
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	CALL	__lcmpu
	JR	C,L_58
;  131				op -= res + one;
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	CALL	__lsub
	LD	(IX+-12),HL
	LD	(IX+-9),E
;  132				res += one << 1;  // <-- faster than 2 * one  
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	L,1
	CALL	__lshl
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__ladd
	LD	(IX+-8),HL
	LD	(IX+-5),E
;  133			}
L_58:
;  134			res >>= 1;
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	LD	L,1
	CALL	__lshru
	LD	(IX+-8),BC
	LD	(IX+-5),A
;  135			one >>= 2;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	L,2
	CALL	__lshru
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  136		}
L_59:
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__lcmpzero
	JR	NZ,L_60
;  137		return res;
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isqrt ***************************
;Name                         Addr/Register   Size   Type
;G_17                                 IX-16      4   variable
;op                                   IX-12      4   variable
;res                                   IX-8      4   variable
;one                                   IX-4      4   variable
;x                                     IX+6      4   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: -1 (instruction)


	XREF _xpPerLevel:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _rand:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __lsub:ROM
	XREF __imulu:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __lshl:ROM
	XREF __irems:ROM
	XREF __lshru:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __lcmpzero:ROM
	XREF __imul_b:ROM
	XREF __ladd_b:ROM
	XDEF _isqrt
	XDEF _stats_NewCharacter
	XDEF _stats_CalculateStats
	END
