; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MENU.C"
	.assume ADL=1
	SEGMENT BSS
_switchMode:
	DS	1
_pokemonToSwitch:
	DS	1
_tempcharacter:
	DS	35
	SEGMENT DATA
_menuState1:
	DB	0
_menuState2:
	DB	0
_menuCurrent:
	DB	1
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <compression.h>
;   12	
;   13	#include "map.h"
;   14	#include "battle.h"
;   15	#include "menu.h"
;   16	#include "misc.h"
;   17	#include "data.h"
;   18	#include "text.h"
;   19	#include "savegame.h"
;   20	#include "stats.h"
;   21	#include "gfx/battle_gfx.h"
;   22	#include "items.h"
;   23	#include "gfx/PKMNSD0.h"
;   24	#include "gfx/PKMNSD1.h"
;   25	#include "gfx/PKMNSD2.h"
;   26	#include "gfx/PKMNSD3.h"
;   27	#include "gfx/PKMNSD5.h"
;   28	
;   29	void MoveMenuCursor(int max);
;   30	
;   31	void ItemMenu(void);
;   32	void FastTravelMenu(void);
;   33	
;   34	
;   35	/* Press enter to toggle; allows player to switch pokemon around */
;   36	bool switchMode;
;   37	uint8_t pokemonToSwitch;
;   38	struct pokemonData tempcharacter;
;   39	
;   40	
;   41	
;   42	uint8_t menuState1 = 0;
;   43	uint8_t menuState2 = 0;
;   44	uint8_t menuCurrent = 1;
	SEGMENT CODE
;   45	
;   46	void menu_Setup(void) {
_menu_Setup:
;   47	
;   48		zx7_Decompress(textBoxSprite1, menutextbox1_compressed);
	LD	BC,(_PKMNSD5)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   49		zx7_Decompress(textBoxSprite2, menutextbox2_compressed);
	LD	HL,_PKMNSD5+3
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   50	
;   51		gfx_SetPalette(battle_gfx_pal, sizeof_battle_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD5+111
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   52		SetColors(1);
	LD	BC,1
	PUSH	BC
	CALL	_SetColors
	POP	BC
;   53		gfx_SetTextFGColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   54	
;   55	
;   56	}
	RET	


;**************************** _menu_Setup ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   57	
;   58	uint8_t menu_Menu(void) {
_menu_Menu:
	LD	HL,-4
	CALL	__frameset
;   59		int8_t cursorState = 0;
	LD	(IX+-1),0
;   60		
;   61	
;   62		gfx_PrintStringXY("Pokemon", 215, 35);
	LD	BC,35
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   63		gfx_PrintStringXY("Bag", 215, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   64		gfx_PrintStringXY("Close Menu", 215, 65);
	LD	BC,65
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   65		gfx_PrintStringXY("Save", 215, 80);
	LD	BC,80
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   66		gfx_PrintStringXY("Exit Game", 215, 95);
	LD	BC,95
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   67		gfx_PrintStringXY(">", 208, 35 + 15 * cursorState);
	LD	BC,35
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   68	
;   69		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   70		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   71	
;   72		while (!(kb_Data[6] & kb_Clear)) {
	JR	L_22
L_23:
;   73			kb_Scan();
	CALL	_kb_Scan
;   74			if ((kb_Data[7] & kb_Down)) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_7
;   75				cursorState += 1;
	INC	(IX+-1)
;   76				if (cursorState == 5) {
	LD	A,(IX+-1)
	CP	A,5
	JR	NZ,L_2
;   77					cursorState = 0;
	LD	(IX+-1),0
;   78				}
L_2:
;   79				gfx_FillRectangle(205, 35, 10, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,205
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   80				gfx_PrintStringXY(">", 208, 35 + 15 * cursorState);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+35
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   81				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;   82			}
L_7:
;   83			if ((kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_21
;   84				cursorState -= 1;
	DEC	(IX+-1)
;   85				if (cursorState == -1) {
	LD	A,(IX+-1)
	CP	A,-1
	JR	NZ,L_5
;   86					cursorState = 4;
	LD	(IX+-1),4
;   87				}
L_5:
;   88				gfx_FillRectangle(205, 35, 10, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,205
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   89				gfx_PrintStringXY(">", 208, 35 + 15 * cursorState);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+35
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   90				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;   91			}
L_21:
;   92			if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_22
;   93				gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   94				if (cursorState == 0) {
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_13
;   95					int chosenPokemon;
;   96					choosePokemon:
L_8:
;   97					chosenPokemon = menu_PokemonMenu(true);
	LD	BC,1
	PUSH	BC
	CALL	_menu_PokemonMenu
	POP	BC
	LD	(IX+-4),HL
;   98					if (chosenPokemon != 0) {
	CALL	__icmpzero
	JR	Z,L_10
;   99						menu_PokemonDetails(chosenPokemon - 1);
	LD	BC,(IX+-4)
	DEC	BC
	PUSH	BC
	CALL	_menu_PokemonDetails
	POP	BC
;  100						goto choosePokemon;
	JR	L_8
;  101					}
L_10:
;  102					return 0;
	XOR	A,A
	JR	L_25
;  103				}
L_13:
;  104				if (cursorState == 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_15
;  105					menu_Items(false);
	LD	BC,0
	PUSH	BC
	CALL	_menu_Items
	POP	BC
;  106					return 0;
	XOR	A,A
	JR	L_25
;  107				}
L_15:
;  108				if (cursorState == 2) {
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_19
;  109					return 0;
	XOR	A,A
	JR	L_25
;  110				}
L_19:
;  111				if (cursorState == 3) {
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_18
;  112					save_Save();
	CALL	_save_Save
;  113					return 0;
	XOR	A,A
	JR	L_25
;  114				}
;  115				else if (cursorState == 4) {
L_18:
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_22
;  116					return 2;
	LD	A,2
	JR	L_25
;  117				}
;  118			}
;  119		}
L_22:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_23
;  120		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  121		return 0;
	XOR	A,A
;  122	}
L_25:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_Menu ***************************
;Name                         Addr/Register   Size   Type
;_save_Save                          IMPORT  -----   function
;_menu_Items                         IMPORT  -----   function
;_menu_PokemonDetails                IMPORT  -----   function
;_menu_PokemonMenu                   IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;chosenPokemon                         IX-4      3   variable
;cursorState                           IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Pokemon"
	DB	0
L__2:
	DB	"Bag"
	DB	0
L__3:
	DB	"Close Menu"
	DB	0
L__4:
	DB	"Save"
	DB	0
L__5:
	DB	"Exit Game"
	DB	0
L__6:
	DB	">"
	DB	0
L__9:
	DB	">"
	DB	0
L__12:
	DB	">"
	DB	0
	SEGMENT CODE
;  123	
;  124	int menu_PokemonMenu(bool pressEnter) {
_menu_PokemonMenu:
	LD	HL,-97
	CALL	__frameset
;  125		int partyIndex, statusIndex, menuState;
;  126		gfx_sprite_t *backgroundSprite;
;  127		gfx_sprite_t *pokemonSprite;
;  128		int baseX[6] = { 20,175,20,175,20,175 };
	LEA	DE,IX+-43
	LD	HL,_0temp26
	LD	BC,18
	LDIR	
;  129		int baseY[6] = { 20,20,70,70,120,120 };
	LEA	DE,IX+-61
	LD	HL,_1temp27
	LD	BC,18
	LDIR	
;  130	
;  131	
;  132		menuState = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  133		backgroundSprite = gfx_MallocSprite(160, 88);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-19),HL
;  134		pokemonSprite = gfx_MallocSprite(133, 36);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,36
	PUSH	BC
	LD	BC,133
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  135		zx7_Decompress(backgroundSprite, pokemonlist_compressed);
	LD	IY,_PKMNSD5
	LD	(IX+-22),HL
	LD	BC,(IY+90)
	PUSH	BC
	LD	BC,(IX+-19)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  136		zx7_Decompress(pokemonSprite, menupokemon_compressed);
	LD	HL,_PKMNSD5+93
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  137		MallocIcons();
	CALL	_MallocIcons
;  138	
;  139	
;  140		menu_Setup();
	CALL	_menu_Setup
;  141	
;  142		redraw_PokemonMenu:
L_28:
;  143		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  144	
;  145		gfx_FillScreen(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  146		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  147		gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-19)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  148		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_40
L_38:
;  149			int healthRatio;
;  150			if (party[partyIndex].id != 0) {
	LD	HL,(IX+-6)
	LD	A,35
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_39
;  151				gfx_TransparentSprite_NoClip(pokemonSprite, baseX[partyIndex], baseY[partyIndex]);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	LD	BC,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  152				gfx_PrintStringXY(data_pokemon[party[partyIndex].id].name, baseX[partyIndex] + 4, baseY[partyIndex] + 4);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+4
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  153				sprintf(str, "Lv%u", party[partyIndex].level);
	LD	IY,(IX+-9)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__23
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  154				gfx_PrintStringXY(str, baseX[partyIndex] + 92, baseY[partyIndex] + 4);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+4
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+92
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  155	
;  156				if (party[partyIndex].currentstatus > 0) {
	LD	BC,(IX+-9)
	LD	(IX+-25),BC
	LD	IY,(IX+-9)
	XOR	A,A
	CP	A,(IY+16)
	JR	NC,L_31
;  157					gfx_TransparentSprite_NoClip(statusIcons[party[partyIndex].currentstatus - 1], baseX[partyIndex] + 7, baseY[partyIndex] + 14);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+-9)
	LD	(IX+-25),BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	IY,(HL)
	LEA	HL,IY+14
	LD	C,L
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	ADD	HL,DE
	LD	IY,(HL)
	LEA	BC,IY+7
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  158				}
L_31:
;  159				healthRatio = (party[partyIndex].currenthealth * 78) / stats_CalculateStats(party[partyIndex]).health;
	LD	BC,(IX+-12)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-64),HL
	LD	IY,(IX+-64)
	LD	BC,(IY+14)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	IY,0
	ADD	IY,SP
	LD	(IX+-97),HL
	LD	HL,(IX+-64)
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-76
	LD	DE,IY
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+-97)
	CALL	__idivs
	LD	(IX+-16),HL
;  160				if (healthRatio > 34) {
	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	JP	P,L_35
;  161					gfx_SetColor(colors[8]);
	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  162				}
;  163				else if (healthRatio > 14) {
	JR	L_36
L_35:
	LD	BC,(IX+-16)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_33
;  164					gfx_SetColor(colors[9]);
	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  165				}
;  166				else {
	JR	L_36
L_33:
;  167					gfx_SetColor(colors[10]);
	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  168				}
L_36:
;  169				gfx_FillRectangle(baseX[partyIndex] + 47, baseY[partyIndex] + 16, healthRatio, 4);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LD	HL,4
	PUSH	HL
	LD	HL,(IX+-16)
	PUSH	HL
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+16
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+47
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  170	
;  171				sprintf(str, "%u/%u", party[partyIndex].currenthealth, stats_CalculateStats(party[partyIndex]).health);
	LD	HL,(IX+-9)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-88
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	IY,(IX+-25)
	LD	BC,(IY+14)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__27
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  172				gfx_PrintStringXY(str, baseX[partyIndex] + 32, baseY[partyIndex] + 24);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+24
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+32
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  173			}
;  174		}
L_39:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_40:
	LD	BC,6
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_38
;  175		gfx_PrintStringXY("Select a pokemon", 30, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,L__29
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  176		if (pressEnter) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_43
;  177			gfx_PrintStringXY("Press Enter to move pokemon", 30, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  178		}
L_43:
;  179	
;  180		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  181	
;  182		gfx_Blit(gfx_buffer);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  183		gfx_TransparentSprite_NoClip(menucursor, baseX[menuState] - 15, baseY[menuState] + 8);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	IY,(HL)
	LEA	HL,IY+8
	LD	C,L
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	ADD	HL,DE
	LD	IY,(HL)
	LEA	BC,IY+-15
	PUSH	BC
	LD	BC,_menucursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  184	
;  185		
;  186	
;  187	
;  188		Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  189		kb_Scan();
	CALL	_kb_Scan
;  190	
;  191		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_45
L_46:
	CALL	_kb_Scan
L_45:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_46
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_46
;  192		while (!(((kb_Data[1] & kb_2nd) && party[menuState].id != 0) || (kb_Data[6] & kb_Clear))) {
	JR	L_74
L_75:
;  193			kb_Scan();
	CALL	_kb_Scan
;  194			if ((kb_Data[6] & kb_Enter) && pressEnter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_68
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_68
;  195				tempcharacter = party[menuState];
	LD	HL,(IX+-3)
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	DE,_tempcharacter
	LD	BC,35
	LDIR	
;  196				for (partyIndex = menuState; partyIndex > 0; partyIndex--) {
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
	JR	L_53
L_51:
;  197					party[partyIndex] = party[partyIndex - 1];
	LD	HL,(IX+-6)
	LD	(IX+-94),HL	; spill
	DEC	HL
	LD	(IX+-94),HL	; spill
	LD	BC,HL
	LD	HL,35
	CALL	__imulu
	LD	BC,_party
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	A,35
	CALL	__imul_b
	LD	DE,_party
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,35
	LDIR	
	LD	HL,(IX+-94)	; unspill
	LD	(IX+-6),HL
;  198				}
L_53:
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_51
;  199				party[0] = tempcharacter;
	LD	DE,_party
	LD	HL,_tempcharacter
	LD	BC,35
	LDIR	
;  200				goto redraw_PokemonMenu;
	JR	L_28
;  201			}
L_68:
;  202			if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-13),A
	OR	A,A
	JR	Z,L_67
;  203				menuState+=2;
	LD	IY,(IX+-3)
	LEA	IY,IY+2
	LD	(IX+-3),IY
;  204				if (menuState == 6 || menuState == 7) {
	LD	HL,(IX+-3)
	LD	BC,6
	OR	A,A
	SBC	HL,BC
	JR	Z,L_57
	LD	BC,7
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_73
L_57:
;  205					menuState -= 6;
	LD	IY,(IX+-3)
	LEA	IY,IY+-6
	LD	(IX+-3),IY
;  206				}
;  207			}
;  208			else if (kb_Data[7] & kb_Up) {
	JR	L_73
L_67:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_65
;  209				menuState-=2;
	LD	IY,(IX+-3)
	LEA	IY,IY+-2
	LD	(IX+-3),IY
;  210				if (menuState == -1 || menuState == -2) {
	LD	HL,(IX+-3)
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_59
	LD	BC,16777214
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_73
L_59:
;  211					menuState += 6;
	LD	IY,(IX+-3)
	LEA	IY,IY+6
	LD	(IX+-3),IY
;  212				}
;  213			}
;  214			else if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	JR	L_73
L_65:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_63
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_73
L_63:
;  215				if (menuState % 2 == 0) {
	LD	BC,2
	LD	HL,(IX+-3)
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_62
;  216					menuState += 1;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  217				}
;  218				else {
	JR	L_73
L_62:
;  219					menuState -= 1;
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
;  220				}
;  221			}
L_73:
;  222			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left) || (kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_72
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_72
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_72
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_74
L_72:
;  223				gfx_Blit(gfx_buffer);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  224				gfx_TransparentSprite_NoClip(menucursor, baseX[menuState] - 15, baseY[menuState] + 8);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	IY,(HL)
	LEA	HL,IY+8
	LD	C,L
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	ADD	HL,DE
	LD	IY,(HL)
	LEA	BC,IY+-15
	PUSH	BC
	LD	BC,_menucursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  225				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  226			}
;  227		}
L_74:
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_48
	LD	HL,(IX+-3)
	LD	A,35
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_77
L_48:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_75
L_77:
;  228		free(backgroundSprite);
	LD	BC,(IX+-19)
	PUSH	BC
	CALL	_free
	POP	BC
;  229		free(pokemonSprite);
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_free
	POP	BC
;  230		FreeIcons();
	CALL	_FreeIcons
;  231		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  232		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_79
	OR	A,A
;  233			return 0;
	SBC	HL,HL
	JR	L_80
;  234		}
L_79:
;  235		return menuState + 1;
	LD	HL,(IX+-3)
	INC	HL
;  236	}
L_80:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_PokemonMenu ***************************
;Name                         Addr/Register   Size   Type
;_FreeIcons                          IMPORT  -----   function
;_free                               IMPORT  -----   function
;_tempcharacter                      STATIC     35   variable
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_menucursor_data                    IMPORT    262   variable
;_gfx_Blit                           IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_stats_CalculateStats               IMPORT  -----   function
;_statusIcons                        IMPORT     15   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_party                              IMPORT   1260   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_menu_Setup                         IMPORT  -----   function
;_MallocIcons                        IMPORT  -----   function
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_1temp27                            STATIC     18   variable
;_0temp26                            STATIC     18   variable
;baseY                                IX-61     18   variable
;baseX                                IX-43     18   variable
;G_10                                 IX-25      3   variable
;pokemonSprite                        IX-22      3   variable
;backgroundSprite                     IX-19      3   variable
;healthRatio                          IX-16      3   variable
;G_11                                 IX-13      1   variable
;G_8                                  IX-12      3   variable
;G_9                                   IX-9      3   variable
;partyIndex                            IX-6      3   variable
;menuState                             IX-3      3   variable
;pressEnter                            IX+6      1   parameter


; Stack Frame Size: 106 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__23:
	DB	"Lv%u"
	DB	0
L__27:
	DB	"%u/%u"
	DB	0
L__29:
	DB	"Select a pokemon"
	DB	0
L__31:
	DB	"Press Enter to move pokemon"
	DB	0
	SEGMENT TEXT
_0temp26:
	DW	20
	DB	0
	DW	175
	DB	0
	DW	20
	DB	0
	DW	175
	DB	0
	DW	20
	DB	0
	DW	175
	DB	0
_1temp27:
	DW	20
	DB	0
	DW	20
	DB	0
	DW	70
	DB	0
	DW	70
	DB	0
	DW	120
	DB	0
	DW	120
	DB	0
	SEGMENT CODE
;  237	void menu_PokemonDetails(int pokemonIndex) {
_menu_PokemonDetails:
	LD	HL,-156
	CALL	__frameset
;  238		int page, menuState, tempMove, moveIndex;
;  239		gfx_sprite_t *backgroundSprite;
;  240	
;  241		backgroundSprite = gfx_MallocSprite(160, 88);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-36),HL
;  242		
;  243	
;  244		menu_Setup();
	CALL	_menu_Setup
;  245	
;  246		page = 1;
	LD	BC,1
	LD	(IX+-27),BC
;  247		menuState = 0;
	LD	BC,0
	LD	(IX+-9),BC
;  248		while (page != 0) {
	JR	L_131
L_132:
;  249			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  250			kb_Scan();
	CALL	_kb_Scan
;  251			if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_109
;  252				gfx_sprite_t *pokemonSprite;
;  253				zx7_Decompress(backgroundSprite, infoscreen1_compressed);
	LD	HL,_PKMNSD5+99
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  254				gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  255	
;  256	
;  257				gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  258	
;  259	
;  260				
;  261				gfx_PrintStringXY(data_pokemon[party[pokemonIndex].id].name, 4, 32);
	LD	HL,(IX+6)
	LD	A,35
	CALL	__imul_b
	LD	(IX+-30),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,32
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  262				pokemonSprite = gfx_MallocSprite(56, 56);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-39),HL
;  263				if (pokemonIndex < 80) {
	LD	HL,(IX+6)
	LD	BC,80
	OR	A,A
	SBC	HL,BC
	JP	P,L_82
;  264					zx7_Decompress(pokemonSprite, PKMNSD0[party[pokemonIndex].id]);
	LD	BC,(IX+-3)
	LD	(IX+-57),BC
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  265				}
;  266				else {
	JR	L_83
L_82:
;  267					zx7_Decompress(pokemonSprite, PKMNSD1[party[pokemonIndex].id - 80]);
	LD	BC,(IX+-3)
	LD	(IX+-57),BC
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  268				}
L_83:
;  269				gfx_ScaledTransparentSprite_NoClip(pokemonSprite, 26, 52, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,52
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  270				free(pokemonSprite);
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_free
	POP	BC
;  271	
;  272				sprintf(str, "%u/%u", party[pokemonIndex].currenthealth, stats_CalculateStats(party[pokemonIndex]).health);
	LD	BC,(IX+-57)
	LD	IY,0
	ADD	IY,SP
	LD	(IX+-21),BC
	LD	HL,(IX+-3)
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-75
	LD	DE,IY
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	IY,(IX+-21)
	LD	BC,(IY+14)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__57
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  273				gfx_PrintStringXY(str, 208, 38);
	LD	BC,38
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  274				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).attack);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-87
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	INC	HL
	INC	HL
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__58
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  275				gfx_PrintStringXY(str, 228, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  276				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).defence);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-99
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+4
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__59
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  277				gfx_PrintStringXY(str, 228, 86);
	LD	BC,86
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  278				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).specialattack);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-111
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__60
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  279				gfx_PrintStringXY(str, 228, 110);
	LD	BC,110
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  280				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).specialdefence);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-123
	LD	BC,35
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+8
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__61
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  281				gfx_PrintStringXY(str, 228, 134);
	LD	BC,134
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  282				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).speed);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-22),HL
	LD	(IY+-25),IX	; unspill
	LD	HL,(IY+-22)
	POP	IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,35
	LDIR	
	LD	BC,-135
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-25)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-25),HL	; unspill
	LD	HL,(IY+-25)
	POP	IY
	LD	BC,HL
	PUSH	BC
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+10
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__62
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  283				gfx_PrintStringXY(str, 228, 158);
	LD	BC,158
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  284	
;  285				sprintf(str, "%u", party[pokemonIndex].level);
	LD	IY,(IX+-21)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__63
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  286				gfx_PrintStringXY(str, 64, 186);
	LD	BC,186
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  287				gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element1 - 1], 218, 188);
	LD	BC,_data_pokemon
	LD	DE,188
	PUSH	DE
	LD	DE,218
	PUSH	DE
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  288				if (data_pokemon[party[pokemonIndex].id].element2 != 0) {
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	OR	A,A
	JR	Z,L_85
;  289					gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element2 - 1], 254, 188);
	LD	DE,188
	PUSH	DE
	LD	DE,254
	PUSH	DE
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  290				}
L_85:
;  291				sprintf(str, "%u/%u", party[pokemonIndex].xp, xpPerLevel[data_pokemon[party[pokemonIndex].id].xptype][party[pokemonIndex].level+1]);
	LD	BC,_party
	LD	HL,(IX+-30)
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-10),HL
	LD	IY,(IY+-10)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,404
	CALL	__imulu
	LEA	IY,IX+-128
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	IY,(IY+-10)
	LD	A,(IY+9)
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	IY,HL
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	LEA	IY,IX+-128
	LD	IY,(IY+-10)
	LD	BC,(IY+10)
	LD	A,(IY+13)
	LD	L,A
	PUSH	HL
	PUSH	BC
	LD	BC,L__65
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  292				gfx_PrintStringXY(str, 64, 210);
	LD	BC,210
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  293	
;  294				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  295	
;  296				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  297				while (!((kb_Data[7] & kb_Right) || (kb_Data[6] & kb_Clear))) {
	JR	L_87
L_88:
;  298					kb_Scan();
	CALL	_kb_Scan
;  299				}
L_87:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_111
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_111
	JR	L_88
;  300			}
;  301			else if (page == 2) {
L_109:
	LD	BC,2
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_111
;  302				zx7_Decompress(backgroundSprite, infoscreen2_compressed);
	LD	HL,_PKMNSD5+102
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  303				gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  304	
;  305				gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  306	
;  307				gfx_PrintStringXY(data_pokemon[party[pokemonIndex].id].name, 4, 32);
	LD	HL,(IX+6)
	LD	A,35
	CALL	__imul_b
	LD	(IX+-15),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-54),HL
	LD	HL,(IX+-15)
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	BC,32
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  308				gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element1 - 1], 164, 32);
	LD	BC,_data_pokemon
	LD	DE,32
	PUSH	DE
	LD	DE,164
	PUSH	DE
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  309				if (data_pokemon[party[pokemonIndex].id].element2 != 0) {
	LD	BC,(IX+-18)
	LD	(IX+-42),BC
	LD	BC,(IX+-18)
	LD	(IX+-24),BC
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	OR	A,A
	JR	Z,L_90
;  310					gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element2 - 1], 200, 32);
	LD	BC,(IX+-18)
	LD	(IX+-42),BC
	LD	BC,(IX+-18)
	LD	(IX+-24),BC
	LD	BC,_data_pokemon
	LD	DE,32
	PUSH	DE
	LD	DE,200
	PUSH	DE
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  311				}
L_90:
;  312	
;  313				gfx_TransparentSprite_NoClip(menucursor, 8, 56 + 24 * menuState);
	LD	B,(IX+-9)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,56
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,_menucursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  314				for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_99
L_97:
;  315					if (party[pokemonIndex].moves[moveIndex] > 0) {
	LD	BC,(IX+-42)
	LD	(IX+-24),BC
	LD	IY,(IX+-24)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-45),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_98
;  316						gfx_PrintStringXY(data_moves[party[pokemonIndex].moves[moveIndex]].name, 30, 58 + 24 * moveIndex);
	LD	HL,(IX+-45)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-60),HL
	LD	HL,(IX+-6)
	LD	A,24
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+58
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	IY,(IX+-60)
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  317						gfx_TransparentSprite_NoClip(typeIcons[data_moves[party[pokemonIndex].moves[moveIndex]].element - 1], 242, 60 + 24 * moveIndex);
	LD	B,(IX+-6)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,60
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,242
	PUSH	BC
	LD	IY,(IX+-60)
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  318						if(data_moves[party[pokemonIndex].moves[moveIndex]].type == 0)
	LD	BC,(IX+-54)
	LD	(IX+-12),BC
	LD	(IX+-42),BC
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	IY,(IX+-12)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_95
;  319							gfx_TransparentSprite_NoClip(categoryIcons[0], 280, 59 + 24 * moveIndex);
	LD	B,(IX+-6)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,59
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,280
	PUSH	BC
	LD	BC,(_categoryIcons)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  320						else if (data_moves[party[pokemonIndex].moves[moveIndex]].type == 1) {
	JR	L_98
L_95:
	LD	BC,(IX+-12)
	LD	(IX+-12),BC
	LD	(IX+-54),BC
	LD	BC,(IX+-12)
	LD	(IX+-42),BC
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	IY,(IX+-12)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,1
	JR	NZ,L_93
;  321							gfx_TransparentSprite_NoClip(categoryIcons[1], 280, 59 + 24 * moveIndex);
	LD	B,(IX+-6)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,59
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,_categoryIcons+3
	LD	BC,280
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  322						}
;  323						else {
	JR	L_98
L_93:
;  324							gfx_TransparentSprite_NoClip(categoryIcons[2], 280, 59 + 24 * moveIndex);
	LD	B,(IX+-6)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,59
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,_categoryIcons+6
	LD	BC,280
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  325						}
;  326					}
;  327				}
L_98:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_99:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_97
;  328	
;  329				sprintf(str, "%u", data_moves[party[pokemonIndex].moves[menuState]].power);
	LD	IY,(IX+-24)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-48),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__74
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  330				gfx_PrintStringXY(str, 66, 168);
	LD	BC,168
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  331				sprintf(str, "%u", data_moves[party[pokemonIndex].moves[menuState]].accuracy);
	LD	HL,(IX+-48)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__75
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  332				gfx_PrintStringXY(str, 66, 194);
	LD	BC,194
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  333				sprintf(str, "%u/%u", party[pokemonIndex].pp[menuState], data_moves[party[pokemonIndex].moves[menuState]].uses);
	LD	HL,(IX+-15)
	LD	BC,_party
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-13),HL
	LD	IY,(IY+-13)
	LD	BC,(IX+-9)
	LEA	HL,IY+1
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-13)
	LD	BC,(IX+-9)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__76
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  334				gfx_PrintStringXY(str, 66, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  335	
;  336				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  337	
;  338	
;  339				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  340				while (!((kb_Data[7] & kb_Left) || (kb_Data[6] & kb_Clear) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Down) || (kb_Data[6] & kb_Enter))) {
	JR	L_105
L_106:
;  341					kb_Scan();
	CALL	_kb_Scan
;  342				}
L_105:
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_111
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_111
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_111
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_111
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_106
;  343			}
L_111:
;  344			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_113
;  345				page = 2;
	LD	BC,2
	LD	(IX+-27),BC
;  346			}
L_113:
;  347			if (kb_Data[7] & kb_Left) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_117
;  348				page = 1;
	LD	BC,1
	LD	(IX+-27),BC
;  349			}
L_117:
;  350			if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_121
;  351				if (menuState > 0) {
	LD	BC,(IX+-9)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_121
;  352					menuState--;
	LD	BC,(IX+-9)
	DEC	BC
	LD	(IX+-9),BC
;  353				}
;  354			}
L_121:
;  355			if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_128
;  356				if (menuState < 3) {
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JP	P,L_128
;  357					menuState++;
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  358				}
;  359			}
L_128:
;  360			if (kb_Data[6] & kb_Enter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_130
;  361				tempMove = party[pokemonIndex].moves[menuState];
	LD	HL,(IX+6)
	LD	A,35
	CALL	__imul_b
	LD	(IX+-33),HL
	LD	(IX+-51),HL
	LD	HL,(IX+-33)
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-63),HL
;  362				for (moveIndex = menuState; moveIndex > 0; moveIndex--) {
	LD	BC,(IX+-9)
	LD	(IX+-6),BC
	JR	L_125
L_123:
;  363					party[pokemonIndex].moves[moveIndex] = party[pokemonIndex].moves[moveIndex - 1];
	LD	BC,(IX+-33)
	LD	(IX+-51),BC
	LD	HL,(IX+-33)
	LD	BC,_party
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-19),HL
	LD	IY,(IY+-19)
	LEA	BC,IY+1
	LEA	IY,IX+-128
	LD	(IY+-16),BC
	LD	BC,(IX+-6)
	DEC	BC
	LD	DE,IX
	LD	HL,-144
	ADD	HL,DE
	LD	HL,(HL)
	LD	DE,BC
	ADD	HL,DE
	LD	DE,IX
	LD	IY,-144
	ADD	IY,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-22),HL
	LD	(IY+-28),HL	; unspill
	LD	HL,(IY+-22)
	POP	IY
	LD	HL,(IY)
	LD	DE,(IX+-6)
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-22),HL
	LD	HL,(IY+-28)
	POP	IY
	LD	A,(HL)
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-22)
	POP	IY
	LD	(HL),A
	LD	(IX+-6),BC
;  364				}
L_125:
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_123
;  365				party[pokemonIndex].moves[0] = tempMove;
	LD	A,(IX+-63)
	LD	HL,(IX+-51)
;  366				menuState = 0;
	LD	DE,0
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+1),A
	LD	(IX+-9),DE
;  367			}
L_130:
;  368			if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_131
;  369				page = 0;
	LD	BC,0
	LD	(IX+-27),BC
;  370			}
;  371		}
L_131:
	LD	HL,(IX+-27)
	CALL	__icmpzero
	JR	NZ,L_132
;  372		free(backgroundSprite);
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_free
	POP	BC
;  373	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_PokemonDetails ***************************
;Name                         Addr/Register   Size   Type
;_categoryIcons                      IMPORT      9   variable
;_data_moves                         IMPORT  unknown variable
;_menucursor_data                    IMPORT    262   variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_xpPerLevel                         IMPORT   1616   variable
;_typeIcons                          IMPORT     51   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_stats_CalculateStats               IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_free                               IMPORT  -----   function
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_PKMNSD1                            IMPORT    219   variable
;_PKMNSD0                            IMPORT    240   variable
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_party                              IMPORT   1260   variable
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_menu_Setup                         IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;tempMove                             IX-63      3   variable
;G_43                                 IX-60      3   variable
;G_17                                 IX-57      3   variable
;G_44                                 IX-54      3   variable
;G_51                                 IX-51      3   variable
;G_48                                 IX-48      3   variable
;G_41                                 IX-45      3   variable
;G_39                                 IX-42      3   variable
;pokemonSprite                        IX-39      3   variable
;backgroundSprite                     IX-36      3   variable
;G_50                                 IX-33      3   variable
;G_31                                 IX-30      3   variable
;page                                 IX-27      3   variable
;G_47                                 IX-24      3   variable
;G_24                                 IX-21      3   variable
;G_33                                 IX-18      3   variable
;G_49                                 IX-15      3   variable
;G_38                                 IX-12      3   variable
;menuState                             IX-9      3   variable
;moveIndex                             IX-6      3   variable
;G_16                                  IX-3      3   variable
;pokemonIndex                          IX+6      3   parameter


; Stack Frame Size: 165 (bytes)
;       Spill Code: -8 (instruction)


	SEGMENT STRSECT
L__57:
	DB	"%u/%u"
	DB	0
L__58:
	DB	"%u"
	DB	0
L__59:
	DB	"%u"
	DB	0
L__60:
	DB	"%u"
	DB	0
L__61:
	DB	"%u"
	DB	0
L__62:
	DB	"%u"
	DB	0
L__63:
	DB	"%u"
	DB	0
L__65:
	DB	"%u/%u"
	DB	0
L__74:
	DB	"%u"
	DB	0
L__75:
	DB	"%u"
	DB	0
L__76:
	DB	"%u/%u"
	DB	0
	SEGMENT CODE
;  374	bool menu_Items(bool inBattle) {
_menu_Items:
	LD	HL,-588
	CALL	__frameset
;  375		int page, menuState, cursorState, itemIndex, usableItemCount, usableItems[20], usableTMCount, usableTMs[165];
;  376		gfx_sprite_t *backgroundSprite;
;  377	
;  378	
;  379		/* Generate Usable Items List */
;  380		usableItemCount = 0;
	LD	BC,0
	LD	(IX+-15),BC
;  381		usableTMCount = 0;
	LD	(IX+-18),BC
;  382		for (itemIndex = 0; itemIndex < 20; itemIndex++) {
	LD	(IX+-3),BC
	JR	L_140
L_138:
;  383			if (playerItems[itemIndex] > 0) {
	LD	BC,_playerItems
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_139
;  384				usableItems[usableItemCount] = itemIndex;
	LD	HL,(IX+-15)
	LD	BC,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IX+-87
	ADD	HL,DE
	LD	(HL),BC
;  385				usableItemCount++;
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  386			}
;  387		}
L_139:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_140:
	LD	BC,20
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_138
;  388		for (itemIndex = 0; itemIndex < 165; itemIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_146
L_144:
;  389			if (playerItems[itemIndex + 20] > 0) {
	LD	IY,(IX+-3)
	LEA	IY,IY+20
	LD	(IX+-27),IY
	LD	HL,(IX+-27)
	LD	BC,_playerItems
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_145
;  390				usableTMs[usableTMCount] = itemIndex + 20;
	LD	HL,(IX+-18)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,(IX+-27)
	LD	BC,-585	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-582
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-588	; spill
	CALL	__istix
	POP	HL
	LD	BC,-585	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-585	; spill
	CALL	__istix
	POP	HL
	LD	BC,-588	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-585	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,BC
	LD	(HL),DE
;  391				usableTMCount++;
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  392			}
;  393		}
L_145:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_146:
	LD	BC,165
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_144
;  394		backgroundSprite = gfx_MallocSprite(160, 88);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  395		zx7_Decompress(backgroundSprite, bag_compressed);
	LD	IY,_PKMNSD5
	LD	(IX+-21),HL
	LD	BC,(IY+96)
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  396	
;  397		menu_Setup();
	CALL	_menu_Setup
;  398	
;  399	
;  400		page = 1;
	LD	BC,1
	LD	(IX+-12),BC
;  401		menuState = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  402		cursorState = 0;
	LD	(IX+-9),BC
;  403		while (page != 0)
	JR	L_217
L_218:
;  404		{
;  405	
;  406			gfx_FillScreen(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  407			text_DrawTextBox();
	CALL	_text_DrawTextBox
;  408			gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  409			gfx_TransparentSprite_NoClip(menucursorsmall, 132, 19 + 14 * cursorState);
	LD	B,(IX+-9)
	LD	C,14
	MLT	BC
	LD	A,C
	ADD	A,19
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,132
	PUSH	BC
	LD	BC,_menucursorsmall_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  410			
;  411			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  412	
;  413			kb_Scan();
	CALL	_kb_Scan
;  414			if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_177
;  415				gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  416				gfx_PrintStringXY("Items", 12, 19);
	LD	BC,19
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__98
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  417				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  418				for (itemIndex = menuState; itemIndex < menuState + 10 && itemIndex < usableItemCount; itemIndex++) {
	LD	BC,(IX+-6)
	LD	(IX+-3),BC
	JR	L_153
L_151:
;  419					gfx_PrintStringXY(itemNames[usableItems[itemIndex]], 140, 21 + 14 * (itemIndex - menuState));
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	A,14
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-87
	ADD	HL,BC
	LD	HL,(HL)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  420					sprintf(str, "%u", playerItems[usableItems[itemIndex]]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-87
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_playerItems
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__99
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  421					gfx_PrintStringXY(str, 274, 21 + 14 * (itemIndex - menuState));
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	A,14
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,274
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  422				}
L_153:
	LD	IY,(IX+-6)
	LEA	BC,IY+10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_154
	LD	BC,(IX+-15)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_151
L_154:
;  423	
;  424				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  425				while (!((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left) || (kb_Data[6] & kb_Clear) || (kb_Data[1] & kb_2nd) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Down))) {
	JR	L_160
L_161:
;  426					kb_Scan();
	CALL	_kb_Scan
;  427				}
L_160:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_185
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_185
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_185
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_185
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_185
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_185
	JR	L_161
;  428			}
;  429			else if (page == 2) {
L_177:
	LD	BC,2
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_185
;  430				gfx_SetTextScale(2, 2);
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  431				gfx_PrintStringXY("TMs", 12, 19);
	LD	BC,19
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__109
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  432				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  433				for (itemIndex = menuState; itemIndex < menuState + 10 && itemIndex < usableTMCount; itemIndex++) {
	LD	BC,(IX+-6)
	LD	(IX+-3),BC
	JR	L_166
L_164:
;  434					sprintf(str, "TM%u %s", usableTMs[itemIndex] - 19, data_moves[usableTMs[itemIndex] - 19].name);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-582
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,(HL)
	LEA	DE,IY+-19
	LD	BC,DE
	LD	HL,21
	CALL	__imulu
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,DE
	PUSH	BC
	LD	BC,L__110
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  435					gfx_PrintStringXY(str, 140, 21 + 14 * (itemIndex - menuState));
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	A,14
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  436				}
L_166:
	LD	IY,(IX+-6)
	LEA	BC,IY+10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_167
	LD	BC,(IX+-18)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_164
L_167:
;  437				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  438				while (!((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left) || (kb_Data[6] & kb_Clear) || (kb_Data[1] & kb_2nd) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Down))) {
	JR	L_173
L_174:
;  439					kb_Scan();
	CALL	_kb_Scan
;  440				}
L_173:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_185
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_185
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_185
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_185
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_185
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_174
;  441			}
L_185:
;  442			if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_201
;  443				if (menuState > 0 && cursorState <= 2) {
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_183
	LD	BC,(IX+-9)
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_183
;  444					menuState--;
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  445				}
;  446				else if(menuState + cursorState > 0) {
	JR	L_201
L_183:
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_201
;  447					cursorState--;
	LD	BC,(IX+-9)
	DEC	BC
	LD	(IX+-9),BC
;  448				}
;  449			}
L_201:
;  450			if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_207
;  451				if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_199
;  452					if (menuState + 10 < usableItemCount && cursorState >= 3) {
	LD	IY,(IX+-6)
	LEA	HL,IY+10
	LD	BC,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JP	P,L_191
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_191
;  453						menuState++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  454					}
;  455					else if (menuState + cursorState < usableItemCount - 1) {
	JR	L_207
L_191:
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(IX+-15)
	DEC	BC
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_207
;  456						cursorState++;
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  457					}
;  458				}
;  459				else {
	JR	L_207
L_199:
;  460					if (menuState + 10 < usableTMCount && cursorState >= 7) {
	LD	IY,(IX+-6)
	LEA	HL,IY+10
	LD	BC,(IX+-18)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_197
	LD	BC,7
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_197
;  461						menuState++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  462					}
;  463					else if (menuState + cursorState < usableTMCount - 1) {
	JR	L_207
L_197:
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(IX+-18)
	DEC	BC
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_207
;  464						cursorState++;
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  465					}
;  466				}
;  467			}
L_207:
;  468			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_206
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_209
L_206:
;  469				if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_204
;  470					page = 2;
	LD	BC,2
	LD	(IX+-12),BC
;  471				}
;  472				else {
	JR	L_205
L_204:
;  473					page = 1;
	LD	(IX+-12),BC
;  474				}
L_205:
;  475				menuState = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  476				cursorState = 0;
	LD	(IX+-9),BC
;  477			}
L_209:
;  478			if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_216
;  479				page = 0;
	LD	BC,0
	LD	(IX+-12),BC
;  480			}
L_216:
;  481			if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_217
;  482				int itemToUse;
;  483				if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_211
;  484					itemToUse = usableItems[menuState + cursorState];
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-87
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-24),BC
;  485				}
;  486				else {
	JR	L_214
L_211:
;  487					itemToUse = usableTMs[menuState + cursorState];
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	HL,IX
	LD	BC,-582
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	LD	(IX+-24),BC
;  488				}
L_214:
;  489				if (items_UseItem(itemToUse) && inBattle) {
	LD	C,(IX+-24)
	LD	B,0
	PUSH	BC
	CALL	_items_UseItem
	POP	BC
	OR	A,A
	JR	Z,L_217
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_217
;  490					gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  491					return true;
	LD	A,1
	JR	L_220
;  492				}
;  493			}
;  494		}
L_217:
	LD	HL,(IX+-12)
	CALL	__icmpzero
	JR	NZ,L_218
;  495		free(backgroundSprite);
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_free
	POP	BC
;  496		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  497		return false;
	XOR	A,A
L_220:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_Items ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_items_UseItem                      IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_itemNames                          IMPORT    320   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_menucursorsmall_data               IMPORT     72   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_menu_Setup                         IMPORT  -----   function
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;usableTMs                           IX-582    495   variable
;usableItems                          IX-87     60   variable
;G_52                                 IX-27      3   variable
;itemToUse                            IX-24      3   variable
;backgroundSprite                     IX-21      3   variable
;usableTMCount                        IX-18      3   variable
;usableItemCount                      IX-15      3   variable
;page                                 IX-12      3   variable
;cursorState                           IX-9      3   variable
;menuState                             IX-6      3   variable
;itemIndex                             IX-3      3   variable
;inBattle                              IX+6      1   parameter


; Stack Frame Size: 597 (bytes)
;       Spill Code: -8 (instruction)


	SEGMENT STRSECT
L__98:
	DB	"Items"
	DB	0
L__99:
	DB	"%u"
	DB	0
L__109:
	DB	"TMs"
	DB	0
L__110:
	DB	"TM%u %s"
	DB	0
	XREF _PKMNSD5:ROM
	XREF _PKMNSD1:ROM
	XREF _PKMNSD0:ROM
	XREF _itemNames:ROM
	XREF _items_UseItem:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_Save:ROM
	XREF _playerItems:ROM
	XREF _party:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_DrawTextBox:ROM
	XREF _categoryIcons:ROM
	XREF _statusIcons:ROM
	XREF _colors:ROM
	XREF _str:ROM
	XREF _FreeIcons:ROM
	XREF _MallocIcons:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _typeIcons:ROM
	XREF _xpPerLevel:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _menucursorsmall_data:ROM
	XREF _menucursor_data:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _sprintf:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __idivs:ROM
	XREF __imulu:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _menu_Items
	XDEF _menu_PokemonDetails
	XDEF _menu_PokemonMenu
	XDEF _menu_Menu
	XDEF _menu_Setup
	XDEF _menuCurrent
	XDEF _menuState2
	XDEF _menuState1
	XDEF _tempcharacter
	XDEF _pokemonToSwitch
	XDEF _switchMode
	END
