; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MENU.C"
	.assume ADL=1
	SEGMENT BSS
_switchMode:
	DS	1
_pokemonToSwitch:
	DS	1
_tempcharacter:
	DS	34
	SEGMENT DATA
_menuState1:
	DB	0
_menuState2:
	DB	0
_menuCurrent:
	DB	1
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <keypadc.h>
;   10	#include <graphx.h>
;   11	#include <compression.h>
;   12	#include <debug.h>
;   13	
;   14	#include "map.h"
;   15	#include "battle.h"
;   16	#include "menu.h"
;   17	#include "misc.h"
;   18	#include "data.h"
;   19	#include "text.h"
;   20	#include "savegame.h"
;   21	#include "stats.h"
;   22	#include "gfx/battle_gfx.h"
;   23	#include "items.h"
;   24	#include "gfx/PKMNSD0.h"
;   25	#include "gfx/PKMNSD1.h"
;   26	#include "gfx/PKMNSD2.h"
;   27	#include "gfx/PKMNSD3.h"
;   28	#include "gfx/PKMNSD5.h"
;   29	
;   30	void MoveMenuCursor(int max);
;   31	
;   32	void ItemMenu(void);
;   33	void FastTravelMenu(void);
;   34	
;   35	
;   36	/* Press enter to toggle; allows player to switch pokemon around */
;   37	bool switchMode;
;   38	uint8_t pokemonToSwitch;
;   39	struct pokemonData tempcharacter;
;   40	
;   41	
;   42	
;   43	uint8_t menuState1 = 0;
;   44	uint8_t menuState2 = 0;
;   45	uint8_t menuCurrent = 1;
	SEGMENT CODE
;   46	
;   47	void menu_Setup(void) {
_menu_Setup:
;   48	
;   49		dbg_SetWatchpoint(&party[0].id, 1);
;   50		dbg_SetWatchpoint(&party[0].moves[0], 1);
;   51		dbg_SetWatchpoint(&party[0].moves[1], 1);
;   52		dbg_SetWatchpoint(&party[0].moves[2], 1);
;   53		dbg_SetWatchpoint(&party[0].moves[3], 1);
;   54	
;   55		zx7_Decompress(textBoxSprite1, menutextbox1_compressed);
	LD	BC,(_PKMNSD5)
	PUSH	BC
	LD	BC,(_textBoxSprite1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   56		zx7_Decompress(textBoxSprite2, menutextbox2_compressed);
	LD	HL,_PKMNSD5+3
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(_textBoxSprite2)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   57	
;   58		gfx_SetPalette(battle_gfx_pal, sizeof_battle_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	HL,_PKMNSD5+111
	LD	BC,512
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   59		SetColors(1);
	LD	BC,1
	PUSH	BC
	CALL	_SetColors
	POP	BC
;   60		gfx_SetTextFGColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   61	
;   62	
;   63	}
	RET	


;**************************** _menu_Setup ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_SetColors                          IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_textBoxSprite2                     IMPORT      3   variable
;_textBoxSprite1                     IMPORT      3   variable
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   64	
;   65	uint8_t menu_Menu(void) {
_menu_Menu:
	LD	HL,-7
	CALL	__frameset
;   66		int8_t cursorState = 0;
	LD	(IX+-1),0
;   67		
;   68	
;   69		gfx_PrintStringXY("Pokemon", 215, 35);
	LD	BC,35
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   70		gfx_PrintStringXY("Bag", 215, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   71		gfx_PrintStringXY("Close Menu", 215, 65);
	LD	BC,65
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   72		gfx_PrintStringXY("Save", 215, 80);
	LD	BC,80
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   73		gfx_PrintStringXY("Exit Game", 215, 95);
	LD	BC,95
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   74		gfx_PrintStringXY(">", 208, 35 + 15 * cursorState);
	LD	BC,35
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   75	
;   76		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   77		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   78	
;   79		while (!(kb_Data[6] & kb_Clear)) {
	JR	L_25
L_26:
;   80			kb_Scan();
	CALL	_kb_Scan
;   81			if ((kb_Data[7] & kb_Down)) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_7
;   82				cursorState += 1;
	INC	(IX+-1)
;   83				if (cursorState == 5) {
	LD	A,(IX+-1)
	CP	A,5
	JR	NZ,L_2
;   84					cursorState = 0;
	LD	(IX+-1),0
;   85				}
L_2:
;   86				gfx_FillRectangle(205, 35, 10, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,205
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   87				gfx_PrintStringXY(">", 208, 35 + 15 * cursorState);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+35
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   88				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;   89			}
L_7:
;   90			if ((kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_24
;   91				cursorState -= 1;
	DEC	(IX+-1)
;   92				if (cursorState == -1) {
	LD	A,(IX+-1)
	CP	A,-1
	JR	NZ,L_5
;   93					cursorState = 4;
	LD	(IX+-1),4
;   94				}
L_5:
;   95				gfx_FillRectangle(205, 35, 10, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,35
	PUSH	BC
	LD	BC,205
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   96				gfx_PrintStringXY(">", 208, 35 + 15 * cursorState);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,15
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+35
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   97				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;   98			}
L_24:
;   99			if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_25
;  100				gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  101				if (cursorState == 0) {
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_16
;  102					int chosenPokemon;
;  103					choosePokemon:
L_8:
;  104					chosenPokemon = menu_PokemonMenu(true);
	LD	BC,1
	PUSH	BC
	CALL	_menu_PokemonMenu
	POP	BC
	LD	(IX+-7),HL
;  105					if (chosenPokemon != 0) {
	CALL	__icmpzero
	JR	Z,L_10
;  106						menu_PokemonDetails(chosenPokemon - 1);
	LD	BC,(IX+-7)
	DEC	BC
	PUSH	BC
	CALL	_menu_PokemonDetails
	POP	BC
;  107						goto choosePokemon;
	JR	L_8
;  108					}
L_10:
;  109					return 0;
	XOR	A,A
	JR	L_28
;  110				}
L_16:
;  111				if (cursorState == 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_18
;  112					int chosenItem;
;  113					chooseItem:
L_12:
;  114					chosenItem = menu_Items(false);
	LD	BC,0
	PUSH	BC
	CALL	_menu_Items
	POP	BC
	LD	(IX+-4),HL
;  115					if (chosenItem != -1) {
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_14
;  116						items_UseItem(chosenItem);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_items_UseItem
	POP	BC
;  117						goto chooseItem;
	JR	L_12
;  118					}
L_14:
;  119					return 0;
	XOR	A,A
	JR	L_28
;  120				}
L_18:
;  121				if (cursorState == 2) {
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_22
;  122					return 0;
	XOR	A,A
	JR	L_28
;  123				}
L_22:
;  124				if (cursorState == 3) {
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_21
;  125					save_Save();
	CALL	_save_Save
;  126					return 0;
	XOR	A,A
	JR	L_28
;  127				}
;  128				else if (cursorState == 4) {
L_21:
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_25
;  129					return 2;
	LD	A,2
	JR	L_28
;  130				}
;  131			}
;  132		}
L_25:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_26
;  133		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  134		return 0;
	XOR	A,A
;  135	}
L_28:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_Menu ***************************
;Name                         Addr/Register   Size   Type
;_save_Save                          IMPORT  -----   function
;_items_UseItem                      IMPORT  -----   function
;_menu_Items                         IMPORT  -----   function
;_menu_PokemonDetails                IMPORT  -----   function
;_menu_PokemonMenu                   IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;chosenPokemon                         IX-7      3   variable
;chosenItem                            IX-4      3   variable
;cursorState                           IX-1      1   variable


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Pokemon"
	DB	0
L__2:
	DB	"Bag"
	DB	0
L__3:
	DB	"Close Menu"
	DB	0
L__4:
	DB	"Save"
	DB	0
L__5:
	DB	"Exit Game"
	DB	0
L__6:
	DB	">"
	DB	0
L__9:
	DB	">"
	DB	0
L__12:
	DB	">"
	DB	0
	SEGMENT CODE
;  136	
;  137	int menu_PokemonMenu(bool pressEnter) {
_menu_PokemonMenu:
	LD	HL,-97
	CALL	__frameset
;  138		int partyIndex, statusIndex, menuState;
;  139		gfx_sprite_t *backgroundSprite;
;  140		gfx_sprite_t *pokemonSprite;
;  141		int baseX[6] = { 20,175,20,175,20,175 };
	LEA	DE,IX+-43
	LD	HL,_0temp29
	LD	BC,18
	LDIR	
;  142		int baseY[6] = { 20,20,70,70,120,120 };
	LEA	DE,IX+-61
	LD	HL,_1temp30
	LD	BC,18
	LDIR	
;  143	
;  144	
;  145		menuState = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  146		backgroundSprite = gfx_MallocSprite(160, 120);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-19),HL
;  147		pokemonSprite = gfx_MallocSprite(133, 36);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,36
	PUSH	BC
	LD	BC,133
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  148		zx7_Decompress(backgroundSprite, pokemonlist_compressed);
	LD	IY,_PKMNSD5
	LD	(IX+-22),HL
	LD	BC,(IY+90)
	PUSH	BC
	LD	BC,(IX+-19)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  149		zx7_Decompress(pokemonSprite, menupokemon_compressed);
	LD	HL,_PKMNSD5+93
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  150		MallocIcons();
	CALL	_MallocIcons
;  151	
;  152	
;  153		menu_Setup();
	CALL	_menu_Setup
;  154	
;  155		redraw_PokemonMenu:
L_31:
;  156		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  157	
;  158		gfx_FillScreen(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  159		text_DrawTextBox();
	CALL	_text_DrawTextBox
;  160		gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-19)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  161		for (partyIndex = 0; partyIndex < 6; partyIndex++) {
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_43
L_41:
;  162			int healthRatio;
;  163			if (party[partyIndex].id != 0) {
	LD	HL,(IX+-6)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-12),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_42
;  164				gfx_TransparentSprite_NoClip(pokemonSprite, baseX[partyIndex], baseY[partyIndex]);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	LD	BC,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  165				gfx_PrintStringXY(data_pokemon[party[partyIndex].id].name, baseX[partyIndex] + 4, baseY[partyIndex] + 4);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+4
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+4
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  166				sprintf(str, "Lv%u", party[partyIndex].level);
	LD	IY,(IX+-9)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__24
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  167				gfx_PrintStringXY(str, baseX[partyIndex] + 92, baseY[partyIndex] + 4);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+4
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+92
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  168	
;  169				if (party[partyIndex].currentstatus > 0) {
	LD	BC,(IX+-9)
	LD	(IX+-25),BC
	LD	IY,(IX+-9)
	XOR	A,A
	CP	A,(IY+15)
	JR	NC,L_34
;  170					gfx_TransparentSprite_NoClip(statusIcons[party[partyIndex].currentstatus - 1], baseX[partyIndex] + 7, baseY[partyIndex] + 14);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+-9)
	LD	(IX+-25),BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	IY,(HL)
	LEA	HL,IY+14
	LD	C,L
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	ADD	HL,DE
	LD	IY,(HL)
	LEA	BC,IY+7
	PUSH	BC
	LD	IY,(IX+-9)
	LD	A,(IY+15)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_statusIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  171				}
L_34:
;  172				healthRatio = (party[partyIndex].currenthealth * 78) / stats_CalculateStats(party[partyIndex]).health;
	LD	BC,(IX+-12)
	LD	HL,_party
	ADD	HL,BC
	LD	(IX+-64),HL
	LD	IY,(IX+-64)
	LD	BC,(IY+13)
	CALL	__stoiu
	LD	A,78
	CALL	__imul_b
	LD	IY,0
	ADD	IY,SP
	LD	(IX+-97),HL
	LD	HL,(IX+-64)
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-76
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+-97)
	CALL	__idivs
	LD	(IX+-16),HL
;  173				if (healthRatio > 34) {
	LD	BC,HL
	LD	HL,34
	OR	A,A
	SBC	HL,BC
	JP	P,L_38
;  174					gfx_SetColor(colors[8]);
	LD	HL,_colors+8
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  175				}
;  176				else if (healthRatio > 14) {
	JR	L_39
L_38:
	LD	BC,(IX+-16)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_36
;  177					gfx_SetColor(colors[9]);
	LD	HL,_colors+9
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  178				}
;  179				else {
	JR	L_39
L_36:
;  180					gfx_SetColor(colors[10]);
	LD	HL,_colors+10
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  181				}
L_39:
;  182				gfx_FillRectangle(baseX[partyIndex] + 47, baseY[partyIndex] + 16, healthRatio, 4);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LD	HL,4
	PUSH	HL
	LD	HL,(IX+-16)
	PUSH	HL
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+16
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+47
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  183	
;  184				sprintf(str, "%u/%u", party[partyIndex].currenthealth, stats_CalculateStats(party[partyIndex]).health);
	LD	HL,(IX+-9)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-88
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	IY,(IX+-25)
	LD	BC,(IY+13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__28
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  185				gfx_PrintStringXY(str, baseX[partyIndex] + 32, baseY[partyIndex] + 24);
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,BC
	LEA	HL,IX+-61
	ADD	HL,DE
	LD	IY,(HL)
	LEA	DE,IY+24
	PUSH	DE
	LEA	HL,IX+-43
	ADD	HL,BC
	LD	IY,(HL)
	LEA	BC,IY+32
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  186			}
;  187		}
L_42:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_43:
	LD	BC,6
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_41
;  188		gfx_PrintStringXY("Select a pokemon", 30, 190);
	LD	BC,190
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,L__30
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  189		if (pressEnter) {
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_46
;  190			gfx_PrintStringXY("Press Enter to move pokemon", 30, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,L__32
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  191		}
L_46:
;  192	
;  193		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  194	
;  195		gfx_Blit(gfx_buffer);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  196		gfx_TransparentSprite_NoClip(menucursor, baseX[menuState] - 15, baseY[menuState] + 8);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	IY,(HL)
	LEA	HL,IY+8
	LD	C,L
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	ADD	HL,DE
	LD	IY,(HL)
	LEA	BC,IY+-15
	PUSH	BC
	LD	BC,_menucursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  197	
;  198		
;  199	
;  200	
;  201		Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  202		kb_Scan();
	CALL	_kb_Scan
;  203	
;  204		while ((kb_Data[1] & kb_2nd) || (kb_Data[6] & kb_Clear)) { kb_Scan(); }
	JR	L_48
L_49:
	CALL	_kb_Scan
L_48:
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_49
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_49
;  205		while (!(((kb_Data[1] & kb_2nd) && party[menuState].id != 0) || (kb_Data[6] & kb_Clear))) {
	JR	L_77
L_78:
;  206			kb_Scan();
	CALL	_kb_Scan
;  207			if ((kb_Data[6] & kb_Enter) && pressEnter) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_71
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_71
;  208				tempcharacter = party[menuState];
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	DE,_tempcharacter
	LD	BC,34
	LDIR	
;  209				for (partyIndex = menuState; partyIndex > 0; partyIndex--) {
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
	JR	L_56
L_54:
;  210					party[partyIndex] = party[partyIndex - 1];
	LD	HL,(IX+-6)
	LD	(IX+-94),HL	; spill
	DEC	HL
	LD	(IX+-94),HL	; spill
	LD	BC,HL
	LD	HL,34
	CALL	__imulu
	LD	BC,_party
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	A,34
	CALL	__imul_b
	LD	DE,_party
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	LD	BC,34
	LDIR	
	LD	HL,(IX+-94)	; unspill
	LD	(IX+-6),HL
;  211				}
L_56:
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_54
;  212				party[0] = tempcharacter;
	LD	DE,_party
	LD	HL,_tempcharacter
	LD	BC,34
	LDIR	
;  213				goto redraw_PokemonMenu;
	JR	L_31
;  214			}
L_71:
;  215			if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-13),A
	OR	A,A
	JR	Z,L_70
;  216				menuState+=2;
	LD	IY,(IX+-3)
	LEA	IY,IY+2
	LD	(IX+-3),IY
;  217				if (menuState == 6 || menuState == 7) {
	LD	HL,(IX+-3)
	LD	BC,6
	OR	A,A
	SBC	HL,BC
	JR	Z,L_60
	LD	BC,7
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_76
L_60:
;  218					menuState -= 6;
	LD	IY,(IX+-3)
	LEA	IY,IY+-6
	LD	(IX+-3),IY
;  219				}
;  220			}
;  221			else if (kb_Data[7] & kb_Up) {
	JR	L_76
L_70:
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_68
;  222				menuState-=2;
	LD	IY,(IX+-3)
	LEA	IY,IY+-2
	LD	(IX+-3),IY
;  223				if (menuState == -1 || menuState == -2) {
	LD	HL,(IX+-3)
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_62
	LD	BC,16777214
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_76
L_62:
;  224					menuState += 6;
	LD	IY,(IX+-3)
	LEA	IY,IY+6
	LD	(IX+-3),IY
;  225				}
;  226			}
;  227			else if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) {
	JR	L_76
L_68:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_66
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_76
L_66:
;  228				if (menuState % 2 == 0) {
	LD	BC,2
	LD	HL,(IX+-3)
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_65
;  229					menuState += 1;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  230				}
;  231				else {
	JR	L_76
L_65:
;  232					menuState -= 1;
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
;  233				}
;  234			}
L_76:
;  235			if ((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left) || (kb_Data[7] & kb_Down) || (kb_Data[7] & kb_Up)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_75
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_75
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_75
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_77
L_75:
;  236				gfx_Blit(gfx_buffer);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  237				gfx_TransparentSprite_NoClip(menucursor, baseX[menuState] - 15, baseY[menuState] + 8);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	BC,DE
	LEA	HL,IX+-61
	ADD	HL,BC
	LD	IY,(HL)
	LEA	HL,IY+8
	LD	C,L
	LD	B,0
	PUSH	BC
	LEA	HL,IX+-43
	ADD	HL,DE
	LD	IY,(HL)
	LEA	BC,IY+-15
	PUSH	BC
	LD	BC,_menucursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  238				Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  239			}
;  240		}
L_77:
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_51
	LD	HL,(IX+-3)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_80
L_51:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_78
L_80:
;  241		free(backgroundSprite);
	LD	BC,(IX+-19)
	PUSH	BC
	CALL	_free
	POP	BC
;  242		free(pokemonSprite);
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_free
	POP	BC
;  243		FreeIcons();
	CALL	_FreeIcons
;  244		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  245		if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_82
	OR	A,A
;  246			return 0;
	SBC	HL,HL
	JR	L_83
;  247		}
L_82:
;  248		return menuState + 1;
	LD	HL,(IX+-3)
	INC	HL
;  249	}
L_83:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_PokemonMenu ***************************
;Name                         Addr/Register   Size   Type
;_FreeIcons                          IMPORT  -----   function
;_free                               IMPORT  -----   function
;_tempcharacter                      STATIC     34   variable
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_menucursor_data                    IMPORT    262   variable
;_gfx_Blit                           IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_stats_CalculateStats               IMPORT  -----   function
;_statusIcons                        IMPORT     15   variable
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_menu_Setup                         IMPORT  -----   function
;_MallocIcons                        IMPORT  -----   function
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_1temp30                            STATIC     18   variable
;_0temp29                            STATIC     18   variable
;baseY                                IX-61     18   variable
;baseX                                IX-43     18   variable
;G_10                                 IX-25      3   variable
;pokemonSprite                        IX-22      3   variable
;backgroundSprite                     IX-19      3   variable
;healthRatio                          IX-16      3   variable
;G_11                                 IX-13      1   variable
;G_8                                  IX-12      3   variable
;G_9                                   IX-9      3   variable
;partyIndex                            IX-6      3   variable
;menuState                             IX-3      3   variable
;pressEnter                            IX+6      1   parameter


; Stack Frame Size: 106 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__24:
	DB	"Lv%u"
	DB	0
L__28:
	DB	"%u/%u"
	DB	0
L__30:
	DB	"Select a pokemon"
	DB	0
L__32:
	DB	"Press Enter to move pokemon"
	DB	0
	SEGMENT TEXT
_0temp29:
	DW	20
	DB	0
	DW	175
	DB	0
	DW	20
	DB	0
	DW	175
	DB	0
	DW	20
	DB	0
	DW	175
	DB	0
_1temp30:
	DW	20
	DB	0
	DW	20
	DB	0
	DW	70
	DB	0
	DW	70
	DB	0
	DW	120
	DB	0
	DW	120
	DB	0
	SEGMENT CODE
;  250	void menu_PokemonDetails(int pokemonIndex) {
_menu_PokemonDetails:
	LD	HL,-168
	CALL	__frameset
;  251		int page, menuState, tempMove, moveIndex;
;  252		gfx_sprite_t *backgroundSprite;
;  253	
;  254		backgroundSprite = gfx_MallocSprite(160, 120);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-39),HL
;  255		
;  256	
;  257		menu_Setup();
	CALL	_menu_Setup
;  258	
;  259		page = 1;
	LD	BC,1
	LD	(IX+-24),BC
;  260		menuState = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  261		while (page != 0) {
	JR	L_147
L_148:
;  262			Wait(20);
	LD	BC,20
	PUSH	BC
	CALL	_Wait
	POP	BC
;  263			kb_Scan();
	CALL	_kb_Scan
;  264			if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_116
;  265				gfx_sprite_t *pokemonSprite;
;  266				zx7_Decompress(backgroundSprite, infoscreen1_compressed);
	LD	HL,_PKMNSD5+99
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  267				gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  268	
;  269	
;  270				gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  271	
;  272	
;  273				
;  274				gfx_PrintStringXY(data_pokemon[party[pokemonIndex].id].name, 4, 32);
	LD	HL,(IX+6)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-30),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,32
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  275				pokemonSprite = gfx_MallocSprite(56, 56);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-45),HL
;  276				if (pokemonIndex < 80) {
	LD	HL,(IX+6)
	LD	BC,80
	OR	A,A
	SBC	HL,BC
	JP	P,L_85
;  277					zx7_Decompress(pokemonSprite, PKMNSD0[party[pokemonIndex].id]);
	LD	BC,(IX+-3)
	LD	(IX+-60),BC
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD0
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  278				}
;  279				else {
	JR	L_86
L_85:
;  280					zx7_Decompress(pokemonSprite, PKMNSD1[party[pokemonIndex].id - 80]);
	LD	BC,(IX+-3)
	LD	(IX+-60),BC
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+-80
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_PKMNSD1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  281				}
L_86:
;  282				gfx_ScaledTransparentSprite_NoClip(pokemonSprite, 26, 52, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,52
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  283				free(pokemonSprite);
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_free
	POP	BC
;  284	
;  285				sprintf(str, "%u/%u", party[pokemonIndex].currenthealth, stats_CalculateStats(party[pokemonIndex]).health);
	LD	BC,(IX+-60)
	LD	IY,0
	ADD	IY,SP
	LD	(IX+-21),BC
	LD	HL,(IX+-3)
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	PEA	IX+-75
	LD	DE,IY
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	IY,(IX+-21)
	LD	BC,(IY+13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__58
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  286				gfx_PrintStringXY(str, 208, 38);
	LD	BC,38
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  287				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).attack);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-87
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	INC	HL
	INC	HL
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__59
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  288				gfx_PrintStringXY(str, 228, 62);
	LD	BC,62
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  289				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).defence);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-99
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+4
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__60
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  290				gfx_PrintStringXY(str, 228, 86);
	LD	BC,86
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  291				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).specialattack);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-111
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__61
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  292				gfx_PrintStringXY(str, 228, 110);
	LD	BC,110
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  293				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).specialdefence);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	PEA	IX+-123
	LD	BC,34
	LDIR	
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+8
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__62
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  294				gfx_PrintStringXY(str, 228, 134);
	LD	BC,134
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  295				sprintf(str, "%u", stats_CalculateStats(party[pokemonIndex]).speed);
	LD	HL,(IX+-3)
	LD	IY,0
	ADD	IY,SP
	LEA	IY,IY+-36
	LD	SP,IY
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-34),HL
	LD	(IY+-37),IX	; unspill
	LD	HL,(IY+-34)
	POP	IY
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LD	BC,34
	LDIR	
	LD	BC,-135
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-37)
	POP	IY
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-37),HL	; unspill
	LD	HL,(IY+-37)
	POP	IY
	LD	BC,HL
	PUSH	BC
	CALL	_stats_CalculateStats
	LD	IY,39
	ADD	IY,SP
	LD	SP,IY
	LD	IY,HL
	LEA	HL,IY+10
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__63
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  296				gfx_PrintStringXY(str, 228, 158);
	LD	BC,158
	PUSH	BC
	LD	BC,228
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  297	
;  298				sprintf(str, "%u", party[pokemonIndex].level);
	LD	IY,(IX+-21)
	LD	A,(IY+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  299				gfx_PrintStringXY(str, 64, 186);
	LD	BC,186
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  300				gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element1 - 1], 218, 187);
	LD	BC,_data_pokemon
	LD	DE,187
	PUSH	DE
	LD	DE,218
	PUSH	DE
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  301				if (data_pokemon[party[pokemonIndex].id].element2 != 0) {
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	OR	A,A
	JR	Z,L_88
;  302					gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element2 - 1], 254, 187);
	LD	DE,187
	PUSH	DE
	LD	DE,254
	PUSH	DE
	LD	IY,(IX+-21)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  303				}
L_88:
;  304				sprintf(str, "%i/%i", party[pokemonIndex].xp, xpPerLevel[data_pokemon[party[pokemonIndex].id].xptype][party[pokemonIndex].level + 1]);
	LD	BC,_party
	LD	HL,(IX+-30)
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-10),HL
	LD	IY,(IY+-10)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,303
	CALL	__imulu
	LEA	IY,IX+-128
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	IY,(IY+-10)
	LD	A,(IY+9)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	INC	HL
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LEA	IY,IX+-128
	LD	IY,(IY+-10)
	LD	BC,(IY+10)
	PUSH	BC
	LD	BC,L__66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  305				gfx_PrintStringXY(str, 64, 210);
	LD	BC,210
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  306	
;  307				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  308	
;  309				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  310				while (!((kb_Data[7] & kb_Right) || (kb_Data[6] & kb_Clear))) {
	JR	L_90
L_91:
;  311					kb_Scan();
	CALL	_kb_Scan
;  312				}
L_90:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_118
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_118
	JR	L_91
;  313			}
;  314			else if (page == 2) {
L_116:
	LD	BC,2
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_118
;  315				zx7_Decompress(backgroundSprite, infoscreen2_compressed);
	LD	HL,_PKMNSD5+102
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  316				gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  317	
;  318				gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  319	
;  320				gfx_PrintStringXY(data_pokemon[party[pokemonIndex].id].name, 4, 32);
	LD	HL,(IX+6)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-15),HL
	LD	BC,_party
	ADD	HL,BC
	LD	(IX+-54),HL
	LD	HL,(IX+-15)
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	BC,32
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  321				gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element1 - 1], 164, 34);
	LD	BC,_data_pokemon
	LD	DE,34
	PUSH	DE
	LD	DE,164
	PUSH	DE
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  322				if (data_pokemon[party[pokemonIndex].id].element2 != 0) {
	LD	BC,(IX+-18)
	LD	(IX+-42),BC
	LD	BC,(IX+-18)
	LD	(IX+-27),BC
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	OR	A,A
	JR	Z,L_93
;  323					gfx_TransparentSprite_NoClip(typeIcons[data_pokemon[party[pokemonIndex].id].element2 - 1], 200, 34);
	LD	BC,(IX+-18)
	LD	(IX+-42),BC
	LD	BC,(IX+-18)
	LD	(IX+-27),BC
	LD	BC,_data_pokemon
	LD	DE,34
	PUSH	DE
	LD	DE,200
	PUSH	DE
	LD	IY,(IX+-18)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  324				}
L_93:
;  325	
;  326				gfx_TransparentSprite_NoClip(menucursor, 8, 56 + 24 * menuState);
	LD	B,(IX+-6)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,56
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,_menucursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  327				for (moveIndex = 0; moveIndex < 4; moveIndex++) {
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_102
L_100:
;  328					if (party[pokemonIndex].moves[moveIndex] > 0) {
	LD	BC,(IX+-42)
	LD	(IX+-27),BC
	LD	IY,(IX+-27)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-48),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_101
;  329						gfx_PrintStringXY(data_moves[party[pokemonIndex].moves[moveIndex]].name, 30, 58 + 24 * moveIndex);
	LD	HL,(IX+-48)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-51),HL
	LD	HL,(IX+-9)
	LD	A,24
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+58
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	IY,(IX+-51)
	PEA	IY+0
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  330						gfx_TransparentSprite_NoClip(typeIcons[data_moves[party[pokemonIndex].moves[moveIndex]].element - 1], 242, 60 + 24 * moveIndex);
	LD	B,(IX+-9)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,60
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,242
	PUSH	BC
	LD	IY,(IX+-51)
	LD	A,(IY+14)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_typeIcons
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  331						if(data_moves[party[pokemonIndex].moves[moveIndex]].type == 0)
	LD	BC,(IX+-54)
	LD	(IX+-12),BC
	LD	(IX+-42),BC
	LD	BC,(IX+-12)
	LD	(IX+-27),BC
	LD	IY,(IX+-12)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	OR	A,A
	JR	NZ,L_98
;  332							gfx_TransparentSprite_NoClip(categoryIcons[0], 280, 59 + 24 * moveIndex);
	LD	B,(IX+-9)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,59
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,280
	PUSH	BC
	LD	BC,(_categoryIcons)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  333						else if (data_moves[party[pokemonIndex].moves[moveIndex]].type == 1) {
	JR	L_101
L_98:
	LD	BC,(IX+-12)
	LD	(IX+-12),BC
	LD	(IX+-54),BC
	LD	BC,(IX+-12)
	LD	(IX+-42),BC
	LD	BC,(IX+-12)
	LD	(IX+-27),BC
	LD	IY,(IX+-12)
	LEA	HL,IY+1
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+15)
	CP	A,1
	JR	NZ,L_96
;  334							gfx_TransparentSprite_NoClip(categoryIcons[1], 280, 59 + 24 * moveIndex);
	LD	B,(IX+-9)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,59
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,_categoryIcons+3
	LD	BC,280
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  335						}
;  336						else {
	JR	L_101
L_96:
;  337							gfx_TransparentSprite_NoClip(categoryIcons[2], 280, 59 + 24 * moveIndex);
	LD	B,(IX+-9)
	LD	C,24
	MLT	BC
	LD	A,C
	ADD	A,59
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,_categoryIcons+6
	LD	BC,280
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  338						}
;  339					}
;  340				}
L_101:
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_102:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JP	M,L_100
;  341	
;  342				sprintf(str, "%u", data_moves[party[pokemonIndex].moves[menuState]].power);
	LD	IY,(IX+-27)
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	IY,(IX+-33)
	LD	A,(IY+16)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__75
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  343				if (data_moves[party[pokemonIndex].moves[menuState]].power < 5) {
	LD	IY,(IX+-33)
	LD	A,(IY+16)
	CP	A,5
	JR	NC,L_105
;  344					sprintf(str, "-");
	LD	BC,L__77
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  345				}
L_105:
;  346				gfx_PrintStringXY(str, 66, 168);
	LD	BC,168
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  347				sprintf(str, "%u", data_moves[party[pokemonIndex].moves[menuState]].accuracy);
	LD	IY,(IX+-33)
	LD	A,(IY+17)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__78
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  348				gfx_PrintStringXY(str, 66, 194);
	LD	BC,194
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  349				sprintf(str, "%u/%u", party[pokemonIndex].pp[menuState], data_moves[party[pokemonIndex].moves[menuState]].uses);
	LD	HL,(IX+-15)
	LD	BC,_party
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-13),HL
	LD	IY,(IY+-13)
	LD	BC,(IX+-6)
	LEA	HL,IY+1
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,21
	CALL	__imul_b
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LEA	IY,IX+-128
	LD	IY,(IY+-13)
	LD	BC,(IX+-6)
	LEA	HL,IY+5
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__79
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  350				gfx_PrintStringXY(str, 66, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  351	
;  352				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  353	
;  354	
;  355				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  356				while (!((kb_Data[7] & kb_Left) || (kb_Data[6] & kb_Clear) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Down) || (kb_Data[6] & kb_Enter) || (kb_Data[6] & kb_Sub) || (kb_Data[6] & kb_Add))) {
	JR	L_112
L_113:
;  357					kb_Scan();
	CALL	_kb_Scan
;  358				}
L_112:
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_118
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_118
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_118
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_118
	LD	A,(16056348)
	AND	A,1
	JR	NZ,L_118
	LD	A,(16056348)
	AND	A,4
	JR	NZ,L_118
	LD	A,(16056348)
	AND	A,2
	JR	Z,L_113
;  359			}
L_118:
;  360			if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_120
;  361				page = 2;
	LD	BC,2
	LD	(IX+-24),BC
;  362			}
L_120:
;  363			if (kb_Data[7] & kb_Left) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_124
;  364				page = 1;
	LD	BC,1
	LD	(IX+-24),BC
;  365			}
L_124:
;  366			if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_128
;  367				if (menuState > 0) {
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_128
;  368					menuState--;
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  369				}
;  370			}
L_128:
;  371			if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_136
;  372				if (menuState < 3) {
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	P,L_136
;  373					menuState++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  374				}
;  375			}
L_136:
;  376			if ((kb_Data[6] & kb_Sub) || (kb_Data[6] & kb_Add) && page == 2) {
	LD	A,(16056348)
	AND	A,4
	JR	NZ,L_135
	LD	A,(16056348)
	AND	A,2
	JR	Z,L_144
	LD	BC,2
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_144
L_135:
;  377				if (kb_Data[6] & kb_Add) {
	LD	A,(16056348)
	AND	A,2
	JR	Z,L_134
;  378					party[pokemonIndex].moves[menuState]++;
	LD	HL,(IX+6)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-19),HL
	LD	IY,(IY+-19)
	LD	BC,(IX+-6)
	LEA	HL,IY+1
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-16),HL
	LD	HL,(IY+-16)
	LD	IY,(IY+-19)
	LD	BC,(IX+-6)
	LD	A,(HL)
	LEA	HL,IY+1
	ADD	HL,BC
	INC	A
	LD	(HL),A
;  379				}
;  380				else {
	JR	L_144
L_134:
;  381					party[pokemonIndex].moves[menuState]--;
	LD	HL,(IX+6)
	LD	A,34
	CALL	__imul_b
	LD	BC,_party
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-25),HL
	LD	IY,(IY+-25)
	LD	BC,(IX+-6)
	LEA	HL,IY+1
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-22),HL
	LD	HL,(IY+-22)
	LD	IY,(IY+-25)
	LD	BC,(IX+-6)
	LD	A,(HL)
	LEA	HL,IY+1
	ADD	HL,BC
	DEC	A
	LD	(HL),A
;  382				}
;  383			}
L_144:
;  384			if ((kb_Data[6] & kb_Enter) && page == 2) {
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_146
	LD	BC,2
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_146
;  385				tempMove = party[pokemonIndex].moves[menuState];
	LD	HL,(IX+6)
	LD	A,34
	CALL	__imul_b
	LD	(IX+-36),HL
	LD	(IX+-57),HL
	LD	HL,(IX+-36)
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+1
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-63),HL
;  386				for (moveIndex = menuState; moveIndex > 0; moveIndex--) {
	LD	BC,(IX+-6)
	LD	(IX+-9),BC
	JR	L_141
L_139:
;  387					party[pokemonIndex].moves[moveIndex] = party[pokemonIndex].moves[moveIndex - 1];
	LD	BC,(IX+-36)
	LD	(IX+-57),BC
	LD	HL,(IX+-36)
	LD	BC,_party
	ADD	HL,BC
	LEA	IY,IX+-128
	LD	(IY+-31),HL
	LD	IY,(IY+-31)
	LEA	BC,IY+1
	LEA	IY,IX+-128
	LD	(IY+-28),BC
	LD	BC,(IX+-9)
	DEC	BC
	LD	DE,IX
	LD	HL,-156
	ADD	HL,DE
	LD	HL,(HL)
	LD	DE,BC
	ADD	HL,DE
	LD	DE,IX
	LD	IY,-156
	ADD	IY,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-34),HL
	LD	(IY+-40),HL	; unspill
	LD	HL,(IY+-34)
	POP	IY
	LD	HL,(IY)
	LD	DE,(IX+-9)
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-34),HL
	LD	HL,(IY+-40)
	POP	IY
	LD	A,(HL)
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-34)
	POP	IY
	LD	(HL),A
	LD	(IX+-9),BC
;  388				}
L_141:
	LD	BC,(IX+-9)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_139
;  389				party[pokemonIndex].moves[0] = tempMove;
	LD	A,(IX+-63)
	LD	HL,(IX+-57)
;  390				menuState = 0;
	LD	DE,0
	LD	BC,_party
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+1),A
	LD	(IX+-6),DE
;  391			}
L_146:
;  392			if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_147
;  393				page = 0;
	LD	BC,0
	LD	(IX+-24),BC
;  394			}
;  395		}
L_147:
	LD	HL,(IX+-24)
	CALL	__icmpzero
	JR	NZ,L_148
;  396		free(backgroundSprite);
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_free
	POP	BC
;  397	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_PokemonDetails ***************************
;Name                         Addr/Register   Size   Type
;_categoryIcons                      IMPORT      9   variable
;_data_moves                         IMPORT  unknown variable
;_menucursor_data                    IMPORT    262   variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_xpPerLevel                         IMPORT   1212   variable
;_typeIcons                          IMPORT     51   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_stats_CalculateStats               IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_free                               IMPORT  -----   function
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_PKMNSD1                            IMPORT    219   variable
;_PKMNSD0                            IMPORT    240   variable
;_data_pokemon                       IMPORT  unknown variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_party                              IMPORT   1224   variable
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_menu_Setup                         IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;tempMove                             IX-63      3   variable
;G_17                                 IX-60      3   variable
;G_54                                 IX-57      3   variable
;G_44                                 IX-54      3   variable
;G_43                                 IX-51      3   variable
;G_41                                 IX-48      3   variable
;pokemonSprite                        IX-45      3   variable
;G_39                                 IX-42      3   variable
;backgroundSprite                     IX-39      3   variable
;G_53                                 IX-36      3   variable
;G_48                                 IX-33      3   variable
;G_31                                 IX-30      3   variable
;G_47                                 IX-27      3   variable
;page                                 IX-24      3   variable
;G_24                                 IX-21      3   variable
;G_33                                 IX-18      3   variable
;G_52                                 IX-15      3   variable
;G_38                                 IX-12      3   variable
;moveIndex                             IX-9      3   variable
;menuState                             IX-6      3   variable
;G_16                                  IX-3      3   variable
;pokemonIndex                          IX+6      3   parameter


; Stack Frame Size: 177 (bytes)
;       Spill Code: -8 (instruction)


	SEGMENT STRSECT
L__58:
	DB	"%u/%u"
	DB	0
L__59:
	DB	"%u"
	DB	0
L__60:
	DB	"%u"
	DB	0
L__61:
	DB	"%u"
	DB	0
L__62:
	DB	"%u"
	DB	0
L__63:
	DB	"%u"
	DB	0
L__64:
	DB	"%u"
	DB	0
L__66:
	DB	"%i/%i"
	DB	0
L__75:
	DB	"%u"
	DB	0
L__77:
	DB	"-"
	DB	0
L__78:
	DB	"%u"
	DB	0
L__79:
	DB	"%u/%u"
	DB	0
	SEGMENT CODE
;  398	int menu_Items(bool inBattle) {
_menu_Items:
	LD	HL,-588
	CALL	__frameset
;  399		int page, menuState, cursorState, itemIndex, usableItemCount, usableItems[20], usableTMCount, usableTMs[165];
;  400		gfx_sprite_t *backgroundSprite;
;  401	
;  402	
;  403		/* Generate Usable Items List */
;  404		usableItemCount = 0;
	LD	BC,0
	LD	(IX+-15),BC
;  405		usableTMCount = 0;
	LD	(IX+-18),BC
;  406		for (itemIndex = 0; itemIndex < 20; itemIndex++) {
	LD	(IX+-3),BC
	JR	L_156
L_154:
;  407			if (playerItems[itemIndex] > 0) {
	LD	BC,_playerItems
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_155
;  408				usableItems[usableItemCount] = itemIndex;
	LD	HL,(IX+-15)
	LD	BC,(IX+-3)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IX+-87
	ADD	HL,DE
	LD	(HL),BC
;  409				usableItemCount++;
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  410			}
;  411		}
L_155:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_156:
	LD	BC,20
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_154
;  412		for (itemIndex = 0; itemIndex < 165; itemIndex++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_162
L_160:
;  413			if (playerItems[itemIndex + 20] > 0) {
	LD	IY,(IX+-3)
	LEA	IY,IY+20
	LD	(IX+-27),IY
	LD	HL,(IX+-27)
	LD	BC,_playerItems
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_161
;  414				usableTMs[usableTMCount] = itemIndex + 20;
	LD	HL,(IX+-18)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,(IX+-27)
	LD	BC,-585	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-582
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-588	; spill
	CALL	__istix
	POP	HL
	LD	BC,-585	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-585	; spill
	CALL	__istix
	POP	HL
	LD	BC,-588	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-585	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,BC
	LD	(HL),DE
;  415				usableTMCount++;
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  416			}
;  417		}
L_161:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_162:
	LD	BC,165
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_160
;  418		backgroundSprite = gfx_MallocSprite(160, 88);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,88
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  419		zx7_Decompress(backgroundSprite, bag_compressed);
	LD	IY,_PKMNSD5
	LD	(IX+-21),HL
	LD	BC,(IY+96)
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  420	
;  421		menu_Setup();
	CALL	_menu_Setup
;  422	
;  423	
;  424		page = 1;
	LD	BC,1
	LD	(IX+-12),BC
;  425		menuState = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  426		cursorState = 0;
	LD	(IX+-9),BC
;  427		while (page != 0)
	JR	L_232
L_233:
;  428		{
;  429	
;  430			gfx_FillScreen(colors[1]);
	LD	HL,_colors
	INC	HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  431			text_DrawTextBox();
	CALL	_text_DrawTextBox
;  432			gfx_ScaledSprite_NoClip(backgroundSprite, 0, 0, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  433			gfx_TransparentSprite_NoClip(menucursorsmall, 132, 19 + 14 * cursorState);
	LD	B,(IX+-9)
	LD	C,14
	MLT	BC
	LD	A,C
	ADD	A,19
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,132
	PUSH	BC
	LD	BC,_menucursorsmall_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  434			
;  435			Wait(15);
	LD	BC,15
	PUSH	BC
	CALL	_Wait
	POP	BC
;  436	
;  437			kb_Scan();
	CALL	_kb_Scan
;  438			if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_193
;  439				gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  440				gfx_PrintStringXY("Items", 12, 19);
	LD	BC,19
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__108
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  441				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  442				for (itemIndex = menuState; itemIndex < menuState + 10 && itemIndex < usableItemCount; itemIndex++) {
	LD	BC,(IX+-6)
	LD	(IX+-3),BC
	JR	L_169
L_167:
;  443					gfx_PrintStringXY(itemNames[usableItems[itemIndex]], 140, 21 + 14 * (itemIndex - menuState));
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	A,14
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-87
	ADD	HL,BC
	LD	HL,(HL)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_itemNames
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  444					sprintf(str, "%u", playerItems[usableItems[itemIndex]]);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-87
	ADD	HL,BC
	LD	HL,(HL)
	LD	BC,_playerItems
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__109
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  445					gfx_PrintStringXY(str, 274, 21 + 14 * (itemIndex - menuState));
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	A,14
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,274
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  446				}
L_169:
	LD	IY,(IX+-6)
	LEA	BC,IY+10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_170
	LD	BC,(IX+-15)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_167
L_170:
;  447	
;  448				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  449				while (!((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left) || (kb_Data[6] & kb_Clear) || (kb_Data[1] & kb_2nd) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Down))) {
	JR	L_176
L_177:
;  450					kb_Scan();
	CALL	_kb_Scan
;  451				}
L_176:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_201
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_201
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_201
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_201
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_201
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_201
	JR	L_177
;  452			}
;  453			else if (page == 2) {
L_193:
	LD	BC,2
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_201
;  454				gfx_SetTextScale(2, 2);
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  455				gfx_PrintStringXY("TMs", 12, 19);
	LD	BC,19
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__119
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  456				gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  457				for (itemIndex = menuState; itemIndex < menuState + 10 && itemIndex < usableTMCount; itemIndex++) {
	LD	BC,(IX+-6)
	LD	(IX+-3),BC
	JR	L_182
L_180:
;  458					sprintf(str, "TM%u %s", usableTMs[itemIndex] - 19, data_moves[usableTMs[itemIndex] - 19].name);
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-582
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,(HL)
	LEA	DE,IY+-19
	LD	BC,DE
	LD	HL,21
	CALL	__imulu
	LD	BC,_data_moves
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+0
	LD	BC,DE
	PUSH	BC
	LD	BC,L__120
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  459					gfx_PrintStringXY(str, 140, 21 + 14 * (itemIndex - menuState));
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	A,14
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	BC,_str
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  460				}
L_182:
	LD	IY,(IX+-6)
	LEA	BC,IY+10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_183
	LD	BC,(IX+-18)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_180
L_183:
;  461				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  462				while (!((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left) || (kb_Data[6] & kb_Clear) || (kb_Data[1] & kb_2nd) || (kb_Data[7] & kb_Up) || (kb_Data[7] & kb_Down))) {
	JR	L_189
L_190:
;  463					kb_Scan();
	CALL	_kb_Scan
;  464				}
L_189:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_201
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_201
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_201
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_201
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_201
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_190
;  465			}
L_201:
;  466			if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_217
;  467				if (menuState > 0 && cursorState <= 2) {
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_199
	LD	BC,(IX+-9)
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_199
;  468					menuState--;
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  469				}
;  470				else if(menuState + cursorState > 0) {
	JR	L_217
L_199:
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_217
;  471					cursorState--;
	LD	BC,(IX+-9)
	DEC	BC
	LD	(IX+-9),BC
;  472				}
;  473			}
L_217:
;  474			if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_224
;  475				if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_215
;  476					if (menuState + 10 < usableItemCount && cursorState >= 3) {
	LD	IY,(IX+-6)
	LEA	HL,IY+10
	LD	BC,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JP	P,L_207
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_207
;  477						menuState++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  478					}
;  479					else if (menuState + cursorState < usableItemCount - 1) {
	JR	L_224
L_207:
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(IX+-15)
	DEC	BC
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_224
;  480						cursorState++;
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  481					}
;  482				}
;  483				else {
	JR	L_224
L_215:
;  484					if (menuState + 10 < usableTMCount && cursorState >= 7) {
	LD	IY,(IX+-6)
	LEA	HL,IY+10
	LD	BC,(IX+-18)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_213
	LD	BC,7
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_213
;  485						menuState++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  486					}
;  487					else if (menuState + cursorState < usableTMCount - 1) {
	JR	L_224
L_213:
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,(IX+-18)
	DEC	BC
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_224
;  488						cursorState++;
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  489					}
;  490				}
;  491			}
L_224:
;  492			if (((kb_Data[7] & kb_Right) || (kb_Data[7] & kb_Left)) && !inBattle) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_219
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_226
L_219:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_226
;  493				if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_221
;  494					page = 2;
	LD	BC,2
	LD	(IX+-12),BC
;  495				}
;  496				else {
	JR	L_222
L_221:
;  497					page = 1;
	LD	(IX+-12),BC
;  498				}
L_222:
;  499				menuState = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  500				cursorState = 0;
	LD	(IX+-9),BC
;  501			}
L_226:
;  502			if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_231
;  503				page = 0;
	LD	BC,0
	LD	(IX+-12),BC
;  504			}
L_231:
;  505			if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_232
;  506				int itemToUse;
;  507				if (page == 1) {
	LD	BC,1
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_228
;  508					itemToUse = usableItems[menuState + cursorState];
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-87
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-24),BC
;  509				}
;  510				else {
	JR	L_229
L_228:
;  511					itemToUse = usableTMs[menuState + cursorState];
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	DE,HL
	LD	HL,IX
	LD	BC,-582
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	LD	(IX+-24),BC
;  512				}
L_229:
;  513				free(backgroundSprite);
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_free
	POP	BC
;  514				gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  515				return itemToUse;
	LD	HL,(IX+-24)
	JR	L_235
;  516			}
;  517		}
L_232:
	LD	HL,(IX+-12)
	CALL	__icmpzero
	JR	NZ,L_233
;  518		free(backgroundSprite);
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_free
	POP	BC
;  519		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  520		return -1;
	LD	HL,16777215
L_235:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _menu_Items ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetDraw                        IMPORT  -----   function
;_free                               IMPORT  -----   function
;_data_moves                         IMPORT  unknown variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_str                                IMPORT    100   variable
;_sprintf                            IMPORT  -----   function
;_itemNames                          IMPORT    320   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_Wait                               IMPORT  -----   function
;_menucursorsmall_data               IMPORT     72   variable
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_text_DrawTextBox                   IMPORT  -----   function
;_colors                             IMPORT  unknown variable
;_gfx_FillScreen                     IMPORT  -----   function
;_menu_Setup                         IMPORT  -----   function
;_PKMNSD5                            IMPORT    114   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_playerItems                        IMPORT    185   variable
;usableTMs                           IX-582    495   variable
;usableItems                          IX-87     60   variable
;G_55                                 IX-27      3   variable
;itemToUse                            IX-24      3   variable
;backgroundSprite                     IX-21      3   variable
;usableTMCount                        IX-18      3   variable
;usableItemCount                      IX-15      3   variable
;page                                 IX-12      3   variable
;cursorState                           IX-9      3   variable
;menuState                             IX-6      3   variable
;itemIndex                             IX-3      3   variable
;inBattle                              IX+6      1   parameter


; Stack Frame Size: 597 (bytes)
;       Spill Code: -8 (instruction)


	SEGMENT STRSECT
L__108:
	DB	"Items"
	DB	0
L__109:
	DB	"%u"
	DB	0
L__119:
	DB	"TMs"
	DB	0
L__120:
	DB	"TM%u %s"
	DB	0
	XREF _PKMNSD5:ROM
	XREF _PKMNSD1:ROM
	XREF _PKMNSD0:ROM
	XREF _itemNames:ROM
	XREF _items_UseItem:ROM
	XREF _stats_CalculateStats:ROM
	XREF _save_Save:ROM
	XREF _playerItems:ROM
	XREF _party:ROM
	XREF _textBoxSprite2:ROM
	XREF _textBoxSprite1:ROM
	XREF _text_DrawTextBox:ROM
	XREF _categoryIcons:ROM
	XREF _statusIcons:ROM
	XREF _colors:ROM
	XREF _str:ROM
	XREF _FreeIcons:ROM
	XREF _MallocIcons:ROM
	XREF _SetColors:ROM
	XREF _Wait:ROM
	XREF _typeIcons:ROM
	XREF _xpPerLevel:ROM
	XREF _data_moves:ROM
	XREF _data_pokemon:ROM
	XREF _menucursorsmall_data:ROM
	XREF _menucursor_data:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _kb_Scan:ROM
	XREF _sprintf:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF __idivs:ROM
	XREF __imulu:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _menu_Items
	XDEF _menu_PokemonDetails
	XDEF _menu_PokemonMenu
	XDEF _menu_Menu
	XDEF _menu_Setup
	XDEF _menuCurrent
	XDEF _menuState2
	XDEF _menuState1
	XDEF _tempcharacter
	XDEF _pokemonToSwitch
	XDEF _switchMode
	END
