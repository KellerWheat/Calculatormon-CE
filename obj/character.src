; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\CHARACTER.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <math.h>
;    2	
;    3	#include "character.h"
;    4	#include "misc.h"
;    5	
;    6	unsigned long isqrt(unsigned long x);
;    7	
;    8	struct pokemonStats calculatestats(struct pokemonData c) {
_calculatestats:
	LD	HL,-57
	CALL	__frameset
;    9		struct pokemonStats newstats;
;   10		newstats.health = ((((data_pokemon[c.id].basehealth + c.healthIV) * 2 + (isqrt(c.healthEV) / 4))*c.level) / 100) + c.level + 10;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+26)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-16),A
	LD	(IX+-15),BC
	LD	BC,(IX+32)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-15)
	LD	E,(IX+-16)
	CALL	__ladd
	LD	(IX+-26),HL
	UEXT	HL
	LD	L,(IX+14)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-26)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-23),HL
	UEXT	HL
	LD	L,(IX+14)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-23)
	CALL	__ladd
	LD	A,10
	CALL	__ladd_b
	LD	(IX+-12),L
	LD	(IX+-11),H
;   11		newstats.attack = ((((data_pokemon[c.id].baseattack + c.attackIV) * 2 + (isqrt(c.attackEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+19)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+27)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-20),A
	LD	(IX+-19),BC
	LD	BC,(IX+34)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-19)
	LD	E,(IX+-20)
	CALL	__ladd
	LD	(IX+-33),HL
	UEXT	HL
	LD	L,(IX+14)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-33)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-10),L
	LD	(IX+-9),H
;   12		newstats.defence = ((((data_pokemon[c.id].basedefence + c.defenceIV) * 2 + (isqrt(c.defenceEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+20)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+28)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-30),A
	LD	(IX+-29),BC
	LD	BC,(IX+36)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-29)
	LD	E,(IX+-30)
	CALL	__ladd
	LD	(IX+-40),HL
	UEXT	HL
	LD	L,(IX+14)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-40)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-8),L
	LD	(IX+-7),H
;   13		newstats.specialattack = ((((data_pokemon[c.id].basespecialattack + c.specialattackIV) * 2 + (isqrt(c.specialattackEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+21)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+29)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-37),A
	LD	(IX+-36),BC
	LD	BC,(IX+38)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-36)
	LD	E,(IX+-37)
	CALL	__ladd
	LD	(IX+-47),HL
	UEXT	HL
	LD	L,(IX+14)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-47)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-6),L
	LD	(IX+-5),H
;   14		newstats.specialdefence = ((((data_pokemon[c.id].basespecialdefence + c.specialdefenceIV) * 2 + (isqrt(c.specialdefenceEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+22)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+30)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-44),A
	LD	(IX+-43),BC
	LD	BC,(IX+40)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	LD	BC,HL
	LD	L,2
	POP	IY
	POP	IY
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-43)
	LD	E,(IX+-44)
	CALL	__ladd
	LD	(IX+-54),HL
	UEXT	HL
	LD	L,(IX+14)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-54)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-4),L
	LD	(IX+-3),H
;   15		newstats.speed = ((((data_pokemon[c.id].basespeed + c.speedIV) * 2 + (isqrt(c.speedEV) / 4))*c.level) / 100) + 5;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+23)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+31)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-51),A
	LD	(IX+-50),BC
	LD	BC,(IX+42)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	POP	BC
	POP	BC
	LD	BC,HL
	LD	L,2
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-50)
	LD	E,(IX+-51)
	CALL	__ladd
	LD	(IX+-57),HL
	UEXT	HL
	LD	L,(IX+14)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-57)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	A,5
	CALL	__ladd_b
	LD	(IX+-2),L
	LD	(IX+-1),H
;   16		return newstats;
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IX+-12
	LD	BC,12
	LDIR	
	LD	HL,(IX+6)	; spill
;   17	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _calculatestats ***************************
;Name                         Addr/Register   Size   Type
;_isqrt                              IMPORT  -----   function
;_data_pokemon                       IMPORT  unknown variable
;newstats                             IX-12     12   variable
;c                                     IX+9     35   parameter


; Stack Frame Size: 102 (bytes)
;       Spill Code: 0 (instruction)


;   18	/* used i1 and i2 */
;   19	struct pokemonData newcharacter(uint8_t id, uint8_t level) {
_newcharacter:
	LD	HL,-92
	CALL	__frameset
;   20		uint8_t parent1id = data_pokemon[id].evolvesfrom;
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+46)
	LD	(IX+-63),A
;   21		uint8_t parent2id = data_pokemon[parent1id].evolvesfrom;
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+46)
	LD	(IX+-64),A
;   22		struct pokemonData newch;
;   23		newch.id = id;
	LD	A,(IX+9)
	LD	(IX+-35),A
;   24		newch.level = level;
	LD	A,(IX+12)
	LD	(IX+-30),A
;   25		newch.xp = xpPerLevel[data_pokemon[newch.id].xptype][newch.level];
	LD	A,(IX+-35)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+49)
	UEXT	HL
	LD	L,A
	LD	BC,404
	CALL	__imulu
	LD	BC,_xpPerLevel
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-30)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(HL)
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	LD	(IX+-29),BC
	LD	(IX+-26),A
;   26	
;   27		newch.move1 = 0;
	LD	(IX+-34),0
;   28		newch.move2 = 0;
	LD	(IX+-33),0
;   29		newch.move3 = 0;
	LD	(IX+-32),0
;   30		newch.move4 = 0;
	LD	(IX+-31),0
;   31		i2 = 0;
	LD	HL,_i2
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   32		for (i1 = 0; i1 < 10; i1++) {
	LD	HL,_i1
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_16
L_14:
;   33			if (data_pokemon[parent2id].movelevels[i1] <= newch.level && data_pokemon[parent2id].moveids[i1] != 0) {
	LD	A,(IX+-64)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-70),HL
	LD	BC,(_i1)
	CALL	__stoiu
	LD	BC,HL
	LD	IY,(IX+-70)
	LEA	HL,IY+24
	ADD	HL,BC
	LD	A,(IX+-30)
	CP	A,(HL)
	JR	C,L_15
	LD	BC,(_i1)
	CALL	__stoiu
	LD	BC,HL
	LD	IY,(IX+-70)
	LEA	HL,IY+34
	ADD	HL,BC
	LD	(IX+-44),HL
	LD	(IX+-76),HL
	LD	(IX+-50),HL
	LD	(IX+-59),HL
	LD	HL,(IX+-44)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_15
;   34				if (i2 == 0) {
	LD	HL,(_i2)
	CALL	__scmpzero
	JR	NZ,L_5
;   35					newch.move1 = data_pokemon[parent2id].moveids[i1];
	LD	BC,(IX+-44)
	LD	(IX+-76),BC
	LD	BC,(IX+-44)
	LD	(IX+-50),BC
	LD	BC,(IX+-44)
	LD	(IX+-59),BC
	LD	HL,(IX+-44)
	LD	A,(HL)
	LD	(IX+-34),A
;   36				}
L_5:
;   37				if (i2 == 1) {
	LD.LIS	BC,1
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_7
;   38					newch.move2 = data_pokemon[parent2id].moveids[i1];
	LD	BC,(IX+-76)
	LD	(IX+-50),BC
	LD	(IX+-59),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-33),A
;   39				}
L_7:
;   40				if (i2 == 2) {
	LD.LIS	BC,2
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_9
;   41					newch.move3 = data_pokemon[parent2id].moveids[i1];
	LD	BC,(IX+-50)
	LD	(IX+-59),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-32),A
;   42				}
L_9:
;   43				if (i2 == 3) {
	LD.LIS	BC,3
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_11
;   44					newch.move4 = data_pokemon[parent2id].moveids[i1];
	LD	HL,(IX+-59)
	LD	A,(HL)
	LD	(IX+-31),A
;   45				}
L_11:
;   46				i2++;
	LD	BC,(_i2)
	INC	BC
	LD	HL,_i2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   47				if (i2 == 4) {
	LD	HL,(_i2)
	OR	A,A
	LD.LIS	BC,4
	SBC.SIS	HL,BC
	JR	NZ,L_15
;   48					i2 = 0;
	LD	HL,_i2
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   49				}
;   50			}
;   51		}
L_15:
	LD	BC,(_i1)
	INC	BC
	LD	HL,_i1
	LD	(HL),C
	INC	HL
	LD	(HL),B
L_16:
	LD.LIS	BC,10
	LD	HL,(_i1)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_14
;   52		for (i1 = 0; i1 < 10; i1++) {
	LD	HL,_i1
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_32
L_30:
;   53			if (data_pokemon[parent1id].movelevels[i1] <= newch.level && data_pokemon[parent1id].moveids[i1] != 0) {
	LD	A,(IX+-63)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-67),HL
	LD	BC,(_i1)
	CALL	__stoiu
	LD	BC,HL
	LD	IY,(IX+-67)
	LEA	HL,IY+24
	ADD	HL,BC
	LD	A,(IX+-30)
	CP	A,(HL)
	JR	C,L_31
	LD	BC,(_i1)
	CALL	__stoiu
	LD	BC,HL
	LD	IY,(IX+-67)
	LEA	HL,IY+34
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	(IX+-79),HL
	LD	(IX+-47),HL
	LD	(IX+-62),HL
	LD	HL,(IX+-38)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_31
;   54				if (i2 == 0) {
	LD	HL,(_i2)
	CALL	__scmpzero
	JR	NZ,L_21
;   55					newch.move1 = data_pokemon[parent1id].moveids[i1];
	LD	BC,(IX+-38)
	LD	(IX+-79),BC
	LD	BC,(IX+-38)
	LD	(IX+-47),BC
	LD	BC,(IX+-38)
	LD	(IX+-62),BC
	LD	HL,(IX+-38)
	LD	A,(HL)
	LD	(IX+-34),A
;   56				}
L_21:
;   57				if (i2 == 1) {
	LD.LIS	BC,1
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_23
;   58					newch.move2 = data_pokemon[parent1id].moveids[i1];
	LD	BC,(IX+-79)
	LD	(IX+-47),BC
	LD	(IX+-62),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-33),A
;   59				}
L_23:
;   60				if (i2 == 2) {
	LD.LIS	BC,2
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_25
;   61					newch.move3 = data_pokemon[parent1id].moveids[i1];
	LD	BC,(IX+-47)
	LD	(IX+-62),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-32),A
;   62				}
L_25:
;   63				if (i2 == 3) {
	LD.LIS	BC,3
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_27
;   64					newch.move4 = data_pokemon[parent1id].moveids[i1];
	LD	HL,(IX+-62)
	LD	A,(HL)
	LD	(IX+-31),A
;   65				}
L_27:
;   66				i2++;
	LD	BC,(_i2)
	INC	BC
	LD	HL,_i2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   67				if (i2 == 4) {
	LD	HL,(_i2)
	OR	A,A
	LD.LIS	BC,4
	SBC.SIS	HL,BC
	JR	NZ,L_31
;   68					i2 = 0;
	LD	HL,_i2
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   69				}
;   70			}
;   71		}
L_31:
	LD	BC,(_i1)
	INC	BC
	LD	HL,_i1
	LD	(HL),C
	INC	HL
	LD	(HL),B
L_32:
	LD.LIS	BC,10
	LD	HL,(_i1)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_30
;   72		for (i1 = 0; i1 < 10; i1++) {
	LD	HL,_i1
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_49
L_47:
;   73			if (data_pokemon[id].movelevels[i1] <= newch.level && data_pokemon[id].moveids[i1] != 0) {
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	(IX+-82),HL
	LD	BC,(_i1)
	CALL	__stoiu
	LD	BC,HL
	LD	IY,(IX+-82)
	LEA	HL,IY+24
	ADD	HL,BC
	LD	A,(IX+-30)
	CP	A,(HL)
	JR	C,L_48
	LD	BC,(_i1)
	CALL	__stoiu
	LD	BC,HL
	LD	IY,(IX+-82)
	LEA	HL,IY+34
	ADD	HL,BC
	LD	(IX+-41),HL
	LD	(IX+-73),HL
	LD	(IX+-56),HL
	LD	(IX+-53),HL
	LD	HL,(IX+-41)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_48
;   74				if (i2 == 0) {
	LD	HL,(_i2)
	CALL	__scmpzero
	JR	NZ,L_38
;   75					newch.move1 = data_pokemon[id].moveids[i1];
	LD	BC,(IX+-41)
	LD	(IX+-73),BC
	LD	BC,(IX+-41)
	LD	(IX+-56),BC
	LD	BC,(IX+-41)
	LD	(IX+-53),BC
	LD	HL,(IX+-41)
	LD	A,(HL)
	LD	(IX+-34),A
;   76				}
L_38:
;   77				if (i2 == 1) {
	LD.LIS	BC,1
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_40
;   78					newch.move2 = data_pokemon[id].moveids[i1];
	LD	BC,(IX+-73)
	LD	(IX+-56),BC
	LD	(IX+-53),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-33),A
;   79				}
L_40:
;   80				if (i2 == 2) {
	LD.LIS	BC,2
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_42
;   81					newch.move3 = data_pokemon[id].moveids[i1];
	LD	BC,(IX+-56)
	LD	(IX+-53),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-32),A
;   82				}
L_42:
;   83				if (i2 == 3) {
	LD.LIS	BC,3
	LD	HL,(_i2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_44
;   84					newch.move4 = data_pokemon[id].moveids[i1];
	LD	HL,(IX+-53)
	LD	A,(HL)
	LD	(IX+-31),A
;   85				}
L_44:
;   86				i2++;
	LD	BC,(_i2)
	INC	BC
	LD	HL,_i2
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   87				if (i2 == 4) {
	LD	HL,(_i2)
	OR	A,A
	LD.LIS	BC,4
	SBC.SIS	HL,BC
	JR	NZ,L_48
;   88					i2 = 0;
	LD	HL,_i2
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   89				}
;   90			}
;   91		}
L_48:
	LD	BC,(_i1)
	INC	BC
	LD	HL,_i1
	LD	(HL),C
	INC	HL
	LD	(HL),B
L_49:
	LD.LIS	BC,10
	LD	HL,(_i1)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_47
;   92	
;   93		for (i1 = 0; i1 < 5; i1++) {
	LD	HL,_i1
	LD	(HL),0
	INC	HL
	LD	(HL),0
	JR	L_54
L_52:
;   94			newch.currentstatus[i1] = 0;
	LD	BC,(_i1)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(_i1)
	INC	BC
	LD	HL,_i1
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   95		}
L_54:
	LD.LIS	BC,5
	LD	HL,(_i1)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_52
;   96	
;   97		newch.healthIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-18),L
;   98		newch.attackIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-17),L
;   99		newch.defenceIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-16),L
;  100		newch.specialattackIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-15),L
;  101		newch.specialdefenceIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-14),L
;  102		newch.speedIV = (rand() % 16);
	CALL	_rand
	LD	BC,16
	CALL	__irems
	LD	(IX+-13),L
;  103		newch.healthEV = 0;
	LD	(IX+-12),0
	LD	(IX+-11),0
;  104		newch.attackEV = 0;
	LD	(IX+-10),0
	LD	(IX+-9),0
;  105		newch.defenceEV = 0;
	LD	(IX+-8),0
	LD	(IX+-7),0
;  106		newch.specialattackEV = 0;
	LD	(IX+-6),0
	LD	(IX+-5),0
;  107		newch.specialdefenceEV = 0;
	LD	(IX+-4),0
	LD	(IX+-3),0
;  108		newch.speedEV = 0;
	LD	(IX+-2),0
	LD	(IX+-1),0
;  109	
;  110		newch.currenthealth = ((((data_pokemon[newch.id].basehealth + newch.healthIV) * 2 + (isqrt(newch.healthEV) / 4))*newch.level) / 100) + newch.level + 10;
	LD	A,(IX+-35)
	UEXT	HL
	LD	L,A
	LD	A,51
	CALL	__imul_b
	LD	BC,_data_pokemon
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+18)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+-18)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-86),A
	LD	(IX+-85),BC
	LD	BC,(IX+-12)
	CALL	__stoiu
	LD	C,0
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_isqrt
	POP	BC
	POP	BC
	LD	BC,HL
	LD	L,2
	LD	A,E
	CALL	__lshru
	LD	HL,(IX+-85)
	LD	E,(IX+-86)
	CALL	__ladd
	LD	(IX+-92),HL
	UEXT	HL
	LD	L,(IX+-30)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-92)
	CALL	__lmulu
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	(IX+-89),HL
	UEXT	HL
	LD	L,(IX+-30)
	LD	BC,HL
	LD	A,H
	LD	HL,(IX+-89)
	CALL	__ladd
	LD	A,10
	CALL	__ladd_b
	LD	(IX+-25),L
	LD	(IX+-24),H
;  111	
;  112		return newch;
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IX+-35
	LD	BC,35
	LDIR	
	LD	HL,(IX+6)	; spill
;  113	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _newcharacter ***************************
;Name                         Addr/Register   Size   Type
;_isqrt                              IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_i1                                 IMPORT      2   variable
;_i2                                 IMPORT      2   variable
;_xpPerLevel                         IMPORT   1616   variable
;_data_pokemon                       IMPORT  unknown variable
;G_10                                 IX-82      3   variable
;G_7                                  IX-79      3   variable
;G_2                                  IX-76      3   variable
;G_12                                 IX-73      3   variable
;G_0                                  IX-70      3   variable
;G_5                                  IX-67      3   variable
;parent2id                            IX-64      1   variable
;parent1id                            IX-63      1   variable
;G_9                                  IX-62      3   variable
;G_4                                  IX-59      3   variable
;G_13                                 IX-56      3   variable
;G_14                                 IX-53      3   variable
;G_3                                  IX-50      3   variable
;G_8                                  IX-47      3   variable
;G_1                                  IX-44      3   variable
;G_11                                 IX-41      3   variable
;G_6                                  IX-38      3   variable
;newch                                IX-35     35   variable
;level                                IX+12      1   parameter
;id                                    IX+9      1   parameter


; Stack Frame Size: 107 (bytes)
;       Spill Code: 0 (instruction)


;  114	
;  115	/* NOTE: I have no idea how this works */
;  116	unsigned long isqrt(unsigned long x)
;  117	{
_isqrt:
	LD	HL,-16
	CALL	__frameset
;  118		
;  119		register unsigned long op, res, one;
;  120	
;  121		op = x;
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(IX+-12),BC
	LD	(IX+-9),A
;  122		res = 0;
	LD	BC,0
	LD	(IX+-8),BC
	XOR	A,A
	LD	(IX+-5),A
;  123	
;  124		/* "one" starts at the highest power of four <= than the argument. */
;  125		one = 1 << 30;  /* second-to-top bit set */
	LD	(IX+-4),BC
	XOR	A,A
	LD	(IX+-1),A
;  126		while (one > op) one >>= 2;
	JR	L_58
L_59:
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	L,2
	CALL	__lshru
	LD	(IX+-4),BC
	LD	(IX+-1),A
L_58:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__lcmpu
	JR	C,L_59
;  127	
;  128		while (one != 0) {
	JR	L_62
L_63:
;  129			if (op >= res + one) {
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__ladd
	LD	(IX+-16),HL
	LD	(IX+-13),E
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	CALL	__lcmpu
	JR	C,L_61
;  130				op -= res + one;
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	CALL	__lsub
	LD	(IX+-12),HL
	LD	(IX+-9),E
;  131				res += one << 1;  // <-- faster than 2 * one  
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	L,1
	CALL	__lshl
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__ladd
	LD	(IX+-8),HL
	LD	(IX+-5),E
;  132			}
L_61:
;  133			res >>= 1;
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	LD	L,1
	CALL	__lshru
	LD	(IX+-8),BC
	LD	(IX+-5),A
;  134			one >>= 2;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	L,2
	CALL	__lshru
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  135		}
L_62:
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__lcmpzero
	JR	NZ,L_63
;  136		return res;
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isqrt ***************************
;Name                         Addr/Register   Size   Type
;G_15                                 IX-16      4   variable
;op                                   IX-12      4   variable
;res                                   IX-8      4   variable
;one                                   IX-4      4   variable
;x                                     IX+6      4   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: 0 (instruction)


	XREF _i2:ROM
	XREF _i1:ROM
	XREF _xpPerLevel:ROM
	XREF _data_pokemon:ROM
	XREF _rand:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __lsub:ROM
	XREF __imulu:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __lshl:ROM
	XREF __irems:ROM
	XREF __lshru:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __frameset:ROM
	XREF __scmpzero:ROM
	XREF __lcmpzero:ROM
	XREF __imul_b:ROM
	XREF __ladd_b:ROM
	XDEF _isqrt
	XDEF _newcharacter
	XDEF _calculatestats
	END
